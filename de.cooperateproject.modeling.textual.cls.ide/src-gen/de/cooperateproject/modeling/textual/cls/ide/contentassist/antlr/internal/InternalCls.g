/*
 * generated by Xtext 2.9.0
 */
grammar InternalCls;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package de.cooperateproject.modeling.textual.cls.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package de.cooperateproject.modeling.textual.cls.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import de.cooperateproject.modeling.textual.cls.services.ClsGrammarAccess;

}
@parser::members {
	private ClsGrammarAccess grammarAccess;

	public void setGrammarAccess(ClsGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleClassDiagram
entryRuleClassDiagram
:
{ before(grammarAccess.getClassDiagramRule()); }
	 ruleClassDiagram
{ after(grammarAccess.getClassDiagramRule()); } 
	 EOF 
;

// Rule ClassDiagram
ruleClassDiagram 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getClassDiagramAccess().getGroup()); }
		(rule__ClassDiagram__Group__0)
		{ after(grammarAccess.getClassDiagramAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleElement
entryRuleElement
:
{ before(grammarAccess.getElementRule()); }
	 ruleElement
{ after(grammarAccess.getElementRule()); } 
	 EOF 
;

// Rule Element
ruleElement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getElementAccess().getAlternatives()); }
		(rule__Element__Alternatives)
		{ after(grammarAccess.getElementAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleType
entryRuleType
:
{ before(grammarAccess.getTypeRule()); }
	 ruleType
{ after(grammarAccess.getTypeRule()); } 
	 EOF 
;

// Rule Type
ruleType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTypeAccess().getAlternatives()); }
		(rule__Type__Alternatives)
		{ after(grammarAccess.getTypeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleClassDef
entryRuleClassDef
:
{ before(grammarAccess.getClassDefRule()); }
	 ruleClassDef
{ after(grammarAccess.getClassDefRule()); } 
	 EOF 
;

// Rule ClassDef
ruleClassDef 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getClassDefAccess().getGroup()); }
		(rule__ClassDef__Group__0)
		{ after(grammarAccess.getClassDefAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleClassName
entryRuleClassName
:
{ before(grammarAccess.getClassNameRule()); }
	 ruleClassName
{ after(grammarAccess.getClassNameRule()); } 
	 EOF 
;

// Rule ClassName
ruleClassName 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getClassNameAccess().getNameParserRuleCall()); }
		ruleName
		{ after(grammarAccess.getClassNameAccess().getNameParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleName
entryRuleName
:
{ before(grammarAccess.getNameRule()); }
	 ruleName
{ after(grammarAccess.getNameRule()); } 
	 EOF 
;

// Rule Name
ruleName 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNameAccess().getAlternatives()); }
		(rule__Name__Alternatives)
		{ after(grammarAccess.getNameAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleClass
entryRuleClass
:
{ before(grammarAccess.getClassRule()); }
	 ruleClass
{ after(grammarAccess.getClassRule()); } 
	 EOF 
;

// Rule Class
ruleClass 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getClassAccess().getGroup()); }
		(rule__Class__Group__0)
		{ after(grammarAccess.getClassAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMember
entryRuleMember
:
{ before(grammarAccess.getMemberRule()); }
	 ruleMember
{ after(grammarAccess.getMemberRule()); } 
	 EOF 
;

// Rule Member
ruleMember 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMemberAccess().getAlternatives()); }
		(rule__Member__Alternatives)
		{ after(grammarAccess.getMemberAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAttribute
entryRuleAttribute
:
{ before(grammarAccess.getAttributeRule()); }
	 ruleAttribute
{ after(grammarAccess.getAttributeRule()); } 
	 EOF 
;

// Rule Attribute
ruleAttribute 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAttributeAccess().getGroup()); }
		(rule__Attribute__Group__0)
		{ after(grammarAccess.getAttributeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMethode
entryRuleMethode
:
{ before(grammarAccess.getMethodeRule()); }
	 ruleMethode
{ after(grammarAccess.getMethodeRule()); } 
	 EOF 
;

// Rule Methode
ruleMethode 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMethodeAccess().getGroup()); }
		(rule__Methode__Group__0)
		{ after(grammarAccess.getMethodeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConnector
entryRuleConnector
:
{ before(grammarAccess.getConnectorRule()); }
	 ruleConnector
{ after(grammarAccess.getConnectorRule()); } 
	 EOF 
;

// Rule Connector
ruleConnector 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConnectorAccess().getAlternatives()); }
		(rule__Connector__Alternatives)
		{ after(grammarAccess.getConnectorAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleGeneralization
entryRuleGeneralization
:
{ before(grammarAccess.getGeneralizationRule()); }
	 ruleGeneralization
{ after(grammarAccess.getGeneralizationRule()); } 
	 EOF 
;

// Rule Generalization
ruleGeneralization 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getGeneralizationAccess().getGroup()); }
		(rule__Generalization__Group__0)
		{ after(grammarAccess.getGeneralizationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleImplementation
entryRuleImplementation
:
{ before(grammarAccess.getImplementationRule()); }
	 ruleImplementation
{ after(grammarAccess.getImplementationRule()); } 
	 EOF 
;

// Rule Implementation
ruleImplementation 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getImplementationAccess().getGroup()); }
		(rule__Implementation__Group__0)
		{ after(grammarAccess.getImplementationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAssociation
entryRuleAssociation
:
{ before(grammarAccess.getAssociationRule()); }
	 ruleAssociation
{ after(grammarAccess.getAssociationRule()); } 
	 EOF 
;

// Rule Association
ruleAssociation 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAssociationAccess().getGroup()); }
		(rule__Association__Group__0)
		{ after(grammarAccess.getAssociationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAssociationEnd
entryRuleAssociationEnd
:
{ before(grammarAccess.getAssociationEndRule()); }
	 ruleAssociationEnd
{ after(grammarAccess.getAssociationEndRule()); } 
	 EOF 
;

// Rule AssociationEnd
ruleAssociationEnd 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAssociationEndAccess().getTypeAssignment()); }
		(rule__AssociationEnd__TypeAssignment)
		{ after(grammarAccess.getAssociationEndAccess().getTypeAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConnectorLabel
entryRuleConnectorLabel
:
{ before(grammarAccess.getConnectorLabelRule()); }
	 ruleConnectorLabel
{ after(grammarAccess.getConnectorLabelRule()); } 
	 EOF 
;

// Rule ConnectorLabel
ruleConnectorLabel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConnectorLabelAccess().getNameAssignment()); }
		(rule__ConnectorLabel__NameAssignment)
		{ after(grammarAccess.getConnectorLabelAccess().getNameAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConnectorCardinalitiy
entryRuleConnectorCardinalitiy
:
{ before(grammarAccess.getConnectorCardinalitiyRule()); }
	 ruleConnectorCardinalitiy
{ after(grammarAccess.getConnectorCardinalitiyRule()); } 
	 EOF 
;

// Rule ConnectorCardinalitiy
ruleConnectorCardinalitiy 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConnectorCardinalitiyAccess().getGroup()); }
		(rule__ConnectorCardinalitiy__Group__0)
		{ after(grammarAccess.getConnectorCardinalitiyAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCardinality
entryRuleCardinality
:
{ before(grammarAccess.getCardinalityRule()); }
	 ruleCardinality
{ after(grammarAccess.getCardinalityRule()); } 
	 EOF 
;

// Rule Cardinality
ruleCardinality 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCardinalityAccess().getAlternatives()); }
		(rule__Cardinality__Alternatives)
		{ after(grammarAccess.getCardinalityAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNote
entryRuleNote
:
{ before(grammarAccess.getNoteRule()); }
	 ruleNote
{ after(grammarAccess.getNoteRule()); } 
	 EOF 
;

// Rule Note
ruleNote 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNoteAccess().getGroup()); }
		(rule__Note__Group__0)
		{ after(grammarAccess.getNoteAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule Visibility
ruleVisibility
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVisibilityAccess().getAlternatives()); }
		(rule__Visibility__Alternatives)
		{ after(grammarAccess.getVisibilityAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule DataType
ruleDataType
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDataTypeAccess().getAlternatives()); }
		(rule__DataType__Alternatives)
		{ after(grammarAccess.getDataTypeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Element__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getElementAccess().getClassDefParserRuleCall_0()); }
		ruleClassDef
		{ after(grammarAccess.getElementAccess().getClassDefParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getElementAccess().getClassParserRuleCall_1()); }
		ruleClass
		{ after(grammarAccess.getElementAccess().getClassParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getElementAccess().getConnectorParserRuleCall_2()); }
		ruleConnector
		{ after(grammarAccess.getElementAccess().getConnectorParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTypeAccess().getTypeAssignment_0()); }
		(rule__Type__TypeAssignment_0)
		{ after(grammarAccess.getTypeAccess().getTypeAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getTypeAccess().getClassNameParserRuleCall_1()); }
		ruleClassName
		{ after(grammarAccess.getTypeAccess().getClassNameParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassDef__Alternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClassDefAccess().getClassKeyword_0_0()); }
		'class'
		{ after(grammarAccess.getClassDefAccess().getClassKeyword_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getClassDefAccess().getInterfaceKeyword_0_1()); }
		'interface'
		{ after(grammarAccess.getClassDefAccess().getInterfaceKeyword_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Name__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNameAccess().getNameAssignment_0()); }
		(rule__Name__NameAssignment_0)
		{ after(grammarAccess.getNameAccess().getNameAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getNameAccess().getGroup_1()); }
		(rule__Name__Group_1__0)
		{ after(grammarAccess.getNameAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Name__LongnameAlternatives_1_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNameAccess().getLongnameSTRINGTerminalRuleCall_1_0_0_0()); }
		RULE_STRING
		{ after(grammarAccess.getNameAccess().getLongnameSTRINGTerminalRuleCall_1_0_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getNameAccess().getLongnameIDTerminalRuleCall_1_0_0_1()); }
		RULE_ID
		{ after(grammarAccess.getNameAccess().getLongnameIDTerminalRuleCall_1_0_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Member__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMemberAccess().getAttributeParserRuleCall_0()); }
		ruleAttribute
		{ after(grammarAccess.getMemberAccess().getAttributeParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getMemberAccess().getMethodeParserRuleCall_1()); }
		ruleMethode
		{ after(grammarAccess.getMemberAccess().getMethodeParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Connector__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConnectorAccess().getGeneralizationParserRuleCall_0()); }
		ruleGeneralization
		{ after(grammarAccess.getConnectorAccess().getGeneralizationParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getConnectorAccess().getAssociationParserRuleCall_1()); }
		ruleAssociation
		{ after(grammarAccess.getConnectorAccess().getAssociationParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getConnectorAccess().getImplementationParserRuleCall_2()); }
		ruleImplementation
		{ after(grammarAccess.getConnectorAccess().getImplementationParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Association__Alternatives_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAssociationAccess().getGroup_2_0()); }
		(rule__Association__Group_2_0__0)
		{ after(grammarAccess.getAssociationAccess().getGroup_2_0()); }
	)
	|
	(
		{ before(grammarAccess.getAssociationAccess().getNoteAssignment_2_1()); }
		(rule__Association__NoteAssignment_2_1)
		{ after(grammarAccess.getAssociationAccess().getNoteAssignment_2_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConnectorCardinalitiy__Alternatives_4_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConnectorCardinalitiyAccess().getLessThanSignKeyword_4_2_0()); }
		'<'
		{ after(grammarAccess.getConnectorCardinalitiyAccess().getLessThanSignKeyword_4_2_0()); }
	)
	|
	(
		{ before(grammarAccess.getConnectorCardinalitiyAccess().getGreaterThanSignKeyword_4_2_1()); }
		'>'
		{ after(grammarAccess.getConnectorCardinalitiyAccess().getGreaterThanSignKeyword_4_2_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Cardinality__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCardinalityAccess().getAsteriskKeyword_0()); }
		'*'
		{ after(grammarAccess.getCardinalityAccess().getAsteriskKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getCardinalityAccess().getGroup_1()); }
		(rule__Cardinality__Group_1__0)
		{ after(grammarAccess.getCardinalityAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Cardinality__Alternatives_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCardinalityAccess().getAsteriskKeyword_1_2_0()); }
		'*'
		{ after(grammarAccess.getCardinalityAccess().getAsteriskKeyword_1_2_0()); }
	)
	|
	(
		{ before(grammarAccess.getCardinalityAccess().getINTTerminalRuleCall_1_2_1()); }
		RULE_INT
		{ after(grammarAccess.getCardinalityAccess().getINTTerminalRuleCall_1_2_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Visibility__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVisibilityAccess().getDEFAULTEnumLiteralDeclaration_0()); }
		('~')
		{ after(grammarAccess.getVisibilityAccess().getDEFAULTEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getVisibilityAccess().getPRIVATEEnumLiteralDeclaration_1()); }
		('-')
		{ after(grammarAccess.getVisibilityAccess().getPRIVATEEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getVisibilityAccess().getPROTECTEDEnumLiteralDeclaration_2()); }
		('#')
		{ after(grammarAccess.getVisibilityAccess().getPROTECTEDEnumLiteralDeclaration_2()); }
	)
	|
	(
		{ before(grammarAccess.getVisibilityAccess().getPUBLICEnumLiteralDeclaration_3()); }
		('+')
		{ after(grammarAccess.getVisibilityAccess().getPUBLICEnumLiteralDeclaration_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DataType__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDataTypeAccess().getSTRINGEnumLiteralDeclaration_0()); }
		('string')
		{ after(grammarAccess.getDataTypeAccess().getSTRINGEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getDataTypeAccess().getINTEnumLiteralDeclaration_1()); }
		('int')
		{ after(grammarAccess.getDataTypeAccess().getINTEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getDataTypeAccess().getDOUBLEEnumLiteralDeclaration_2()); }
		('double')
		{ after(grammarAccess.getDataTypeAccess().getDOUBLEEnumLiteralDeclaration_2()); }
	)
	|
	(
		{ before(grammarAccess.getDataTypeAccess().getBOOLEANEnumLiteralDeclaration_3()); }
		('boolean')
		{ after(grammarAccess.getDataTypeAccess().getBOOLEANEnumLiteralDeclaration_3()); }
	)
	|
	(
		{ before(grammarAccess.getDataTypeAccess().getCHAREnumLiteralDeclaration_4()); }
		('char')
		{ after(grammarAccess.getDataTypeAccess().getCHAREnumLiteralDeclaration_4()); }
	)
	|
	(
		{ before(grammarAccess.getDataTypeAccess().getBYTEEnumLiteralDeclaration_5()); }
		('byte')
		{ after(grammarAccess.getDataTypeAccess().getBYTEEnumLiteralDeclaration_5()); }
	)
	|
	(
		{ before(grammarAccess.getDataTypeAccess().getSHORTEnumLiteralDeclaration_6()); }
		('short')
		{ after(grammarAccess.getDataTypeAccess().getSHORTEnumLiteralDeclaration_6()); }
	)
	|
	(
		{ before(grammarAccess.getDataTypeAccess().getLONGEnumLiteralDeclaration_7()); }
		('long')
		{ after(grammarAccess.getDataTypeAccess().getLONGEnumLiteralDeclaration_7()); }
	)
	|
	(
		{ before(grammarAccess.getDataTypeAccess().getFLOATEnumLiteralDeclaration_8()); }
		('float')
		{ after(grammarAccess.getDataTypeAccess().getFLOATEnumLiteralDeclaration_8()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassDiagram__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ClassDiagram__Group__0__Impl
	rule__ClassDiagram__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassDiagram__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClassDiagramAccess().getClassDiagramAction_0()); }
	()
	{ after(grammarAccess.getClassDiagramAccess().getClassDiagramAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassDiagram__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ClassDiagram__Group__1__Impl
	rule__ClassDiagram__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassDiagram__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClassDiagramAccess().getStartclassKeyword_1()); }
	'@startclass'
	{ after(grammarAccess.getClassDiagramAccess().getStartclassKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassDiagram__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ClassDiagram__Group__2__Impl
	rule__ClassDiagram__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassDiagram__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClassDiagramAccess().getElementsAssignment_2()); }
	(rule__ClassDiagram__ElementsAssignment_2)*
	{ after(grammarAccess.getClassDiagramAccess().getElementsAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassDiagram__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ClassDiagram__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassDiagram__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClassDiagramAccess().getEndclassKeyword_3()); }
	'@endclass'
	{ after(grammarAccess.getClassDiagramAccess().getEndclassKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ClassDef__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ClassDef__Group__0__Impl
	rule__ClassDef__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassDef__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClassDefAccess().getAlternatives_0()); }
	(rule__ClassDef__Alternatives_0)
	{ after(grammarAccess.getClassDefAccess().getAlternatives_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassDef__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ClassDef__Group__1__Impl
	rule__ClassDef__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassDef__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClassDefAccess().getLeftCurlyBracketKeyword_1()); }
	'{'
	{ after(grammarAccess.getClassDefAccess().getLeftCurlyBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassDef__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ClassDef__Group__2__Impl
	rule__ClassDef__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassDef__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClassDefAccess().getClassesAssignment_2()); }
	(rule__ClassDef__ClassesAssignment_2)
	{ after(grammarAccess.getClassDefAccess().getClassesAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassDef__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ClassDef__Group__3__Impl
	rule__ClassDef__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassDef__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClassDefAccess().getGroup_3()); }
	(rule__ClassDef__Group_3__0)*
	{ after(grammarAccess.getClassDefAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassDef__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ClassDef__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassDef__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClassDefAccess().getRightCurlyBracketKeyword_4()); }
	'}'
	{ after(grammarAccess.getClassDefAccess().getRightCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ClassDef__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ClassDef__Group_3__0__Impl
	rule__ClassDef__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassDef__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClassDefAccess().getCommaKeyword_3_0()); }
	','
	{ after(grammarAccess.getClassDefAccess().getCommaKeyword_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassDef__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ClassDef__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassDef__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClassDefAccess().getClassesAssignment_3_1()); }
	(rule__ClassDef__ClassesAssignment_3_1)
	{ after(grammarAccess.getClassDefAccess().getClassesAssignment_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Name__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Name__Group_1__0__Impl
	rule__Name__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Name__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNameAccess().getLongnameAssignment_1_0()); }
	(rule__Name__LongnameAssignment_1_0)
	{ after(grammarAccess.getNameAccess().getLongnameAssignment_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Name__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Name__Group_1__1__Impl
	rule__Name__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Name__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNameAccess().getAsKeyword_1_1()); }
	' as '
	{ after(grammarAccess.getNameAccess().getAsKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Name__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Name__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Name__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNameAccess().getNameAssignment_1_2()); }
	(rule__Name__NameAssignment_1_2)
	{ after(grammarAccess.getNameAccess().getNameAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Class__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Class__Group__0__Impl
	rule__Class__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClassAccess().getAbstractAssignment_0()); }
	(rule__Class__AbstractAssignment_0)?
	{ after(grammarAccess.getClassAccess().getAbstractAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Class__Group__1__Impl
	rule__Class__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClassAccess().getTypeAssignment_1()); }
	(rule__Class__TypeAssignment_1)
	{ after(grammarAccess.getClassAccess().getTypeAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Class__Group__2__Impl
	rule__Class__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClassAccess().getLeftCurlyBracketKeyword_2()); }
	'{'
	{ after(grammarAccess.getClassAccess().getLeftCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Class__Group__3__Impl
	rule__Class__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClassAccess().getMembersAssignment_3()); }
	(rule__Class__MembersAssignment_3)*
	{ after(grammarAccess.getClassAccess().getMembersAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Class__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClassAccess().getRightCurlyBracketKeyword_4()); }
	'}'
	{ after(grammarAccess.getClassAccess().getRightCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Attribute__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Attribute__Group__0__Impl
	rule__Attribute__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAttributeAccess().getVisibilityAssignment_0()); }
	(rule__Attribute__VisibilityAssignment_0)?
	{ after(grammarAccess.getAttributeAccess().getVisibilityAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Attribute__Group__1__Impl
	rule__Attribute__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAttributeAccess().getStaticAssignment_1()); }
	(rule__Attribute__StaticAssignment_1)?
	{ after(grammarAccess.getAttributeAccess().getStaticAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Attribute__Group__2__Impl
	rule__Attribute__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAttributeAccess().getFinalAssignment_2()); }
	(rule__Attribute__FinalAssignment_2)?
	{ after(grammarAccess.getAttributeAccess().getFinalAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Attribute__Group__3__Impl
	rule__Attribute__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAttributeAccess().getNameAssignment_3()); }
	(rule__Attribute__NameAssignment_3)
	{ after(grammarAccess.getAttributeAccess().getNameAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Attribute__Group__4__Impl
	rule__Attribute__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAttributeAccess().getColonKeyword_4()); }
	':'
	{ after(grammarAccess.getAttributeAccess().getColonKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Attribute__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAttributeAccess().getTypeAssignment_5()); }
	(rule__Attribute__TypeAssignment_5)
	{ after(grammarAccess.getAttributeAccess().getTypeAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Methode__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Methode__Group__0__Impl
	rule__Methode__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Methode__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodeAccess().getVisibilityAssignment_0()); }
	(rule__Methode__VisibilityAssignment_0)?
	{ after(grammarAccess.getMethodeAccess().getVisibilityAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Methode__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Methode__Group__1__Impl
	rule__Methode__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Methode__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodeAccess().getAbstractAssignment_1()); }
	(rule__Methode__AbstractAssignment_1)?
	{ after(grammarAccess.getMethodeAccess().getAbstractAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Methode__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Methode__Group__2__Impl
	rule__Methode__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Methode__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodeAccess().getStaticAssignment_2()); }
	(rule__Methode__StaticAssignment_2)?
	{ after(grammarAccess.getMethodeAccess().getStaticAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Methode__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Methode__Group__3__Impl
	rule__Methode__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Methode__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodeAccess().getFinalAssignment_3()); }
	(rule__Methode__FinalAssignment_3)?
	{ after(grammarAccess.getMethodeAccess().getFinalAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Methode__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Methode__Group__4__Impl
	rule__Methode__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Methode__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodeAccess().getNameAssignment_4()); }
	(rule__Methode__NameAssignment_4)
	{ after(grammarAccess.getMethodeAccess().getNameAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Methode__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Methode__Group__5__Impl
	rule__Methode__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Methode__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodeAccess().getLeftParenthesisKeyword_5()); }
	'('
	{ after(grammarAccess.getMethodeAccess().getLeftParenthesisKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Methode__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Methode__Group__6__Impl
	rule__Methode__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Methode__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodeAccess().getGroup_6()); }
	(rule__Methode__Group_6__0)*
	{ after(grammarAccess.getMethodeAccess().getGroup_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Methode__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Methode__Group__7__Impl
	rule__Methode__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__Methode__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodeAccess().getRightParenthesisKeyword_7()); }
	')'
	{ after(grammarAccess.getMethodeAccess().getRightParenthesisKeyword_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Methode__Group__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Methode__Group__8__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Methode__Group__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodeAccess().getGroup_8()); }
	(rule__Methode__Group_8__0)?
	{ after(grammarAccess.getMethodeAccess().getGroup_8()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Methode__Group_6__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Methode__Group_6__0__Impl
	rule__Methode__Group_6__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Methode__Group_6__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodeAccess().getAttributesAssignment_6_0()); }
	(rule__Methode__AttributesAssignment_6_0)
	{ after(grammarAccess.getMethodeAccess().getAttributesAssignment_6_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Methode__Group_6__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Methode__Group_6__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Methode__Group_6__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodeAccess().getGroup_6_1()); }
	(rule__Methode__Group_6_1__0)*
	{ after(grammarAccess.getMethodeAccess().getGroup_6_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Methode__Group_6_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Methode__Group_6_1__0__Impl
	rule__Methode__Group_6_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Methode__Group_6_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodeAccess().getCommaKeyword_6_1_0()); }
	','
	{ after(grammarAccess.getMethodeAccess().getCommaKeyword_6_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Methode__Group_6_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Methode__Group_6_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Methode__Group_6_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodeAccess().getAttributesAssignment_6_1_1()); }
	(rule__Methode__AttributesAssignment_6_1_1)
	{ after(grammarAccess.getMethodeAccess().getAttributesAssignment_6_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Methode__Group_8__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Methode__Group_8__0__Impl
	rule__Methode__Group_8__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Methode__Group_8__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodeAccess().getColonKeyword_8_0()); }
	':'
	{ after(grammarAccess.getMethodeAccess().getColonKeyword_8_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Methode__Group_8__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Methode__Group_8__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Methode__Group_8__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodeAccess().getTypeAssignment_8_1()); }
	(rule__Methode__TypeAssignment_8_1)
	{ after(grammarAccess.getMethodeAccess().getTypeAssignment_8_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Generalization__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Generalization__Group__0__Impl
	rule__Generalization__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Generalization__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGeneralizationAccess().getLeftAssignment_0()); }
	(rule__Generalization__LeftAssignment_0)
	{ after(grammarAccess.getGeneralizationAccess().getLeftAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Generalization__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Generalization__Group__1__Impl
	rule__Generalization__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Generalization__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGeneralizationAccess().getIsaKeyword_1()); }
	'isa'
	{ after(grammarAccess.getGeneralizationAccess().getIsaKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Generalization__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Generalization__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Generalization__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGeneralizationAccess().getRightAssignment_2()); }
	(rule__Generalization__RightAssignment_2)
	{ after(grammarAccess.getGeneralizationAccess().getRightAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Implementation__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Implementation__Group__0__Impl
	rule__Implementation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Implementation__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImplementationAccess().getLeftAssignment_0()); }
	(rule__Implementation__LeftAssignment_0)
	{ after(grammarAccess.getImplementationAccess().getLeftAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Implementation__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Implementation__Group__1__Impl
	rule__Implementation__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Implementation__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImplementationAccess().getImplKeyword_1()); }
	'impl'
	{ after(grammarAccess.getImplementationAccess().getImplKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Implementation__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Implementation__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Implementation__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImplementationAccess().getRightAssignment_2()); }
	(rule__Implementation__RightAssignment_2)
	{ after(grammarAccess.getImplementationAccess().getRightAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Association__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Association__Group__0__Impl
	rule__Association__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Association__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssociationAccess().getLeftAssignment_0()); }
	(rule__Association__LeftAssignment_0)
	{ after(grammarAccess.getAssociationAccess().getLeftAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Association__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Association__Group__1__Impl
	rule__Association__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Association__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssociationAccess().getHyphenMinusKeyword_1()); }
	'-'
	{ after(grammarAccess.getAssociationAccess().getHyphenMinusKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Association__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Association__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Association__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssociationAccess().getAlternatives_2()); }
	(rule__Association__Alternatives_2)
	{ after(grammarAccess.getAssociationAccess().getAlternatives_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Association__Group_2_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Association__Group_2_0__0__Impl
	rule__Association__Group_2_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Association__Group_2_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssociationAccess().getRightAssignment_2_0_0()); }
	(rule__Association__RightAssignment_2_0_0)
	{ after(grammarAccess.getAssociationAccess().getRightAssignment_2_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Association__Group_2_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Association__Group_2_0__1__Impl
	rule__Association__Group_2_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Association__Group_2_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssociationAccess().getCardinalityAssignment_2_0_1()); }
	(rule__Association__CardinalityAssignment_2_0_1)?
	{ after(grammarAccess.getAssociationAccess().getCardinalityAssignment_2_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Association__Group_2_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Association__Group_2_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Association__Group_2_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssociationAccess().getNoteAssignment_2_0_2()); }
	(rule__Association__NoteAssignment_2_0_2)?
	{ after(grammarAccess.getAssociationAccess().getNoteAssignment_2_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ConnectorCardinalitiy__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConnectorCardinalitiy__Group__0__Impl
	rule__ConnectorCardinalitiy__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConnectorCardinalitiy__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConnectorCardinalitiyAccess().getConnectorCardinalitiyAction_0()); }
	()
	{ after(grammarAccess.getConnectorCardinalitiyAccess().getConnectorCardinalitiyAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConnectorCardinalitiy__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConnectorCardinalitiy__Group__1__Impl
	rule__ConnectorCardinalitiy__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ConnectorCardinalitiy__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConnectorCardinalitiyAccess().getLeftSquareBracketKeyword_1()); }
	'['
	{ after(grammarAccess.getConnectorCardinalitiyAccess().getLeftSquareBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConnectorCardinalitiy__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConnectorCardinalitiy__Group__2__Impl
	rule__ConnectorCardinalitiy__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ConnectorCardinalitiy__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConnectorCardinalitiyAccess().getLeftAssignment_2()); }
	(rule__ConnectorCardinalitiy__LeftAssignment_2)?
	{ after(grammarAccess.getConnectorCardinalitiyAccess().getLeftAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConnectorCardinalitiy__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConnectorCardinalitiy__Group__3__Impl
	rule__ConnectorCardinalitiy__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ConnectorCardinalitiy__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConnectorCardinalitiyAccess().getGroup_3()); }
	(rule__ConnectorCardinalitiy__Group_3__0)
	{ after(grammarAccess.getConnectorCardinalitiyAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConnectorCardinalitiy__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConnectorCardinalitiy__Group__4__Impl
	rule__ConnectorCardinalitiy__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__ConnectorCardinalitiy__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConnectorCardinalitiyAccess().getGroup_4()); }
	(rule__ConnectorCardinalitiy__Group_4__0)?
	{ after(grammarAccess.getConnectorCardinalitiyAccess().getGroup_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConnectorCardinalitiy__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConnectorCardinalitiy__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConnectorCardinalitiy__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConnectorCardinalitiyAccess().getRightSquareBracketKeyword_5()); }
	']'
	{ after(grammarAccess.getConnectorCardinalitiyAccess().getRightSquareBracketKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ConnectorCardinalitiy__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConnectorCardinalitiy__Group_3__0__Impl
	rule__ConnectorCardinalitiy__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConnectorCardinalitiy__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConnectorCardinalitiyAccess().getVerticalLineKeyword_3_0()); }
	'|'
	{ after(grammarAccess.getConnectorCardinalitiyAccess().getVerticalLineKeyword_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConnectorCardinalitiy__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConnectorCardinalitiy__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConnectorCardinalitiy__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConnectorCardinalitiyAccess().getMiddleAssignment_3_1()); }
	(rule__ConnectorCardinalitiy__MiddleAssignment_3_1)?
	{ after(grammarAccess.getConnectorCardinalitiyAccess().getMiddleAssignment_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ConnectorCardinalitiy__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConnectorCardinalitiy__Group_4__0__Impl
	rule__ConnectorCardinalitiy__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConnectorCardinalitiy__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConnectorCardinalitiyAccess().getVerticalLineKeyword_4_0()); }
	'|'
	{ after(grammarAccess.getConnectorCardinalitiyAccess().getVerticalLineKeyword_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConnectorCardinalitiy__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConnectorCardinalitiy__Group_4__1__Impl
	rule__ConnectorCardinalitiy__Group_4__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ConnectorCardinalitiy__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConnectorCardinalitiyAccess().getRightAssignment_4_1()); }
	(rule__ConnectorCardinalitiy__RightAssignment_4_1)?
	{ after(grammarAccess.getConnectorCardinalitiyAccess().getRightAssignment_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConnectorCardinalitiy__Group_4__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConnectorCardinalitiy__Group_4__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConnectorCardinalitiy__Group_4__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConnectorCardinalitiyAccess().getAlternatives_4_2()); }
	(rule__ConnectorCardinalitiy__Alternatives_4_2)?
	{ after(grammarAccess.getConnectorCardinalitiyAccess().getAlternatives_4_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Cardinality__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Cardinality__Group_1__0__Impl
	rule__Cardinality__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Cardinality__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCardinalityAccess().getINTTerminalRuleCall_1_0()); }
	RULE_INT
	{ after(grammarAccess.getCardinalityAccess().getINTTerminalRuleCall_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Cardinality__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Cardinality__Group_1__1__Impl
	rule__Cardinality__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Cardinality__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCardinalityAccess().getFullStopFullStopKeyword_1_1()); }
	'..'
	{ after(grammarAccess.getCardinalityAccess().getFullStopFullStopKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Cardinality__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Cardinality__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Cardinality__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCardinalityAccess().getAlternatives_1_2()); }
	(rule__Cardinality__Alternatives_1_2)
	{ after(grammarAccess.getCardinalityAccess().getAlternatives_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Note__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Note__Group__0__Impl
	rule__Note__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Note__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNoteAccess().getNoteKeyword_0()); }
	'note['
	{ after(grammarAccess.getNoteAccess().getNoteKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Note__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Note__Group__1__Impl
	rule__Note__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Note__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNoteAccess().getSTRINGTerminalRuleCall_1()); }
	RULE_STRING
	{ after(grammarAccess.getNoteAccess().getSTRINGTerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Note__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Note__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Note__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNoteAccess().getRightSquareBracketKeyword_2()); }
	']'
	{ after(grammarAccess.getNoteAccess().getRightSquareBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ClassDiagram__ElementsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClassDiagramAccess().getElementsElementParserRuleCall_2_0()); }
		ruleElement
		{ after(grammarAccess.getClassDiagramAccess().getElementsElementParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__TypeAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTypeAccess().getTypeDataTypeEnumRuleCall_0_0()); }
		ruleDataType
		{ after(grammarAccess.getTypeAccess().getTypeDataTypeEnumRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassDef__ClassesAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClassDefAccess().getClassesClassNameParserRuleCall_2_0()); }
		ruleClassName
		{ after(grammarAccess.getClassDefAccess().getClassesClassNameParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassDef__ClassesAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClassDefAccess().getClassesClassNameParserRuleCall_3_1_0()); }
		ruleClassName
		{ after(grammarAccess.getClassDefAccess().getClassesClassNameParserRuleCall_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Name__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNameAccess().getNameIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getNameAccess().getNameIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Name__LongnameAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNameAccess().getLongnameAlternatives_1_0_0()); }
		(rule__Name__LongnameAlternatives_1_0_0)
		{ after(grammarAccess.getNameAccess().getLongnameAlternatives_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Name__NameAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNameAccess().getNameIDTerminalRuleCall_1_2_0()); }
		RULE_ID
		{ after(grammarAccess.getNameAccess().getNameIDTerminalRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__AbstractAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClassAccess().getAbstractAbstractKeyword_0_0()); }
		(
			{ before(grammarAccess.getClassAccess().getAbstractAbstractKeyword_0_0()); }
			'abstract'
			{ after(grammarAccess.getClassAccess().getAbstractAbstractKeyword_0_0()); }
		)
		{ after(grammarAccess.getClassAccess().getAbstractAbstractKeyword_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__TypeAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClassAccess().getTypeClassNameCrossReference_1_0()); }
		(
			{ before(grammarAccess.getClassAccess().getTypeClassNameIDTerminalRuleCall_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getClassAccess().getTypeClassNameIDTerminalRuleCall_1_0_1()); }
		)
		{ after(grammarAccess.getClassAccess().getTypeClassNameCrossReference_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__MembersAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClassAccess().getMembersMemberParserRuleCall_3_0()); }
		ruleMember
		{ after(grammarAccess.getClassAccess().getMembersMemberParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__VisibilityAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAttributeAccess().getVisibilityVisibilityEnumRuleCall_0_0()); }
		ruleVisibility
		{ after(grammarAccess.getAttributeAccess().getVisibilityVisibilityEnumRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__StaticAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAttributeAccess().getStaticStaticKeyword_1_0()); }
		(
			{ before(grammarAccess.getAttributeAccess().getStaticStaticKeyword_1_0()); }
			'static'
			{ after(grammarAccess.getAttributeAccess().getStaticStaticKeyword_1_0()); }
		)
		{ after(grammarAccess.getAttributeAccess().getStaticStaticKeyword_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__FinalAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAttributeAccess().getFinalFinalKeyword_2_0()); }
		(
			{ before(grammarAccess.getAttributeAccess().getFinalFinalKeyword_2_0()); }
			'final'
			{ after(grammarAccess.getAttributeAccess().getFinalFinalKeyword_2_0()); }
		)
		{ after(grammarAccess.getAttributeAccess().getFinalFinalKeyword_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__NameAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAttributeAccess().getNameIDTerminalRuleCall_3_0()); }
		RULE_ID
		{ after(grammarAccess.getAttributeAccess().getNameIDTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__TypeAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAttributeAccess().getTypeTypeParserRuleCall_5_0()); }
		ruleType
		{ after(grammarAccess.getAttributeAccess().getTypeTypeParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Methode__VisibilityAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMethodeAccess().getVisibilityVisibilityEnumRuleCall_0_0()); }
		ruleVisibility
		{ after(grammarAccess.getMethodeAccess().getVisibilityVisibilityEnumRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Methode__AbstractAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMethodeAccess().getAbstractAbstractKeyword_1_0()); }
		(
			{ before(grammarAccess.getMethodeAccess().getAbstractAbstractKeyword_1_0()); }
			'abstract'
			{ after(grammarAccess.getMethodeAccess().getAbstractAbstractKeyword_1_0()); }
		)
		{ after(grammarAccess.getMethodeAccess().getAbstractAbstractKeyword_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Methode__StaticAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMethodeAccess().getStaticStaticKeyword_2_0()); }
		(
			{ before(grammarAccess.getMethodeAccess().getStaticStaticKeyword_2_0()); }
			'static'
			{ after(grammarAccess.getMethodeAccess().getStaticStaticKeyword_2_0()); }
		)
		{ after(grammarAccess.getMethodeAccess().getStaticStaticKeyword_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Methode__FinalAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMethodeAccess().getFinalFinalKeyword_3_0()); }
		(
			{ before(grammarAccess.getMethodeAccess().getFinalFinalKeyword_3_0()); }
			'final'
			{ after(grammarAccess.getMethodeAccess().getFinalFinalKeyword_3_0()); }
		)
		{ after(grammarAccess.getMethodeAccess().getFinalFinalKeyword_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Methode__NameAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMethodeAccess().getNameIDTerminalRuleCall_4_0()); }
		RULE_ID
		{ after(grammarAccess.getMethodeAccess().getNameIDTerminalRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Methode__AttributesAssignment_6_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMethodeAccess().getAttributesAttributeParserRuleCall_6_0_0()); }
		ruleAttribute
		{ after(grammarAccess.getMethodeAccess().getAttributesAttributeParserRuleCall_6_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Methode__AttributesAssignment_6_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMethodeAccess().getAttributesAttributeParserRuleCall_6_1_1_0()); }
		ruleAttribute
		{ after(grammarAccess.getMethodeAccess().getAttributesAttributeParserRuleCall_6_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Methode__TypeAssignment_8_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMethodeAccess().getTypeTypeParserRuleCall_8_1_0()); }
		ruleType
		{ after(grammarAccess.getMethodeAccess().getTypeTypeParserRuleCall_8_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Generalization__LeftAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGeneralizationAccess().getLeftAssociationEndParserRuleCall_0_0()); }
		ruleAssociationEnd
		{ after(grammarAccess.getGeneralizationAccess().getLeftAssociationEndParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Generalization__RightAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGeneralizationAccess().getRightAssociationEndParserRuleCall_2_0()); }
		ruleAssociationEnd
		{ after(grammarAccess.getGeneralizationAccess().getRightAssociationEndParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Implementation__LeftAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getImplementationAccess().getLeftAssociationEndParserRuleCall_0_0()); }
		ruleAssociationEnd
		{ after(grammarAccess.getImplementationAccess().getLeftAssociationEndParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Implementation__RightAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getImplementationAccess().getRightAssociationEndParserRuleCall_2_0()); }
		ruleAssociationEnd
		{ after(grammarAccess.getImplementationAccess().getRightAssociationEndParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Association__LeftAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAssociationAccess().getLeftAssociationEndParserRuleCall_0_0()); }
		ruleAssociationEnd
		{ after(grammarAccess.getAssociationAccess().getLeftAssociationEndParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Association__RightAssignment_2_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAssociationAccess().getRightAssociationEndParserRuleCall_2_0_0_0()); }
		ruleAssociationEnd
		{ after(grammarAccess.getAssociationAccess().getRightAssociationEndParserRuleCall_2_0_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Association__CardinalityAssignment_2_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAssociationAccess().getCardinalityConnectorCardinalitiyParserRuleCall_2_0_1_0()); }
		ruleConnectorCardinalitiy
		{ after(grammarAccess.getAssociationAccess().getCardinalityConnectorCardinalitiyParserRuleCall_2_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Association__NoteAssignment_2_0_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAssociationAccess().getNoteNoteParserRuleCall_2_0_2_0()); }
		ruleNote
		{ after(grammarAccess.getAssociationAccess().getNoteNoteParserRuleCall_2_0_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Association__NoteAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAssociationAccess().getNoteNoteParserRuleCall_2_1_0()); }
		ruleNote
		{ after(grammarAccess.getAssociationAccess().getNoteNoteParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AssociationEnd__TypeAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAssociationEndAccess().getTypeClassNameCrossReference_0()); }
		(
			{ before(grammarAccess.getAssociationEndAccess().getTypeClassNameIDTerminalRuleCall_0_1()); }
			RULE_ID
			{ after(grammarAccess.getAssociationEndAccess().getTypeClassNameIDTerminalRuleCall_0_1()); }
		)
		{ after(grammarAccess.getAssociationEndAccess().getTypeClassNameCrossReference_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConnectorLabel__NameAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConnectorLabelAccess().getNameIDTerminalRuleCall_0()); }
		RULE_ID
		{ after(grammarAccess.getConnectorLabelAccess().getNameIDTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConnectorCardinalitiy__LeftAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConnectorCardinalitiyAccess().getLeftCardinalityParserRuleCall_2_0()); }
		ruleCardinality
		{ after(grammarAccess.getConnectorCardinalitiyAccess().getLeftCardinalityParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConnectorCardinalitiy__MiddleAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConnectorCardinalitiyAccess().getMiddleCardinalityParserRuleCall_3_1_0()); }
		ruleCardinality
		{ after(grammarAccess.getConnectorCardinalitiyAccess().getMiddleCardinalityParserRuleCall_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConnectorCardinalitiy__RightAssignment_4_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConnectorCardinalitiyAccess().getRightConnectorLabelParserRuleCall_4_1_0()); }
		ruleConnectorLabel
		{ after(grammarAccess.getConnectorCardinalitiyAccess().getRightConnectorLabelParserRuleCall_4_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
