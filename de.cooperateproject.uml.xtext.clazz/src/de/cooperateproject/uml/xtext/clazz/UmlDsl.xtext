grammar de.cooperateproject.uml.xtext.clazz.UmlDsl with org.eclipse.xtext.common.Terminals

generate umlDsl "http://www.cooperateproject.de/uml/xtext/clazz/UmlDsl"

//import "http://www.eclipse.org/xtext/common/JavaVMTypes" as jvmTypes

ClassDiagram:
	{ClassDiagram}
	'@startclass'
    (elements += Element)*
    '@endclass';

Element: 
	ClassDef 
	| Class 
	|  DataType 
	| Connector
;

DataType:
  'datatype' name = ID;

Type: 
	DataType 
	| ClassName
;

ClassDef: 
	('class' | 'interface') 
	'{' classes += ClassName (',' classes += ClassName)* '}'
;

ClassName: 
	Name
;

Name: 
	(name = ID 
	| longname = (STRING | ID) ' as ' name = ID)
;

Class: 
	('abstract')?
	type = [ClassName] 
	(inheritance = Inheritance)? 
	'{' (members += Member)* '}'
;

Inheritance:
	'extends' type = [ClassName] 
	| 'implements' type = [ClassName]
;

Member: 
	Attribute 
	| Methode
;

Attribute: 
	(visibility = Visibility)? 
	('static')? 
	('final')? 
	name = ID ':' (type = [Type])
;

Methode: 
	(visibility = Visibility)? 
	('abstract')? 
	('static')? 
	('final')? 
	name = ID '(' 
	(attributes += Attribute (',' attributes += Attribute)*)* ')' 
	(':' (type = [Type]))?
;

Connector: 
	Generalization 
	| Association
;

Generalization: 
	left = AssociationEnd 'isa' right = AssociationEnd
;

Association: 
	left = AssociationEnd '-'  
	((right = AssociationEnd (cardinality = ConnectorCardinalitiy)? (note = Note)?) 
	| note = Note)
;

AssociationEnd: 
	type = [ClassName]
;

ConnectorLabel: 
	name = ID
;

ConnectorCardinalitiy: 
	{ConnectorCardinalitiy}
	'[' (left = Cardinality)? 
	('|' (middle = Cardinality)?)? 
	('|' (right = ConnectorLabel)? ('<' | '>')?)?']'
;

Cardinality: 
	('*') 
	| (INT '..' (('*') | INT))
;

Note: 
	'note[' STRING ']'
;

enum Visibility: 
	PROTECTED = '#' 
	| PRIVATE = '-' 
	| DEFAULT = '~' 
	| PUBLIC = '+'
;