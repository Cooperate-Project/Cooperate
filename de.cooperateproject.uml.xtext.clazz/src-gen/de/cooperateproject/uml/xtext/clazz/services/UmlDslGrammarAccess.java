/*
 * generated by Xtext
 */
package de.cooperateproject.uml.xtext.clazz.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class UmlDslGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ClassDiagramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClassDiagram");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cClassDiagramAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cStartclassKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cElementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementsElementParserRuleCall_2_0 = (RuleCall)cElementsAssignment_2.eContents().get(0);
		private final Keyword cEndclassKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ClassDiagram:
		//	{ClassDiagram} "@startclass" elements+=Element* "@endclass";
		@Override public ParserRule getRule() { return rule; }

		//{ClassDiagram} "@startclass" elements+=Element* "@endclass"
		public Group getGroup() { return cGroup; }

		//{ClassDiagram}
		public Action getClassDiagramAction_0() { return cClassDiagramAction_0; }

		//"@startclass"
		public Keyword getStartclassKeyword_1() { return cStartclassKeyword_1; }

		//elements+=Element*
		public Assignment getElementsAssignment_2() { return cElementsAssignment_2; }

		//Element
		public RuleCall getElementsElementParserRuleCall_2_0() { return cElementsElementParserRuleCall_2_0; }

		//"@endclass"
		public Keyword getEndclassKeyword_3() { return cEndclassKeyword_3; }
	}

	public class ElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Element");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cClassDefParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cClassParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDataTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cConnectorParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Element:
		//	ClassDef | Class | DataType | Connector;
		@Override public ParserRule getRule() { return rule; }

		//ClassDef | Class | DataType | Connector
		public Alternatives getAlternatives() { return cAlternatives; }

		//ClassDef
		public RuleCall getClassDefParserRuleCall_0() { return cClassDefParserRuleCall_0; }

		//Class
		public RuleCall getClassParserRuleCall_1() { return cClassParserRuleCall_1; }

		//DataType
		public RuleCall getDataTypeParserRuleCall_2() { return cDataTypeParserRuleCall_2; }

		//Connector
		public RuleCall getConnectorParserRuleCall_3() { return cConnectorParserRuleCall_3; }
	}

	public class DataTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DataType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDatatypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//DataType:
		//	"datatype" name=ID;
		@Override public ParserRule getRule() { return rule; }

		//"datatype" name=ID
		public Group getGroup() { return cGroup; }

		//"datatype"
		public Keyword getDatatypeKeyword_0() { return cDatatypeKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDataTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cClassNameParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Type:
		//	DataType | ClassName;
		@Override public ParserRule getRule() { return rule; }

		//DataType | ClassName
		public Alternatives getAlternatives() { return cAlternatives; }

		//DataType
		public RuleCall getDataTypeParserRuleCall_0() { return cDataTypeParserRuleCall_0; }

		//ClassName
		public RuleCall getClassNameParserRuleCall_1() { return cClassNameParserRuleCall_1; }
	}

	public class ClassDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClassDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cClassKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cInterfaceKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cClassesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cClassesClassNameParserRuleCall_2_0 = (RuleCall)cClassesAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cClassesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cClassesClassNameParserRuleCall_3_1_0 = (RuleCall)cClassesAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ClassDef:
		//	("class" | "interface") "{" classes+=ClassName ("," classes+=ClassName)* "}";
		@Override public ParserRule getRule() { return rule; }

		//("class" | "interface") "{" classes+=ClassName ("," classes+=ClassName)* "}"
		public Group getGroup() { return cGroup; }

		//"class" | "interface"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"class"
		public Keyword getClassKeyword_0_0() { return cClassKeyword_0_0; }

		//"interface"
		public Keyword getInterfaceKeyword_0_1() { return cInterfaceKeyword_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//classes+=ClassName
		public Assignment getClassesAssignment_2() { return cClassesAssignment_2; }

		//ClassName
		public RuleCall getClassesClassNameParserRuleCall_2_0() { return cClassesClassNameParserRuleCall_2_0; }

		//("," classes+=ClassName)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//classes+=ClassName
		public Assignment getClassesAssignment_3_1() { return cClassesAssignment_3_1; }

		//ClassName
		public RuleCall getClassesClassNameParserRuleCall_3_1_0() { return cClassesClassNameParserRuleCall_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class ClassNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClassName");
		private final RuleCall cNameParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ClassName:
		//	Name;
		@Override public ParserRule getRule() { return rule; }

		//Name
		public RuleCall getNameParserRuleCall() { return cNameParserRuleCall; }
	}

	public class NameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Name");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cLongnameAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Alternatives cLongnameAlternatives_1_0_0 = (Alternatives)cLongnameAssignment_1_0.eContents().get(0);
		private final RuleCall cLongnameSTRINGTerminalRuleCall_1_0_0_0 = (RuleCall)cLongnameAlternatives_1_0_0.eContents().get(0);
		private final RuleCall cLongnameIDTerminalRuleCall_1_0_0_1 = (RuleCall)cLongnameAlternatives_1_0_0.eContents().get(1);
		private final Keyword cAsKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cNameAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_1_2_0 = (RuleCall)cNameAssignment_1_2.eContents().get(0);
		
		//Name:
		//	name=ID | longname=(STRING | ID) " as " name=ID;
		@Override public ParserRule getRule() { return rule; }

		//name=ID | longname=(STRING | ID) " as " name=ID
		public Alternatives getAlternatives() { return cAlternatives; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//longname=(STRING | ID) " as " name=ID
		public Group getGroup_1() { return cGroup_1; }

		//longname=(STRING | ID)
		public Assignment getLongnameAssignment_1_0() { return cLongnameAssignment_1_0; }

		//STRING | ID
		public Alternatives getLongnameAlternatives_1_0_0() { return cLongnameAlternatives_1_0_0; }

		//STRING
		public RuleCall getLongnameSTRINGTerminalRuleCall_1_0_0_0() { return cLongnameSTRINGTerminalRuleCall_1_0_0_0; }

		//ID
		public RuleCall getLongnameIDTerminalRuleCall_1_0_0_1() { return cLongnameIDTerminalRuleCall_1_0_0_1; }

		//" as "
		public Keyword getAsKeyword_1_1() { return cAsKeyword_1_1; }

		//name=ID
		public Assignment getNameAssignment_1_2() { return cNameAssignment_1_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_2_0() { return cNameIDTerminalRuleCall_1_2_0; }
	}

	public class ClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Class");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAbstractKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTypeClassNameCrossReference_1_0 = (CrossReference)cTypeAssignment_1.eContents().get(0);
		private final RuleCall cTypeClassNameIDTerminalRuleCall_1_0_1 = (RuleCall)cTypeClassNameCrossReference_1_0.eContents().get(1);
		private final Assignment cInheritanceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInheritanceInheritanceParserRuleCall_2_0 = (RuleCall)cInheritanceAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cMembersAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cMembersMemberParserRuleCall_4_0 = (RuleCall)cMembersAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Class:
		//	"abstract"? type=[ClassName] inheritance=Inheritance? "{" members+=Member* "}";
		@Override public ParserRule getRule() { return rule; }

		//"abstract"? type=[ClassName] inheritance=Inheritance? "{" members+=Member* "}"
		public Group getGroup() { return cGroup; }

		//"abstract"?
		public Keyword getAbstractKeyword_0() { return cAbstractKeyword_0; }

		//type=[ClassName]
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//[ClassName]
		public CrossReference getTypeClassNameCrossReference_1_0() { return cTypeClassNameCrossReference_1_0; }

		//ID
		public RuleCall getTypeClassNameIDTerminalRuleCall_1_0_1() { return cTypeClassNameIDTerminalRuleCall_1_0_1; }

		//inheritance=Inheritance?
		public Assignment getInheritanceAssignment_2() { return cInheritanceAssignment_2; }

		//Inheritance
		public RuleCall getInheritanceInheritanceParserRuleCall_2_0() { return cInheritanceInheritanceParserRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//members+=Member*
		public Assignment getMembersAssignment_4() { return cMembersAssignment_4; }

		//Member
		public RuleCall getMembersMemberParserRuleCall_4_0() { return cMembersMemberParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class InheritanceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Inheritance");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cExtendsKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cTypeAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final CrossReference cTypeClassNameCrossReference_0_1_0 = (CrossReference)cTypeAssignment_0_1.eContents().get(0);
		private final RuleCall cTypeClassNameIDTerminalRuleCall_0_1_0_1 = (RuleCall)cTypeClassNameCrossReference_0_1_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cImplementsKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTypeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cTypeClassNameCrossReference_1_1_0 = (CrossReference)cTypeAssignment_1_1.eContents().get(0);
		private final RuleCall cTypeClassNameIDTerminalRuleCall_1_1_0_1 = (RuleCall)cTypeClassNameCrossReference_1_1_0.eContents().get(1);
		
		//Inheritance:
		//	"extends" type=[ClassName] | "implements" type=[ClassName];
		@Override public ParserRule getRule() { return rule; }

		//"extends" type=[ClassName] | "implements" type=[ClassName]
		public Alternatives getAlternatives() { return cAlternatives; }

		//"extends" type=[ClassName]
		public Group getGroup_0() { return cGroup_0; }

		//"extends"
		public Keyword getExtendsKeyword_0_0() { return cExtendsKeyword_0_0; }

		//type=[ClassName]
		public Assignment getTypeAssignment_0_1() { return cTypeAssignment_0_1; }

		//[ClassName]
		public CrossReference getTypeClassNameCrossReference_0_1_0() { return cTypeClassNameCrossReference_0_1_0; }

		//ID
		public RuleCall getTypeClassNameIDTerminalRuleCall_0_1_0_1() { return cTypeClassNameIDTerminalRuleCall_0_1_0_1; }

		//"implements" type=[ClassName]
		public Group getGroup_1() { return cGroup_1; }

		//"implements"
		public Keyword getImplementsKeyword_1_0() { return cImplementsKeyword_1_0; }

		//type=[ClassName]
		public Assignment getTypeAssignment_1_1() { return cTypeAssignment_1_1; }

		//[ClassName]
		public CrossReference getTypeClassNameCrossReference_1_1_0() { return cTypeClassNameCrossReference_1_1_0; }

		//ID
		public RuleCall getTypeClassNameIDTerminalRuleCall_1_1_0_1() { return cTypeClassNameIDTerminalRuleCall_1_1_0_1; }
	}

	public class MemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Member");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAttributeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMethodeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Member:
		//	Attribute | Methode;
		@Override public ParserRule getRule() { return rule; }

		//Attribute | Methode
		public Alternatives getAlternatives() { return cAlternatives; }

		//Attribute
		public RuleCall getAttributeParserRuleCall_0() { return cAttributeParserRuleCall_0; }

		//Methode
		public RuleCall getMethodeParserRuleCall_1() { return cMethodeParserRuleCall_1; }
	}

	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Attribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVisibilityAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVisibilityVisibilityEnumRuleCall_0_0 = (RuleCall)cVisibilityAssignment_0.eContents().get(0);
		private final Keyword cStaticKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cFinalKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cTypeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cTypeTypeCrossReference_5_0 = (CrossReference)cTypeAssignment_5.eContents().get(0);
		private final RuleCall cTypeTypeIDTerminalRuleCall_5_0_1 = (RuleCall)cTypeTypeCrossReference_5_0.eContents().get(1);
		
		//Attribute:
		//	visibility=Visibility? "static"? "final"? name=ID ":" type=[Type];
		@Override public ParserRule getRule() { return rule; }

		//visibility=Visibility? "static"? "final"? name=ID ":" type=[Type]
		public Group getGroup() { return cGroup; }

		//visibility=Visibility?
		public Assignment getVisibilityAssignment_0() { return cVisibilityAssignment_0; }

		//Visibility
		public RuleCall getVisibilityVisibilityEnumRuleCall_0_0() { return cVisibilityVisibilityEnumRuleCall_0_0; }

		//"static"?
		public Keyword getStaticKeyword_1() { return cStaticKeyword_1; }

		//"final"?
		public Keyword getFinalKeyword_2() { return cFinalKeyword_2; }

		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }

		//":"
		public Keyword getColonKeyword_4() { return cColonKeyword_4; }

		//type=[Type]
		public Assignment getTypeAssignment_5() { return cTypeAssignment_5; }

		//[Type]
		public CrossReference getTypeTypeCrossReference_5_0() { return cTypeTypeCrossReference_5_0; }

		//ID
		public RuleCall getTypeTypeIDTerminalRuleCall_5_0_1() { return cTypeTypeIDTerminalRuleCall_5_0_1; }
	}

	public class MethodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Methode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVisibilityAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVisibilityVisibilityEnumRuleCall_0_0 = (RuleCall)cVisibilityAssignment_0.eContents().get(0);
		private final Keyword cAbstractKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cStaticKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cFinalKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameIDTerminalRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Assignment cAttributesAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final RuleCall cAttributesAttributeParserRuleCall_6_0_0 = (RuleCall)cAttributesAssignment_6_0.eContents().get(0);
		private final Group cGroup_6_1 = (Group)cGroup_6.eContents().get(1);
		private final Keyword cCommaKeyword_6_1_0 = (Keyword)cGroup_6_1.eContents().get(0);
		private final Assignment cAttributesAssignment_6_1_1 = (Assignment)cGroup_6_1.eContents().get(1);
		private final RuleCall cAttributesAttributeParserRuleCall_6_1_1_0 = (RuleCall)cAttributesAssignment_6_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cColonKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cTypeAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final CrossReference cTypeTypeCrossReference_8_1_0 = (CrossReference)cTypeAssignment_8_1.eContents().get(0);
		private final RuleCall cTypeTypeIDTerminalRuleCall_8_1_0_1 = (RuleCall)cTypeTypeCrossReference_8_1_0.eContents().get(1);
		
		//Methode:
		//	visibility=Visibility? "abstract"? "static"? "final"? name=ID "(" (attributes+=Attribute (","
		//	attributes+=Attribute)*)* ")" (":" type=[Type])?;
		@Override public ParserRule getRule() { return rule; }

		//visibility=Visibility? "abstract"? "static"? "final"? name=ID "(" (attributes+=Attribute ("," attributes+=Attribute)*)*
		//")" (":" type=[Type])?
		public Group getGroup() { return cGroup; }

		//visibility=Visibility?
		public Assignment getVisibilityAssignment_0() { return cVisibilityAssignment_0; }

		//Visibility
		public RuleCall getVisibilityVisibilityEnumRuleCall_0_0() { return cVisibilityVisibilityEnumRuleCall_0_0; }

		//"abstract"?
		public Keyword getAbstractKeyword_1() { return cAbstractKeyword_1; }

		//"static"?
		public Keyword getStaticKeyword_2() { return cStaticKeyword_2; }

		//"final"?
		public Keyword getFinalKeyword_3() { return cFinalKeyword_3; }

		//name=ID
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_4_0() { return cNameIDTerminalRuleCall_4_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_5() { return cLeftParenthesisKeyword_5; }

		//(attributes+=Attribute ("," attributes+=Attribute)*)*
		public Group getGroup_6() { return cGroup_6; }

		//attributes+=Attribute
		public Assignment getAttributesAssignment_6_0() { return cAttributesAssignment_6_0; }

		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_6_0_0() { return cAttributesAttributeParserRuleCall_6_0_0; }

		//("," attributes+=Attribute)*
		public Group getGroup_6_1() { return cGroup_6_1; }

		//","
		public Keyword getCommaKeyword_6_1_0() { return cCommaKeyword_6_1_0; }

		//attributes+=Attribute
		public Assignment getAttributesAssignment_6_1_1() { return cAttributesAssignment_6_1_1; }

		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_6_1_1_0() { return cAttributesAttributeParserRuleCall_6_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }

		//(":" type=[Type])?
		public Group getGroup_8() { return cGroup_8; }

		//":"
		public Keyword getColonKeyword_8_0() { return cColonKeyword_8_0; }

		//type=[Type]
		public Assignment getTypeAssignment_8_1() { return cTypeAssignment_8_1; }

		//[Type]
		public CrossReference getTypeTypeCrossReference_8_1_0() { return cTypeTypeCrossReference_8_1_0; }

		//ID
		public RuleCall getTypeTypeIDTerminalRuleCall_8_1_0_1() { return cTypeTypeIDTerminalRuleCall_8_1_0_1; }
	}

	public class ConnectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Connector");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cGeneralizationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAssociationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Connector:
		//	Generalization | Association;
		@Override public ParserRule getRule() { return rule; }

		//Generalization | Association
		public Alternatives getAlternatives() { return cAlternatives; }

		//Generalization
		public RuleCall getGeneralizationParserRuleCall_0() { return cGeneralizationParserRuleCall_0; }

		//Association
		public RuleCall getAssociationParserRuleCall_1() { return cAssociationParserRuleCall_1; }
	}

	public class GeneralizationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Generalization");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftAssociationEndParserRuleCall_0_0 = (RuleCall)cLeftAssignment_0.eContents().get(0);
		private final Keyword cIsaKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRightAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRightAssociationEndParserRuleCall_2_0 = (RuleCall)cRightAssignment_2.eContents().get(0);
		
		//Generalization:
		//	left=AssociationEnd "isa" right=AssociationEnd;
		@Override public ParserRule getRule() { return rule; }

		//left=AssociationEnd "isa" right=AssociationEnd
		public Group getGroup() { return cGroup; }

		//left=AssociationEnd
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }

		//AssociationEnd
		public RuleCall getLeftAssociationEndParserRuleCall_0_0() { return cLeftAssociationEndParserRuleCall_0_0; }

		//"isa"
		public Keyword getIsaKeyword_1() { return cIsaKeyword_1; }

		//right=AssociationEnd
		public Assignment getRightAssignment_2() { return cRightAssignment_2; }

		//AssociationEnd
		public RuleCall getRightAssociationEndParserRuleCall_2_0() { return cRightAssociationEndParserRuleCall_2_0; }
	}

	public class AssociationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Association");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftAssociationEndParserRuleCall_0_0 = (RuleCall)cLeftAssignment_0.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Assignment cRightAssignment_2_0_0 = (Assignment)cGroup_2_0.eContents().get(0);
		private final RuleCall cRightAssociationEndParserRuleCall_2_0_0_0 = (RuleCall)cRightAssignment_2_0_0.eContents().get(0);
		private final Assignment cCardinalityAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cCardinalityConnectorCardinalitiyParserRuleCall_2_0_1_0 = (RuleCall)cCardinalityAssignment_2_0_1.eContents().get(0);
		private final Assignment cNoteAssignment_2_0_2 = (Assignment)cGroup_2_0.eContents().get(2);
		private final RuleCall cNoteNoteParserRuleCall_2_0_2_0 = (RuleCall)cNoteAssignment_2_0_2.eContents().get(0);
		private final Assignment cNoteAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cNoteNoteParserRuleCall_2_1_0 = (RuleCall)cNoteAssignment_2_1.eContents().get(0);
		
		//Association:
		//	left=AssociationEnd "-" (right=AssociationEnd cardinality=ConnectorCardinalitiy? note=Note? | note=Note);
		@Override public ParserRule getRule() { return rule; }

		//left=AssociationEnd "-" (right=AssociationEnd cardinality=ConnectorCardinalitiy? note=Note? | note=Note)
		public Group getGroup() { return cGroup; }

		//left=AssociationEnd
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }

		//AssociationEnd
		public RuleCall getLeftAssociationEndParserRuleCall_0_0() { return cLeftAssociationEndParserRuleCall_0_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }

		//right=AssociationEnd cardinality=ConnectorCardinalitiy? note=Note? | note=Note
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//right=AssociationEnd cardinality=ConnectorCardinalitiy? note=Note?
		public Group getGroup_2_0() { return cGroup_2_0; }

		//right=AssociationEnd
		public Assignment getRightAssignment_2_0_0() { return cRightAssignment_2_0_0; }

		//AssociationEnd
		public RuleCall getRightAssociationEndParserRuleCall_2_0_0_0() { return cRightAssociationEndParserRuleCall_2_0_0_0; }

		//cardinality=ConnectorCardinalitiy?
		public Assignment getCardinalityAssignment_2_0_1() { return cCardinalityAssignment_2_0_1; }

		//ConnectorCardinalitiy
		public RuleCall getCardinalityConnectorCardinalitiyParserRuleCall_2_0_1_0() { return cCardinalityConnectorCardinalitiyParserRuleCall_2_0_1_0; }

		//note=Note?
		public Assignment getNoteAssignment_2_0_2() { return cNoteAssignment_2_0_2; }

		//Note
		public RuleCall getNoteNoteParserRuleCall_2_0_2_0() { return cNoteNoteParserRuleCall_2_0_2_0; }

		//note=Note
		public Assignment getNoteAssignment_2_1() { return cNoteAssignment_2_1; }

		//Note
		public RuleCall getNoteNoteParserRuleCall_2_1_0() { return cNoteNoteParserRuleCall_2_1_0; }
	}

	public class AssociationEndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AssociationEnd");
		private final Assignment cTypeAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cTypeClassNameCrossReference_0 = (CrossReference)cTypeAssignment.eContents().get(0);
		private final RuleCall cTypeClassNameIDTerminalRuleCall_0_1 = (RuleCall)cTypeClassNameCrossReference_0.eContents().get(1);
		
		//AssociationEnd:
		//	type=[ClassName];
		@Override public ParserRule getRule() { return rule; }

		//type=[ClassName]
		public Assignment getTypeAssignment() { return cTypeAssignment; }

		//[ClassName]
		public CrossReference getTypeClassNameCrossReference_0() { return cTypeClassNameCrossReference_0; }

		//ID
		public RuleCall getTypeClassNameIDTerminalRuleCall_0_1() { return cTypeClassNameIDTerminalRuleCall_0_1; }
	}

	public class ConnectorLabelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConnectorLabel");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//ConnectorLabel:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class ConnectorCardinalitiyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConnectorCardinalitiy");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cConnectorCardinalitiyAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLeftAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLeftCardinalityParserRuleCall_2_0 = (RuleCall)cLeftAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cVerticalLineKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cMiddleAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cMiddleCardinalityParserRuleCall_3_1_0 = (RuleCall)cMiddleAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cVerticalLineKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cRightAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cRightConnectorLabelParserRuleCall_4_1_0 = (RuleCall)cRightAssignment_4_1.eContents().get(0);
		private final Alternatives cAlternatives_4_2 = (Alternatives)cGroup_4.eContents().get(2);
		private final Keyword cLessThanSignKeyword_4_2_0 = (Keyword)cAlternatives_4_2.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_4_2_1 = (Keyword)cAlternatives_4_2.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ConnectorCardinalitiy:
		//	{ConnectorCardinalitiy} "[" left=Cardinality? ("|" middle=Cardinality?)? ("|" right=ConnectorLabel? ("<" | ">")?)?
		//	"]";
		@Override public ParserRule getRule() { return rule; }

		//{ConnectorCardinalitiy} "[" left=Cardinality? ("|" middle=Cardinality?)? ("|" right=ConnectorLabel? ("<" | ">")?)? "]"
		public Group getGroup() { return cGroup; }

		//{ConnectorCardinalitiy}
		public Action getConnectorCardinalitiyAction_0() { return cConnectorCardinalitiyAction_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }

		//left=Cardinality?
		public Assignment getLeftAssignment_2() { return cLeftAssignment_2; }

		//Cardinality
		public RuleCall getLeftCardinalityParserRuleCall_2_0() { return cLeftCardinalityParserRuleCall_2_0; }

		//("|" middle=Cardinality?)?
		public Group getGroup_3() { return cGroup_3; }

		//"|"
		public Keyword getVerticalLineKeyword_3_0() { return cVerticalLineKeyword_3_0; }

		//middle=Cardinality?
		public Assignment getMiddleAssignment_3_1() { return cMiddleAssignment_3_1; }

		//Cardinality
		public RuleCall getMiddleCardinalityParserRuleCall_3_1_0() { return cMiddleCardinalityParserRuleCall_3_1_0; }

		//("|" right=ConnectorLabel? ("<" | ">")?)?
		public Group getGroup_4() { return cGroup_4; }

		//"|"
		public Keyword getVerticalLineKeyword_4_0() { return cVerticalLineKeyword_4_0; }

		//right=ConnectorLabel?
		public Assignment getRightAssignment_4_1() { return cRightAssignment_4_1; }

		//ConnectorLabel
		public RuleCall getRightConnectorLabelParserRuleCall_4_1_0() { return cRightConnectorLabelParserRuleCall_4_1_0; }

		//("<" | ">")?
		public Alternatives getAlternatives_4_2() { return cAlternatives_4_2; }

		//"<"
		public Keyword getLessThanSignKeyword_4_2_0() { return cLessThanSignKeyword_4_2_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_4_2_1() { return cGreaterThanSignKeyword_4_2_1; }

		//"]"
		public Keyword getRightSquareBracketKeyword_5() { return cRightSquareBracketKeyword_5; }
	}

	public class CardinalityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Cardinality");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAsteriskKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Alternatives cAlternatives_1_2 = (Alternatives)cGroup_1.eContents().get(2);
		private final Keyword cAsteriskKeyword_1_2_0 = (Keyword)cAlternatives_1_2.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1_2_1 = (RuleCall)cAlternatives_1_2.eContents().get(1);
		
		//Cardinality:
		//	"*" | INT ".." ("*" | INT);
		@Override public ParserRule getRule() { return rule; }

		//"*" | INT ".." ("*" | INT)
		public Alternatives getAlternatives() { return cAlternatives; }

		//"*"
		public Keyword getAsteriskKeyword_0() { return cAsteriskKeyword_0; }

		//INT ".." ("*" | INT)
		public Group getGroup_1() { return cGroup_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_1_0() { return cINTTerminalRuleCall_1_0; }

		//".."
		public Keyword getFullStopFullStopKeyword_1_1() { return cFullStopFullStopKeyword_1_1; }

		//"*" | INT
		public Alternatives getAlternatives_1_2() { return cAlternatives_1_2; }

		//"*"
		public Keyword getAsteriskKeyword_1_2_0() { return cAsteriskKeyword_1_2_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1_2_1() { return cINTTerminalRuleCall_1_2_1; }
	}

	public class NoteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Note");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNoteKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Note:
		//	"note[" STRING "]";
		@Override public ParserRule getRule() { return rule; }

		//"note[" STRING "]"
		public Group getGroup() { return cGroup; }

		//"note["
		public Keyword getNoteKeyword_0() { return cNoteKeyword_0; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1() { return cSTRINGTerminalRuleCall_1; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
	}
	
	
	public class VisibilityElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Visibility");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPROTECTEDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPROTECTEDNumberSignKeyword_0_0 = (Keyword)cPROTECTEDEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cPRIVATEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cPRIVATEHyphenMinusKeyword_1_0 = (Keyword)cPRIVATEEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cDEFAULTEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cDEFAULTTildeKeyword_2_0 = (Keyword)cDEFAULTEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cPUBLICEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cPUBLICPlusSignKeyword_3_0 = (Keyword)cPUBLICEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum Visibility:
		//	PROTECTED="#" | PRIVATE="-" | DEFAULT="~" | PUBLIC="+";
		public EnumRule getRule() { return rule; }

		//PROTECTED="#" | PRIVATE="-" | DEFAULT="~" | PUBLIC="+"
		public Alternatives getAlternatives() { return cAlternatives; }

		//PROTECTED="#"
		public EnumLiteralDeclaration getPROTECTEDEnumLiteralDeclaration_0() { return cPROTECTEDEnumLiteralDeclaration_0; }

		//"#"
		public Keyword getPROTECTEDNumberSignKeyword_0_0() { return cPROTECTEDNumberSignKeyword_0_0; }

		//PRIVATE="-"
		public EnumLiteralDeclaration getPRIVATEEnumLiteralDeclaration_1() { return cPRIVATEEnumLiteralDeclaration_1; }

		//"-"
		public Keyword getPRIVATEHyphenMinusKeyword_1_0() { return cPRIVATEHyphenMinusKeyword_1_0; }

		//DEFAULT="~"
		public EnumLiteralDeclaration getDEFAULTEnumLiteralDeclaration_2() { return cDEFAULTEnumLiteralDeclaration_2; }

		//"~"
		public Keyword getDEFAULTTildeKeyword_2_0() { return cDEFAULTTildeKeyword_2_0; }

		//PUBLIC="+"
		public EnumLiteralDeclaration getPUBLICEnumLiteralDeclaration_3() { return cPUBLICEnumLiteralDeclaration_3; }

		//"+"
		public Keyword getPUBLICPlusSignKeyword_3_0() { return cPUBLICPlusSignKeyword_3_0; }
	}
	
	private final ClassDiagramElements pClassDiagram;
	private final ElementElements pElement;
	private final DataTypeElements pDataType;
	private final TypeElements pType;
	private final ClassDefElements pClassDef;
	private final ClassNameElements pClassName;
	private final NameElements pName;
	private final ClassElements pClass;
	private final InheritanceElements pInheritance;
	private final MemberElements pMember;
	private final AttributeElements pAttribute;
	private final MethodeElements pMethode;
	private final ConnectorElements pConnector;
	private final GeneralizationElements pGeneralization;
	private final AssociationElements pAssociation;
	private final AssociationEndElements pAssociationEnd;
	private final ConnectorLabelElements pConnectorLabel;
	private final ConnectorCardinalitiyElements pConnectorCardinalitiy;
	private final CardinalityElements pCardinality;
	private final NoteElements pNote;
	private final VisibilityElements unknownRuleVisibility;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public UmlDslGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pClassDiagram = new ClassDiagramElements();
		this.pElement = new ElementElements();
		this.pDataType = new DataTypeElements();
		this.pType = new TypeElements();
		this.pClassDef = new ClassDefElements();
		this.pClassName = new ClassNameElements();
		this.pName = new NameElements();
		this.pClass = new ClassElements();
		this.pInheritance = new InheritanceElements();
		this.pMember = new MemberElements();
		this.pAttribute = new AttributeElements();
		this.pMethode = new MethodeElements();
		this.pConnector = new ConnectorElements();
		this.pGeneralization = new GeneralizationElements();
		this.pAssociation = new AssociationElements();
		this.pAssociationEnd = new AssociationEndElements();
		this.pConnectorLabel = new ConnectorLabelElements();
		this.pConnectorCardinalitiy = new ConnectorCardinalitiyElements();
		this.pCardinality = new CardinalityElements();
		this.pNote = new NoteElements();
		this.unknownRuleVisibility = new VisibilityElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.cooperateproject.uml.xtext.clazz.UmlDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//ClassDiagram:
	//	{ClassDiagram} "@startclass" elements+=Element* "@endclass";
	public ClassDiagramElements getClassDiagramAccess() {
		return pClassDiagram;
	}
	
	public ParserRule getClassDiagramRule() {
		return getClassDiagramAccess().getRule();
	}

	//Element:
	//	ClassDef | Class | DataType | Connector;
	public ElementElements getElementAccess() {
		return pElement;
	}
	
	public ParserRule getElementRule() {
		return getElementAccess().getRule();
	}

	//DataType:
	//	"datatype" name=ID;
	public DataTypeElements getDataTypeAccess() {
		return pDataType;
	}
	
	public ParserRule getDataTypeRule() {
		return getDataTypeAccess().getRule();
	}

	//Type:
	//	DataType | ClassName;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//ClassDef:
	//	("class" | "interface") "{" classes+=ClassName ("," classes+=ClassName)* "}";
	public ClassDefElements getClassDefAccess() {
		return pClassDef;
	}
	
	public ParserRule getClassDefRule() {
		return getClassDefAccess().getRule();
	}

	//ClassName:
	//	Name;
	public ClassNameElements getClassNameAccess() {
		return pClassName;
	}
	
	public ParserRule getClassNameRule() {
		return getClassNameAccess().getRule();
	}

	//Name:
	//	name=ID | longname=(STRING | ID) " as " name=ID;
	public NameElements getNameAccess() {
		return pName;
	}
	
	public ParserRule getNameRule() {
		return getNameAccess().getRule();
	}

	//Class:
	//	"abstract"? type=[ClassName] inheritance=Inheritance? "{" members+=Member* "}";
	public ClassElements getClassAccess() {
		return pClass;
	}
	
	public ParserRule getClassRule() {
		return getClassAccess().getRule();
	}

	//Inheritance:
	//	"extends" type=[ClassName] | "implements" type=[ClassName];
	public InheritanceElements getInheritanceAccess() {
		return pInheritance;
	}
	
	public ParserRule getInheritanceRule() {
		return getInheritanceAccess().getRule();
	}

	//Member:
	//	Attribute | Methode;
	public MemberElements getMemberAccess() {
		return pMember;
	}
	
	public ParserRule getMemberRule() {
		return getMemberAccess().getRule();
	}

	//Attribute:
	//	visibility=Visibility? "static"? "final"? name=ID ":" type=[Type];
	public AttributeElements getAttributeAccess() {
		return pAttribute;
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}

	//Methode:
	//	visibility=Visibility? "abstract"? "static"? "final"? name=ID "(" (attributes+=Attribute (","
	//	attributes+=Attribute)*)* ")" (":" type=[Type])?;
	public MethodeElements getMethodeAccess() {
		return pMethode;
	}
	
	public ParserRule getMethodeRule() {
		return getMethodeAccess().getRule();
	}

	//Connector:
	//	Generalization | Association;
	public ConnectorElements getConnectorAccess() {
		return pConnector;
	}
	
	public ParserRule getConnectorRule() {
		return getConnectorAccess().getRule();
	}

	//Generalization:
	//	left=AssociationEnd "isa" right=AssociationEnd;
	public GeneralizationElements getGeneralizationAccess() {
		return pGeneralization;
	}
	
	public ParserRule getGeneralizationRule() {
		return getGeneralizationAccess().getRule();
	}

	//Association:
	//	left=AssociationEnd "-" (right=AssociationEnd cardinality=ConnectorCardinalitiy? note=Note? | note=Note);
	public AssociationElements getAssociationAccess() {
		return pAssociation;
	}
	
	public ParserRule getAssociationRule() {
		return getAssociationAccess().getRule();
	}

	//AssociationEnd:
	//	type=[ClassName];
	public AssociationEndElements getAssociationEndAccess() {
		return pAssociationEnd;
	}
	
	public ParserRule getAssociationEndRule() {
		return getAssociationEndAccess().getRule();
	}

	//ConnectorLabel:
	//	name=ID;
	public ConnectorLabelElements getConnectorLabelAccess() {
		return pConnectorLabel;
	}
	
	public ParserRule getConnectorLabelRule() {
		return getConnectorLabelAccess().getRule();
	}

	//ConnectorCardinalitiy:
	//	{ConnectorCardinalitiy} "[" left=Cardinality? ("|" middle=Cardinality?)? ("|" right=ConnectorLabel? ("<" | ">")?)?
	//	"]";
	public ConnectorCardinalitiyElements getConnectorCardinalitiyAccess() {
		return pConnectorCardinalitiy;
	}
	
	public ParserRule getConnectorCardinalitiyRule() {
		return getConnectorCardinalitiyAccess().getRule();
	}

	//Cardinality:
	//	"*" | INT ".." ("*" | INT);
	public CardinalityElements getCardinalityAccess() {
		return pCardinality;
	}
	
	public ParserRule getCardinalityRule() {
		return getCardinalityAccess().getRule();
	}

	//Note:
	//	"note[" STRING "]";
	public NoteElements getNoteAccess() {
		return pNote;
	}
	
	public ParserRule getNoteRule() {
		return getNoteAccess().getRule();
	}

	//enum Visibility:
	//	PROTECTED="#" | PRIVATE="-" | DEFAULT="~" | PUBLIC="+";
	public VisibilityElements getVisibilityAccess() {
		return unknownRuleVisibility;
	}
	
	public EnumRule getVisibilityRule() {
		return getVisibilityAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
