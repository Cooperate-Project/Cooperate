/*
 * generated by Xtext
 */
package de.cooperateproject.uml.xtext.clazz.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import de.cooperateproject.uml.xtext.clazz.services.UmlDslGrammarAccess;

public class UmlDslParser extends AbstractContentAssistParser {
	
	@Inject
	private UmlDslGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected de.cooperateproject.uml.xtext.clazz.ui.contentassist.antlr.internal.InternalUmlDslParser createParser() {
		de.cooperateproject.uml.xtext.clazz.ui.contentassist.antlr.internal.InternalUmlDslParser result = new de.cooperateproject.uml.xtext.clazz.ui.contentassist.antlr.internal.InternalUmlDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getElementAccess().getAlternatives(), "rule__Element__Alternatives");
					put(grammarAccess.getTypeAccess().getAlternatives(), "rule__Type__Alternatives");
					put(grammarAccess.getClassDefAccess().getAlternatives_0(), "rule__ClassDef__Alternatives_0");
					put(grammarAccess.getNameAccess().getAlternatives(), "rule__Name__Alternatives");
					put(grammarAccess.getNameAccess().getLongnameAlternatives_1_0_0(), "rule__Name__LongnameAlternatives_1_0_0");
					put(grammarAccess.getInheritanceAccess().getAlternatives(), "rule__Inheritance__Alternatives");
					put(grammarAccess.getMemberAccess().getAlternatives(), "rule__Member__Alternatives");
					put(grammarAccess.getConnectorAccess().getAlternatives(), "rule__Connector__Alternatives");
					put(grammarAccess.getConnectorCardinalitiyAccess().getAlternatives_4_2(), "rule__ConnectorCardinalitiy__Alternatives_4_2");
					put(grammarAccess.getCardinalityAccess().getAlternatives(), "rule__Cardinality__Alternatives");
					put(grammarAccess.getCardinalityAccess().getAlternatives_1_2(), "rule__Cardinality__Alternatives_1_2");
					put(grammarAccess.getClassDiagramAccess().getGroup(), "rule__ClassDiagram__Group__0");
					put(grammarAccess.getDataTypeAccess().getGroup(), "rule__DataType__Group__0");
					put(grammarAccess.getClassDefAccess().getGroup(), "rule__ClassDef__Group__0");
					put(grammarAccess.getClassDefAccess().getGroup_3(), "rule__ClassDef__Group_3__0");
					put(grammarAccess.getNameAccess().getGroup_1(), "rule__Name__Group_1__0");
					put(grammarAccess.getClassAccess().getGroup(), "rule__Class__Group__0");
					put(grammarAccess.getInheritanceAccess().getGroup_0(), "rule__Inheritance__Group_0__0");
					put(grammarAccess.getInheritanceAccess().getGroup_1(), "rule__Inheritance__Group_1__0");
					put(grammarAccess.getAttributeAccess().getGroup(), "rule__Attribute__Group__0");
					put(grammarAccess.getMethodeAccess().getGroup(), "rule__Methode__Group__0");
					put(grammarAccess.getMethodeAccess().getGroup_5(), "rule__Methode__Group_5__0");
					put(grammarAccess.getMethodeAccess().getGroup_5_1(), "rule__Methode__Group_5_1__0");
					put(grammarAccess.getMethodeAccess().getGroup_7(), "rule__Methode__Group_7__0");
					put(grammarAccess.getGeneralizationAccess().getGroup(), "rule__Generalization__Group__0");
					put(grammarAccess.getAssociationAccess().getGroup(), "rule__Association__Group__0");
					put(grammarAccess.getConnectorCardinalitiyAccess().getGroup(), "rule__ConnectorCardinalitiy__Group__0");
					put(grammarAccess.getConnectorCardinalitiyAccess().getGroup_3(), "rule__ConnectorCardinalitiy__Group_3__0");
					put(grammarAccess.getConnectorCardinalitiyAccess().getGroup_4(), "rule__ConnectorCardinalitiy__Group_4__0");
					put(grammarAccess.getCardinalityAccess().getGroup_1(), "rule__Cardinality__Group_1__0");
					put(grammarAccess.getClassDiagramAccess().getElementsAssignment_2(), "rule__ClassDiagram__ElementsAssignment_2");
					put(grammarAccess.getDataTypeAccess().getNameAssignment_1(), "rule__DataType__NameAssignment_1");
					put(grammarAccess.getClassDefAccess().getClassesAssignment_2(), "rule__ClassDef__ClassesAssignment_2");
					put(grammarAccess.getClassDefAccess().getClassesAssignment_3_1(), "rule__ClassDef__ClassesAssignment_3_1");
					put(grammarAccess.getNameAccess().getNameAssignment_0(), "rule__Name__NameAssignment_0");
					put(grammarAccess.getNameAccess().getLongnameAssignment_1_0(), "rule__Name__LongnameAssignment_1_0");
					put(grammarAccess.getNameAccess().getNameAssignment_1_2(), "rule__Name__NameAssignment_1_2");
					put(grammarAccess.getClassAccess().getTypeAssignment_1(), "rule__Class__TypeAssignment_1");
					put(grammarAccess.getClassAccess().getInheritanceAssignment_2(), "rule__Class__InheritanceAssignment_2");
					put(grammarAccess.getClassAccess().getMembersAssignment_4(), "rule__Class__MembersAssignment_4");
					put(grammarAccess.getInheritanceAccess().getTypeAssignment_0_1(), "rule__Inheritance__TypeAssignment_0_1");
					put(grammarAccess.getInheritanceAccess().getTypeAssignment_1_1(), "rule__Inheritance__TypeAssignment_1_1");
					put(grammarAccess.getAttributeAccess().getNameAssignment_2(), "rule__Attribute__NameAssignment_2");
					put(grammarAccess.getAttributeAccess().getTypeAssignment_4(), "rule__Attribute__TypeAssignment_4");
					put(grammarAccess.getMethodeAccess().getNameAssignment_3(), "rule__Methode__NameAssignment_3");
					put(grammarAccess.getMethodeAccess().getAttributesAssignment_5_0(), "rule__Methode__AttributesAssignment_5_0");
					put(grammarAccess.getMethodeAccess().getAttributesAssignment_5_1_1(), "rule__Methode__AttributesAssignment_5_1_1");
					put(grammarAccess.getMethodeAccess().getTypeAssignment_7_1(), "rule__Methode__TypeAssignment_7_1");
					put(grammarAccess.getGeneralizationAccess().getLeftAssignment_0(), "rule__Generalization__LeftAssignment_0");
					put(grammarAccess.getGeneralizationAccess().getRightAssignment_2(), "rule__Generalization__RightAssignment_2");
					put(grammarAccess.getAssociationAccess().getLeftAssignment_0(), "rule__Association__LeftAssignment_0");
					put(grammarAccess.getAssociationAccess().getRightAssignment_2(), "rule__Association__RightAssignment_2");
					put(grammarAccess.getAssociationAccess().getCardinalityAssignment_3(), "rule__Association__CardinalityAssignment_3");
					put(grammarAccess.getAssociationEndAccess().getTypeAssignment(), "rule__AssociationEnd__TypeAssignment");
					put(grammarAccess.getConnectorLabelAccess().getNameAssignment(), "rule__ConnectorLabel__NameAssignment");
					put(grammarAccess.getConnectorCardinalitiyAccess().getLeftAssignment_2(), "rule__ConnectorCardinalitiy__LeftAssignment_2");
					put(grammarAccess.getConnectorCardinalitiyAccess().getMiddleAssignment_3_1(), "rule__ConnectorCardinalitiy__MiddleAssignment_3_1");
					put(grammarAccess.getConnectorCardinalitiyAccess().getRightAssignment_4_1(), "rule__ConnectorCardinalitiy__RightAssignment_4_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			de.cooperateproject.uml.xtext.clazz.ui.contentassist.antlr.internal.InternalUmlDslParser typedParser = (de.cooperateproject.uml.xtext.clazz.ui.contentassist.antlr.internal.InternalUmlDslParser) parser;
			typedParser.entryRuleClassDiagram();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public UmlDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(UmlDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
