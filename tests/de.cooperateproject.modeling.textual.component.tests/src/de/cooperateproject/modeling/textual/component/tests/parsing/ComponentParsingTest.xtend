/*
 * generated by Xtext 2.11.0
 */
package de.cooperateproject.modeling.textual.component.tests.parsing

import com.google.inject.Inject
import de.cooperateproject.modeling.textual.component.metamodel.component.ComponentDiagram
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.XtextRunner
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.Assert
import org.junit.Test
import org.junit.runner.RunWith
import de.cooperateproject.modeling.textual.component.metamodel.component.Interface
import de.cooperateproject.modeling.textual.component.tests.AbstractComponentTest
import de.cooperateproject.modeling.textual.component.tests.util.ComponentTestInjectorProvider
import de.cooperateproject.modeling.textual.common.metamodel.textualCommons.Cardinality
import de.cooperateproject.modeling.textual.common.metamodel.textualCommons.Comment
import de.cooperateproject.modeling.textual.common.metamodel.textualCommons.Visibility
import java.util.Collections
import org.apache.commons.io.IOUtils
import org.eclipse.emf.common.util.URI
import org.eclipse.emf.ecore.resource.ResourceSet
import org.eclipse.uml2.uml.AggregationKind
import org.eclipse.uml2.uml.Class
import org.eclipse.uml2.uml.NamedElement
import org.eclipse.uml2.uml.PrimitiveType
import org.eclipse.uml2.uml.Property
import org.eclipse.uml2.uml.VisibilityKind
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.validation.ValidationTestHelper
import org.junit.Test
import static org.junit.Assert.assertEquals
import static org.junit.Assert.assertNotNull
import static org.junit.Assert.assertNull
import static org.junit.Assert.assertTrue
import de.cooperateproject.modeling.textual.component.tests.ComponentInjectorProvider
import de.cooperateproject.modeling.textual.component.metamodel.component.ComponentPackage

@RunWith(XtextRunner)
@InjectWith(ComponentTestInjectorProvider)
class ComponentParsingTest extends AbstractComponentTest{
	@Inject
	ParseHelper<ComponentDiagram> parseHelper
	
	@Inject extension ValidationTestHelper 
	
	override setup() {
		super.setup()
		rs.packageRegistry.put(ComponentPackage.eNS_URI, ComponentPackage.eINSTANCE)
	}
	
	
	
	@Test
	def void loadModel() {
		val result = parseHelper.parse('''
			Hello Xtext!
		''')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
	}
	
		@Test
	def void diagramTitleWithoutSpaceTest() {
		val model = '''
			@start-cpd "SomeName"
			rootPackage RootElement
			@end-cpd
		'''.parse(rs)
		assertNoIssues(model)
	}
		/**
	 * Checks if the aggreagation of the given association is equal to the given aggregation kind.
	 * @param association the given association to check.
	 * @param kind the expected aggregation kind of the association. 
	 */
	private def void checkAggregationKind(org.eclipse.uml2.uml.Association association, AggregationKind kind) {
		var properties = association.members.filter(Property)
		assertNotNull(properties.findFirst[x|x.aggregation == kind])
	}
	
	private static def parse(CharSequence text, ResourceSet rs) {
		val r = rs.createResource(URI.createFileURI("somefile.cpd"))
		val is = IOUtils.toInputStream(text);
		r.load(is, Collections.emptyMap());
		return r.contents.get(0) as ComponentDiagram
	}
	
}
