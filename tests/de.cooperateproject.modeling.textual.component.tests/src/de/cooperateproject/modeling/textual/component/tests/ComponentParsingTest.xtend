/*
 * generated by Xtext 2.11.0
 */
package de.cooperateproject.modeling.textual.component.tests

import com.google.inject.Inject
import de.cooperateproject.modeling.textual.component.metamodel.component.ComponentDiagram
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.XtextRunner
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.Assert
import org.junit.Test
import org.junit.runner.RunWith
import org.eclipse.xtext.testing.validation.ValidationTestHelper
import de.cooperateproject.modeling.textual.component.metamodel.component.ComponentPackage
import org.eclipse.emf.ecore.resource.ResourceSet
import org.eclipse.emf.common.util.URI
import org.apache.commons.io.IOUtils
import java.util.Collections
import de.cooperateproject.modeling.textual.component.tests.scoping.util.ComponentCustomizedInjectorProvider

@RunWith(XtextRunner)
@InjectWith(ComponentCustomizedInjectorProvider.DefaultProvider)
class ComponentParsingTest extends AbstractComponentTest{
	@Inject
	ParseHelper<ComponentDiagram> parseHelper
	
	@Inject ValidationTestHelper validationTestHelper
	
	override setup() {
		super.setup()
		rs.packageRegistry.put(ComponentPackage.eNS_URI, ComponentPackage.eINSTANCE)
		
	}
	
	@Test
	def void emptyDiagramTest() {
		
		val model = '''
			@start-cpd "someDiagram"
			rootPackage RootElement
			@end-cpd
		'''.parse(rs)
		validationTestHelper.assertNoIssues(model)
	}

	@Test
	def void emptyDiagramSpaceInNameTest() {
		
		val model = '''
			@start-cpd "some Diagram"
			rootPackage RootElement
			
			@end-cpd
		'''.parse(rs)
		validationTestHelper.assertNoIssues(model)
	}
	
		@Test
	def void singleInterfaceTest() {
		
		val model = '''
			@start-cpd "someDiagram"
			rootPackage RootElement
			interface iface
			@end-cpd
		'''.parse(rs)
		validationTestHelper.assertNoIssues(model)
	}
	
			@Test
	def void singleComponentTest() {
		
		val model = '''
			@start-cpd "someDiagram"
			rootPackage RootElement
			component "Test Comp" as TestComp { }
			@end-cpd
		'''.parse(rs)
		validationTestHelper.assertNoIssues(model)
	}
	
	
	
	private static def parse(CharSequence text, ResourceSet rs) {
		val r = rs.createResource(URI.createFileURI("testfile.cmp"))
		System.out.println("2"+rs);
		System.out.println(rs.getResources());
		System.out.println("1"+ URI.createFileURI("testmodels/CPDParsingTest.component"));
		val is = IOUtils.toInputStream(text);
				System.out.println(is);
			
		r.load(is, Collections.emptyMap());
		return r.contents.get(0) as ComponentDiagram
	}
}
