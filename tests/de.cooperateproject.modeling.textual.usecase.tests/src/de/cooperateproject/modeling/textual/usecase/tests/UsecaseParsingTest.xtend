/*
 * generated by Xtext 2.11.0
 */
package de.cooperateproject.modeling.textual.usecase.tests

import com.google.inject.Inject
import de.cooperateproject.modeling.textual.usecase.usecase.UseCaseDiagram
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.XtextRunner
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.Assert
import org.junit.Test
import org.junit.runner.RunWith
import org.eclipse.xtext.testing.validation.ValidationTestHelper
import de.cooperateproject.modeling.textual.usecase.usecase.UsecasePackage
import org.eclipse.emf.ecore.resource.ResourceSet
import org.eclipse.emf.common.util.URI
import org.apache.commons.io.IOUtils
import java.util.Collections
import de.cooperateproject.modeling.textual.usecase.tests.scoping.util.UseCaseCustomizedInjectorProvider

@InjectWith(UseCaseCustomizedInjectorProvider.DefaultProvider)
class UsecaseParsingTest extends AbstractUseCaseTest{
	
	@Inject extension ValidationTestHelper
	
	override setup() {
		super.setup()
		rs.packageRegistry.put(UsecasePackage.eNS_URI, UsecasePackage.eINSTANCE)
	}
	
	@Test
	def void emptyDiagram() {
		val model = '''
			@start-uscd "someDiagram"
			rootPackage RootElement
			@end-uscd
		'''.parse(rs)
		assertNoIssues(model)
	}
	
	@Test
	def void defineActorsAndSystems() {
		val model = '''
			@start-uscd "someDiagram"
			rootPackage RootElement
			act Alice
			sys System1
			@end-uscd
		'''.parse(rs)
		assertNoIssues(model)
	}
	
	@Test
	def void defineUseCases() {
		val model = '''
			@start-uscd "someDiagram"
			rootPackage RootElement
			sys System1 {
				uc ConcreteUseCase1
				abstract uc AbstractUseCase1
				uc ConcreteUseCase2
			}
			@end-uscd
		'''.parse(rs)
		assertNoIssues(model)
	}
	
	@Test
	def void defineUseCasesWithExtensionPoints() {
		val model = '''
			@start-uscd "someDiagram"
			rootPackage RootElement
			sys System1 {
				abstract uc AbstractUseCase1 {
					ep ExtensionPoint1
				}
			}
			@end-uscd
		'''.parse(rs)
		assertNoIssues(model)
	}
	
	@Test
	def void testAliasing() {
		val model = '''
			@start-uscd "someDiagram"
			rootPackage RootElement
			act Bob as "Employee of the month"
			sys System1 {
				uc ConcreteUseCase1 as "Concrete and Aliased Usecase 1"
				abstract uc AbstractUseCase1 {
					ep AliasedExtensionPoint1 as "The real functionality"
				}	
			}
			@end-uscd
		'''.parse(rs)
		assertNoIssues(model)
	}
	
	@Test
	def void testAssociations() {
		val model = '''
			@start-uscd "someDiagram"
			rootPackage RootElement
			act Alice
			act Bob as "Employee of the month"
			sys System1 {
				uc ConcreteUseCase1 as "Concrete and Aliased Usecase 1"
				abstract uc AbstractUseCase1 {
					ep ExtensionPoint1
				}
			}
			iac (Alice, ConcreteUseCase1)
			iac (Bob, AbstractUseCase1)
			@end-uscd
		'''.parse(rs)
		assertNoIssues(model)
	}
	
	@Test
	def void testQualifiedNames() {
		val model = '''
			@start-uscd "someDiagram"
			rootPackage RootElement
			act Alice
			act Bob as "Employee of the month"
			sys System1 {
				uc ConcreteUseCase1 as "Concrete and Aliased Usecase 1"
				abstract uc AbstractUseCase1 {
					ep ExtensionPoint1
				}
			}
			iac (RootElement.Alice, System1.ConcreteUseCase1)
			iac (Bob, RootElement.System1.AbstractUseCase1)
			@end-uscd
		'''.parse(rs)
		assertNoIssues(model)
	}
	
	@Test
	def void testIncludesAndExtends() {
		val model = '''
			@start-uscd "someDiagram"
			rootPackage RootElement
			sys System1 {
				uc ConcreteUseCase1 as "Concrete and Aliased Usecase 1"
				uc ConcreteUseCase2
				uc IncludedUseCase1
				uc Extension1ToAbstractUseCase1
				uc Extension2ToAbstractUseCase1
				abstract uc AbstractUseCase1 {
					ep ExtensionPoint1
					ep AliasedExtensionPoint1 as "The real functionality"
				}
				inc (ConcreteUseCase2, IncludedUseCase1)
				ext (Extension1ToAbstractUseCase1, AbstractUseCase1) ep[ExtensionPoint1]
				ext (Extension2ToAbstractUseCase1, AbstractUseCase1) ep[AliasedExtensionPoint1] cond["Sometimes"]
			}
			@end-uscd
		'''.parse(rs)
		assertNoIssues(model)
	}
	
	@Test
	def void testGeneralization() {
		val model = '''
			@start-uscd "someDiagram"
			rootPackage RootElement
			act Bob as "Employee of the month"
			act BobInABadMood
			sys System1 {
				abstract uc AbstractUseCase1
				uc IncludedUseCase1
				uc ConcreteUseCase2
				inc (ConcreteUseCase2, IncludedUseCase1)
				isa (ConcreteUseCase2, AbstractUseCase1)
			}
			iac (Bob, AbstractUseCase1)
			iac (BobInABadMood, ConcreteUseCase2)
			isa (BobInABadMood, Bob)
			@end-uscd
		'''.parse(rs)
		assertNoIssues(model)	
	}
	
	@Test
	def void testActorTypes() {
		var model = '''
		@start-uscd "someDiagram"
		rootPackage RootElement
		act A role[human]
		act B role[machine]
		act C
		@end-uscd
		'''.parse(rs)
		assertNoIssues(model)	
	}
	
	@Test
	def void testNotes() {
		var model = '''
		@start-uscd "someDiagram"
		rootPackage RootElement
		act A note "test1"
		sys B {
			note "test2"
			uc C note "test3"
		}
		sys D note "test4"
		@end-uscd
		'''.parse(rs)
		assertNoIssues(model)
	}
	
	private static def parse(CharSequence text, ResourceSet rs) {
		val r = rs.createResource(URI.createFileURI("testmodels/UCParsingTest.uc"))
		val is = IOUtils.toInputStream(text);
		r.load(is, Collections.emptyMap());
		return r.contents.get(0) as UseCaseDiagram
	}
}
