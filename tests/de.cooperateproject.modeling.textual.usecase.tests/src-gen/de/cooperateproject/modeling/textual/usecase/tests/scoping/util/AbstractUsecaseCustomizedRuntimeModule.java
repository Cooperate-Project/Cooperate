/*
 * generated by Xtext 2.12.0
 */
package de.cooperateproject.modeling.textual.usecase.tests.scoping.util;

import de.cooperateproject.modeling.textual.usecase.UsecaseRuntimeModule;
import de.cooperateproject.modeling.textual.usecase.services.UsecaseTransientStatusProvider;
import de.cooperateproject.modeling.textual.usecase.tests.UsecaseInjectorProvider;

import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;

import org.eclipse.emf.ecore.EPackage;

import de.cooperateproject.modeling.textual.common.metamodel.textualCommons.TextualCommonsPackage;
import de.cooperateproject.modeling.textual.common.services.TextualCommonsTransientStatusProvider;
import de.cooperateproject.modeling.textual.xtext.runtime.derivedstate.initializer.IAtomicDerivedStateProcessorRegistry;
import de.cooperateproject.modeling.textual.xtext.runtime.issues.automatedfixing.IAutomatedIssueResolutionFactory;
import de.cooperateproject.modeling.textual.xtext.runtime.issues.automatedfixing.IAutomatedIssueResolutionFactoryRegistry;
import de.cooperateproject.modeling.textual.xtext.runtime.scoping.IUMLUriFinder;
import de.cooperateproject.modeling.textual.xtext.runtime.service.transientstatus.DelegatingTransientStatusProvider;
import de.cooperateproject.modeling.textual.xtext.runtime.service.transientstatus.ITransientStatusProvider;

public abstract class AbstractUsecaseCustomizedRuntimeModule extends UsecaseRuntimeModule {

    protected static class DummyFactoryRegistry implements IAutomatedIssueResolutionFactoryRegistry {
        @Override
        public Collection<EPackage> coveredPackages() {
            return Arrays.asList(de.cooperateproject.modeling.textual.usecase.usecase.UsecasePackage.eINSTANCE, TextualCommonsPackage.eINSTANCE);
        }

        @Override
        public Collection<String> getAvailableIssueCodes() {
            return Collections.emptyList();
        }

        @Override
        public Collection<IAutomatedIssueResolutionFactory> findFactories(Collection<EPackage> ePackages,
                String issueId) {
            return Collections.emptyList();
        }

        @Override
        public Collection<IAutomatedIssueResolutionFactory> findFactories(Collection<EPackage> ePackages) {
            return Collections.emptyList();
        }

    }

    private static class StaticallyBoundTransientStatusProvider extends DelegatingTransientStatusProvider {
        public StaticallyBoundTransientStatusProvider() {
            super(Arrays.asList(new UsecaseTransientStatusProvider(), new TextualCommonsTransientStatusProvider()));
        }
    }

    @Override
    public ClassLoader bindClassLoaderToInstance() {
        return UsecaseInjectorProvider.class.getClassLoader();
    }

    @Override
    public Class<? extends IUMLUriFinder> bindIUMLUriFinder() {
        return SameNameUMLURIFinder.class;
    }

    @Override
    public Class<? extends IAutomatedIssueResolutionFactoryRegistry> bindIAutomatedIssueResolutionFactoryRegistry() {
        return DummyFactoryRegistry.class;
    }

    @Override
    public abstract Class<? extends IAtomicDerivedStateProcessorRegistry> bindIAtomicDerivedStateProcessorRegistry();

    @Override
    public Class<? extends ITransientStatusProvider> bindITransientStatusProvider() {
        return StaticallyBoundTransientStatusProvider.class;
    }

}
