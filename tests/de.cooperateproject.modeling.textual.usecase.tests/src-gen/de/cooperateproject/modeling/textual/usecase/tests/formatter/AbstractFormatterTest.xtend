/*
 * generated by Xtext 2.12.0
 */
package de.cooperateproject.modeling.textual.usecase.tests.formatter

import de.cooperateproject.modeling.textual.usecase.tests.AbstractUsecaseTest
import de.cooperateproject.modeling.textual.usecase.tests.scoping.util.UsecaseCustomizedInjectorProvider

import com.google.common.base.Function
import com.google.common.base.Strings
import com.google.inject.Inject
import java.io.File
import org.apache.commons.io.FileUtils
import org.apache.commons.io.IOUtils
import org.eclipse.emf.common.util.URI
import org.eclipse.xtext.resource.SaveOptions
import org.eclipse.xtext.serializer.ISerializer
import org.eclipse.xtext.testing.InjectWith
import org.junit.Test
	
import static org.junit.Assert.*
	
@InjectWith(UsecaseCustomizedInjectorProvider.DefaultProvider)
abstract class AbstractFormatterTest extends AbstractUsecaseTest {

	static val TEST_FOLDER = "testmodels/formatting/"

	@Inject extension ISerializer

	protected def test(String modelName) {
		val path = modelName.getRelativePath
		val expected = path.readText
		val actual = path.readModel([uglifyMinimalSpaces]).serialize(SaveOptions.newBuilder.format.options)
		assertEqualsNormalized(expected, actual)
		val actual2 = path.readModel([uglifyManySpaces]).serialize(SaveOptions.newBuilder.format.options)
		assertEqualsNormalized(expected, actual2)
	}	

	private def readModel(String path, Function<String, String> uglifier) {
		val uri = URI.createURI(path)
		var r = rs.getResource(uri, false)
		if (r !== null) {
			r.unload
			rs.resources.remove(r)
		}
		r = rs.createResource(uri)
		val is = IOUtils.toInputStream(uglifier.apply(path.readText))
		try {
			r.load(is, SaveOptions.newBuilder.options.toOptionsMap);
			return r.contents.get(0)			
		} finally {
			IOUtils.closeQuietly(is);
		}
	}

	private static def getRelativePath(String modelName) {
		return TEST_FOLDER + modelName
	}

	private static def assertEqualsNormalized(String expected, String actual) {
		val normalizedActual = actual.normalize
		val normalizedExpected = expected.normalize
		assertEquals(normalizedExpected, normalizedActual)
	}

	private static def normalize(String text) {
		return text.replaceAll("\\r\\n", "\n").replaceAll("\\n", String.format("%n"))
	}

	private static def readText(String path) {
		return FileUtils.readFileToString(new File(path));
	}

	private static def uglifyMinimalSpaces(String text) {
		return text.replaceAll("\\s+(?=([^\"]*\"[^\"]*\")*[^\"]*$)", " ")
	}
	
	private static def uglifyManySpaces(String text) {
		return text.replaceAll("\\s+(?=([^\"]*\"[^\"]*\")*[^\"]*$)", Strings.repeat(" ", 10))
	}
}	
	
