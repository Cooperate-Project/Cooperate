/*
 * generated by Xtext 2.9.0
 */
package de.cooperateproject.modeling.textual.cls.tests

import static org.junit.Assert.assertEquals
import static org.junit.Assert.assertTrue
import static org.junit.Assert.assertNotNull
import static org.junit.Assert.assertNull

import com.google.inject.Inject
import de.cooperateproject.modeling.textual.cls.cls.ClassDiagram
import de.cooperateproject.modeling.textual.cls.cls.Class
import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl
import org.eclipse.xtext.junit4.InjectWith
import org.eclipse.xtext.junit4.XtextRunner
import org.eclipse.xtext.junit4.util.ParseHelper
import org.junit.AfterClass

import org.junit.BeforeClass
import org.junit.Test
import org.junit.runner.RunWith
import org.eclipse.uml2.uml.resources.util.UMLResourcesUtil
import org.eclipse.emf.ecore.resource.ResourceSet
import de.cooperateproject.modeling.textual.cls.tests.util.ClsTestInjectorProvider
import de.cooperateproject.modeling.textual.cls.cls.Interface
import de.cooperateproject.modeling.textual.cls.cls.Attribute
import de.cooperateproject.modeling.textual.cls.cls.Visibility
import org.eclipse.uml2.uml.PrimitiveType
import org.eclipse.uml2.uml.VisibilityKind
import org.eclipse.uml2.uml.Property
import de.cooperateproject.modeling.textual.cls.cls.Method
import de.cooperateproject.modeling.textual.cls.cls.Generalization
import de.cooperateproject.modeling.textual.cls.cls.Implementation
import de.cooperateproject.modeling.textual.cls.cls.Association
import de.cooperateproject.modeling.textual.cls.cls.CommentLink

@RunWith(XtextRunner)
@InjectWith(ClsTestInjectorProvider.DefaultProvider)
class ClsParsingTest {
	@Inject extension ParseHelper<ClassDiagram>

	private static ResourceSet rs;

	@BeforeClass
	static def void setup() {
		rs = new ResourceSetImpl
		UMLResourcesUtil.init(rs);
	}

	@AfterClass
	static def void tearDown() {
		if (rs != null) {
			rs.resources.forEach[r|r.unload]
		}
		rs = null
	}

	@Test
	def void classDefTest() {
		'''
			@start-cls "SomeName"
			rootPackage RootElement
			class Alice
			@end-cls
		'''.parse(rs) => [
			val clsClass = allTransitiveClassifiers.findFirst[x|x.name.equals("Alice")]
			assertNotNull(clsClass)
			assertTrue(clsClass instanceof Class)

			val refClass = clsClass.referencedElement
			assertTrue(refClass instanceof org.eclipse.uml2.uml.Class)
			assertEquals("Alice", refClass.name)
		]
	}

	@Test
	def void interfaceDefTest() {
		'''
			@start-cls "SomeName"
			rootPackage RootElement
			interface IAlice {}
			@end-cls
		'''.parse(rs) => [
			val clsInterface = allTransitiveClassifiers.findFirst[x|x.name.equals("IAlice")]
			assertNotNull(clsInterface)
			assertTrue(clsInterface instanceof Interface)

			val refInterface = clsInterface.referencedElement
			assertTrue(refInterface instanceof org.eclipse.uml2.uml.Interface)
			assertEquals("IAlice", refInterface.name)
		]
	}

	@Test
	def void aliasTest() {
		'''
			@start-cls "SomeName"
			rootPackage RootElement
			class "Alias Alice" as AA {
			}
			@end-cls
		'''.parse(rs) => [
			val clsClass = allTransitiveClassifiers.findFirst[x|x.name.equals("Alias Alice")]
			assertNotNull(clsClass)
			assertTrue(clsClass instanceof Class)
			assertEquals("AA", clsClass.alias)

			val refClass = clsClass.referencedElement
			assertTrue(refClass instanceof org.eclipse.uml2.uml.Class)
			assertEquals("Alias Alice", refClass.name)
			assertEquals("AA", refClass.nameExpression.name)
		]
	}

	@Test
	def void abstractClassWithoutMembersTest() {
		'''
			@start-cls "SomeName"
			rootPackage RootElement
			abstract class AbstractAlice {
			}
			@end-cls
		'''.parse(rs) => [
			val clsClass = allTransitiveClassifiers.findFirst[x|x.name.equals("AbstractAlice")]
			assertNotNull(clsClass)
			assertTrue(clsClass instanceof Class)
			assertTrue((clsClass as Class).abstract)

			val refClass = clsClass.referencedElement
			assertTrue(refClass instanceof org.eclipse.uml2.uml.Class)
			assertEquals("AbstractAlice", refClass.name)
			assertTrue((refClass as org.eclipse.uml2.uml.Class).abstract)
		]
	}

	@Test
	def void classWithAttributesTest() {
		'''
			@start-cls "SomeName"
			rootPackage RootElement
			class Alice {
				name : string
				age : int
			}
			@end-cls
		'''.parse(rs) => [
			val clsClass = allTransitiveClassifiers.findFirst[x|x.name.equals("Alice")]
			assertNotNull(clsClass)
			assertTrue(clsClass instanceof Class)

			val clsMembers = clsClass.members
			assertEquals(2, clsMembers.size)

			val nameMember = clsMembers.findFirst[x|x.name.equals("name")] as Attribute
			val ageMember = clsMembers.findFirst[x|x.name.equals("age")] as Attribute

			assertNotNull(nameMember)
			assertTrue(nameMember.type instanceof PrimitiveType)
			assertEquals("EString", nameMember.type.name)

			assertNotNull(ageMember)
			assertTrue(ageMember.type instanceof PrimitiveType)
			assertEquals("EInt", ageMember.type.name)
		]
	}

	@Test
	def void classWithMethodesTest() {
		'''
			@start-cls "SomeName"
			rootPackage RootElement
			class Alice {
				getName() : string
				setName(name : string)
				calculateAge(date : int) : int
			}
			@end-cls
		'''.parse(rs) => [
			val clsClass = allTransitiveClassifiers.findFirst[x|x.name.equals("Alice")]
			assertNotNull(clsClass)
			assertTrue(clsClass instanceof Class)

			val clsMembers = clsClass.members
			assertEquals(3, clsMembers.size)

			val getNameMember = clsMembers.findFirst[x|x.name.equals("getName")] as Method
			val setNameMember = clsMembers.findFirst[x|x.name.equals("setName")] as Method
			val calculateAgeMember = clsMembers.findFirst[x|x.name.equals("calculateAge")] as Method

			assertNotNull(getNameMember)
			assertEquals(0, getNameMember.parameters.size)
			assertTrue(getNameMember.type instanceof PrimitiveType)
			assertEquals("EString", getNameMember.type.name)

			assertNotNull(setNameMember)
			val setNameMemberParameter = setNameMember.parameters
			assertNull(setNameMember.type)
			assertEquals(1, setNameMemberParameter.size)
			assertEquals("name", setNameMemberParameter.last.name)
			assertTrue(setNameMemberParameter.last.type instanceof PrimitiveType)
			assertEquals("EString", setNameMemberParameter.last.type.name)

			assertNotNull(calculateAgeMember)
			assertTrue(calculateAgeMember.type instanceof PrimitiveType)
			assertEquals("EInt", calculateAgeMember.type.name)

			val calculateAgeMemberParameter = calculateAgeMember.parameters
			assertEquals(1, calculateAgeMemberParameter.size)
			assertEquals("date", calculateAgeMemberParameter.last.name)
			assertTrue(calculateAgeMemberParameter.last.type instanceof PrimitiveType)
			assertEquals("EInt", calculateAgeMemberParameter.last.type.name)
		]
	}

	@Test
	def void visibiliesTest() {
		'''
			@start-cls "SomeName"
			rootPackage RootElement
			class Alice {
				+name : string
				-age : int
				#getName() : string
				#setName(name : string)
				~calculateAge(date : int) : int
			}
			@end-cls
		'''.parse(rs) => [
			val clsClass = allTransitiveClassifiers.findFirst[x|x.name.equals("Alice")]
			assertNotNull(clsClass)
			assertTrue(clsClass instanceof Class)

			val clsMembers = clsClass.members
			assertEquals(5, clsMembers.size)

			val nameMember = clsMembers.findFirst[x|x.name.equals("name")] as Attribute
			val ageMember = clsMembers.findFirst[x|x.name.equals("age")] as Attribute

			val getNameMember = clsMembers.findFirst[x|x.name.equals("getName")] as Method
			val setNameMember = clsMembers.findFirst[x|x.name.equals("setName")] as Method
			val calculateAgeMember = clsMembers.findFirst[x|x.name.equals("calculateAge")] as Method

			assertNotNull(nameMember)
			assertEquals(Visibility.PUBLIC, nameMember.visibility)
			assertEquals(VisibilityKind.PUBLIC_LITERAL, nameMember.referencedElement.visibility)

			assertNotNull(ageMember)
			assertEquals(Visibility.PRIVATE, ageMember.visibility)
			assertEquals(VisibilityKind.PRIVATE_LITERAL, ageMember.referencedElement.visibility)

			assertNotNull(getNameMember)
			assertEquals(Visibility.PROTECTED, getNameMember.visibility)
			assertEquals(VisibilityKind.PROTECTED_LITERAL, getNameMember.referencedElement.visibility)

			assertNotNull(setNameMember)
			assertEquals(Visibility.PROTECTED, setNameMember.visibility)
			assertEquals(VisibilityKind.PROTECTED_LITERAL, setNameMember.referencedElement.visibility)

			assertNotNull(calculateAgeMember)
			assertEquals(Visibility.PACKAGE, calculateAgeMember.visibility)
			assertEquals(VisibilityKind.PACKAGE_LITERAL, calculateAgeMember.referencedElement.visibility)
		]
	}

	@Test
	def void classWithStaticAndFinalAttributesTest() {
		'''
			@start-cls "SomeName"
			rootPackage RootElement
			class Alice {
				name : string
				static age : int
				final ALICE_ID : string
				
				static getName() : string
				setName(name : string)
				abstract calculateAge(date : int) : int
			}
			@end-cls
		'''.parse(rs) => [
			val clsClass = allTransitiveClassifiers.findFirst[x|x.name.equals("Alice")]
			assertNotNull(clsClass)
			assertTrue(clsClass instanceof Class)

			val clsMembers = clsClass.members
			assertEquals(6, clsMembers.size)

			val nameMember = clsMembers.findFirst[x|x.name.equals("name")] as Attribute
			val ageMember = clsMembers.findFirst[x|x.name.equals("age")] as Attribute
			val idMember = clsMembers.findFirst[x|x.name.equals("ALICE_ID")] as Attribute

			val getNameMember = clsMembers.findFirst[x|x.name.equals("getName")] as Method
			val setNameMember = clsMembers.findFirst[x|x.name.equals("setName")] as Method
			val calculateAgeMember = clsMembers.findFirst[x|x.name.equals("calculateAge")] as Method

			assertNotNull(nameMember)
			assertEquals(false, nameMember.isStatic)
			assertEquals(false, nameMember.isFinal)
			assertEquals(false, nameMember.referencedElement.isStatic)
			// TODO UML final
			assertNotNull(ageMember)
			assertEquals(true, ageMember.isStatic)
			assertEquals(false, ageMember.isFinal)
			assertEquals(true, ageMember.referencedElement.isStatic)
			// TODO UML final		
			assertNotNull(idMember)
			assertEquals(false, idMember.isStatic)
			assertEquals(true, idMember.isFinal)
			assertEquals(false, idMember.referencedElement.isStatic)
			// TODO UML final
			assertNotNull(getNameMember)
			assertEquals(true, getNameMember.isStatic)
			assertEquals(false, getNameMember.isFinal)
			assertEquals(false, getNameMember.isAbstract)
			assertEquals(true, getNameMember.referencedElement.isStatic)
			assertEquals(false, getNameMember.referencedElement.isAbstract)
			// TODO UML final
			assertNotNull(setNameMember)
			assertEquals(false, setNameMember.isStatic)
			assertEquals(false, setNameMember.isFinal)
			assertEquals(false, setNameMember.isAbstract)
			assertEquals(false, setNameMember.referencedElement.isStatic)
			assertEquals(false, setNameMember.referencedElement.isAbstract)
			// TODO UML final
			assertNotNull(calculateAgeMember)
			assertEquals(false, calculateAgeMember.isStatic)
			assertEquals(false, calculateAgeMember.isFinal)
			assertEquals(true, calculateAgeMember.isAbstract)
			assertEquals(false, calculateAgeMember.referencedElement.isStatic)
			assertEquals(true, calculateAgeMember.referencedElement.isAbstract)
		// TODO UML final	
		]
	}

	@Test
	def void datatypeTest() {
		'''
			@start-cls "SomeName"
			rootPackage RootElement
			class AliceAllTypes {
				stringMember : string
				intMember : int 
				doubleMember : double
				booleanMember : boolean
				charMember : char
				byteMember : byte
				shortMember : short
				longMember : long
				floatMember : float
			}
			@end-cls
		'''.parse(rs) => [
			val clsClass = allTransitiveClassifiers.findFirst[x|x.name.equals("AliceAllTypes")]
			assertNotNull(clsClass)
			assertTrue(clsClass instanceof Class)

			val clsMembers = clsClass.members
			assertEquals(9, clsMembers.size)

			val stringMember = clsMembers.findFirst[x|x.name.equals("stringMember")] as Attribute
			val intMember = clsMembers.findFirst[x|x.name.equals("intMember")] as Attribute
			val doubleMember = clsMembers.findFirst[x|x.name.equals("doubleMember")] as Attribute
			val booleanMember = clsMembers.findFirst[x|x.name.equals("booleanMember")] as Attribute
			val charMember = clsMembers.findFirst[x|x.name.equals("charMember")] as Attribute
			val byteMember = clsMembers.findFirst[x|x.name.equals("byteMember")] as Attribute
			val shortMember = clsMembers.findFirst[x|x.name.equals("shortMember")] as Attribute
			val longMember = clsMembers.findFirst[x|x.name.equals("longMember")] as Attribute
			val floatMember = clsMembers.findFirst[x|x.name.equals("floatMember")] as Attribute

			assertNotNull(stringMember)
			assertTrue(stringMember.type instanceof PrimitiveType)
			assertEquals("EString", stringMember.type.name)

			assertNotNull(intMember)
			assertTrue(intMember.type instanceof PrimitiveType)
			assertEquals("EInt", intMember.type.name)

			assertNotNull(doubleMember)
			assertTrue(doubleMember.type instanceof PrimitiveType)
			assertEquals("EDouble", doubleMember.type.name)

			assertNotNull(booleanMember)
			assertTrue(booleanMember.type instanceof PrimitiveType)
			assertEquals("EBoolean", booleanMember.type.name)

			assertNotNull(charMember)
			assertTrue(charMember.type instanceof PrimitiveType)
			assertEquals("EChar", charMember.type.name)

			assertNotNull(byteMember)
			assertTrue(byteMember.type instanceof PrimitiveType)
			assertEquals("EByte", byteMember.type.name)

			assertNotNull(shortMember)
			assertTrue(shortMember.type instanceof PrimitiveType)
			assertEquals("EShort", shortMember.type.name)

			assertNotNull(longMember)
			assertTrue(longMember.type instanceof PrimitiveType)
			assertEquals("ELong", longMember.type.name)

			assertNotNull(floatMember)
			assertTrue(floatMember.type instanceof PrimitiveType)
			assertEquals("EFloat", floatMember.type.name)

		]
	}

	@Test
	def void classTypeTest() {
		'''
			@start-cls "SomeName"
			rootPackage RootElement
			class Alice
			class Bob {
				alice : Alice
			}
			@end-cls
		'''.parse(rs) => [
			val aliceClass = allTransitiveClassifiers.findFirst[x|x.name.equals("Alice")]
			val bobClass = allTransitiveClassifiers.findFirst[x|x.name.equals("Bob")]
			assertNotNull(aliceClass)
			assertNotNull(bobClass)
			assertTrue(aliceClass instanceof Class)
			assertTrue(bobClass instanceof Class)

			val bobMembers = bobClass.members
			assertEquals(1, bobMembers.size)
			val bobsMember = bobMembers.findFirst[x|x.name.equals("alice")] as Attribute

			assertNotNull(bobsMember)
			assertTrue(bobsMember.type instanceof org.eclipse.uml2.uml.Class)
			assertEquals("Alice", (bobsMember.type as org.eclipse.uml2.uml.Class).name)
		]
	}

	@Test
	def void classGeneralizationTest() {
		'''
			@start-cls "SomeName"
			rootPackage RootElement
			class Alice
			class Bob
			asc Bob isa Alice
			@end-cls
		'''.parse(rs) => [
			val aliceClass = allTransitiveClassifiers.findFirst[x|x.name.equals("Alice")]
			val bobClass = allTransitiveClassifiers.findFirst[x|x.name.equals("Bob")]
			val generalization = allTransitiveConnectors.findFirst[x|x instanceof Generalization] as Generalization

			assertNotNull(aliceClass)
			assertNotNull(bobClass)
			assertNotNull(generalization)

			assertTrue(aliceClass instanceof Class)
			assertTrue(bobClass instanceof Class)

			assertEquals("Bob", generalization.left.name)
			assertEquals("Alice", generalization.right.name)

			assertEquals("Alice", generalization.referencedElement.general.name)

		]
	}

	@Test
	def void classImplementationTest() {
		'''
			@start-cls "SomeName"
			rootPackage RootElement
			class Bob
			interface IBob
			asc Bob impl IBob
			@end-cls
		'''.parse(rs) => [
			val bobClass = allTransitiveClassifiers.findFirst[x|x.name.equals("Bob")]
			val bobInterface = allTransitiveClassifiers.findFirst[x|x.name.equals("IBob")]
			val interface = allTransitiveConnectors.findFirst[x|x instanceof Implementation] as Implementation

			assertNotNull(bobClass)
			assertNotNull(bobInterface)
			assertNotNull(interface)

			assertTrue(bobClass instanceof Class)
			assertTrue(bobInterface instanceof Interface)

			assertEquals("Bob", interface.left.name)
			assertEquals("IBob", interface.right.name)

			assertEquals("IBob", interface.referencedElement.contract.name)

		]

	}

	@Test
	def void simpleClassAssociationTest() {
		'''
			@start-cls "SomeName"
			rootPackage RootElement
			class Alice
			class Bob
			asc Alice association Bob
			@end-cls
		'''.parse(rs) => [
			val aliceClass = allTransitiveClassifiers.findFirst[x|x.name.equals("Alice")]
			val bobClass = allTransitiveClassifiers.findFirst[x|x.name.equals("Bob")]
			val association = allTransitiveConnectors.findFirst[x|x instanceof Association] as Association

			assertNotNull(aliceClass)
			assertNotNull(bobClass)
			assertNotNull(association)

			assertTrue(aliceClass instanceof Class)
			assertTrue(bobClass instanceof Class)

			assertEquals("Alice", association.left.name)
			assertEquals("Bob", association.right.name)

			var aliceAscEnd = association.referencedElement.ownedEnds.findFirst[x|x.type.name.equals("Alice")]
			assertNotNull(aliceAscEnd)

			var aliceProperties = aliceClass.referencedElement.members.filter(Property)
			var bobAscEnd = aliceProperties.findFirst [x|
				x.association != null && x.type instanceof org.eclipse.uml2.uml.Class
			]
			assertEquals("Bob", bobAscEnd.type.name)

		]

	}

	@Test
	def void classWithNoteTest() {
		'''
			@start-cls "SomeName"
			rootPackage RootElement
			class Alice
			Alice note "this is a note"
			@end-cls
		'''.parse(rs) => [
			val aliceClass = allTransitiveClassifiers.findFirst[x|x.name.equals("Alice")]
			val comment = allTransitiveConnectors.findFirst[x|x instanceof CommentLink] as CommentLink

			assertNotNull(aliceClass)
			assertNotNull(comment)

			assertTrue(aliceClass instanceof Class)

			assertEquals("Alice", comment.left.name)
			assertEquals("this is a note", comment.comment.body)
		]
		
	}

 @Test
  def void ClassAsscociationWithNoteTest() {
  	'''
  		@start-cls "SomeName"
  		rootPackage RootElement
  		class Alice
  		class Bob
  		asc Alice association Bob note "this is another note"
  		@end-cls
  	'''.parse(rs) => [
			val aliceClass = allTransitiveClassifiers.findFirst[x|x.name.equals("Alice")]
			val bobClass = allTransitiveClassifiers.findFirst[x|x.name.equals("Bob")]
			val association = allTransitiveConnectors.findFirst[x|x instanceof Association] as Association

			assertNotNull(aliceClass)
			assertNotNull(bobClass)
			assertNotNull(association)

			assertTrue(aliceClass instanceof Class)
			assertTrue(bobClass instanceof Class)

			assertEquals("Alice", association.left.name)
			assertEquals("Bob", association.right.name)
			
			assertEquals("this is another note", association.comment.body)
		]
  }
  

 /* @Test @Ignore
 * def CardinalityTest() {
 * 	val model = '''
 * 		@startclass
 * 		class Alice {}
 * 		class Bob {}
 * 		Alice - Bob [*]
 * 		Alice - Bob [|1..*]
 * 		Alice - Bob [24|24..42]
 * 		Alice - Bob [*|*|"this is a label"]
 * 		Alice - Bob []
 * 		@endclass
 * 	'''.parse
 * 	val xmiModel = getDiagram(TEST_FOLDER + "cardinality.xmi")

 * 	assertEqualsModel(model, xmiModel)
 * }

 * @Test @Ignore
 * def classAssociationDirectionTest() {
 * 	val model = '''
 * 		@startclass
 * 		class Alice {}
 * 		class Bob {}
 * 		Alice - Bob [24|42|labelID <]
 * 		Alice - Bob [42|24|labelID >]
 * 		@endclass
 * 	'''.parse
 * 	val xmiModel = getDiagram(TEST_FOLDER + "classAssociationDirection.xmi")

 * 	assertEqualsModel(model, xmiModel)
 * }
 */
}
