/*
 * generated by Xtext 2.9.0
 */
package de.cooperateproject.modeling.textual.cls.tests

import com.google.inject.Inject
import de.cooperateproject.modeling.textual.cls.cls.ClassDiagram
import de.cooperateproject.modeling.textual.cls.cls.ClsPackage
import de.cooperateproject.modeling.textual.cls.tests.scoping.util.ClsCustomizedInjectorProvider
import java.io.ByteArrayOutputStream
import java.io.PrintStream
import java.util.Map
import org.apache.commons.io.IOUtils
import org.eclipse.emf.common.util.URI
import org.eclipse.emf.compare.Comparison
import org.eclipse.emf.compare.EMFCompare
import org.eclipse.emf.compare.scope.DefaultComparisonScope
import org.eclipse.emf.compare.utils.EMFComparePrettyPrinter
import org.eclipse.emf.ecore.EPackage
import org.eclipse.emf.ecore.EPackage.Registry
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl
import org.eclipse.emf.ecore.util.EcoreUtil
import org.eclipse.emf.ecore.xmi.impl.XMIResourceFactoryImpl
import org.eclipse.xtext.junit4.InjectWith
import org.eclipse.xtext.junit4.XtextRunner
import org.eclipse.xtext.junit4.util.ParseHelper
import org.junit.AfterClass
import org.junit.Assert
import org.junit.BeforeClass
import org.junit.Ignore
import org.junit.Test
import org.junit.runner.RunWith

//TODO Reactivate tests if a stable meta model state is reached.
@RunWith(XtextRunner)
@InjectWith(ClsCustomizedInjectorProvider.DefaultProvider)
class ClsParsingTest {
	@Inject extension ParseHelper<ClassDiagram>
	// @Inject extension ValidationTestHelper
	private static val TEST_FOLDER = "testmodels/"

	private static Resource.Factory.Registry registry
	private static Map<String, Object> map
	private static Registry preg

	@BeforeClass
	static def void ressourceSetUp() {
		registry = Resource.Factory.Registry.INSTANCE

		map = registry.getExtensionToFactoryMap()
		map.put("xmi", new XMIResourceFactoryImpl())

		preg = EPackage.Registry.INSTANCE
		preg.replace(ClsPackage.eNS_URI, ClsPackage.eINSTANCE)
	}

	@AfterClass
	static def void cleanUp() {
		registry = null
		map = null
		preg = null
	}

	def ClassDiagram getDiagram(String uri) {
		val resSet = new ResourceSetImpl()
		val resource = resSet.getResource(URI.createURI(uri), true)

		return resource.getContents().get(0) as ClassDiagram
	}

	def compare(ClassDiagram expected, ClassDiagram diagram) {
		val scope = new DefaultComparisonScope(expected, diagram, null)
		return EMFCompare.builder().build().compare(scope)
	}

	def assertEqualsModel(ClassDiagram expected, ClassDiagram diagram) {
		EcoreUtil.resolveAll(expected)
		val diff = compare(expected, diagram)
		Assert::assertTrue(diff.toPrettyString, diff.differences.empty);
	}

	def toPrettyString(Comparison comparison) {
		var ByteArrayOutputStream baos = null
		var PrintStream ps = null
		try {
			baos = new ByteArrayOutputStream
			ps = new PrintStream(baos)
			EMFComparePrettyPrinter.printDifferences(comparison, ps)
			return new String(baos.toByteArray, "UTF-8")
		} finally {
			IOUtils.closeQuietly(ps)
			IOUtils.closeQuietly(baos)
		}
	}

	@Test @Ignore
	def void classDefTest() {
		val model = '''
			@startclass
			class Alice {}
			@endclass
		'''.parse
		val xmiModel = getDiagram(TEST_FOLDER + "classDef.xmi")

		assertEqualsModel(model, xmiModel)
	}

	@Test @Ignore
	def interfaceDefTest() {
		val model = '''
			@startclass
			interface Alice {}
			@endclass
		'''.parse
		val xmiModel = getDiagram(TEST_FOLDER + "interfaceDef.xmi")

		assertEqualsModel(model, xmiModel)
	}

	@Test @Ignore
	def longnameToShortnameTest() {
		ClsPackage.eINSTANCE.eClass()
		val model = '''
			@startclass
			class Alice as A {
			}
			@endclass
		'''.parse
		val xmiModel = getDiagram(TEST_FOLDER + "longnameToShortname.xmi")
		assertEqualsModel(model, xmiModel)
	}

	@Test @Ignore
	def abstractClassWithoutMembersTest() {
		val model = '''
			@startclass
			abstract class Alice {
			}
			@endclass
		'''.parse
		val xmiModel = getDiagram(TEST_FOLDER + "abstractClassWithoutMembers.xmi")

		assertEqualsModel(model, xmiModel)
	}

	@Test @Ignore
	def classWithAttributesTest() {
		val model = '''
			@startclass
			class Alice {
				firstName : string
				lastName : string
				age : int
			}
			@endclass
		'''.parse
		val xmiModel = getDiagram(TEST_FOLDER + "classWithAttributes.xmi")

		assertEqualsModel(model, xmiModel)
	}

	@Test @Ignore
	def classWithMethodesTest() {
		val model = '''
			@startclass
			class Alice {
				getFirstName() : string
				setFirstName(name : string)
				calculateAge(date : int) : int
			}
			@endclass
		'''.parse
		val xmiModel = getDiagram(TEST_FOLDER + "classWithMethodes.xmi")

		assertEqualsModel(model, xmiModel)
	}

	@Test @Ignore
	def visibiliesTest() {
		val model = '''
			@startclass
			class Alice {
				-firstName : string
				+lastName : string
				~age : int
				#height : int
			}
			@endclass
		'''.parse
		val xmiModel = getDiagram(TEST_FOLDER + "visibilies.xmi")

		assertEqualsModel(model, xmiModel)
	}

	@Test @Ignore
	def classWithMethodsAndAttributesTest() {
		val model = '''
			@startclass
			class Alice {
				- firstName : string
				+ getFirstName() : string
			}
			@endclass
		'''.parse
		val xmiModel = getDiagram(TEST_FOLDER + "classWithMethodsAndAttributes.xmi")

		assertEqualsModel(model, xmiModel)
	}

	@Test @Ignore
	def classWithStaticAndFinalAttributesTest() {
		val model = '''
			@startclass
			class Alice {
				static firstName : string
				final lastName : string
				static final height : int
			}
			@endclass
		'''.parse
		val xmiModel = getDiagram(TEST_FOLDER + "classWithStaticAndFinalAttributes.xmi")

		assertEqualsModel(model, xmiModel)
	}

	@Test @Ignore
	def classWithAbstractStaticAndFinalMethodesTest() {
		val model = '''
			@startclass
			class Alice {
				abstract buildHouse()
				static getDate() : int
				final getHeight() : int
				abstract static final work()
			}
			@endclass
		'''.parse
		val xmiModel = getDiagram(TEST_FOLDER + "classWithAbstractStaticAndFinalMethodes.xmi")

		assertEqualsModel(model, xmiModel)
	}

	@Test @Ignore
	def classGeneralizationTest() {
		val model = '''
			@startclass
			class Person {}
			class Alice {}
			Alice isa Person
			@endclass
		'''.parse
		val xmiModel = getDiagram(TEST_FOLDER + "classGeneralization.xmi")

		assertEqualsModel(model, xmiModel)
	}

	@Test @Ignore
	def classImplementationTest() {
		val model = '''
			@startclass
			class Person {}
			class Alice {}
			Alice impl Person
			@endclass
		'''.parse
		val xmiModel = getDiagram(TEST_FOLDER + "classImplementation.xmi")

		assertEqualsModel(model, xmiModel)
	}

	@Test @Ignore
	def simpleClassAssociationTest() {
		val model = '''
			@startclass
			class Bob {}
			class Alice {}
			Alice - Bob
			@endclass
		'''.parse
		val xmiModel = getDiagram(TEST_FOLDER + "simpleClassAssociation.xmi")

		assertEqualsModel(model, xmiModel)
	}

	@Test @Ignore
	def classWithNoteTest() {
		val model = '''
			@startclass
			class Alice {}
			Alice - note["this is a note"]
			@endclass
		'''.parse
		val xmiModel = getDiagram(TEST_FOLDER + "classWithNote.xmi")

		assertEqualsModel(model, xmiModel)
	}

	@Test @Ignore
	def ClassAsscociationWithNoteTest() {
		val model = '''
			@startclass
			class Alice {}
			class Bob {}
			Alice - Bob note["this is a note"]
			@endclass
		'''.parse
		val xmiModel = getDiagram(TEST_FOLDER + "classAsscociationWithNote.xmi")

		assertEqualsModel(model, xmiModel)
	}

	@Test @Ignore
	def CardinalityTest() {
		val model = '''
			@startclass
			class Alice {}
			class Bob {}
			Alice - Bob [*]
			Alice - Bob [|1..*]
			Alice - Bob [24|24..42]
			Alice - Bob [*|*|"this is a label"]
			Alice - Bob []
			@endclass
		'''.parse
		val xmiModel = getDiagram(TEST_FOLDER + "cardinality.xmi")

		assertEqualsModel(model, xmiModel)
	}

	@Test @Ignore
	def classAssociationDirectionTest() {
		val model = '''
			@startclass
			class Alice {}
			class Bob {}
			Alice - Bob [24|42|labelID <]
			Alice - Bob [42|24|labelID >]
			@endclass
		'''.parse
		val xmiModel = getDiagram(TEST_FOLDER + "classAssociationDirection.xmi")

		assertEqualsModel(model, xmiModel)
	}

	@Test @Ignore
	def datatypeTest() {
		val model = '''
			@startclass
			class Alice {}
			Alice {
				a : string
				b : int 
				c : double
				d : boolean
				e : char
				f : byte
				g : short
				h : long
				i : float
			}
			@endclass
		'''.parse
		val xmiModel = getDiagram(TEST_FOLDER + "datatype.xmi")

		assertEqualsModel(model, xmiModel)
	}

	@Test @Ignore
	def classTypeTest() {
		val model = '''
			@startclass
			class Alice {}
			class Bob {}
			Alice {
				bob : Bob
			}
			@endclass
		'''.parse
		val xmiModel = getDiagram(TEST_FOLDER + "classType.xmi")

		assertEqualsModel(model, xmiModel)
	}

}
