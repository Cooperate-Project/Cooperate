/*
 * generated by Xtext 2.12.0
 */
package de.cooperateproject.modeling.textual.activity.tests

import com.google.inject.Inject
import de.cooperateproject.modeling.textual.activity.act.ActPackage
import de.cooperateproject.modeling.textual.activity.act.ActivityDiagram
import de.cooperateproject.modeling.textual.activity.tests.scoping.util.ActivityCustomizedInjectorProvider
import java.util.Collections
import org.apache.commons.io.IOUtils
import org.eclipse.emf.common.util.URI
import org.eclipse.emf.ecore.resource.ResourceSet
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.XtextRunner
import org.eclipse.xtext.testing.validation.ValidationTestHelper
import org.junit.Test
import org.junit.runner.RunWith

import static org.junit.Assert.assertEquals
import de.cooperateproject.modeling.textual.activity.act.NodeType
import de.cooperateproject.modeling.textual.activity.act.ControlNode
import de.cooperateproject.modeling.textual.activity.act.ActivityNode
import org.eclipse.emf.ecore.EClass
import org.junit.Assert
import org.junit.Ignore

@RunWith(XtextRunner)
@InjectWith(ActivityCustomizedInjectorProvider.DefaultProvider)
class ActParsingTest extends AbstractActTest {

	@Inject ValidationTestHelper validationTestHelper

	override setup() {
		super.setup()
		rs.packageRegistry.put(ActPackage.eNS_URI, ActPackage.eINSTANCE)
	}

	@Test
	def void emptyDiagramTest() {
		val model = '''
			@start-actd "SomeTitle"
			rootPackage RootElement
			@end-actd
		'''.parse(rs)
		validationTestHelper.assertNoIssues(model)
		assertEquals(model.rootPackage.name, "RootElement") 
	}

	@Test
	def void activityNameTest() {
		val model = '''
			@start-actd "SomeTitle"
			rootPackage RootElement
			activityName "Some Name"
			@end-actd
		'''.parse(rs)
		validationTestHelper.assertNoIssues(model)
		
		assertEquals(model.activityName, "Some Name") 
	}
	
	// TODO: Deal with ordering?
	
	@Test
	def void controlNodeTest() {
		val model = '''
			@start-actd "SomeTitle"
			rootPackage RootElement
			ini InitialNode
			fin
			ffin
			@end-actd
		'''.parse(rs)
		validationTestHelper.assertNoIssues(model)
		
		assertEquals(model.rootPackage.nodes.length, 3)
		
		val firstNode = model.rootPackage.nodes.get(0) as ControlNode
		val secondNode = model.rootPackage.nodes.get(1) as ControlNode
		val thirdNode = model.rootPackage.nodes.get(2) as ControlNode
		
		assertEquals(firstNode.name, "InitialNode")
		assertEquals(firstNode.type, NodeType.INITIAL)
		assertEquals(secondNode.type, NodeType.FINAL)
		assertEquals(thirdNode.type, NodeType.FLOW_FINAL)
	}
	
	@Test
	def void activityNodeTest() {
		val model = '''
			@start-actd "SomeTitle"
			rootPackage RootElement
			actn someActivity
			actn anotherActivity as "Another Activity"
			@end-actd
		'''.parse(rs)
		validationTestHelper.assertNoIssues(model)
		
		assertEquals(model.rootPackage.nodes.length, 2)
		
		val firstNode = model.rootPackage.nodes.get(0) as ActivityNode
		val secondNode = model.rootPackage.nodes.get(1) as ActivityNode
		
		assertEquals(firstNode.name, "someActivity")
		assertEquals(secondNode.name, "anotherActivity")
		assertEquals(secondNode.alias, "Another Activity")
	}
	
	@Test
	def void flowTest() {
		val model = '''
			@start-actd "SomeTitle"
			rootPackage RootElement
			actn someActivity
			actn anotherActivity
			flw(someActivity,anotherActivity)
			@end-actd
		'''.parse(rs)
		validationTestHelper.assertNoIssues(model)
		
		assertEquals(model.rootPackage.relations.length, 1)
		assertEquals(model.rootPackage.relations.get(0).relatedElements.length, 2)
		
		val firstNode = model.rootPackage.relations.get(0).relatedElements.get(0) as ActivityNode
		val secondNode = model.rootPackage.relations.get(0).relatedElements.get(1) as ActivityNode

		assertEquals(firstNode.name, "someActivity")
		assertEquals(secondNode.name, "anotherActivity")
	}
	
	@Ignore @Test
	def void flowWithFailureTest() {
		val model = '''
			@start-actd "SomeTitle"
			rootPackage RootElement
			actn someActivity
			flw(someActivity,anotherActivity)
			@end-actd
		'''.parse(rs)
		
		// FIXME: flw should fail (anotherActivity not defined first?)
		Assert.assertFalse(model.eResource.errors.isEmpty)
	}
	
	@Test
	def void linearDecisionTest() {
		val model = '''
			@start-actd "SomeTitle"
			rootPackage RootElement
			actn A
			actn B
			actn C
			actn D
			decn X
			mrgn Y
			flw(A,Y)
			flw(Y,B)
			flw(B,X)
			flw(X,C) ["test"]
			flw(X,D) ["else"]
			flw(D,Y)
			@end-actd
		'''.parse(rs)
		validationTestHelper.assertNoIssues(model)
		
		assertEquals(model.rootPackage.relations.length, 6)
		assertEquals(model.rootPackage.relations.get(3).relatedElements.length, 2)
		
		val conditionFlow = model.rootPackage.relations.get(3)
		val firstNode = conditionFlow.relatedElements.get(0) as ControlNode
		val secondNode = conditionFlow.relatedElements.get(1) as ActivityNode

		assertEquals(firstNode.name, "X")
		assertEquals(secondNode.name, "C")
		assertEquals(conditionFlow.condition, "test")
	}

	private static def parse(CharSequence text, ResourceSet rs) {
		val r = rs.createResource(URI.createFileURI("testmodels/testfile.act"))
		val is = IOUtils.toInputStream(text);
		r.load(is, Collections.emptyMap());
		val model = r.contents.get(0) as ActivityDiagram
		return model
	}
}
