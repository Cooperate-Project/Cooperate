/*
 * generated by Xtext 2.11.0
 */
package de.cooperateproject.modeling.textual.sequence.serializer;

import com.google.inject.Inject;
import de.cooperateproject.modeling.textual.sequence.sequence.Actor;
import de.cooperateproject.modeling.textual.sequence.sequence.Comment;
import de.cooperateproject.modeling.textual.sequence.sequence.DestructionOccurenceSpecification;
import de.cooperateproject.modeling.textual.sequence.sequence.FoundMessage;
import de.cooperateproject.modeling.textual.sequence.sequence.LostMessage;
import de.cooperateproject.modeling.textual.sequence.sequence.Message;
import de.cooperateproject.modeling.textual.sequence.sequence.RootPackage;
import de.cooperateproject.modeling.textual.sequence.sequence.SequenceDiagram;
import de.cooperateproject.modeling.textual.sequence.sequence.SequencePackage;
import de.cooperateproject.modeling.textual.sequence.services.SequenceGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class SequenceSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private SequenceGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == SequencePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case SequencePackage.ACTOR:
				sequence_Actor(context, (Actor) semanticObject); 
				return; 
			case SequencePackage.COMMENT:
				sequence_Comment(context, (Comment) semanticObject); 
				return; 
			case SequencePackage.DESTRUCTION_OCCURENCE_SPECIFICATION:
				sequence_DestructionOccurenceSpecification(context, (DestructionOccurenceSpecification) semanticObject); 
				return; 
			case SequencePackage.FOUND_MESSAGE:
				sequence_FoundMessage(context, (FoundMessage) semanticObject); 
				return; 
			case SequencePackage.LOST_MESSAGE:
				sequence_LostMessage(context, (LostMessage) semanticObject); 
				return; 
			case SequencePackage.MESSAGE:
				sequence_Message(context, (Message) semanticObject); 
				return; 
			case SequencePackage.ROOT_PACKAGE:
				sequence_RootPackage(context, (RootPackage) semanticObject); 
				return; 
			case SequencePackage.SEQUENCE_DIAGRAM:
				sequence_SequenceDiagram(context, (SequenceDiagram) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Actor returns Actor
	 *
	 * Constraint:
	 *     ((name=ID type=[Classifier|FQN]) | (name=STRING type=[Classifier|FQN] alias=ID) | (type=[Classifier|FQN] alias=ID actorType=ActorType?))
	 */
	protected void sequence_Actor(ISerializationContext context, Actor semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Comment returns Comment
	 *
	 * Constraint:
	 *     body=CommentBody
	 */
	protected void sequence_Comment(ISerializationContext context, Comment semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SequencePackage.Literals.COMMENT__BODY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SequencePackage.Literals.COMMENT__BODY));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCommentAccess().getBodyCommentBodyParserRuleCall_2_0(), semanticObject.getBody());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     InteractionFragment returns DestructionOccurenceSpecification
	 *     OccurenceSpecification returns DestructionOccurenceSpecification
	 *     DestructionOccurenceSpecification returns DestructionOccurenceSpecification
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_DestructionOccurenceSpecification(ISerializationContext context, DestructionOccurenceSpecification semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SequencePackage.Literals.DESTRUCTION_OCCURENCE_SPECIFICATION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SequencePackage.Literals.DESTRUCTION_OCCURENCE_SPECIFICATION__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDestructionOccurenceSpecificationAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     InteractionFragment returns FoundMessage
	 *     Message returns FoundMessage
	 *     FoundMessage returns FoundMessage
	 *
	 * Constraint:
	 *     (type=MessageType name=STRING right=[Actor|FQN])
	 */
	protected void sequence_FoundMessage(ISerializationContext context, FoundMessage semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SequencePackage.Literals.MESSAGE__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SequencePackage.Literals.MESSAGE__TYPE));
			if (transientValues.isValueTransient(semanticObject, SequencePackage.Literals.MESSAGE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SequencePackage.Literals.MESSAGE__NAME));
			if (transientValues.isValueTransient(semanticObject, SequencePackage.Literals.MESSAGE__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SequencePackage.Literals.MESSAGE__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFoundMessageAccess().getTypeMessageTypeEnumRuleCall_1_0(), semanticObject.getType());
		feeder.accept(grammarAccess.getFoundMessageAccess().getNameSTRINGTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getFoundMessageAccess().getRightActorFQNParserRuleCall_6_0_1(), semanticObject.eGet(SequencePackage.Literals.MESSAGE__RIGHT, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     InteractionFragment returns LostMessage
	 *     Message returns LostMessage
	 *     LostMessage returns LostMessage
	 *
	 * Constraint:
	 *     (type=MessageType name=STRING left=[Actor|FQN])
	 */
	protected void sequence_LostMessage(ISerializationContext context, LostMessage semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SequencePackage.Literals.MESSAGE__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SequencePackage.Literals.MESSAGE__TYPE));
			if (transientValues.isValueTransient(semanticObject, SequencePackage.Literals.MESSAGE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SequencePackage.Literals.MESSAGE__NAME));
			if (transientValues.isValueTransient(semanticObject, SequencePackage.Literals.MESSAGE__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SequencePackage.Literals.MESSAGE__LEFT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLostMessageAccess().getTypeMessageTypeEnumRuleCall_1_0(), semanticObject.getType());
		feeder.accept(grammarAccess.getLostMessageAccess().getNameSTRINGTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getLostMessageAccess().getLeftActorFQNParserRuleCall_4_0_1(), semanticObject.eGet(SequencePackage.Literals.MESSAGE__LEFT, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     InteractionFragment returns Message
	 *     Message returns Message
	 *
	 * Constraint:
	 *     (type=MessageType name=STRING left=[Actor|FQN] right=[Actor|FQN])
	 */
	protected void sequence_Message(ISerializationContext context, Message semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SequencePackage.Literals.MESSAGE__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SequencePackage.Literals.MESSAGE__TYPE));
			if (transientValues.isValueTransient(semanticObject, SequencePackage.Literals.MESSAGE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SequencePackage.Literals.MESSAGE__NAME));
			if (transientValues.isValueTransient(semanticObject, SequencePackage.Literals.MESSAGE__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SequencePackage.Literals.MESSAGE__LEFT));
			if (transientValues.isValueTransient(semanticObject, SequencePackage.Literals.MESSAGE__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SequencePackage.Literals.MESSAGE__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMessageAccess().getTypeMessageTypeEnumRuleCall_2_0_0(), semanticObject.getType());
		feeder.accept(grammarAccess.getMessageAccess().getNameSTRINGTerminalRuleCall_2_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getMessageAccess().getLeftActorFQNParserRuleCall_2_3_0_1(), semanticObject.eGet(SequencePackage.Literals.MESSAGE__LEFT, false));
		feeder.accept(grammarAccess.getMessageAccess().getRightActorFQNParserRuleCall_2_5_0_1(), semanticObject.eGet(SequencePackage.Literals.MESSAGE__RIGHT, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     RootPackage returns RootPackage
	 *
	 * Constraint:
	 *     (name=FQN actors+=Actor* interactionFragments+=InteractionFragment* cls+=[Classifier|ID]*)
	 */
	protected void sequence_RootPackage(ISerializationContext context, RootPackage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SequenceDiagram returns SequenceDiagram
	 *
	 * Constraint:
	 *     (title=STRING rootPackage=RootPackage)
	 */
	protected void sequence_SequenceDiagram(ISerializationContext context, SequenceDiagram semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SequencePackage.Literals.SEQUENCE_DIAGRAM__TITLE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SequencePackage.Literals.SEQUENCE_DIAGRAM__TITLE));
			if (transientValues.isValueTransient(semanticObject, SequencePackage.Literals.SEQUENCE_DIAGRAM__ROOT_PACKAGE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SequencePackage.Literals.SEQUENCE_DIAGRAM__ROOT_PACKAGE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSequenceDiagramAccess().getTitleSTRINGTerminalRuleCall_2_0(), semanticObject.getTitle());
		feeder.accept(grammarAccess.getSequenceDiagramAccess().getRootPackageRootPackageParserRuleCall_3_0(), semanticObject.getRootPackage());
		feeder.finish();
	}
	
	
}
