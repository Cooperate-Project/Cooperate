/*
 * generated by Xtext 2.11.0
 */
package de.cooperateproject.modeling.textual.sequence.serializer;

import com.google.inject.Inject;
import de.cooperateproject.modeling.textual.sequence.sequence.Actor;
import de.cooperateproject.modeling.textual.sequence.sequence.Alternative;
import de.cooperateproject.modeling.textual.sequence.sequence.Comment;
import de.cooperateproject.modeling.textual.sequence.sequence.ConditionedFragment;
import de.cooperateproject.modeling.textual.sequence.sequence.CreateMessage;
import de.cooperateproject.modeling.textual.sequence.sequence.Critical;
import de.cooperateproject.modeling.textual.sequence.sequence.DestructionMessage;
import de.cooperateproject.modeling.textual.sequence.sequence.DestructionOccurenceSpecification;
import de.cooperateproject.modeling.textual.sequence.sequence.FoundMessage;
import de.cooperateproject.modeling.textual.sequence.sequence.InnerTimeConstraint;
import de.cooperateproject.modeling.textual.sequence.sequence.Loop;
import de.cooperateproject.modeling.textual.sequence.sequence.LostMessage;
import de.cooperateproject.modeling.textual.sequence.sequence.Option;
import de.cooperateproject.modeling.textual.sequence.sequence.Parallel;
import de.cooperateproject.modeling.textual.sequence.sequence.ParallelFragment;
import de.cooperateproject.modeling.textual.sequence.sequence.ResponseMessage;
import de.cooperateproject.modeling.textual.sequence.sequence.RootPackage;
import de.cooperateproject.modeling.textual.sequence.sequence.SequenceDiagram;
import de.cooperateproject.modeling.textual.sequence.sequence.SequencePackage;
import de.cooperateproject.modeling.textual.sequence.sequence.StandardMessage;
import de.cooperateproject.modeling.textual.sequence.sequence.TimeConstraint;
import de.cooperateproject.modeling.textual.sequence.services.SequenceGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class SequenceSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private SequenceGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == SequencePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case SequencePackage.ACTOR:
				sequence_Actor(context, (Actor) semanticObject); 
				return; 
			case SequencePackage.ALTERNATIVE:
				sequence_Alternative(context, (Alternative) semanticObject); 
				return; 
			case SequencePackage.COMMENT:
				sequence_Comment(context, (Comment) semanticObject); 
				return; 
			case SequencePackage.CONDITIONED_FRAGMENT:
				sequence_ConditionedFragment(context, (ConditionedFragment) semanticObject); 
				return; 
			case SequencePackage.CREATE_MESSAGE:
				if (rule == grammarAccess.getCreateMessageRule()) {
					sequence_CreateMessage(context, (CreateMessage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getInteractionFragmentRule()
						|| rule == grammarAccess.getMessageRule()) {
					sequence_CreateMessage_Message(context, (CreateMessage) semanticObject); 
					return; 
				}
				else break;
			case SequencePackage.CRITICAL:
				sequence_Critical(context, (Critical) semanticObject); 
				return; 
			case SequencePackage.DESTRUCTION_MESSAGE:
				if (rule == grammarAccess.getDestructionMessageRule()) {
					sequence_DestructionMessage(context, (DestructionMessage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getInteractionFragmentRule()
						|| rule == grammarAccess.getMessageRule()) {
					sequence_DestructionMessage_Message(context, (DestructionMessage) semanticObject); 
					return; 
				}
				else break;
			case SequencePackage.DESTRUCTION_OCCURENCE_SPECIFICATION:
				sequence_DestructionOccurenceSpecification(context, (DestructionOccurenceSpecification) semanticObject); 
				return; 
			case SequencePackage.FOUND_MESSAGE:
				if (rule == grammarAccess.getFoundMessageRule()) {
					sequence_FoundMessage(context, (FoundMessage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getInteractionFragmentRule()
						|| rule == grammarAccess.getMessageRule()) {
					sequence_FoundMessage_Message(context, (FoundMessage) semanticObject); 
					return; 
				}
				else break;
			case SequencePackage.INNER_TIME_CONSTRAINT:
				sequence_InnerTimeConstraint(context, (InnerTimeConstraint) semanticObject); 
				return; 
			case SequencePackage.LOOP:
				sequence_Loop(context, (Loop) semanticObject); 
				return; 
			case SequencePackage.LOST_MESSAGE:
				if (rule == grammarAccess.getLostMessageRule()) {
					sequence_LostMessage(context, (LostMessage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getInteractionFragmentRule()
						|| rule == grammarAccess.getMessageRule()) {
					sequence_LostMessage_Message(context, (LostMessage) semanticObject); 
					return; 
				}
				else break;
			case SequencePackage.OPTION:
				sequence_Option(context, (Option) semanticObject); 
				return; 
			case SequencePackage.PARALLEL:
				sequence_Parallel(context, (Parallel) semanticObject); 
				return; 
			case SequencePackage.PARALLEL_FRAGMENT:
				sequence_ParallelFragment(context, (ParallelFragment) semanticObject); 
				return; 
			case SequencePackage.RESPONSE_MESSAGE:
				if (rule == grammarAccess.getInteractionFragmentRule()
						|| rule == grammarAccess.getMessageRule()) {
					sequence_Message_ResponseMessage(context, (ResponseMessage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getResponseMessageRule()) {
					sequence_ResponseMessage(context, (ResponseMessage) semanticObject); 
					return; 
				}
				else break;
			case SequencePackage.ROOT_PACKAGE:
				sequence_RootPackage(context, (RootPackage) semanticObject); 
				return; 
			case SequencePackage.SEQUENCE_DIAGRAM:
				sequence_SequenceDiagram(context, (SequenceDiagram) semanticObject); 
				return; 
			case SequencePackage.STANDARD_MESSAGE:
				if (rule == grammarAccess.getInteractionFragmentRule()
						|| rule == grammarAccess.getMessageRule()) {
					sequence_Message_StandardMessage(context, (StandardMessage) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getStandardMessageRule()) {
					sequence_StandardMessage(context, (StandardMessage) semanticObject); 
					return; 
				}
				else break;
			case SequencePackage.TIME_CONSTRAINT:
				sequence_TimeConstraint(context, (TimeConstraint) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Actor returns Actor
	 *
	 * Constraint:
	 *     (
	 *         deferred?='deferred'? 
	 *         ((name=ID type=[Classifier|FQN]) | (type=[Classifier|FQN] alias=ID) | (name=STRING type=[Classifier|FQN] alias=ID)) 
	 *         actorType=ActorType?
	 *     )
	 */
	protected void sequence_Actor(ISerializationContext context, Actor semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InteractionFragment returns Alternative
	 *     CombinedFragment returns Alternative
	 *     Alternative returns Alternative
	 *
	 * Constraint:
	 *     alternatives+=ConditionedFragment+
	 */
	protected void sequence_Alternative(ISerializationContext context, Alternative semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Comment returns Comment
	 *
	 * Constraint:
	 *     body=CommentBody
	 */
	protected void sequence_Comment(ISerializationContext context, Comment semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SequencePackage.Literals.COMMENT__BODY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SequencePackage.Literals.COMMENT__BODY));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCommentAccess().getBodyCommentBodyParserRuleCall_2_0(), semanticObject.getBody());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ConditionedFragment returns ConditionedFragment
	 *
	 * Constraint:
	 *     (condition=STRING (fragments+=InteractionFragment+ | fragments+=InteractionFragment)?)
	 */
	protected void sequence_ConditionedFragment(ISerializationContext context, ConditionedFragment semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CreateMessage returns CreateMessage
	 *
	 * Constraint:
	 *     (name=STRING? left=[Actor|FQN] right=[Actor|FQN])
	 */
	protected void sequence_CreateMessage(ISerializationContext context, CreateMessage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InteractionFragment returns CreateMessage
	 *     Message returns CreateMessage
	 *
	 * Constraint:
	 *     (name=STRING? left=[Actor|FQN] right=[Actor|FQN] order=Order? timeConstraint=TimeConstraint?)
	 */
	protected void sequence_CreateMessage_Message(ISerializationContext context, CreateMessage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InteractionFragment returns Critical
	 *     CombinedFragment returns Critical
	 *     Critical returns Critical
	 *
	 * Constraint:
	 *     fragments+=InteractionFragment+
	 */
	protected void sequence_Critical(ISerializationContext context, Critical semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DestructionMessage returns DestructionMessage
	 *
	 * Constraint:
	 *     (name=STRING? left=[Actor|FQN] right=[Actor|FQN])
	 */
	protected void sequence_DestructionMessage(ISerializationContext context, DestructionMessage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InteractionFragment returns DestructionMessage
	 *     Message returns DestructionMessage
	 *
	 * Constraint:
	 *     (name=STRING? left=[Actor|FQN] right=[Actor|FQN] order=Order? timeConstraint=TimeConstraint?)
	 */
	protected void sequence_DestructionMessage_Message(ISerializationContext context, DestructionMessage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InteractionFragment returns DestructionOccurenceSpecification
	 *     OccurenceSpecification returns DestructionOccurenceSpecification
	 *     DestructionOccurenceSpecification returns DestructionOccurenceSpecification
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_DestructionOccurenceSpecification(ISerializationContext context, DestructionOccurenceSpecification semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SequencePackage.Literals.DESTRUCTION_OCCURENCE_SPECIFICATION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SequencePackage.Literals.DESTRUCTION_OCCURENCE_SPECIFICATION__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDestructionOccurenceSpecificationAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     FoundMessage returns FoundMessage
	 *
	 * Constraint:
	 *     (type=MessageType name=STRING right=[Actor|FQN])
	 */
	protected void sequence_FoundMessage(ISerializationContext context, FoundMessage semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SequencePackage.Literals.FOUND_MESSAGE__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SequencePackage.Literals.FOUND_MESSAGE__TYPE));
			if (transientValues.isValueTransient(semanticObject, SequencePackage.Literals.MESSAGE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SequencePackage.Literals.MESSAGE__NAME));
			if (transientValues.isValueTransient(semanticObject, SequencePackage.Literals.FOUND_MESSAGE__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SequencePackage.Literals.FOUND_MESSAGE__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFoundMessageAccess().getTypeMessageTypeEnumRuleCall_1_0(), semanticObject.getType());
		feeder.accept(grammarAccess.getFoundMessageAccess().getNameSTRINGTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getFoundMessageAccess().getRightActorFQNParserRuleCall_6_0_1(), semanticObject.eGet(SequencePackage.Literals.FOUND_MESSAGE__RIGHT, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     InteractionFragment returns FoundMessage
	 *     Message returns FoundMessage
	 *
	 * Constraint:
	 *     (type=MessageType name=STRING right=[Actor|FQN] order=Order? timeConstraint=TimeConstraint?)
	 */
	protected void sequence_FoundMessage_Message(ISerializationContext context, FoundMessage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InnerTimeConstraint returns InnerTimeConstraint
	 *
	 * Constraint:
	 *     (type=TimeConstraintType value=STRING)
	 */
	protected void sequence_InnerTimeConstraint(ISerializationContext context, InnerTimeConstraint semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SequencePackage.Literals.INNER_TIME_CONSTRAINT__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SequencePackage.Literals.INNER_TIME_CONSTRAINT__TYPE));
			if (transientValues.isValueTransient(semanticObject, SequencePackage.Literals.INNER_TIME_CONSTRAINT__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SequencePackage.Literals.INNER_TIME_CONSTRAINT__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getInnerTimeConstraintAccess().getTypeTimeConstraintTypeEnumRuleCall_0_0(), semanticObject.getType());
		feeder.accept(grammarAccess.getInnerTimeConstraintAccess().getValueSTRINGTerminalRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     InteractionFragment returns Loop
	 *     CombinedFragment returns Loop
	 *     Loop returns Loop
	 *
	 * Constraint:
	 *     (condition=STRING fragments+=InteractionFragment+)
	 */
	protected void sequence_Loop(ISerializationContext context, Loop semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     LostMessage returns LostMessage
	 *
	 * Constraint:
	 *     (type=MessageType name=STRING left=[Actor|FQN])
	 */
	protected void sequence_LostMessage(ISerializationContext context, LostMessage semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SequencePackage.Literals.LOST_MESSAGE__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SequencePackage.Literals.LOST_MESSAGE__TYPE));
			if (transientValues.isValueTransient(semanticObject, SequencePackage.Literals.MESSAGE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SequencePackage.Literals.MESSAGE__NAME));
			if (transientValues.isValueTransient(semanticObject, SequencePackage.Literals.LOST_MESSAGE__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SequencePackage.Literals.LOST_MESSAGE__LEFT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLostMessageAccess().getTypeMessageTypeEnumRuleCall_1_0(), semanticObject.getType());
		feeder.accept(grammarAccess.getLostMessageAccess().getNameSTRINGTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getLostMessageAccess().getLeftActorFQNParserRuleCall_4_0_1(), semanticObject.eGet(SequencePackage.Literals.LOST_MESSAGE__LEFT, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     InteractionFragment returns LostMessage
	 *     Message returns LostMessage
	 *
	 * Constraint:
	 *     (type=MessageType name=STRING left=[Actor|FQN] order=Order? timeConstraint=TimeConstraint?)
	 */
	protected void sequence_LostMessage_Message(ISerializationContext context, LostMessage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InteractionFragment returns ResponseMessage
	 *     Message returns ResponseMessage
	 *
	 * Constraint:
	 *     (name=STRING left=[Actor|FQN]? right=[Actor|FQN]? order=Order? timeConstraint=TimeConstraint?)
	 */
	protected void sequence_Message_ResponseMessage(ISerializationContext context, ResponseMessage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InteractionFragment returns StandardMessage
	 *     Message returns StandardMessage
	 *
	 * Constraint:
	 *     (
	 *         type=MessageType 
	 *         name=STRING 
	 *         left=[Actor|FQN] 
	 *         right=[Actor|FQN] 
	 *         order=Order? 
	 *         timeConstraint=TimeConstraint?
	 *     )
	 */
	protected void sequence_Message_StandardMessage(ISerializationContext context, StandardMessage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InteractionFragment returns Option
	 *     CombinedFragment returns Option
	 *     Option returns Option
	 *
	 * Constraint:
	 *     option+=ConditionedFragment
	 */
	protected void sequence_Option(ISerializationContext context, Option semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ParallelFragment returns ParallelFragment
	 *
	 * Constraint:
	 *     (fragments+=InteractionFragment+ | fragments+=InteractionFragment)
	 */
	protected void sequence_ParallelFragment(ISerializationContext context, ParallelFragment semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InteractionFragment returns Parallel
	 *     CombinedFragment returns Parallel
	 *     Parallel returns Parallel
	 *
	 * Constraint:
	 *     parallels+=ParallelFragment+
	 */
	protected void sequence_Parallel(ISerializationContext context, Parallel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ResponseMessage returns ResponseMessage
	 *
	 * Constraint:
	 *     (name=STRING left=[Actor|FQN]? right=[Actor|FQN]?)
	 */
	protected void sequence_ResponseMessage(ISerializationContext context, ResponseMessage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RootPackage returns RootPackage
	 *
	 * Constraint:
	 *     (name=FQN actors+=Actor* interactionFragments+=InteractionFragment*)
	 */
	protected void sequence_RootPackage(ISerializationContext context, RootPackage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SequenceDiagram returns SequenceDiagram
	 *
	 * Constraint:
	 *     (title=STRING rootPackage=RootPackage)
	 */
	protected void sequence_SequenceDiagram(ISerializationContext context, SequenceDiagram semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SequencePackage.Literals.SEQUENCE_DIAGRAM__TITLE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SequencePackage.Literals.SEQUENCE_DIAGRAM__TITLE));
			if (transientValues.isValueTransient(semanticObject, SequencePackage.Literals.SEQUENCE_DIAGRAM__ROOT_PACKAGE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SequencePackage.Literals.SEQUENCE_DIAGRAM__ROOT_PACKAGE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSequenceDiagramAccess().getTitleSTRINGTerminalRuleCall_2_0(), semanticObject.getTitle());
		feeder.accept(grammarAccess.getSequenceDiagramAccess().getRootPackageRootPackageParserRuleCall_3_0(), semanticObject.getRootPackage());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     StandardMessage returns StandardMessage
	 *
	 * Constraint:
	 *     (type=MessageType name=STRING left=[Actor|FQN] right=[Actor|FQN])
	 */
	protected void sequence_StandardMessage(ISerializationContext context, StandardMessage semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SequencePackage.Literals.STANDARD_MESSAGE__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SequencePackage.Literals.STANDARD_MESSAGE__TYPE));
			if (transientValues.isValueTransient(semanticObject, SequencePackage.Literals.MESSAGE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SequencePackage.Literals.MESSAGE__NAME));
			if (transientValues.isValueTransient(semanticObject, SequencePackage.Literals.STANDARD_MESSAGE__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SequencePackage.Literals.STANDARD_MESSAGE__LEFT));
			if (transientValues.isValueTransient(semanticObject, SequencePackage.Literals.STANDARD_MESSAGE__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SequencePackage.Literals.STANDARD_MESSAGE__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getStandardMessageAccess().getTypeMessageTypeEnumRuleCall_0_0(), semanticObject.getType());
		feeder.accept(grammarAccess.getStandardMessageAccess().getNameSTRINGTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getStandardMessageAccess().getLeftActorFQNParserRuleCall_3_0_1(), semanticObject.eGet(SequencePackage.Literals.STANDARD_MESSAGE__LEFT, false));
		feeder.accept(grammarAccess.getStandardMessageAccess().getRightActorFQNParserRuleCall_5_0_1(), semanticObject.eGet(SequencePackage.Literals.STANDARD_MESSAGE__RIGHT, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     TimeConstraint returns TimeConstraint
	 *
	 * Constraint:
	 *     constraints+=InnerTimeConstraint+
	 */
	protected void sequence_TimeConstraint(ISerializationContext context, TimeConstraint semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
