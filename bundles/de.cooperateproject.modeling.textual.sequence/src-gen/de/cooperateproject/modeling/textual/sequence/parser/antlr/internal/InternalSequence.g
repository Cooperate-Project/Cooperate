/*
 * generated by Xtext 2.11.0
 */
grammar InternalSequence;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package de.cooperateproject.modeling.textual.sequence.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package de.cooperateproject.modeling.textual.sequence.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import de.cooperateproject.modeling.textual.sequence.services.SequenceGrammarAccess;

}

@parser::members {

 	private SequenceGrammarAccess grammarAccess;

    public InternalSequenceParser(TokenStream input, SequenceGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "SequenceDiagram";
   	}

   	@Override
   	protected SequenceGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleSequenceDiagram
entryRuleSequenceDiagram returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSequenceDiagramRule()); }
	iv_ruleSequenceDiagram=ruleSequenceDiagram
	{ $current=$iv_ruleSequenceDiagram.current; }
	EOF;

// Rule SequenceDiagram
ruleSequenceDiagram returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getSequenceDiagramAccess().getSequenceDiagramAction_0(),
					$current);
			}
		)
		otherlv_1='@start-seqd'
		{
			newLeafNode(otherlv_1, grammarAccess.getSequenceDiagramAccess().getStartSeqdKeyword_1());
		}
		(
			(
				lv_title_2_0=RULE_STRING
				{
					newLeafNode(lv_title_2_0, grammarAccess.getSequenceDiagramAccess().getTitleSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSequenceDiagramRule());
					}
					setWithLastConsumed(
						$current,
						"title",
						lv_title_2_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getSequenceDiagramAccess().getRootPackageRootPackageParserRuleCall_3_0());
				}
				lv_rootPackage_3_0=ruleRootPackage
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSequenceDiagramRule());
					}
					set(
						$current,
						"rootPackage",
						lv_rootPackage_3_0,
						"de.cooperateproject.modeling.textual.sequence.Sequence.RootPackage");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='@end-seqd'
		{
			newLeafNode(otherlv_4, grammarAccess.getSequenceDiagramAccess().getEndSeqdKeyword_4());
		}
	)
;

// Entry rule entryRuleRootPackage
entryRuleRootPackage returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRootPackageRule()); }
	iv_ruleRootPackage=ruleRootPackage
	{ $current=$iv_ruleRootPackage.current; }
	EOF;

// Rule RootPackage
ruleRootPackage returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='rootElement'
		{
			newLeafNode(otherlv_0, grammarAccess.getRootPackageAccess().getRootElementKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRootPackageAccess().getNameFQNParserRuleCall_1_0());
				}
				lv_name_1_0=ruleFQN
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRootPackageRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"de.cooperateproject.modeling.textual.sequence.Sequence.FQN");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getRootPackageAccess().getActorsActorParserRuleCall_2_0());
				}
				lv_actors_2_0=ruleActor
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRootPackageRule());
					}
					add(
						$current,
						"actors",
						lv_actors_2_0,
						"de.cooperateproject.modeling.textual.sequence.Sequence.Actor");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getRootPackageAccess().getInteractionFragmentsInteractionFragmentParserRuleCall_3_0());
				}
				lv_interactionFragments_3_0=ruleInteractionFragment
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRootPackageRule());
					}
					add(
						$current,
						"interactionFragments",
						lv_interactionFragments_3_0,
						"de.cooperateproject.modeling.textual.sequence.Sequence.InteractionFragment");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRootPackageRule());
					}
				}
				otherlv_4=RULE_ID
				{
					newLeafNode(otherlv_4, grammarAccess.getRootPackageAccess().getClsClassifierCrossReference_4_0());
				}
			)
		)*
	)
;

// Entry rule entryRuleActor
entryRuleActor returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getActorRule()); }
	iv_ruleActor=ruleActor
	{ $current=$iv_ruleActor.current; }
	EOF;

// Rule Actor
ruleActor returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='act'
			{
				newLeafNode(otherlv_0, grammarAccess.getActorAccess().getActKeyword_0_0());
			}
			(
				(
					(
						lv_name_1_0=RULE_ID
						{
							newLeafNode(lv_name_1_0, grammarAccess.getActorAccess().getNameIDTerminalRuleCall_0_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getActorRule());
							}
							setWithLastConsumed(
								$current,
								"name",
								lv_name_1_0,
								"org.eclipse.xtext.common.Terminals.ID");
						}
					)
				)
				otherlv_2=':'
				{
					newLeafNode(otherlv_2, grammarAccess.getActorAccess().getColonKeyword_0_1_1());
				}
				(
					(
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getActorRule());
							}
						}
						{
							newCompositeNode(grammarAccess.getActorAccess().getTypeClassifierCrossReference_0_1_2_0());
						}
						ruleFQN
						{
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
		)
		    |
		(
			(
				(
					lv_name_4_0=RULE_STRING
					{
						newLeafNode(lv_name_4_0, grammarAccess.getActorAccess().getNameSTRINGTerminalRuleCall_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getActorRule());
						}
						setWithLastConsumed(
							$current,
							"name",
							lv_name_4_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
			otherlv_5=':'
			{
				newLeafNode(otherlv_5, grammarAccess.getActorAccess().getColonKeyword_1_1());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getActorRule());
						}
					}
					{
						newCompositeNode(grammarAccess.getActorAccess().getTypeClassifierCrossReference_1_2_0());
					}
					ruleFQN
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_7='as'
			{
				newLeafNode(otherlv_7, grammarAccess.getActorAccess().getAsKeyword_1_3());
			}
			(
				(
					lv_alias_8_0=RULE_ID
					{
						newLeafNode(lv_alias_8_0, grammarAccess.getActorAccess().getAliasIDTerminalRuleCall_1_4_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getActorRule());
						}
						setWithLastConsumed(
							$current,
							"alias",
							lv_alias_8_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
		)
		    |
		(
			(
				otherlv_9=':'
				{
					newLeafNode(otherlv_9, grammarAccess.getActorAccess().getColonKeyword_2_0_0());
				}
				(
					(
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getActorRule());
							}
						}
						{
							newCompositeNode(grammarAccess.getActorAccess().getTypeClassifierCrossReference_2_0_1_0());
						}
						ruleFQN
						{
							afterParserOrEnumRuleCall();
						}
					)
				)
				otherlv_11='as'
				{
					newLeafNode(otherlv_11, grammarAccess.getActorAccess().getAsKeyword_2_0_2());
				}
				(
					(
						lv_alias_12_0=RULE_ID
						{
							newLeafNode(lv_alias_12_0, grammarAccess.getActorAccess().getAliasIDTerminalRuleCall_2_0_3_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getActorRule());
							}
							setWithLastConsumed(
								$current,
								"alias",
								lv_alias_12_0,
								"org.eclipse.xtext.common.Terminals.ID");
						}
					)
				)
			)
			(
				otherlv_13='role['
				{
					newLeafNode(otherlv_13, grammarAccess.getActorAccess().getRoleKeyword_2_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getActorAccess().getActorTypeActorTypeEnumRuleCall_2_1_1_0());
						}
						lv_actorType_14_0=ruleActorType
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getActorRule());
							}
							set(
								$current,
								"actorType",
								lv_actorType_14_0,
								"de.cooperateproject.modeling.textual.sequence.Sequence.ActorType");
							afterParserOrEnumRuleCall();
						}
					)
				)
				otherlv_15=']'
				{
					newLeafNode(otherlv_15, grammarAccess.getActorAccess().getRightSquareBracketKeyword_2_1_2());
				}
			)?
		)
	)
;

// Entry rule entryRuleInteractionFragment
entryRuleInteractionFragment returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInteractionFragmentRule()); }
	iv_ruleInteractionFragment=ruleInteractionFragment
	{ $current=$iv_ruleInteractionFragment.current; }
	EOF;

// Rule InteractionFragment
ruleInteractionFragment returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getInteractionFragmentAccess().getMessageParserRuleCall_0());
		}
		this_Message_0=ruleMessage
		{
			$current = $this_Message_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getInteractionFragmentAccess().getOccurenceSpecificationParserRuleCall_1());
		}
		this_OccurenceSpecification_1=ruleOccurenceSpecification
		{
			$current = $this_OccurenceSpecification_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleMessage
entryRuleMessage returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMessageRule()); }
	iv_ruleMessage=ruleMessage
	{ $current=$iv_ruleMessage.current; }
	EOF;

// Rule Message
ruleMessage returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getMessageAccess().getFoundMessageParserRuleCall_0());
		}
		this_FoundMessage_0=ruleFoundMessage
		{
			$current = $this_FoundMessage_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getMessageAccess().getLostMessageParserRuleCall_1());
		}
		this_LostMessage_1=ruleLostMessage
		{
			$current = $this_LostMessage_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getMessageAccess().getTypeMessageTypeEnumRuleCall_2_0_0());
					}
					lv_type_2_0=ruleMessageType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMessageRule());
						}
						set(
							$current,
							"type",
							lv_type_2_0,
							"de.cooperateproject.modeling.textual.sequence.Sequence.MessageType");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					lv_name_3_0=RULE_STRING
					{
						newLeafNode(lv_name_3_0, grammarAccess.getMessageAccess().getNameSTRINGTerminalRuleCall_2_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getMessageRule());
						}
						setWithLastConsumed(
							$current,
							"name",
							lv_name_3_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
			otherlv_4='('
			{
				newLeafNode(otherlv_4, grammarAccess.getMessageAccess().getLeftParenthesisKeyword_2_2());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getMessageRule());
						}
					}
					{
						newCompositeNode(grammarAccess.getMessageAccess().getLeftActorCrossReference_2_3_0());
					}
					ruleFQN
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_6=','
			{
				newLeafNode(otherlv_6, grammarAccess.getMessageAccess().getCommaKeyword_2_4());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getMessageRule());
						}
					}
					{
						newCompositeNode(grammarAccess.getMessageAccess().getRightActorCrossReference_2_5_0());
					}
					ruleFQN
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_8=')'
			{
				newLeafNode(otherlv_8, grammarAccess.getMessageAccess().getRightParenthesisKeyword_2_6());
			}
		)
	)
;

// Entry rule entryRuleFoundMessage
entryRuleFoundMessage returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFoundMessageRule()); }
	iv_ruleFoundMessage=ruleFoundMessage
	{ $current=$iv_ruleFoundMessage.current; }
	EOF;

// Rule FoundMessage
ruleFoundMessage returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='found'
		{
			newLeafNode(otherlv_0, grammarAccess.getFoundMessageAccess().getFoundKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFoundMessageAccess().getTypeMessageTypeEnumRuleCall_1_0());
				}
				lv_type_1_0=ruleMessageType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFoundMessageRule());
					}
					set(
						$current,
						"type",
						lv_type_1_0,
						"de.cooperateproject.modeling.textual.sequence.Sequence.MessageType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_name_2_0=RULE_STRING
				{
					newLeafNode(lv_name_2_0, grammarAccess.getFoundMessageAccess().getNameSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFoundMessageRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_3='('
		{
			newLeafNode(otherlv_3, grammarAccess.getFoundMessageAccess().getLeftParenthesisKeyword_3());
		}
		otherlv_4='_'
		{
			newLeafNode(otherlv_4, grammarAccess.getFoundMessageAccess().get_Keyword_4());
		}
		otherlv_5=','
		{
			newLeafNode(otherlv_5, grammarAccess.getFoundMessageAccess().getCommaKeyword_5());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFoundMessageRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getFoundMessageAccess().getRightActorCrossReference_6_0());
				}
				ruleFQN
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_7=')'
		{
			newLeafNode(otherlv_7, grammarAccess.getFoundMessageAccess().getRightParenthesisKeyword_7());
		}
	)
;

// Entry rule entryRuleLostMessage
entryRuleLostMessage returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLostMessageRule()); }
	iv_ruleLostMessage=ruleLostMessage
	{ $current=$iv_ruleLostMessage.current; }
	EOF;

// Rule LostMessage
ruleLostMessage returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='lost'
		{
			newLeafNode(otherlv_0, grammarAccess.getLostMessageAccess().getLostKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLostMessageAccess().getTypeMessageTypeEnumRuleCall_1_0());
				}
				lv_type_1_0=ruleMessageType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLostMessageRule());
					}
					set(
						$current,
						"type",
						lv_type_1_0,
						"de.cooperateproject.modeling.textual.sequence.Sequence.MessageType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_name_2_0=RULE_STRING
				{
					newLeafNode(lv_name_2_0, grammarAccess.getLostMessageAccess().getNameSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLostMessageRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_3='('
		{
			newLeafNode(otherlv_3, grammarAccess.getLostMessageAccess().getLeftParenthesisKeyword_3());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLostMessageRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getLostMessageAccess().getLeftActorCrossReference_4_0());
				}
				ruleFQN
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=','
		{
			newLeafNode(otherlv_5, grammarAccess.getLostMessageAccess().getCommaKeyword_5());
		}
		otherlv_6='_'
		{
			newLeafNode(otherlv_6, grammarAccess.getLostMessageAccess().get_Keyword_6());
		}
		otherlv_7=')'
		{
			newLeafNode(otherlv_7, grammarAccess.getLostMessageAccess().getRightParenthesisKeyword_7());
		}
	)
;

// Entry rule entryRuleOccurenceSpecification
entryRuleOccurenceSpecification returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOccurenceSpecificationRule()); }
	iv_ruleOccurenceSpecification=ruleOccurenceSpecification
	{ $current=$iv_ruleOccurenceSpecification.current; }
	EOF;

// Rule OccurenceSpecification
ruleOccurenceSpecification returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getOccurenceSpecificationAccess().getDestructionOccurenceSpecificationParserRuleCall());
	}
	this_DestructionOccurenceSpecification_0=ruleDestructionOccurenceSpecification
	{
		$current = $this_DestructionOccurenceSpecification_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleDestructionOccurenceSpecification
entryRuleDestructionOccurenceSpecification returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDestructionOccurenceSpecificationRule()); }
	iv_ruleDestructionOccurenceSpecification=ruleDestructionOccurenceSpecification
	{ $current=$iv_ruleDestructionOccurenceSpecification.current; }
	EOF;

// Rule DestructionOccurenceSpecification
ruleDestructionOccurenceSpecification returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='dest'
		{
			newLeafNode(otherlv_0, grammarAccess.getDestructionOccurenceSpecificationAccess().getDestKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getDestructionOccurenceSpecificationAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDestructionOccurenceSpecificationRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleFQN
entryRuleFQN returns [String current=null]:
	{ newCompositeNode(grammarAccess.getFQNRule()); }
	iv_ruleFQN=ruleFQN
	{ $current=$iv_ruleFQN.current.getText(); }
	EOF;

// Rule FQN
ruleFQN returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_ID_0=RULE_ID
		{
			$current.merge(this_ID_0);
		}
		{
			newLeafNode(this_ID_0, grammarAccess.getFQNAccess().getIDTerminalRuleCall_0());
		}
		(
			kw='.'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getFQNAccess().getFullStopKeyword_1_0());
			}
			this_ID_2=RULE_ID
			{
				$current.merge(this_ID_2);
			}
			{
				newLeafNode(this_ID_2, grammarAccess.getFQNAccess().getIDTerminalRuleCall_1_1());
			}
		)*
	)
;

// Entry rule entryRuleCommentBody
entryRuleCommentBody returns [String current=null]:
	{ newCompositeNode(grammarAccess.getCommentBodyRule()); }
	iv_ruleCommentBody=ruleCommentBody
	{ $current=$iv_ruleCommentBody.current.getText(); }
	EOF;

// Rule CommentBody
ruleCommentBody returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	this_STRING_0=RULE_STRING
	{
		$current.merge(this_STRING_0);
	}
	{
		newLeafNode(this_STRING_0, grammarAccess.getCommentBodyAccess().getSTRINGTerminalRuleCall());
	}
;

// Rule MessageType
ruleMessageType returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='sync'
			{
				$current = grammarAccess.getMessageTypeAccess().getSYNCEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getMessageTypeAccess().getSYNCEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='async'
			{
				$current = grammarAccess.getMessageTypeAccess().getASYNCEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getMessageTypeAccess().getASYNCEnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule ActorType
ruleActorType returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='human'
			{
				$current = grammarAccess.getActorTypeAccess().getHUMANEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getActorTypeAccess().getHUMANEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='machine'
			{
				$current = grammarAccess.getActorTypeAccess().getMACHINEEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getActorTypeAccess().getMACHINEEnumLiteralDeclaration_1());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
