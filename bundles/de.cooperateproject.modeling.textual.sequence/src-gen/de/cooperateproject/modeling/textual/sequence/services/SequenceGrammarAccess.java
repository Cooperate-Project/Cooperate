/*
 * generated by Xtext 2.11.0
 */
package de.cooperateproject.modeling.textual.sequence.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class SequenceGrammarAccess extends AbstractGrammarElementFinder {
	
	public class SequenceDiagramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.sequence.Sequence.SequenceDiagram");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSequenceDiagramAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cStartSeqdKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTitleAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTitleSTRINGTerminalRuleCall_2_0 = (RuleCall)cTitleAssignment_2.eContents().get(0);
		private final Assignment cRootPackageAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRootPackageRootPackageParserRuleCall_3_0 = (RuleCall)cRootPackageAssignment_3.eContents().get(0);
		private final Keyword cEndSeqdKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//SequenceDiagram:
		//	{SequenceDiagram}
		//	'@start-seqd' title=STRING
		//	rootPackage=RootPackage
		//	'@end-seqd';
		@Override public ParserRule getRule() { return rule; }
		
		//{SequenceDiagram} '@start-seqd' title=STRING rootPackage=RootPackage '@end-seqd'
		public Group getGroup() { return cGroup; }
		
		//{SequenceDiagram}
		public Action getSequenceDiagramAction_0() { return cSequenceDiagramAction_0; }
		
		//'@start-seqd'
		public Keyword getStartSeqdKeyword_1() { return cStartSeqdKeyword_1; }
		
		//title=STRING
		public Assignment getTitleAssignment_2() { return cTitleAssignment_2; }
		
		//STRING
		public RuleCall getTitleSTRINGTerminalRuleCall_2_0() { return cTitleSTRINGTerminalRuleCall_2_0; }
		
		//rootPackage=RootPackage
		public Assignment getRootPackageAssignment_3() { return cRootPackageAssignment_3; }
		
		//RootPackage
		public RuleCall getRootPackageRootPackageParserRuleCall_3_0() { return cRootPackageRootPackageParserRuleCall_3_0; }
		
		//'@end-seqd'
		public Keyword getEndSeqdKeyword_4() { return cEndSeqdKeyword_4; }
	}
	public class RootPackageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.sequence.Sequence.RootPackage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRootElementKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameFQNParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cActorsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cActorsActorParserRuleCall_2_0 = (RuleCall)cActorsAssignment_2.eContents().get(0);
		private final Assignment cBehaviorFragmentsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBehaviorFragmentsBehaviorFragmentParserRuleCall_3_0 = (RuleCall)cBehaviorFragmentsAssignment_3.eContents().get(0);
		
		//RootPackage:
		//	'rootElement' name=FQN
		//	actors+=Actor*
		//	behaviorFragments+=BehaviorFragment*;
		@Override public ParserRule getRule() { return rule; }
		
		//'rootElement' name=FQN actors+=Actor* behaviorFragments+=BehaviorFragment*
		public Group getGroup() { return cGroup; }
		
		//'rootElement'
		public Keyword getRootElementKeyword_0() { return cRootElementKeyword_0; }
		
		//name=FQN
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//FQN
		public RuleCall getNameFQNParserRuleCall_1_0() { return cNameFQNParserRuleCall_1_0; }
		
		//actors+=Actor*
		public Assignment getActorsAssignment_2() { return cActorsAssignment_2; }
		
		//Actor
		public RuleCall getActorsActorParserRuleCall_2_0() { return cActorsActorParserRuleCall_2_0; }
		
		//behaviorFragments+=BehaviorFragment*
		public Assignment getBehaviorFragmentsAssignment_3() { return cBehaviorFragmentsAssignment_3; }
		
		//BehaviorFragment
		public RuleCall getBehaviorFragmentsBehaviorFragmentParserRuleCall_3_0() { return cBehaviorFragmentsBehaviorFragmentParserRuleCall_3_0; }
	}
	public class ActorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.sequence.Sequence.Actor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cActKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDeferredAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cDeferredDeferredKeyword_1_0 = (Keyword)cDeferredAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Assignment cNameAssignment_2_0_0 = (Assignment)cGroup_2_0.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_2_0_0_0 = (RuleCall)cNameAssignment_2_0_0.eContents().get(0);
		private final Assignment cTypeMappingAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cTypeMappingActorClassifierMappingParserRuleCall_2_0_1_0 = (RuleCall)cTypeMappingAssignment_2_0_1.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Assignment cTypeMappingAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final RuleCall cTypeMappingActorClassifierMappingParserRuleCall_2_1_0_0 = (RuleCall)cTypeMappingAssignment_2_1_0.eContents().get(0);
		private final Keyword cAsKeyword_2_1_1 = (Keyword)cGroup_2_1.eContents().get(1);
		private final Assignment cAliasAssignment_2_1_2 = (Assignment)cGroup_2_1.eContents().get(2);
		private final RuleCall cAliasIDTerminalRuleCall_2_1_2_0 = (RuleCall)cAliasAssignment_2_1_2.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cAlternatives_2.eContents().get(2);
		private final Assignment cNameAssignment_2_2_0 = (Assignment)cGroup_2_2.eContents().get(0);
		private final RuleCall cNameSTRINGTerminalRuleCall_2_2_0_0 = (RuleCall)cNameAssignment_2_2_0.eContents().get(0);
		private final Assignment cTypeMappingAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cTypeMappingActorClassifierMappingParserRuleCall_2_2_1_0 = (RuleCall)cTypeMappingAssignment_2_2_1.eContents().get(0);
		private final Keyword cAsKeyword_2_2_2 = (Keyword)cGroup_2_2.eContents().get(2);
		private final Assignment cAliasAssignment_2_2_3 = (Assignment)cGroup_2_2.eContents().get(3);
		private final RuleCall cAliasIDTerminalRuleCall_2_2_3_0 = (RuleCall)cAliasAssignment_2_2_3.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cRoleKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cActorTypeAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cActorTypeActorTypeEnumRuleCall_3_1_0 = (RuleCall)cActorTypeAssignment_3_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//Actor:
		//	'act' deferred?='deferred'? (name=ID typeMapping=ActorClassifierMapping? | typeMapping=ActorClassifierMapping 'as'
		//	alias=ID | name=STRING typeMapping=ActorClassifierMapping? 'as' alias=ID) ('role[' actorType=ActorType ']')? //comments+=Comment? 
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'act' deferred?='deferred'? (name=ID typeMapping=ActorClassifierMapping? | typeMapping=ActorClassifierMapping 'as'
		//alias=ID | name=STRING typeMapping=ActorClassifierMapping? 'as' alias=ID) ('role[' actorType=ActorType ']')?
		public Group getGroup() { return cGroup; }
		
		//'act'
		public Keyword getActKeyword_0() { return cActKeyword_0; }
		
		//deferred?='deferred'?
		public Assignment getDeferredAssignment_1() { return cDeferredAssignment_1; }
		
		//'deferred'
		public Keyword getDeferredDeferredKeyword_1_0() { return cDeferredDeferredKeyword_1_0; }
		
		//name=ID typeMapping=ActorClassifierMapping? | typeMapping=ActorClassifierMapping 'as' alias=ID | name=STRING
		//typeMapping=ActorClassifierMapping? 'as' alias=ID
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//name=ID typeMapping=ActorClassifierMapping?
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//name=ID
		public Assignment getNameAssignment_2_0_0() { return cNameAssignment_2_0_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0_0_0() { return cNameIDTerminalRuleCall_2_0_0_0; }
		
		//typeMapping=ActorClassifierMapping?
		public Assignment getTypeMappingAssignment_2_0_1() { return cTypeMappingAssignment_2_0_1; }
		
		//ActorClassifierMapping
		public RuleCall getTypeMappingActorClassifierMappingParserRuleCall_2_0_1_0() { return cTypeMappingActorClassifierMappingParserRuleCall_2_0_1_0; }
		
		//typeMapping=ActorClassifierMapping 'as' alias=ID
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//typeMapping=ActorClassifierMapping
		public Assignment getTypeMappingAssignment_2_1_0() { return cTypeMappingAssignment_2_1_0; }
		
		//ActorClassifierMapping
		public RuleCall getTypeMappingActorClassifierMappingParserRuleCall_2_1_0_0() { return cTypeMappingActorClassifierMappingParserRuleCall_2_1_0_0; }
		
		//'as'
		public Keyword getAsKeyword_2_1_1() { return cAsKeyword_2_1_1; }
		
		//alias=ID
		public Assignment getAliasAssignment_2_1_2() { return cAliasAssignment_2_1_2; }
		
		//ID
		public RuleCall getAliasIDTerminalRuleCall_2_1_2_0() { return cAliasIDTerminalRuleCall_2_1_2_0; }
		
		//name=STRING typeMapping=ActorClassifierMapping? 'as' alias=ID
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//name=STRING
		public Assignment getNameAssignment_2_2_0() { return cNameAssignment_2_2_0; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_2_2_0_0() { return cNameSTRINGTerminalRuleCall_2_2_0_0; }
		
		//typeMapping=ActorClassifierMapping?
		public Assignment getTypeMappingAssignment_2_2_1() { return cTypeMappingAssignment_2_2_1; }
		
		//ActorClassifierMapping
		public RuleCall getTypeMappingActorClassifierMappingParserRuleCall_2_2_1_0() { return cTypeMappingActorClassifierMappingParserRuleCall_2_2_1_0; }
		
		//'as'
		public Keyword getAsKeyword_2_2_2() { return cAsKeyword_2_2_2; }
		
		//alias=ID
		public Assignment getAliasAssignment_2_2_3() { return cAliasAssignment_2_2_3; }
		
		//ID
		public RuleCall getAliasIDTerminalRuleCall_2_2_3_0() { return cAliasIDTerminalRuleCall_2_2_3_0; }
		
		//('role[' actorType=ActorType ']')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'role['
		public Keyword getRoleKeyword_3_0() { return cRoleKeyword_3_0; }
		
		//actorType=ActorType
		public Assignment getActorTypeAssignment_3_1() { return cActorTypeAssignment_3_1; }
		
		//ActorType
		public RuleCall getActorTypeActorTypeEnumRuleCall_3_1_0() { return cActorTypeActorTypeEnumRuleCall_3_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3_2() { return cRightSquareBracketKeyword_3_2; }
	}
	public class ActorClassifierMappingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.sequence.Sequence.ActorClassifierMapping");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cColonKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cClassifierAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cClassifierClassifierCrossReference_1_0 = (CrossReference)cClassifierAssignment_1.eContents().get(0);
		private final RuleCall cClassifierClassifierFQNParserRuleCall_1_0_1 = (RuleCall)cClassifierClassifierCrossReference_1_0.eContents().get(1);
		
		//ActorClassifierMapping:
		//	':' classifier=[uml::Classifier|FQN];
		@Override public ParserRule getRule() { return rule; }
		
		//':' classifier=[uml::Classifier|FQN]
		public Group getGroup() { return cGroup; }
		
		//':'
		public Keyword getColonKeyword_0() { return cColonKeyword_0; }
		
		//classifier=[uml::Classifier|FQN]
		public Assignment getClassifierAssignment_1() { return cClassifierAssignment_1; }
		
		//[uml::Classifier|FQN]
		public CrossReference getClassifierClassifierCrossReference_1_0() { return cClassifierClassifierCrossReference_1_0; }
		
		//FQN
		public RuleCall getClassifierClassifierFQNParserRuleCall_1_0_1() { return cClassifierClassifierFQNParserRuleCall_1_0_1; }
	}
	public class BehaviorFragmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.sequence.Sequence.BehaviorFragment");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMessageParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOccurenceSpecificationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCombinedFragmentParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//BehaviorFragment:
		//	Message | OccurenceSpecification | CombinedFragment;
		@Override public ParserRule getRule() { return rule; }
		
		//Message | OccurenceSpecification | CombinedFragment
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Message
		public RuleCall getMessageParserRuleCall_0() { return cMessageParserRuleCall_0; }
		
		//OccurenceSpecification
		public RuleCall getOccurenceSpecificationParserRuleCall_1() { return cOccurenceSpecificationParserRuleCall_1; }
		
		//CombinedFragment
		public RuleCall getCombinedFragmentParserRuleCall_2() { return cCombinedFragmentParserRuleCall_2; }
	}
	public class BehaviorFragmentsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.sequence.Sequence.BehaviorFragments");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cFragmentsAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cFragmentsBehaviorFragmentParserRuleCall_0_1_0 = (RuleCall)cFragmentsAssignment_0_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cFragmentsAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cFragmentsBehaviorFragmentParserRuleCall_1_0 = (RuleCall)cFragmentsAssignment_1.eContents().get(0);
		
		//BehaviorFragments:
		//	'{' fragments+=BehaviorFragment+ '}' | fragments+=BehaviorFragment;
		@Override public ParserRule getRule() { return rule; }
		
		//'{' fragments+=BehaviorFragment+ '}' | fragments+=BehaviorFragment
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'{' fragments+=BehaviorFragment+ '}'
		public Group getGroup_0() { return cGroup_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0_0() { return cLeftCurlyBracketKeyword_0_0; }
		
		//fragments+=BehaviorFragment+
		public Assignment getFragmentsAssignment_0_1() { return cFragmentsAssignment_0_1; }
		
		//BehaviorFragment
		public RuleCall getFragmentsBehaviorFragmentParserRuleCall_0_1_0() { return cFragmentsBehaviorFragmentParserRuleCall_0_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_0_2() { return cRightCurlyBracketKeyword_0_2; }
		
		//fragments+=BehaviorFragment
		public Assignment getFragmentsAssignment_1() { return cFragmentsAssignment_1; }
		
		//BehaviorFragment
		public RuleCall getFragmentsBehaviorFragmentParserRuleCall_1_0() { return cFragmentsBehaviorFragmentParserRuleCall_1_0; }
	}
	public class MessageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.sequence.Sequence.Message");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cStandardMessageParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cResponseMessageParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cFoundMessageParserRuleCall_0_2 = (RuleCall)cAlternatives_0.eContents().get(2);
		private final RuleCall cLostMessageParserRuleCall_0_3 = (RuleCall)cAlternatives_0.eContents().get(3);
		private final RuleCall cCreateMessageParserRuleCall_0_4 = (RuleCall)cAlternatives_0.eContents().get(4);
		private final RuleCall cDestructionMessageParserRuleCall_0_5 = (RuleCall)cAlternatives_0.eContents().get(5);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cNumKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cOrderAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOrderOrderParserRuleCall_1_1_0 = (RuleCall)cOrderAssignment_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cTimeConstraintAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTimeConstraintTimeConstraintParserRuleCall_2_0 = (RuleCall)cTimeConstraintAssignment_2.eContents().get(0);
		
		//Message:
		//	(StandardMessage | ResponseMessage | FoundMessage | LostMessage | CreateMessage | DestructionMessage) ('num['
		//	order=Order ']')?
		//	timeConstraint=TimeConstraint?;
		@Override public ParserRule getRule() { return rule; }
		
		//(StandardMessage | ResponseMessage | FoundMessage | LostMessage | CreateMessage | DestructionMessage) ('num['
		//order=Order ']')? timeConstraint=TimeConstraint?
		public Group getGroup() { return cGroup; }
		
		//StandardMessage | ResponseMessage | FoundMessage | LostMessage | CreateMessage | DestructionMessage
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//StandardMessage
		public RuleCall getStandardMessageParserRuleCall_0_0() { return cStandardMessageParserRuleCall_0_0; }
		
		//ResponseMessage
		public RuleCall getResponseMessageParserRuleCall_0_1() { return cResponseMessageParserRuleCall_0_1; }
		
		//FoundMessage
		public RuleCall getFoundMessageParserRuleCall_0_2() { return cFoundMessageParserRuleCall_0_2; }
		
		//LostMessage
		public RuleCall getLostMessageParserRuleCall_0_3() { return cLostMessageParserRuleCall_0_3; }
		
		//CreateMessage
		public RuleCall getCreateMessageParserRuleCall_0_4() { return cCreateMessageParserRuleCall_0_4; }
		
		//DestructionMessage
		public RuleCall getDestructionMessageParserRuleCall_0_5() { return cDestructionMessageParserRuleCall_0_5; }
		
		//('num[' order=Order ']')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'num['
		public Keyword getNumKeyword_1_0() { return cNumKeyword_1_0; }
		
		//order=Order
		public Assignment getOrderAssignment_1_1() { return cOrderAssignment_1_1; }
		
		//Order
		public RuleCall getOrderOrderParserRuleCall_1_1_0() { return cOrderOrderParserRuleCall_1_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_2() { return cRightSquareBracketKeyword_1_2; }
		
		//timeConstraint=TimeConstraint?
		public Assignment getTimeConstraintAssignment_2() { return cTimeConstraintAssignment_2; }
		
		//TimeConstraint
		public RuleCall getTimeConstraintTimeConstraintParserRuleCall_2_0() { return cTimeConstraintTimeConstraintParserRuleCall_2_0; }
	}
	public class TimeConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.sequence.Sequence.TimeConstraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTimeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConstraintsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConstraintsInnerTimeConstraintParserRuleCall_1_0 = (RuleCall)cConstraintsAssignment_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//TimeConstraint:
		//	'time[' constraints+=InnerTimeConstraint+ ']';
		@Override public ParserRule getRule() { return rule; }
		
		//'time[' constraints+=InnerTimeConstraint+ ']'
		public Group getGroup() { return cGroup; }
		
		//'time['
		public Keyword getTimeKeyword_0() { return cTimeKeyword_0; }
		
		//constraints+=InnerTimeConstraint+
		public Assignment getConstraintsAssignment_1() { return cConstraintsAssignment_1; }
		
		//InnerTimeConstraint
		public RuleCall getConstraintsInnerTimeConstraintParserRuleCall_1_0() { return cConstraintsInnerTimeConstraintParserRuleCall_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
	}
	public class InnerTimeConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.sequence.Sequence.InnerTimeConstraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeTimeConstraintTypeEnumRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//InnerTimeConstraint:
		//	type=TimeConstraintType '=' value=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//type=TimeConstraintType '=' value=STRING
		public Group getGroup() { return cGroup; }
		
		//type=TimeConstraintType
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//TimeConstraintType
		public RuleCall getTypeTimeConstraintTypeEnumRuleCall_0_0() { return cTypeTimeConstraintTypeEnumRuleCall_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//value=STRING
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_0() { return cValueSTRINGTerminalRuleCall_2_0; }
	}
	public class StandardMessageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.sequence.Sequence.StandardMessage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeMessageTypeEnumRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLeftAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cLeftActorCrossReference_3_0 = (CrossReference)cLeftAssignment_3.eContents().get(0);
		private final RuleCall cLeftActorFQNParserRuleCall_3_0_1 = (RuleCall)cLeftActorCrossReference_3_0.eContents().get(1);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cRightAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cRightActorCrossReference_5_0 = (CrossReference)cRightAssignment_5.eContents().get(0);
		private final RuleCall cRightActorFQNParserRuleCall_5_0_1 = (RuleCall)cRightActorCrossReference_5_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//StandardMessage:
		//	type=MessageType name=STRING '(' left=[Actor|FQN] ',' right=[Actor|FQN] ')';
		@Override public ParserRule getRule() { return rule; }
		
		//type=MessageType name=STRING '(' left=[Actor|FQN] ',' right=[Actor|FQN] ')'
		public Group getGroup() { return cGroup; }
		
		//type=MessageType
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//MessageType
		public RuleCall getTypeMessageTypeEnumRuleCall_0_0() { return cTypeMessageTypeEnumRuleCall_0_0; }
		
		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//left=[Actor|FQN]
		public Assignment getLeftAssignment_3() { return cLeftAssignment_3; }
		
		//[Actor|FQN]
		public CrossReference getLeftActorCrossReference_3_0() { return cLeftActorCrossReference_3_0; }
		
		//FQN
		public RuleCall getLeftActorFQNParserRuleCall_3_0_1() { return cLeftActorFQNParserRuleCall_3_0_1; }
		
		//','
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//right=[Actor|FQN]
		public Assignment getRightAssignment_5() { return cRightAssignment_5; }
		
		//[Actor|FQN]
		public CrossReference getRightActorCrossReference_5_0() { return cRightActorCrossReference_5_0; }
		
		//FQN
		public RuleCall getRightActorFQNParserRuleCall_5_0_1() { return cRightActorFQNParserRuleCall_5_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}
	public class ResponseMessageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.sequence.Sequence.ResponseMessage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRespKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cLeftAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final CrossReference cLeftActorCrossReference_3_0_0 = (CrossReference)cLeftAssignment_3_0.eContents().get(0);
		private final RuleCall cLeftActorFQNParserRuleCall_3_0_0_1 = (RuleCall)cLeftActorCrossReference_3_0_0.eContents().get(1);
		private final Keyword c_Keyword_3_1 = (Keyword)cAlternatives_3.eContents().get(1);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Assignment cRightAssignment_5_0 = (Assignment)cAlternatives_5.eContents().get(0);
		private final CrossReference cRightActorCrossReference_5_0_0 = (CrossReference)cRightAssignment_5_0.eContents().get(0);
		private final RuleCall cRightActorFQNParserRuleCall_5_0_0_1 = (RuleCall)cRightActorCrossReference_5_0_0.eContents().get(1);
		private final Keyword c_Keyword_5_1 = (Keyword)cAlternatives_5.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//ResponseMessage:
		//	'resp' name=STRING '(' (left=[Actor|FQN] | '_') ',' (right=[Actor|FQN] | '_') ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'resp' name=STRING '(' (left=[Actor|FQN] | '_') ',' (right=[Actor|FQN] | '_') ')'
		public Group getGroup() { return cGroup; }
		
		//'resp'
		public Keyword getRespKeyword_0() { return cRespKeyword_0; }
		
		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//left=[Actor|FQN] | '_'
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//left=[Actor|FQN]
		public Assignment getLeftAssignment_3_0() { return cLeftAssignment_3_0; }
		
		//[Actor|FQN]
		public CrossReference getLeftActorCrossReference_3_0_0() { return cLeftActorCrossReference_3_0_0; }
		
		//FQN
		public RuleCall getLeftActorFQNParserRuleCall_3_0_0_1() { return cLeftActorFQNParserRuleCall_3_0_0_1; }
		
		//'_'
		public Keyword get_Keyword_3_1() { return c_Keyword_3_1; }
		
		//','
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//right=[Actor|FQN] | '_'
		public Alternatives getAlternatives_5() { return cAlternatives_5; }
		
		//right=[Actor|FQN]
		public Assignment getRightAssignment_5_0() { return cRightAssignment_5_0; }
		
		//[Actor|FQN]
		public CrossReference getRightActorCrossReference_5_0_0() { return cRightActorCrossReference_5_0_0; }
		
		//FQN
		public RuleCall getRightActorFQNParserRuleCall_5_0_0_1() { return cRightActorFQNParserRuleCall_5_0_0_1; }
		
		//'_'
		public Keyword get_Keyword_5_1() { return c_Keyword_5_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}
	public class FoundMessageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.sequence.Sequence.FoundMessage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFoundKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeMessageTypeEnumRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameSTRINGTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword c_Keyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cRightAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cRightActorCrossReference_6_0 = (CrossReference)cRightAssignment_6.eContents().get(0);
		private final RuleCall cRightActorFQNParserRuleCall_6_0_1 = (RuleCall)cRightActorCrossReference_6_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//FoundMessage:
		//	'found'? type=MessageType name=STRING '(' '_' ',' right=[Actor|FQN] ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'found'? type=MessageType name=STRING '(' '_' ',' right=[Actor|FQN] ')'
		public Group getGroup() { return cGroup; }
		
		//'found'?
		public Keyword getFoundKeyword_0() { return cFoundKeyword_0; }
		
		//type=MessageType
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//MessageType
		public RuleCall getTypeMessageTypeEnumRuleCall_1_0() { return cTypeMessageTypeEnumRuleCall_1_0; }
		
		//name=STRING
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_2_0() { return cNameSTRINGTerminalRuleCall_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//'_'
		public Keyword get_Keyword_4() { return c_Keyword_4; }
		
		//','
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }
		
		//right=[Actor|FQN]
		public Assignment getRightAssignment_6() { return cRightAssignment_6; }
		
		//[Actor|FQN]
		public CrossReference getRightActorCrossReference_6_0() { return cRightActorCrossReference_6_0; }
		
		//FQN
		public RuleCall getRightActorFQNParserRuleCall_6_0_1() { return cRightActorFQNParserRuleCall_6_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}
	public class LostMessageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.sequence.Sequence.LostMessage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLostKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeMessageTypeEnumRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameSTRINGTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cLeftAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cLeftActorCrossReference_4_0 = (CrossReference)cLeftAssignment_4.eContents().get(0);
		private final RuleCall cLeftActorFQNParserRuleCall_4_0_1 = (RuleCall)cLeftActorCrossReference_4_0.eContents().get(1);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword c_Keyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//LostMessage:
		//	'lost'? type=MessageType name=STRING '(' left=[Actor|FQN] ',' '_' ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'lost'? type=MessageType name=STRING '(' left=[Actor|FQN] ',' '_' ')'
		public Group getGroup() { return cGroup; }
		
		//'lost'?
		public Keyword getLostKeyword_0() { return cLostKeyword_0; }
		
		//type=MessageType
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//MessageType
		public RuleCall getTypeMessageTypeEnumRuleCall_1_0() { return cTypeMessageTypeEnumRuleCall_1_0; }
		
		//name=STRING
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_2_0() { return cNameSTRINGTerminalRuleCall_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//left=[Actor|FQN]
		public Assignment getLeftAssignment_4() { return cLeftAssignment_4; }
		
		//[Actor|FQN]
		public CrossReference getLeftActorCrossReference_4_0() { return cLeftActorCrossReference_4_0; }
		
		//FQN
		public RuleCall getLeftActorFQNParserRuleCall_4_0_1() { return cLeftActorFQNParserRuleCall_4_0_1; }
		
		//','
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }
		
		//'_'
		public Keyword get_Keyword_6() { return c_Keyword_6; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}
	public class CreateMessageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.sequence.Sequence.CreateMessage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCreateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLeftAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cLeftActorCrossReference_3_0 = (CrossReference)cLeftAssignment_3.eContents().get(0);
		private final RuleCall cLeftActorFQNParserRuleCall_3_0_1 = (RuleCall)cLeftActorCrossReference_3_0.eContents().get(1);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cRightAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cRightActorCrossReference_5_0 = (CrossReference)cRightAssignment_5.eContents().get(0);
		private final RuleCall cRightActorFQNParserRuleCall_5_0_1 = (RuleCall)cRightActorCrossReference_5_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//CreateMessage:
		//	'create' name=STRING? '(' left=[Actor|FQN] ',' right=[Actor|FQN] ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'create' name=STRING? '(' left=[Actor|FQN] ',' right=[Actor|FQN] ')'
		public Group getGroup() { return cGroup; }
		
		//'create'
		public Keyword getCreateKeyword_0() { return cCreateKeyword_0; }
		
		//name=STRING?
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//left=[Actor|FQN]
		public Assignment getLeftAssignment_3() { return cLeftAssignment_3; }
		
		//[Actor|FQN]
		public CrossReference getLeftActorCrossReference_3_0() { return cLeftActorCrossReference_3_0; }
		
		//FQN
		public RuleCall getLeftActorFQNParserRuleCall_3_0_1() { return cLeftActorFQNParserRuleCall_3_0_1; }
		
		//','
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//right=[Actor|FQN]
		public Assignment getRightAssignment_5() { return cRightAssignment_5; }
		
		//[Actor|FQN]
		public CrossReference getRightActorCrossReference_5_0() { return cRightActorCrossReference_5_0; }
		
		//FQN
		public RuleCall getRightActorFQNParserRuleCall_5_0_1() { return cRightActorFQNParserRuleCall_5_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}
	public class DestructionMessageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.sequence.Sequence.DestructionMessage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDestKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLeftAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cLeftActorCrossReference_3_0 = (CrossReference)cLeftAssignment_3.eContents().get(0);
		private final RuleCall cLeftActorFQNParserRuleCall_3_0_1 = (RuleCall)cLeftActorCrossReference_3_0.eContents().get(1);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cRightAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cRightActorCrossReference_5_0 = (CrossReference)cRightAssignment_5.eContents().get(0);
		private final RuleCall cRightActorFQNParserRuleCall_5_0_1 = (RuleCall)cRightActorCrossReference_5_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//DestructionMessage:
		//	'dest' name=STRING? '(' left=[Actor|FQN] ',' right=[Actor|FQN] ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'dest' name=STRING? '(' left=[Actor|FQN] ',' right=[Actor|FQN] ')'
		public Group getGroup() { return cGroup; }
		
		//'dest'
		public Keyword getDestKeyword_0() { return cDestKeyword_0; }
		
		//name=STRING?
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//left=[Actor|FQN]
		public Assignment getLeftAssignment_3() { return cLeftAssignment_3; }
		
		//[Actor|FQN]
		public CrossReference getLeftActorCrossReference_3_0() { return cLeftActorCrossReference_3_0; }
		
		//FQN
		public RuleCall getLeftActorFQNParserRuleCall_3_0_1() { return cLeftActorFQNParserRuleCall_3_0_1; }
		
		//','
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//right=[Actor|FQN]
		public Assignment getRightAssignment_5() { return cRightAssignment_5; }
		
		//[Actor|FQN]
		public CrossReference getRightActorCrossReference_5_0() { return cRightActorCrossReference_5_0; }
		
		//FQN
		public RuleCall getRightActorFQNParserRuleCall_5_0_1() { return cRightActorFQNParserRuleCall_5_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}
	public class OccurenceSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.sequence.Sequence.OccurenceSpecification");
		private final RuleCall cDestructionOccurenceSpecificationParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//OccurenceSpecification:
		//	DestructionOccurenceSpecification;
		@Override public ParserRule getRule() { return rule; }
		
		//DestructionOccurenceSpecification
		public RuleCall getDestructionOccurenceSpecificationParserRuleCall() { return cDestructionOccurenceSpecificationParserRuleCall; }
	}
	public class DestructionOccurenceSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.sequence.Sequence.DestructionOccurenceSpecification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDestKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//DestructionOccurenceSpecification:
		//	'dest' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'dest' name=ID
		public Group getGroup() { return cGroup; }
		
		//'dest'
		public Keyword getDestKeyword_0() { return cDestKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class CombinedFragmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.sequence.Sequence.CombinedFragment");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAlternativeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOptionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cParallelParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cCriticalParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cLoopParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//CombinedFragment:
		//	Alternative | Option | Parallel | Critical | Loop;
		@Override public ParserRule getRule() { return rule; }
		
		//Alternative | Option | Parallel | Critical | Loop
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Alternative
		public RuleCall getAlternativeParserRuleCall_0() { return cAlternativeParserRuleCall_0; }
		
		//Option
		public RuleCall getOptionParserRuleCall_1() { return cOptionParserRuleCall_1; }
		
		//Parallel
		public RuleCall getParallelParserRuleCall_2() { return cParallelParserRuleCall_2; }
		
		//Critical
		public RuleCall getCriticalParserRuleCall_3() { return cCriticalParserRuleCall_3; }
		
		//Loop
		public RuleCall getLoopParserRuleCall_4() { return cLoopParserRuleCall_4; }
	}
	public class AlternativeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.sequence.Sequence.Alternative");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAltKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAlternativesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAlternativesBehaviorFragmentsWithConditionParserRuleCall_2_0 = (RuleCall)cAlternativesAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Alternative:
		//	'alt' '{'
		//	alternatives+=BehaviorFragmentsWithCondition+
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'alt' '{' alternatives+=BehaviorFragmentsWithCondition+ '}'
		public Group getGroup() { return cGroup; }
		
		//'alt'
		public Keyword getAltKeyword_0() { return cAltKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//alternatives+=BehaviorFragmentsWithCondition+
		public Assignment getAlternativesAssignment_2() { return cAlternativesAssignment_2; }
		
		//BehaviorFragmentsWithCondition
		public RuleCall getAlternativesBehaviorFragmentsWithConditionParserRuleCall_2_0() { return cAlternativesBehaviorFragmentsWithConditionParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class OptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.sequence.Sequence.Option");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOptKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOptionalAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOptionalBehaviorFragmentsWithConditionParserRuleCall_2_0 = (RuleCall)cOptionalAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Option:
		//	'opt' '{'
		//	optional+=BehaviorFragmentsWithCondition
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'opt' '{' optional+=BehaviorFragmentsWithCondition '}'
		public Group getGroup() { return cGroup; }
		
		//'opt'
		public Keyword getOptKeyword_0() { return cOptKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//optional+=BehaviorFragmentsWithCondition
		public Assignment getOptionalAssignment_2() { return cOptionalAssignment_2; }
		
		//BehaviorFragmentsWithCondition
		public RuleCall getOptionalBehaviorFragmentsWithConditionParserRuleCall_2_0() { return cOptionalBehaviorFragmentsWithConditionParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class ParallelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.sequence.Sequence.Parallel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cParKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cParallelsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParallelsBehaviorFragmentsParserRuleCall_2_0 = (RuleCall)cParallelsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Parallel:
		//	'par' '{'
		//	parallels+=BehaviorFragments+
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'par' '{' parallels+=BehaviorFragments+ '}'
		public Group getGroup() { return cGroup; }
		
		//'par'
		public Keyword getParKeyword_0() { return cParKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//parallels+=BehaviorFragments+
		public Assignment getParallelsAssignment_2() { return cParallelsAssignment_2; }
		
		//BehaviorFragments
		public RuleCall getParallelsBehaviorFragmentsParserRuleCall_2_0() { return cParallelsBehaviorFragmentsParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class CriticalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.sequence.Sequence.Critical");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCriticalKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFragmentsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFragmentsBehaviorFragmentParserRuleCall_2_0 = (RuleCall)cFragmentsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Critical:
		//	'critical' '{'
		//	fragments+=BehaviorFragment+
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'critical' '{' fragments+=BehaviorFragment+ '}'
		public Group getGroup() { return cGroup; }
		
		//'critical'
		public Keyword getCriticalKeyword_0() { return cCriticalKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//fragments+=BehaviorFragment+
		public Assignment getFragmentsAssignment_2() { return cFragmentsAssignment_2; }
		
		//BehaviorFragment
		public RuleCall getFragmentsBehaviorFragmentParserRuleCall_2_0() { return cFragmentsBehaviorFragmentParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class LoopElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.sequence.Sequence.Loop");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLoopKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConditionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionSTRINGTerminalRuleCall_2_0 = (RuleCall)cConditionAssignment_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cFragmentsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cFragmentsBehaviorFragmentParserRuleCall_5_0 = (RuleCall)cFragmentsAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Loop:
		//	'loop' '[' condition=STRING ']' '{'
		//	fragments+=BehaviorFragment+
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'loop' '[' condition=STRING ']' '{' fragments+=BehaviorFragment+ '}'
		public Group getGroup() { return cGroup; }
		
		//'loop'
		public Keyword getLoopKeyword_0() { return cLoopKeyword_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//condition=STRING
		public Assignment getConditionAssignment_2() { return cConditionAssignment_2; }
		
		//STRING
		public RuleCall getConditionSTRINGTerminalRuleCall_2_0() { return cConditionSTRINGTerminalRuleCall_2_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//fragments+=BehaviorFragment+
		public Assignment getFragmentsAssignment_5() { return cFragmentsAssignment_5; }
		
		//BehaviorFragment
		public RuleCall getFragmentsBehaviorFragmentParserRuleCall_5_0() { return cFragmentsBehaviorFragmentParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class BehaviorFragmentsWithConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.sequence.Sequence.BehaviorFragmentsWithCondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionSTRINGTerminalRuleCall_1_0 = (RuleCall)cConditionAssignment_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Assignment cFragmentsAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final RuleCall cFragmentsBehaviorFragmentParserRuleCall_3_0_1_0 = (RuleCall)cFragmentsAssignment_3_0_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_0_2 = (Keyword)cGroup_3_0.eContents().get(2);
		private final Assignment cFragmentsAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cFragmentsBehaviorFragmentParserRuleCall_3_1_0 = (RuleCall)cFragmentsAssignment_3_1.eContents().get(0);
		
		//BehaviorFragmentsWithCondition:
		//	'[' condition=STRING ']' ('{' fragments+=BehaviorFragment+ '}' | fragments+=BehaviorFragment);
		@Override public ParserRule getRule() { return rule; }
		
		//'[' condition=STRING ']' ('{' fragments+=BehaviorFragment+ '}' | fragments+=BehaviorFragment)
		public Group getGroup() { return cGroup; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//condition=STRING
		public Assignment getConditionAssignment_1() { return cConditionAssignment_1; }
		
		//STRING
		public RuleCall getConditionSTRINGTerminalRuleCall_1_0() { return cConditionSTRINGTerminalRuleCall_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
		
		//'{' fragments+=BehaviorFragment+ '}' | fragments+=BehaviorFragment
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//'{' fragments+=BehaviorFragment+ '}'
		public Group getGroup_3_0() { return cGroup_3_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3_0_0() { return cLeftCurlyBracketKeyword_3_0_0; }
		
		//fragments+=BehaviorFragment+
		public Assignment getFragmentsAssignment_3_0_1() { return cFragmentsAssignment_3_0_1; }
		
		//BehaviorFragment
		public RuleCall getFragmentsBehaviorFragmentParserRuleCall_3_0_1_0() { return cFragmentsBehaviorFragmentParserRuleCall_3_0_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3_0_2() { return cRightCurlyBracketKeyword_3_0_2; }
		
		//fragments+=BehaviorFragment
		public Assignment getFragmentsAssignment_3_1() { return cFragmentsAssignment_3_1; }
		
		//BehaviorFragment
		public RuleCall getFragmentsBehaviorFragmentParserRuleCall_3_1_0() { return cFragmentsBehaviorFragmentParserRuleCall_3_1_0; }
	}
	public class FQNElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.sequence.Sequence.FQN");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//FQN:
		//	ID ('.' ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	public class OrderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.sequence.Sequence.Order");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//Order:
		//	INT ('.' INT)*;
		@Override public ParserRule getRule() { return rule; }
		
		//INT ('.' INT)*
		public Group getGroup() { return cGroup; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//('.' INT)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1_1() { return cINTTerminalRuleCall_1_1; }
	}
	public class CommentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.sequence.Sequence.Comment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNoteKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cBodyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBodyCommentBodyParserRuleCall_1_0 = (RuleCall)cBodyAssignment_1.eContents().get(0);
		
		//Comment commons::Comment:
		//	'note' body=CommentBody;
		@Override public ParserRule getRule() { return rule; }
		
		//'note' body=CommentBody
		public Group getGroup() { return cGroup; }
		
		//'note'
		public Keyword getNoteKeyword_0() { return cNoteKeyword_0; }
		
		//body=CommentBody
		public Assignment getBodyAssignment_1() { return cBodyAssignment_1; }
		
		//CommentBody
		public RuleCall getBodyCommentBodyParserRuleCall_1_0() { return cBodyCommentBodyParserRuleCall_1_0; }
	}
	public class CommentBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.sequence.Sequence.CommentBody");
		private final RuleCall cSTRINGTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//CommentBody:
		//	STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall() { return cSTRINGTerminalRuleCall; }
	}
	
	public class MessageTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.sequence.Sequence.MessageType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSYNCEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSYNCSyncKeyword_0_0 = (Keyword)cSYNCEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cASYNCEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cASYNCAsyncKeyword_1_0 = (Keyword)cASYNCEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum MessageType:
		//	SYNC="sync"
		//	| ASYNC="async";
		public EnumRule getRule() { return rule; }
		
		//SYNC="sync" | ASYNC="async"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SYNC="sync"
		public EnumLiteralDeclaration getSYNCEnumLiteralDeclaration_0() { return cSYNCEnumLiteralDeclaration_0; }
		
		//"sync"
		public Keyword getSYNCSyncKeyword_0_0() { return cSYNCSyncKeyword_0_0; }
		
		//ASYNC="async"
		public EnumLiteralDeclaration getASYNCEnumLiteralDeclaration_1() { return cASYNCEnumLiteralDeclaration_1; }
		
		//"async"
		public Keyword getASYNCAsyncKeyword_1_0() { return cASYNCAsyncKeyword_1_0; }
	}
	public class ActorTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.sequence.Sequence.ActorType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cHUMANEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cHUMANHumanKeyword_0_0 = (Keyword)cHUMANEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMACHINEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMACHINEMachineKeyword_1_0 = (Keyword)cMACHINEEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum ActorType:
		//	HUMAN='human'
		//	| MACHINE='machine';
		public EnumRule getRule() { return rule; }
		
		//HUMAN='human' | MACHINE='machine'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//HUMAN='human'
		public EnumLiteralDeclaration getHUMANEnumLiteralDeclaration_0() { return cHUMANEnumLiteralDeclaration_0; }
		
		//'human'
		public Keyword getHUMANHumanKeyword_0_0() { return cHUMANHumanKeyword_0_0; }
		
		//MACHINE='machine'
		public EnumLiteralDeclaration getMACHINEEnumLiteralDeclaration_1() { return cMACHINEEnumLiteralDeclaration_1; }
		
		//'machine'
		public Keyword getMACHINEMachineKeyword_1_0() { return cMACHINEMachineKeyword_1_0; }
	}
	public class TimeConstraintTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.sequence.Sequence.TimeConstraintType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cDURATIONEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cDURATIONDKeyword_0_0 = (Keyword)cDURATIONEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cTIMEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cTIMETKeyword_1_0 = (Keyword)cTIMEEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cMAXIMUMEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cMAXIMUMMaxKeyword_2_0 = (Keyword)cMAXIMUMEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cDIFFERENCEEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cDIFFERENCEDiffKeyword_3_0 = (Keyword)cDIFFERENCEEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum TimeConstraintType:
		//	DURATION='d'
		//	| TIME='t'
		//	| MAXIMUM='max'
		//	| DIFFERENCE='diff';
		public EnumRule getRule() { return rule; }
		
		//DURATION='d' | TIME='t' | MAXIMUM='max' | DIFFERENCE='diff'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DURATION='d'
		public EnumLiteralDeclaration getDURATIONEnumLiteralDeclaration_0() { return cDURATIONEnumLiteralDeclaration_0; }
		
		//'d'
		public Keyword getDURATIONDKeyword_0_0() { return cDURATIONDKeyword_0_0; }
		
		//TIME='t'
		public EnumLiteralDeclaration getTIMEEnumLiteralDeclaration_1() { return cTIMEEnumLiteralDeclaration_1; }
		
		//'t'
		public Keyword getTIMETKeyword_1_0() { return cTIMETKeyword_1_0; }
		
		//MAXIMUM='max'
		public EnumLiteralDeclaration getMAXIMUMEnumLiteralDeclaration_2() { return cMAXIMUMEnumLiteralDeclaration_2; }
		
		//'max'
		public Keyword getMAXIMUMMaxKeyword_2_0() { return cMAXIMUMMaxKeyword_2_0; }
		
		//DIFFERENCE='diff'
		public EnumLiteralDeclaration getDIFFERENCEEnumLiteralDeclaration_3() { return cDIFFERENCEEnumLiteralDeclaration_3; }
		
		//'diff'
		public Keyword getDIFFERENCEDiffKeyword_3_0() { return cDIFFERENCEDiffKeyword_3_0; }
	}
	
	private final SequenceDiagramElements pSequenceDiagram;
	private final RootPackageElements pRootPackage;
	private final ActorElements pActor;
	private final ActorClassifierMappingElements pActorClassifierMapping;
	private final BehaviorFragmentElements pBehaviorFragment;
	private final BehaviorFragmentsElements pBehaviorFragments;
	private final MessageElements pMessage;
	private final TimeConstraintElements pTimeConstraint;
	private final InnerTimeConstraintElements pInnerTimeConstraint;
	private final StandardMessageElements pStandardMessage;
	private final ResponseMessageElements pResponseMessage;
	private final FoundMessageElements pFoundMessage;
	private final LostMessageElements pLostMessage;
	private final CreateMessageElements pCreateMessage;
	private final DestructionMessageElements pDestructionMessage;
	private final OccurenceSpecificationElements pOccurenceSpecification;
	private final DestructionOccurenceSpecificationElements pDestructionOccurenceSpecification;
	private final CombinedFragmentElements pCombinedFragment;
	private final AlternativeElements pAlternative;
	private final OptionElements pOption;
	private final ParallelElements pParallel;
	private final CriticalElements pCritical;
	private final LoopElements pLoop;
	private final BehaviorFragmentsWithConditionElements pBehaviorFragmentsWithCondition;
	private final FQNElements pFQN;
	private final OrderElements pOrder;
	private final CommentElements pComment;
	private final CommentBodyElements pCommentBody;
	private final MessageTypeElements eMessageType;
	private final ActorTypeElements eActorType;
	private final TimeConstraintTypeElements eTimeConstraintType;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public SequenceGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pSequenceDiagram = new SequenceDiagramElements();
		this.pRootPackage = new RootPackageElements();
		this.pActor = new ActorElements();
		this.pActorClassifierMapping = new ActorClassifierMappingElements();
		this.pBehaviorFragment = new BehaviorFragmentElements();
		this.pBehaviorFragments = new BehaviorFragmentsElements();
		this.pMessage = new MessageElements();
		this.pTimeConstraint = new TimeConstraintElements();
		this.pInnerTimeConstraint = new InnerTimeConstraintElements();
		this.pStandardMessage = new StandardMessageElements();
		this.pResponseMessage = new ResponseMessageElements();
		this.pFoundMessage = new FoundMessageElements();
		this.pLostMessage = new LostMessageElements();
		this.pCreateMessage = new CreateMessageElements();
		this.pDestructionMessage = new DestructionMessageElements();
		this.pOccurenceSpecification = new OccurenceSpecificationElements();
		this.pDestructionOccurenceSpecification = new DestructionOccurenceSpecificationElements();
		this.pCombinedFragment = new CombinedFragmentElements();
		this.pAlternative = new AlternativeElements();
		this.pOption = new OptionElements();
		this.pParallel = new ParallelElements();
		this.pCritical = new CriticalElements();
		this.pLoop = new LoopElements();
		this.pBehaviorFragmentsWithCondition = new BehaviorFragmentsWithConditionElements();
		this.pFQN = new FQNElements();
		this.pOrder = new OrderElements();
		this.pComment = new CommentElements();
		this.pCommentBody = new CommentBodyElements();
		this.eMessageType = new MessageTypeElements();
		this.eActorType = new ActorTypeElements();
		this.eTimeConstraintType = new TimeConstraintTypeElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.cooperateproject.modeling.textual.sequence.Sequence".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//SequenceDiagram:
	//	{SequenceDiagram}
	//	'@start-seqd' title=STRING
	//	rootPackage=RootPackage
	//	'@end-seqd';
	public SequenceDiagramElements getSequenceDiagramAccess() {
		return pSequenceDiagram;
	}
	
	public ParserRule getSequenceDiagramRule() {
		return getSequenceDiagramAccess().getRule();
	}
	
	//RootPackage:
	//	'rootElement' name=FQN
	//	actors+=Actor*
	//	behaviorFragments+=BehaviorFragment*;
	public RootPackageElements getRootPackageAccess() {
		return pRootPackage;
	}
	
	public ParserRule getRootPackageRule() {
		return getRootPackageAccess().getRule();
	}
	
	//Actor:
	//	'act' deferred?='deferred'? (name=ID typeMapping=ActorClassifierMapping? | typeMapping=ActorClassifierMapping 'as'
	//	alias=ID | name=STRING typeMapping=ActorClassifierMapping? 'as' alias=ID) ('role[' actorType=ActorType ']')? //comments+=Comment? 
	//;
	public ActorElements getActorAccess() {
		return pActor;
	}
	
	public ParserRule getActorRule() {
		return getActorAccess().getRule();
	}
	
	//ActorClassifierMapping:
	//	':' classifier=[uml::Classifier|FQN];
	public ActorClassifierMappingElements getActorClassifierMappingAccess() {
		return pActorClassifierMapping;
	}
	
	public ParserRule getActorClassifierMappingRule() {
		return getActorClassifierMappingAccess().getRule();
	}
	
	//BehaviorFragment:
	//	Message | OccurenceSpecification | CombinedFragment;
	public BehaviorFragmentElements getBehaviorFragmentAccess() {
		return pBehaviorFragment;
	}
	
	public ParserRule getBehaviorFragmentRule() {
		return getBehaviorFragmentAccess().getRule();
	}
	
	//BehaviorFragments:
	//	'{' fragments+=BehaviorFragment+ '}' | fragments+=BehaviorFragment;
	public BehaviorFragmentsElements getBehaviorFragmentsAccess() {
		return pBehaviorFragments;
	}
	
	public ParserRule getBehaviorFragmentsRule() {
		return getBehaviorFragmentsAccess().getRule();
	}
	
	//Message:
	//	(StandardMessage | ResponseMessage | FoundMessage | LostMessage | CreateMessage | DestructionMessage) ('num['
	//	order=Order ']')?
	//	timeConstraint=TimeConstraint?;
	public MessageElements getMessageAccess() {
		return pMessage;
	}
	
	public ParserRule getMessageRule() {
		return getMessageAccess().getRule();
	}
	
	//TimeConstraint:
	//	'time[' constraints+=InnerTimeConstraint+ ']';
	public TimeConstraintElements getTimeConstraintAccess() {
		return pTimeConstraint;
	}
	
	public ParserRule getTimeConstraintRule() {
		return getTimeConstraintAccess().getRule();
	}
	
	//InnerTimeConstraint:
	//	type=TimeConstraintType '=' value=STRING;
	public InnerTimeConstraintElements getInnerTimeConstraintAccess() {
		return pInnerTimeConstraint;
	}
	
	public ParserRule getInnerTimeConstraintRule() {
		return getInnerTimeConstraintAccess().getRule();
	}
	
	//StandardMessage:
	//	type=MessageType name=STRING '(' left=[Actor|FQN] ',' right=[Actor|FQN] ')';
	public StandardMessageElements getStandardMessageAccess() {
		return pStandardMessage;
	}
	
	public ParserRule getStandardMessageRule() {
		return getStandardMessageAccess().getRule();
	}
	
	//ResponseMessage:
	//	'resp' name=STRING '(' (left=[Actor|FQN] | '_') ',' (right=[Actor|FQN] | '_') ')';
	public ResponseMessageElements getResponseMessageAccess() {
		return pResponseMessage;
	}
	
	public ParserRule getResponseMessageRule() {
		return getResponseMessageAccess().getRule();
	}
	
	//FoundMessage:
	//	'found'? type=MessageType name=STRING '(' '_' ',' right=[Actor|FQN] ')';
	public FoundMessageElements getFoundMessageAccess() {
		return pFoundMessage;
	}
	
	public ParserRule getFoundMessageRule() {
		return getFoundMessageAccess().getRule();
	}
	
	//LostMessage:
	//	'lost'? type=MessageType name=STRING '(' left=[Actor|FQN] ',' '_' ')';
	public LostMessageElements getLostMessageAccess() {
		return pLostMessage;
	}
	
	public ParserRule getLostMessageRule() {
		return getLostMessageAccess().getRule();
	}
	
	//CreateMessage:
	//	'create' name=STRING? '(' left=[Actor|FQN] ',' right=[Actor|FQN] ')';
	public CreateMessageElements getCreateMessageAccess() {
		return pCreateMessage;
	}
	
	public ParserRule getCreateMessageRule() {
		return getCreateMessageAccess().getRule();
	}
	
	//DestructionMessage:
	//	'dest' name=STRING? '(' left=[Actor|FQN] ',' right=[Actor|FQN] ')';
	public DestructionMessageElements getDestructionMessageAccess() {
		return pDestructionMessage;
	}
	
	public ParserRule getDestructionMessageRule() {
		return getDestructionMessageAccess().getRule();
	}
	
	//OccurenceSpecification:
	//	DestructionOccurenceSpecification;
	public OccurenceSpecificationElements getOccurenceSpecificationAccess() {
		return pOccurenceSpecification;
	}
	
	public ParserRule getOccurenceSpecificationRule() {
		return getOccurenceSpecificationAccess().getRule();
	}
	
	//DestructionOccurenceSpecification:
	//	'dest' name=ID;
	public DestructionOccurenceSpecificationElements getDestructionOccurenceSpecificationAccess() {
		return pDestructionOccurenceSpecification;
	}
	
	public ParserRule getDestructionOccurenceSpecificationRule() {
		return getDestructionOccurenceSpecificationAccess().getRule();
	}
	
	//CombinedFragment:
	//	Alternative | Option | Parallel | Critical | Loop;
	public CombinedFragmentElements getCombinedFragmentAccess() {
		return pCombinedFragment;
	}
	
	public ParserRule getCombinedFragmentRule() {
		return getCombinedFragmentAccess().getRule();
	}
	
	//Alternative:
	//	'alt' '{'
	//	alternatives+=BehaviorFragmentsWithCondition+
	//	'}';
	public AlternativeElements getAlternativeAccess() {
		return pAlternative;
	}
	
	public ParserRule getAlternativeRule() {
		return getAlternativeAccess().getRule();
	}
	
	//Option:
	//	'opt' '{'
	//	optional+=BehaviorFragmentsWithCondition
	//	'}';
	public OptionElements getOptionAccess() {
		return pOption;
	}
	
	public ParserRule getOptionRule() {
		return getOptionAccess().getRule();
	}
	
	//Parallel:
	//	'par' '{'
	//	parallels+=BehaviorFragments+
	//	'}';
	public ParallelElements getParallelAccess() {
		return pParallel;
	}
	
	public ParserRule getParallelRule() {
		return getParallelAccess().getRule();
	}
	
	//Critical:
	//	'critical' '{'
	//	fragments+=BehaviorFragment+
	//	'}';
	public CriticalElements getCriticalAccess() {
		return pCritical;
	}
	
	public ParserRule getCriticalRule() {
		return getCriticalAccess().getRule();
	}
	
	//Loop:
	//	'loop' '[' condition=STRING ']' '{'
	//	fragments+=BehaviorFragment+
	//	'}';
	public LoopElements getLoopAccess() {
		return pLoop;
	}
	
	public ParserRule getLoopRule() {
		return getLoopAccess().getRule();
	}
	
	//BehaviorFragmentsWithCondition:
	//	'[' condition=STRING ']' ('{' fragments+=BehaviorFragment+ '}' | fragments+=BehaviorFragment);
	public BehaviorFragmentsWithConditionElements getBehaviorFragmentsWithConditionAccess() {
		return pBehaviorFragmentsWithCondition;
	}
	
	public ParserRule getBehaviorFragmentsWithConditionRule() {
		return getBehaviorFragmentsWithConditionAccess().getRule();
	}
	
	//FQN:
	//	ID ('.' ID)*;
	public FQNElements getFQNAccess() {
		return pFQN;
	}
	
	public ParserRule getFQNRule() {
		return getFQNAccess().getRule();
	}
	
	//Order:
	//	INT ('.' INT)*;
	public OrderElements getOrderAccess() {
		return pOrder;
	}
	
	public ParserRule getOrderRule() {
		return getOrderAccess().getRule();
	}
	
	//Comment commons::Comment:
	//	'note' body=CommentBody;
	public CommentElements getCommentAccess() {
		return pComment;
	}
	
	public ParserRule getCommentRule() {
		return getCommentAccess().getRule();
	}
	
	//CommentBody:
	//	STRING;
	public CommentBodyElements getCommentBodyAccess() {
		return pCommentBody;
	}
	
	public ParserRule getCommentBodyRule() {
		return getCommentBodyAccess().getRule();
	}
	
	//enum MessageType:
	//	SYNC="sync"
	//	| ASYNC="async";
	public MessageTypeElements getMessageTypeAccess() {
		return eMessageType;
	}
	
	public EnumRule getMessageTypeRule() {
		return getMessageTypeAccess().getRule();
	}
	
	//enum ActorType:
	//	HUMAN='human'
	//	| MACHINE='machine';
	public ActorTypeElements getActorTypeAccess() {
		return eActorType;
	}
	
	public EnumRule getActorTypeRule() {
		return getActorTypeAccess().getRule();
	}
	
	//enum TimeConstraintType:
	//	DURATION='d'
	//	| TIME='t'
	//	| MAXIMUM='max'
	//	| DIFFERENCE='diff';
	public TimeConstraintTypeElements getTimeConstraintTypeAccess() {
		return eTimeConstraintType;
	}
	
	public EnumRule getTimeConstraintTypeRule() {
		return getTimeConstraintTypeAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
