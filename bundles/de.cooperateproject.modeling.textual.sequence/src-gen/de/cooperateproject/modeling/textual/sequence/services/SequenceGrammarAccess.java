/*
 * generated by Xtext 2.11.0
 */
package de.cooperateproject.modeling.textual.sequence.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class SequenceGrammarAccess extends AbstractGrammarElementFinder {
	
	public class SequenceDiagramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.sequence.Sequence.SequenceDiagram");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSequenceDiagramAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cStartSeqdKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTitleAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTitleSTRINGTerminalRuleCall_2_0 = (RuleCall)cTitleAssignment_2.eContents().get(0);
		private final Assignment cRootPackageAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRootPackageRootPackageParserRuleCall_3_0 = (RuleCall)cRootPackageAssignment_3.eContents().get(0);
		private final Assignment cActorsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cActorsActorParserRuleCall_4_0 = (RuleCall)cActorsAssignment_4.eContents().get(0);
		private final Assignment cFragmentsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cFragmentsFragmentParserRuleCall_5_0 = (RuleCall)cFragmentsAssignment_5.eContents().get(0);
		private final Assignment cFragmentsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final Alternatives cFragmentsAlternatives_6_0 = (Alternatives)cFragmentsAssignment_6.eContents().get(0);
		private final RuleCall cFragmentsConstraintParserRuleCall_6_0_0 = (RuleCall)cFragmentsAlternatives_6_0.eContents().get(0);
		private final RuleCall cFragmentsObservationParserRuleCall_6_0_1 = (RuleCall)cFragmentsAlternatives_6_0.eContents().get(1);
		private final Keyword cEndSeqdKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//SequenceDiagram:
		//	{SequenceDiagram}
		//	'@start-seqd' title=STRING
		//	rootPackage=RootPackage
		//	actors+=Actor*
		//	fragments+=Fragment*
		//	fragments+=(Constraint | Observation)*
		//	'@end-seqd';
		@Override public ParserRule getRule() { return rule; }
		
		//{SequenceDiagram} '@start-seqd' title=STRING rootPackage=RootPackage actors+=Actor* fragments+=Fragment*
		//fragments+=(Constraint | Observation)* '@end-seqd'
		public Group getGroup() { return cGroup; }
		
		//{SequenceDiagram}
		public Action getSequenceDiagramAction_0() { return cSequenceDiagramAction_0; }
		
		//'@start-seqd'
		public Keyword getStartSeqdKeyword_1() { return cStartSeqdKeyword_1; }
		
		//title=STRING
		public Assignment getTitleAssignment_2() { return cTitleAssignment_2; }
		
		//STRING
		public RuleCall getTitleSTRINGTerminalRuleCall_2_0() { return cTitleSTRINGTerminalRuleCall_2_0; }
		
		//rootPackage=RootPackage
		public Assignment getRootPackageAssignment_3() { return cRootPackageAssignment_3; }
		
		//RootPackage
		public RuleCall getRootPackageRootPackageParserRuleCall_3_0() { return cRootPackageRootPackageParserRuleCall_3_0; }
		
		//actors+=Actor*
		public Assignment getActorsAssignment_4() { return cActorsAssignment_4; }
		
		//Actor
		public RuleCall getActorsActorParserRuleCall_4_0() { return cActorsActorParserRuleCall_4_0; }
		
		//fragments+=Fragment*
		public Assignment getFragmentsAssignment_5() { return cFragmentsAssignment_5; }
		
		//Fragment
		public RuleCall getFragmentsFragmentParserRuleCall_5_0() { return cFragmentsFragmentParserRuleCall_5_0; }
		
		//fragments+=(Constraint | Observation)*
		public Assignment getFragmentsAssignment_6() { return cFragmentsAssignment_6; }
		
		//(Constraint | Observation)
		public Alternatives getFragmentsAlternatives_6_0() { return cFragmentsAlternatives_6_0; }
		
		//Constraint
		public RuleCall getFragmentsConstraintParserRuleCall_6_0_0() { return cFragmentsConstraintParserRuleCall_6_0_0; }
		
		//Observation
		public RuleCall getFragmentsObservationParserRuleCall_6_0_1() { return cFragmentsObservationParserRuleCall_6_0_1; }
		
		//'@end-seqd'
		public Keyword getEndSeqdKeyword_7() { return cEndSeqdKeyword_7; }
	}
	public class RootPackageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.sequence.Sequence.RootPackage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRootElementKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameFQNParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//RootPackage:
		//	'rootElement' name=FQN;
		@Override public ParserRule getRule() { return rule; }
		
		//'rootElement' name=FQN
		public Group getGroup() { return cGroup; }
		
		//'rootElement'
		public Keyword getRootElementKeyword_0() { return cRootElementKeyword_0; }
		
		//name=FQN
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//FQN
		public RuleCall getNameFQNParserRuleCall_1_0() { return cNameFQNParserRuleCall_1_0; }
	}
	public class ActorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.sequence.Sequence.Actor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDeferredAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cDeferredDefKeyword_0_0 = (Keyword)cDeferredAssignment_0.eContents().get(0);
		private final Keyword cActKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Assignment cNameAssignment_2_0_0 = (Assignment)cGroup_2_0.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_2_0_0_0 = (RuleCall)cNameAssignment_2_0_0.eContents().get(0);
		private final Assignment cTypeMappingAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cTypeMappingActorClassifierMappingParserRuleCall_2_0_1_0 = (RuleCall)cTypeMappingAssignment_2_0_1.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Assignment cTypeMappingAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final RuleCall cTypeMappingActorClassifierMappingParserRuleCall_2_1_0_0 = (RuleCall)cTypeMappingAssignment_2_1_0.eContents().get(0);
		private final Keyword cAsKeyword_2_1_1 = (Keyword)cGroup_2_1.eContents().get(1);
		private final Assignment cAliasAssignment_2_1_2 = (Assignment)cGroup_2_1.eContents().get(2);
		private final RuleCall cAliasIDTerminalRuleCall_2_1_2_0 = (RuleCall)cAliasAssignment_2_1_2.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cAlternatives_2.eContents().get(2);
		private final Assignment cNameAssignment_2_2_0 = (Assignment)cGroup_2_2.eContents().get(0);
		private final RuleCall cNameSTRINGTerminalRuleCall_2_2_0_0 = (RuleCall)cNameAssignment_2_2_0.eContents().get(0);
		private final Assignment cTypeMappingAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cTypeMappingActorClassifierMappingParserRuleCall_2_2_1_0 = (RuleCall)cTypeMappingAssignment_2_2_1.eContents().get(0);
		private final Keyword cAsKeyword_2_2_2 = (Keyword)cGroup_2_2.eContents().get(2);
		private final Assignment cAliasAssignment_2_2_3 = (Assignment)cGroup_2_2.eContents().get(3);
		private final RuleCall cAliasIDTerminalRuleCall_2_2_3_0 = (RuleCall)cAliasAssignment_2_2_3.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cRoleKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cActorTypeAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cActorTypeActorTypeEnumRuleCall_3_1_0 = (RuleCall)cActorTypeAssignment_3_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cCommentsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cCommentsInlineCommentParserRuleCall_4_0 = (RuleCall)cCommentsAssignment_4.eContents().get(0);
		
		//Actor:
		//	deferred?='def'? 'act' (name=ID typeMapping=ActorClassifierMapping? | typeMapping=ActorClassifierMapping 'as' alias=ID
		//	| name=STRING typeMapping=ActorClassifierMapping? 'as' alias=ID) ('role[' actorType=ActorType ']')?
		//	comments+=InlineComment?;
		@Override public ParserRule getRule() { return rule; }
		
		//deferred?='def'? 'act' (name=ID typeMapping=ActorClassifierMapping? | typeMapping=ActorClassifierMapping 'as' alias=ID |
		//name=STRING typeMapping=ActorClassifierMapping? 'as' alias=ID) ('role[' actorType=ActorType ']')?
		//comments+=InlineComment?
		public Group getGroup() { return cGroup; }
		
		//deferred?='def'?
		public Assignment getDeferredAssignment_0() { return cDeferredAssignment_0; }
		
		//'def'
		public Keyword getDeferredDefKeyword_0_0() { return cDeferredDefKeyword_0_0; }
		
		//'act'
		public Keyword getActKeyword_1() { return cActKeyword_1; }
		
		//name=ID typeMapping=ActorClassifierMapping? | typeMapping=ActorClassifierMapping 'as' alias=ID | name=STRING
		//typeMapping=ActorClassifierMapping? 'as' alias=ID
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//name=ID typeMapping=ActorClassifierMapping?
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//name=ID
		public Assignment getNameAssignment_2_0_0() { return cNameAssignment_2_0_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0_0_0() { return cNameIDTerminalRuleCall_2_0_0_0; }
		
		//typeMapping=ActorClassifierMapping?
		public Assignment getTypeMappingAssignment_2_0_1() { return cTypeMappingAssignment_2_0_1; }
		
		//ActorClassifierMapping
		public RuleCall getTypeMappingActorClassifierMappingParserRuleCall_2_0_1_0() { return cTypeMappingActorClassifierMappingParserRuleCall_2_0_1_0; }
		
		//typeMapping=ActorClassifierMapping 'as' alias=ID
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//typeMapping=ActorClassifierMapping
		public Assignment getTypeMappingAssignment_2_1_0() { return cTypeMappingAssignment_2_1_0; }
		
		//ActorClassifierMapping
		public RuleCall getTypeMappingActorClassifierMappingParserRuleCall_2_1_0_0() { return cTypeMappingActorClassifierMappingParserRuleCall_2_1_0_0; }
		
		//'as'
		public Keyword getAsKeyword_2_1_1() { return cAsKeyword_2_1_1; }
		
		//alias=ID
		public Assignment getAliasAssignment_2_1_2() { return cAliasAssignment_2_1_2; }
		
		//ID
		public RuleCall getAliasIDTerminalRuleCall_2_1_2_0() { return cAliasIDTerminalRuleCall_2_1_2_0; }
		
		//name=STRING typeMapping=ActorClassifierMapping? 'as' alias=ID
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//name=STRING
		public Assignment getNameAssignment_2_2_0() { return cNameAssignment_2_2_0; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_2_2_0_0() { return cNameSTRINGTerminalRuleCall_2_2_0_0; }
		
		//typeMapping=ActorClassifierMapping?
		public Assignment getTypeMappingAssignment_2_2_1() { return cTypeMappingAssignment_2_2_1; }
		
		//ActorClassifierMapping
		public RuleCall getTypeMappingActorClassifierMappingParserRuleCall_2_2_1_0() { return cTypeMappingActorClassifierMappingParserRuleCall_2_2_1_0; }
		
		//'as'
		public Keyword getAsKeyword_2_2_2() { return cAsKeyword_2_2_2; }
		
		//alias=ID
		public Assignment getAliasAssignment_2_2_3() { return cAliasAssignment_2_2_3; }
		
		//ID
		public RuleCall getAliasIDTerminalRuleCall_2_2_3_0() { return cAliasIDTerminalRuleCall_2_2_3_0; }
		
		//('role[' actorType=ActorType ']')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'role['
		public Keyword getRoleKeyword_3_0() { return cRoleKeyword_3_0; }
		
		//actorType=ActorType
		public Assignment getActorTypeAssignment_3_1() { return cActorTypeAssignment_3_1; }
		
		//ActorType
		public RuleCall getActorTypeActorTypeEnumRuleCall_3_1_0() { return cActorTypeActorTypeEnumRuleCall_3_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3_2() { return cRightSquareBracketKeyword_3_2; }
		
		//comments+=InlineComment?
		public Assignment getCommentsAssignment_4() { return cCommentsAssignment_4; }
		
		//InlineComment
		public RuleCall getCommentsInlineCommentParserRuleCall_4_0() { return cCommentsInlineCommentParserRuleCall_4_0; }
	}
	public class ActorClassifierMappingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.sequence.Sequence.ActorClassifierMapping");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cColonKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cClassifierAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cClassifierClassifierCrossReference_1_0 = (CrossReference)cClassifierAssignment_1.eContents().get(0);
		private final RuleCall cClassifierClassifierFQNParserRuleCall_1_0_1 = (RuleCall)cClassifierClassifierCrossReference_1_0.eContents().get(1);
		
		//ActorClassifierMapping:
		//	':' classifier=[uml::Classifier|FQN];
		@Override public ParserRule getRule() { return rule; }
		
		//':' classifier=[uml::Classifier|FQN]
		public Group getGroup() { return cGroup; }
		
		//':'
		public Keyword getColonKeyword_0() { return cColonKeyword_0; }
		
		//classifier=[uml::Classifier|FQN]
		public Assignment getClassifierAssignment_1() { return cClassifierAssignment_1; }
		
		//[uml::Classifier|FQN]
		public CrossReference getClassifierClassifierCrossReference_1_0() { return cClassifierClassifierCrossReference_1_0; }
		
		//FQN
		public RuleCall getClassifierClassifierFQNParserRuleCall_1_0_1() { return cClassifierClassifierFQNParserRuleCall_1_0_1; }
	}
	public class FragmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.sequence.Sequence.Fragment");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMessageParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOccurenceSpecificationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCombinedFragmentParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cReferenceParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Fragment:
		//	Message | OccurenceSpecification | CombinedFragment | Reference;
		@Override public ParserRule getRule() { return rule; }
		
		//Message | OccurenceSpecification | CombinedFragment | Reference
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Message
		public RuleCall getMessageParserRuleCall_0() { return cMessageParserRuleCall_0; }
		
		//OccurenceSpecification
		public RuleCall getOccurenceSpecificationParserRuleCall_1() { return cOccurenceSpecificationParserRuleCall_1; }
		
		//CombinedFragment
		public RuleCall getCombinedFragmentParserRuleCall_2() { return cCombinedFragmentParserRuleCall_2; }
		
		//Reference
		public RuleCall getReferenceParserRuleCall_3() { return cReferenceParserRuleCall_3; }
	}
	public class OneFragmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.sequence.Sequence.OneFragment");
		private final Assignment cFragmentsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cFragmentsFragmentParserRuleCall_0 = (RuleCall)cFragmentsAssignment.eContents().get(0);
		
		//OneFragment OrderedFragmentContainer:
		//	fragments+=Fragment;
		@Override public ParserRule getRule() { return rule; }
		
		//fragments+=Fragment
		public Assignment getFragmentsAssignment() { return cFragmentsAssignment; }
		
		//Fragment
		public RuleCall getFragmentsFragmentParserRuleCall_0() { return cFragmentsFragmentParserRuleCall_0; }
	}
	public class OneOrMultipleFragmentsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.sequence.Sequence.OneOrMultipleFragments");
		private final Assignment cFragmentsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cFragmentsFragmentParserRuleCall_0 = (RuleCall)cFragmentsAssignment.eContents().get(0);
		
		//OneOrMultipleFragments OrderedFragmentContainer:
		//	fragments+=Fragment+;
		@Override public ParserRule getRule() { return rule; }
		
		//fragments+=Fragment+
		public Assignment getFragmentsAssignment() { return cFragmentsAssignment; }
		
		//Fragment
		public RuleCall getFragmentsFragmentParserRuleCall_0() { return cFragmentsFragmentParserRuleCall_0; }
	}
	public class OrderedFragmentContainerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.sequence.Sequence.OrderedFragmentContainer");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cOneOrMultipleFragmentsParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final RuleCall cOneFragmentParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//OrderedFragmentContainer:
		//	'{' OneOrMultipleFragments '}' | OneFragment;
		@Override public ParserRule getRule() { return rule; }
		
		//'{' OneOrMultipleFragments '}' | OneFragment
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'{' OneOrMultipleFragments '}'
		public Group getGroup_0() { return cGroup_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0_0() { return cLeftCurlyBracketKeyword_0_0; }
		
		//OneOrMultipleFragments
		public RuleCall getOneOrMultipleFragmentsParserRuleCall_0_1() { return cOneOrMultipleFragmentsParserRuleCall_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_0_2() { return cRightCurlyBracketKeyword_0_2; }
		
		//OneFragment
		public RuleCall getOneFragmentParserRuleCall_1() { return cOneFragmentParserRuleCall_1; }
	}
	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.sequence.Sequence.Condition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionUnescapedStringParserRuleCall_1_0 = (RuleCall)cConditionAssignment_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Condition:
		//	'[' condition=UnescapedString ']';
		@Override public ParserRule getRule() { return rule; }
		
		//'[' condition=UnescapedString ']'
		public Group getGroup() { return cGroup; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//condition=UnescapedString
		public Assignment getConditionAssignment_1() { return cConditionAssignment_1; }
		
		//UnescapedString
		public RuleCall getConditionUnescapedStringParserRuleCall_1_0() { return cConditionUnescapedStringParserRuleCall_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
	}
	public class OrderedFragmentContainerWithConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.sequence.Sequence.OrderedFragmentContainerWithCondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cConditionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cConditionConditionParserRuleCall_0_0 = (RuleCall)cConditionAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Assignment cFragmentsAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cFragmentsFragmentParserRuleCall_1_0_1_0 = (RuleCall)cFragmentsAssignment_1_0_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_0_2 = (Keyword)cGroup_1_0.eContents().get(2);
		private final Assignment cFragmentsAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cFragmentsFragmentParserRuleCall_1_1_0 = (RuleCall)cFragmentsAssignment_1_1.eContents().get(0);
		
		//OrderedFragmentContainerWithCondition OrderedFragmentContainer:
		//	condition=Condition ('{' fragments+=Fragment+ '}' | fragments+=Fragment);
		@Override public ParserRule getRule() { return rule; }
		
		//condition=Condition ('{' fragments+=Fragment+ '}' | fragments+=Fragment)
		public Group getGroup() { return cGroup; }
		
		//condition=Condition
		public Assignment getConditionAssignment_0() { return cConditionAssignment_0; }
		
		//Condition
		public RuleCall getConditionConditionParserRuleCall_0_0() { return cConditionConditionParserRuleCall_0_0; }
		
		//'{' fragments+=Fragment+ '}' | fragments+=Fragment
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'{' fragments+=Fragment+ '}'
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_0_0() { return cLeftCurlyBracketKeyword_1_0_0; }
		
		//fragments+=Fragment+
		public Assignment getFragmentsAssignment_1_0_1() { return cFragmentsAssignment_1_0_1; }
		
		//Fragment
		public RuleCall getFragmentsFragmentParserRuleCall_1_0_1_0() { return cFragmentsFragmentParserRuleCall_1_0_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_0_2() { return cRightCurlyBracketKeyword_1_0_2; }
		
		//fragments+=Fragment
		public Assignment getFragmentsAssignment_1_1() { return cFragmentsAssignment_1_1; }
		
		//Fragment
		public RuleCall getFragmentsFragmentParserRuleCall_1_1_0() { return cFragmentsFragmentParserRuleCall_1_1_0; }
	}
	public class OrderedFragmentContainerWithConditionMandatoryBracketsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.sequence.Sequence.OrderedFragmentContainerWithConditionMandatoryBrackets");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cConditionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cConditionConditionParserRuleCall_0_0 = (RuleCall)cConditionAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFragmentsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFragmentsFragmentParserRuleCall_2_0 = (RuleCall)cFragmentsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//OrderedFragmentContainerWithConditionMandatoryBrackets OrderedFragmentContainer:
		//	condition=Condition '{' fragments+=Fragment+ '}';
		@Override public ParserRule getRule() { return rule; }
		
		//condition=Condition '{' fragments+=Fragment+ '}'
		public Group getGroup() { return cGroup; }
		
		//condition=Condition
		public Assignment getConditionAssignment_0() { return cConditionAssignment_0; }
		
		//Condition
		public RuleCall getConditionConditionParserRuleCall_0_0() { return cConditionConditionParserRuleCall_0_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//fragments+=Fragment+
		public Assignment getFragmentsAssignment_2() { return cFragmentsAssignment_2; }
		
		//Fragment
		public RuleCall getFragmentsFragmentParserRuleCall_2_0() { return cFragmentsFragmentParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class MessageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.sequence.Sequence.Message");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cStandardMessageParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cResponseMessageParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cFoundMessageParserRuleCall_0_2 = (RuleCall)cAlternatives_0.eContents().get(2);
		private final RuleCall cLostMessageParserRuleCall_0_3 = (RuleCall)cAlternatives_0.eContents().get(3);
		private final RuleCall cCreateMessageParserRuleCall_0_4 = (RuleCall)cAlternatives_0.eContents().get(4);
		private final RuleCall cDestructionMessageParserRuleCall_0_5 = (RuleCall)cAlternatives_0.eContents().get(5);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAsKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cAliasAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAliasIDTerminalRuleCall_1_1_0 = (RuleCall)cAliasAssignment_1_1.eContents().get(0);
		private final Assignment cSendEventAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSendEventImplicitSendOccurenceSpecificationParserRuleCall_2_0 = (RuleCall)cSendEventAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cArrivalEventAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cArrivalEventExplicitArrivalOccurenceReferenceParserRuleCall_3_0_0 = (RuleCall)cArrivalEventAssignment_3_0.eContents().get(0);
		private final Assignment cArrivalEventAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cArrivalEventImplicitArrivalOccurenceSpecificationParserRuleCall_3_1_0 = (RuleCall)cArrivalEventAssignment_3_1.eContents().get(0);
		
		//Message:
		//	(StandardMessage | ResponseMessage | FoundMessage | LostMessage | CreateMessage | DestructionMessage) ('as' alias=ID)?
		//	sendEvent=ImplicitSendOccurenceSpecification (arrivalEvent=ExplicitArrivalOccurenceReference |
		//	arrivalEvent=ImplicitArrivalOccurenceSpecification);
		@Override public ParserRule getRule() { return rule; }
		
		//(StandardMessage | ResponseMessage | FoundMessage | LostMessage | CreateMessage | DestructionMessage) ('as' alias=ID)?
		//sendEvent=ImplicitSendOccurenceSpecification (arrivalEvent=ExplicitArrivalOccurenceReference |
		//arrivalEvent=ImplicitArrivalOccurenceSpecification)
		public Group getGroup() { return cGroup; }
		
		//StandardMessage | ResponseMessage | FoundMessage | LostMessage | CreateMessage | DestructionMessage
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//StandardMessage
		public RuleCall getStandardMessageParserRuleCall_0_0() { return cStandardMessageParserRuleCall_0_0; }
		
		//ResponseMessage
		public RuleCall getResponseMessageParserRuleCall_0_1() { return cResponseMessageParserRuleCall_0_1; }
		
		//FoundMessage
		public RuleCall getFoundMessageParserRuleCall_0_2() { return cFoundMessageParserRuleCall_0_2; }
		
		//LostMessage
		public RuleCall getLostMessageParserRuleCall_0_3() { return cLostMessageParserRuleCall_0_3; }
		
		//CreateMessage
		public RuleCall getCreateMessageParserRuleCall_0_4() { return cCreateMessageParserRuleCall_0_4; }
		
		//DestructionMessage
		public RuleCall getDestructionMessageParserRuleCall_0_5() { return cDestructionMessageParserRuleCall_0_5; }
		
		//('as' alias=ID)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'as'
		public Keyword getAsKeyword_1_0() { return cAsKeyword_1_0; }
		
		//alias=ID
		public Assignment getAliasAssignment_1_1() { return cAliasAssignment_1_1; }
		
		//ID
		public RuleCall getAliasIDTerminalRuleCall_1_1_0() { return cAliasIDTerminalRuleCall_1_1_0; }
		
		//sendEvent=ImplicitSendOccurenceSpecification
		public Assignment getSendEventAssignment_2() { return cSendEventAssignment_2; }
		
		//ImplicitSendOccurenceSpecification
		public RuleCall getSendEventImplicitSendOccurenceSpecificationParserRuleCall_2_0() { return cSendEventImplicitSendOccurenceSpecificationParserRuleCall_2_0; }
		
		//arrivalEvent=ExplicitArrivalOccurenceReference | arrivalEvent=ImplicitArrivalOccurenceSpecification
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//arrivalEvent=ExplicitArrivalOccurenceReference
		public Assignment getArrivalEventAssignment_3_0() { return cArrivalEventAssignment_3_0; }
		
		//ExplicitArrivalOccurenceReference
		public RuleCall getArrivalEventExplicitArrivalOccurenceReferenceParserRuleCall_3_0_0() { return cArrivalEventExplicitArrivalOccurenceReferenceParserRuleCall_3_0_0; }
		
		//arrivalEvent=ImplicitArrivalOccurenceSpecification
		public Assignment getArrivalEventAssignment_3_1() { return cArrivalEventAssignment_3_1; }
		
		//ImplicitArrivalOccurenceSpecification
		public RuleCall getArrivalEventImplicitArrivalOccurenceSpecificationParserRuleCall_3_1_0() { return cArrivalEventImplicitArrivalOccurenceSpecificationParserRuleCall_3_1_0; }
	}
	public class ExplicitArrivalOccurenceReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.sequence.Sequence.ExplicitArrivalOccurenceReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cArrivesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOccurenceSpecificationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cOccurenceSpecificationExplicitArrivalOccurenceSpecificationCrossReference_2_0 = (CrossReference)cOccurenceSpecificationAssignment_2.eContents().get(0);
		private final RuleCall cOccurenceSpecificationExplicitArrivalOccurenceSpecificationIDTerminalRuleCall_2_0_1 = (RuleCall)cOccurenceSpecificationExplicitArrivalOccurenceSpecificationCrossReference_2_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ExplicitArrivalOccurenceReference:
		//	'arrives' '[' occurenceSpecification=[ExplicitArrivalOccurenceSpecification] ']';
		@Override public ParserRule getRule() { return rule; }
		
		//'arrives' '[' occurenceSpecification=[ExplicitArrivalOccurenceSpecification] ']'
		public Group getGroup() { return cGroup; }
		
		//'arrives'
		public Keyword getArrivesKeyword_0() { return cArrivesKeyword_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//occurenceSpecification=[ExplicitArrivalOccurenceSpecification]
		public Assignment getOccurenceSpecificationAssignment_2() { return cOccurenceSpecificationAssignment_2; }
		
		//[ExplicitArrivalOccurenceSpecification]
		public CrossReference getOccurenceSpecificationExplicitArrivalOccurenceSpecificationCrossReference_2_0() { return cOccurenceSpecificationExplicitArrivalOccurenceSpecificationCrossReference_2_0; }
		
		//ID
		public RuleCall getOccurenceSpecificationExplicitArrivalOccurenceSpecificationIDTerminalRuleCall_2_0_1() { return cOccurenceSpecificationExplicitArrivalOccurenceSpecificationIDTerminalRuleCall_2_0_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}
	public class ExplicitArrivalOccurenceSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.sequence.Sequence.ExplicitArrivalOccurenceSpecification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cArrivalKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//ExplicitArrivalOccurenceSpecification:
		//	'arrival' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'arrival' name=ID
		public Group getGroup() { return cGroup; }
		
		//'arrival'
		public Keyword getArrivalKeyword_0() { return cArrivalKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class StandardMessageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.sequence.Sequence.StandardMessage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeMessageTypeEnumRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameUnescapedStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLeftAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cLeftActorCrossReference_3_0 = (CrossReference)cLeftAssignment_3.eContents().get(0);
		private final RuleCall cLeftActorFQNParserRuleCall_3_0_1 = (RuleCall)cLeftActorCrossReference_3_0.eContents().get(1);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cRightAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cRightActorCrossReference_5_0 = (CrossReference)cRightAssignment_5.eContents().get(0);
		private final RuleCall cRightActorFQNParserRuleCall_5_0_1 = (RuleCall)cRightActorCrossReference_5_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//StandardMessage:
		//	type=MessageType name=UnescapedString '(' left=[Actor|FQN] ',' right=[Actor|FQN] ')';
		@Override public ParserRule getRule() { return rule; }
		
		//type=MessageType name=UnescapedString '(' left=[Actor|FQN] ',' right=[Actor|FQN] ')'
		public Group getGroup() { return cGroup; }
		
		//type=MessageType
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//MessageType
		public RuleCall getTypeMessageTypeEnumRuleCall_0_0() { return cTypeMessageTypeEnumRuleCall_0_0; }
		
		//name=UnescapedString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//UnescapedString
		public RuleCall getNameUnescapedStringParserRuleCall_1_0() { return cNameUnescapedStringParserRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//left=[Actor|FQN]
		public Assignment getLeftAssignment_3() { return cLeftAssignment_3; }
		
		//[Actor|FQN]
		public CrossReference getLeftActorCrossReference_3_0() { return cLeftActorCrossReference_3_0; }
		
		//FQN
		public RuleCall getLeftActorFQNParserRuleCall_3_0_1() { return cLeftActorFQNParserRuleCall_3_0_1; }
		
		//','
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//right=[Actor|FQN]
		public Assignment getRightAssignment_5() { return cRightAssignment_5; }
		
		//[Actor|FQN]
		public CrossReference getRightActorCrossReference_5_0() { return cRightActorCrossReference_5_0; }
		
		//FQN
		public RuleCall getRightActorFQNParserRuleCall_5_0_1() { return cRightActorFQNParserRuleCall_5_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}
	public class ResponseMessageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.sequence.Sequence.ResponseMessage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReplyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameUnescapedStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cLeftAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final CrossReference cLeftActorCrossReference_3_0_0 = (CrossReference)cLeftAssignment_3_0.eContents().get(0);
		private final RuleCall cLeftActorFQNParserRuleCall_3_0_0_1 = (RuleCall)cLeftActorCrossReference_3_0_0.eContents().get(1);
		private final Keyword c_Keyword_3_1 = (Keyword)cAlternatives_3.eContents().get(1);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Assignment cRightAssignment_5_0 = (Assignment)cAlternatives_5.eContents().get(0);
		private final CrossReference cRightActorCrossReference_5_0_0 = (CrossReference)cRightAssignment_5_0.eContents().get(0);
		private final RuleCall cRightActorFQNParserRuleCall_5_0_0_1 = (RuleCall)cRightActorCrossReference_5_0_0.eContents().get(1);
		private final Keyword c_Keyword_5_1 = (Keyword)cAlternatives_5.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//ResponseMessage:
		//	'reply' name=UnescapedString '(' (left=[Actor|FQN] | '_') ',' (right=[Actor|FQN] | '_') ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'reply' name=UnescapedString '(' (left=[Actor|FQN] | '_') ',' (right=[Actor|FQN] | '_') ')'
		public Group getGroup() { return cGroup; }
		
		//'reply'
		public Keyword getReplyKeyword_0() { return cReplyKeyword_0; }
		
		//name=UnescapedString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//UnescapedString
		public RuleCall getNameUnescapedStringParserRuleCall_1_0() { return cNameUnescapedStringParserRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//left=[Actor|FQN] | '_'
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//left=[Actor|FQN]
		public Assignment getLeftAssignment_3_0() { return cLeftAssignment_3_0; }
		
		//[Actor|FQN]
		public CrossReference getLeftActorCrossReference_3_0_0() { return cLeftActorCrossReference_3_0_0; }
		
		//FQN
		public RuleCall getLeftActorFQNParserRuleCall_3_0_0_1() { return cLeftActorFQNParserRuleCall_3_0_0_1; }
		
		//'_'
		public Keyword get_Keyword_3_1() { return c_Keyword_3_1; }
		
		//','
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//right=[Actor|FQN] | '_'
		public Alternatives getAlternatives_5() { return cAlternatives_5; }
		
		//right=[Actor|FQN]
		public Assignment getRightAssignment_5_0() { return cRightAssignment_5_0; }
		
		//[Actor|FQN]
		public CrossReference getRightActorCrossReference_5_0_0() { return cRightActorCrossReference_5_0_0; }
		
		//FQN
		public RuleCall getRightActorFQNParserRuleCall_5_0_0_1() { return cRightActorFQNParserRuleCall_5_0_0_1; }
		
		//'_'
		public Keyword get_Keyword_5_1() { return c_Keyword_5_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}
	public class FoundMessageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.sequence.Sequence.FoundMessage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFoundKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeMessageTypeEnumRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameUnescapedStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword c_Keyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cRightAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cRightActorCrossReference_6_0 = (CrossReference)cRightAssignment_6.eContents().get(0);
		private final RuleCall cRightActorFQNParserRuleCall_6_0_1 = (RuleCall)cRightActorCrossReference_6_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//FoundMessage StandardMessage:
		//	'found' type=MessageType name=UnescapedString '(' '_' ',' right=[Actor|FQN] ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'found' type=MessageType name=UnescapedString '(' '_' ',' right=[Actor|FQN] ')'
		public Group getGroup() { return cGroup; }
		
		//'found'
		public Keyword getFoundKeyword_0() { return cFoundKeyword_0; }
		
		//type=MessageType
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//MessageType
		public RuleCall getTypeMessageTypeEnumRuleCall_1_0() { return cTypeMessageTypeEnumRuleCall_1_0; }
		
		//name=UnescapedString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//UnescapedString
		public RuleCall getNameUnescapedStringParserRuleCall_2_0() { return cNameUnescapedStringParserRuleCall_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//'_'
		public Keyword get_Keyword_4() { return c_Keyword_4; }
		
		//','
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }
		
		//right=[Actor|FQN]
		public Assignment getRightAssignment_6() { return cRightAssignment_6; }
		
		//[Actor|FQN]
		public CrossReference getRightActorCrossReference_6_0() { return cRightActorCrossReference_6_0; }
		
		//FQN
		public RuleCall getRightActorFQNParserRuleCall_6_0_1() { return cRightActorFQNParserRuleCall_6_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}
	public class LostMessageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.sequence.Sequence.LostMessage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLostKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cReplyKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Action cResponseMessageAction_1_0_1 = (Action)cGroup_1_0.eContents().get(1);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Action cStandardMessageAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final Assignment cTypeAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cTypeMessageTypeEnumRuleCall_1_1_1_0 = (RuleCall)cTypeAssignment_1_1_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameUnescapedStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cLeftAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cLeftActorCrossReference_4_0 = (CrossReference)cLeftAssignment_4.eContents().get(0);
		private final RuleCall cLeftActorFQNParserRuleCall_4_0_1 = (RuleCall)cLeftActorCrossReference_4_0.eContents().get(1);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword c_Keyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//LostMessage Message:
		//	'lost' ('reply' {ResponseMessage} | {StandardMessage} type=MessageType) name=UnescapedString '(' left=[Actor|FQN] ','
		//	'_' ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'lost' ('reply' {ResponseMessage} | {StandardMessage} type=MessageType) name=UnescapedString '(' left=[Actor|FQN] ','
		//'_' ')'
		public Group getGroup() { return cGroup; }
		
		//'lost'
		public Keyword getLostKeyword_0() { return cLostKeyword_0; }
		
		//'reply' {ResponseMessage} | {StandardMessage} type=MessageType
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'reply' {ResponseMessage}
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//'reply'
		public Keyword getReplyKeyword_1_0_0() { return cReplyKeyword_1_0_0; }
		
		//{ResponseMessage}
		public Action getResponseMessageAction_1_0_1() { return cResponseMessageAction_1_0_1; }
		
		//{StandardMessage} type=MessageType
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//{StandardMessage}
		public Action getStandardMessageAction_1_1_0() { return cStandardMessageAction_1_1_0; }
		
		//type=MessageType
		public Assignment getTypeAssignment_1_1_1() { return cTypeAssignment_1_1_1; }
		
		//MessageType
		public RuleCall getTypeMessageTypeEnumRuleCall_1_1_1_0() { return cTypeMessageTypeEnumRuleCall_1_1_1_0; }
		
		//name=UnescapedString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//UnescapedString
		public RuleCall getNameUnescapedStringParserRuleCall_2_0() { return cNameUnescapedStringParserRuleCall_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//left=[Actor|FQN]
		public Assignment getLeftAssignment_4() { return cLeftAssignment_4; }
		
		//[Actor|FQN]
		public CrossReference getLeftActorCrossReference_4_0() { return cLeftActorCrossReference_4_0; }
		
		//FQN
		public RuleCall getLeftActorFQNParserRuleCall_4_0_1() { return cLeftActorFQNParserRuleCall_4_0_1; }
		
		//','
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }
		
		//'_'
		public Keyword get_Keyword_6() { return c_Keyword_6; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}
	public class CreateMessageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.sequence.Sequence.CreateMessage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCreateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameUnescapedStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLeftAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cLeftActorCrossReference_3_0 = (CrossReference)cLeftAssignment_3.eContents().get(0);
		private final RuleCall cLeftActorFQNParserRuleCall_3_0_1 = (RuleCall)cLeftActorCrossReference_3_0.eContents().get(1);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cRightAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cRightActorCrossReference_5_0 = (CrossReference)cRightAssignment_5.eContents().get(0);
		private final RuleCall cRightActorFQNParserRuleCall_5_0_1 = (RuleCall)cRightActorCrossReference_5_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//CreateMessage:
		//	'create' name=UnescapedString? '(' left=[Actor|FQN] ',' right=[Actor|FQN] ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'create' name=UnescapedString? '(' left=[Actor|FQN] ',' right=[Actor|FQN] ')'
		public Group getGroup() { return cGroup; }
		
		//'create'
		public Keyword getCreateKeyword_0() { return cCreateKeyword_0; }
		
		//name=UnescapedString?
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//UnescapedString
		public RuleCall getNameUnescapedStringParserRuleCall_1_0() { return cNameUnescapedStringParserRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//left=[Actor|FQN]
		public Assignment getLeftAssignment_3() { return cLeftAssignment_3; }
		
		//[Actor|FQN]
		public CrossReference getLeftActorCrossReference_3_0() { return cLeftActorCrossReference_3_0; }
		
		//FQN
		public RuleCall getLeftActorFQNParserRuleCall_3_0_1() { return cLeftActorFQNParserRuleCall_3_0_1; }
		
		//','
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//right=[Actor|FQN]
		public Assignment getRightAssignment_5() { return cRightAssignment_5; }
		
		//[Actor|FQN]
		public CrossReference getRightActorCrossReference_5_0() { return cRightActorCrossReference_5_0; }
		
		//FQN
		public RuleCall getRightActorFQNParserRuleCall_5_0_1() { return cRightActorFQNParserRuleCall_5_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}
	public class DestructionMessageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.sequence.Sequence.DestructionMessage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDestKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameUnescapedStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLeftAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cLeftActorCrossReference_3_0 = (CrossReference)cLeftAssignment_3.eContents().get(0);
		private final RuleCall cLeftActorFQNParserRuleCall_3_0_1 = (RuleCall)cLeftActorCrossReference_3_0.eContents().get(1);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cRightAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cRightActorCrossReference_5_0 = (CrossReference)cRightAssignment_5.eContents().get(0);
		private final RuleCall cRightActorFQNParserRuleCall_5_0_1 = (RuleCall)cRightActorCrossReference_5_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//DestructionMessage:
		//	'dest' name=UnescapedString? '(' left=[Actor|FQN] ',' right=[Actor|FQN] ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'dest' name=UnescapedString? '(' left=[Actor|FQN] ',' right=[Actor|FQN] ')'
		public Group getGroup() { return cGroup; }
		
		//'dest'
		public Keyword getDestKeyword_0() { return cDestKeyword_0; }
		
		//name=UnescapedString?
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//UnescapedString
		public RuleCall getNameUnescapedStringParserRuleCall_1_0() { return cNameUnescapedStringParserRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//left=[Actor|FQN]
		public Assignment getLeftAssignment_3() { return cLeftAssignment_3; }
		
		//[Actor|FQN]
		public CrossReference getLeftActorCrossReference_3_0() { return cLeftActorCrossReference_3_0; }
		
		//FQN
		public RuleCall getLeftActorFQNParserRuleCall_3_0_1() { return cLeftActorFQNParserRuleCall_3_0_1; }
		
		//','
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//right=[Actor|FQN]
		public Assignment getRightAssignment_5() { return cRightAssignment_5; }
		
		//[Actor|FQN]
		public CrossReference getRightActorCrossReference_5_0() { return cRightActorCrossReference_5_0; }
		
		//FQN
		public RuleCall getRightActorFQNParserRuleCall_5_0_1() { return cRightActorFQNParserRuleCall_5_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}
	public class OccurenceSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.sequence.Sequence.OccurenceSpecification");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDestructionOccurenceSpecificationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cExplicitArrivalOccurenceSpecificationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//OccurenceSpecification:
		//	DestructionOccurenceSpecification | ExplicitArrivalOccurenceSpecification;
		@Override public ParserRule getRule() { return rule; }
		
		//DestructionOccurenceSpecification | ExplicitArrivalOccurenceSpecification
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DestructionOccurenceSpecification
		public RuleCall getDestructionOccurenceSpecificationParserRuleCall_0() { return cDestructionOccurenceSpecificationParserRuleCall_0; }
		
		//ExplicitArrivalOccurenceSpecification
		public RuleCall getExplicitArrivalOccurenceSpecificationParserRuleCall_1() { return cExplicitArrivalOccurenceSpecificationParserRuleCall_1; }
	}
	public class DestructionOccurenceSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.sequence.Sequence.DestructionOccurenceSpecification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDestKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTargetAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTargetActorCrossReference_1_0 = (CrossReference)cTargetAssignment_1.eContents().get(0);
		private final RuleCall cTargetActorFQNParserRuleCall_1_0_1 = (RuleCall)cTargetActorCrossReference_1_0.eContents().get(1);
		
		//DestructionOccurenceSpecification:
		//	'dest' target=[Actor|FQN];
		@Override public ParserRule getRule() { return rule; }
		
		//'dest' target=[Actor|FQN]
		public Group getGroup() { return cGroup; }
		
		//'dest'
		public Keyword getDestKeyword_0() { return cDestKeyword_0; }
		
		//target=[Actor|FQN]
		public Assignment getTargetAssignment_1() { return cTargetAssignment_1; }
		
		//[Actor|FQN]
		public CrossReference getTargetActorCrossReference_1_0() { return cTargetActorCrossReference_1_0; }
		
		//FQN
		public RuleCall getTargetActorFQNParserRuleCall_1_0_1() { return cTargetActorFQNParserRuleCall_1_0_1; }
	}
	public class CombinedFragmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.sequence.Sequence.CombinedFragment");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMultipleRegionContainerParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSingleRegionContainerParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//CombinedFragment:
		//	MultipleRegionContainer | SingleRegionContainer;
		@Override public ParserRule getRule() { return rule; }
		
		//MultipleRegionContainer | SingleRegionContainer
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//MultipleRegionContainer
		public RuleCall getMultipleRegionContainerParserRuleCall_0() { return cMultipleRegionContainerParserRuleCall_0; }
		
		//SingleRegionContainer
		public RuleCall getSingleRegionContainerParserRuleCall_1() { return cSingleRegionContainerParserRuleCall_1; }
	}
	public class SingleRegionContainerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.sequence.Sequence.SingleRegionContainer");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLoopParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOptionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCriticalParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//SingleRegionContainer:
		//	Loop | Option | Critical;
		@Override public ParserRule getRule() { return rule; }
		
		//Loop | Option | Critical
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Loop
		public RuleCall getLoopParserRuleCall_0() { return cLoopParserRuleCall_0; }
		
		//Option
		public RuleCall getOptionParserRuleCall_1() { return cOptionParserRuleCall_1; }
		
		//Critical
		public RuleCall getCriticalParserRuleCall_2() { return cCriticalParserRuleCall_2; }
	}
	public class MultipleRegionContainerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.sequence.Sequence.MultipleRegionContainer");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cParallelParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAlternativeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//MultipleRegionContainer:
		//	Parallel | Alternative;
		@Override public ParserRule getRule() { return rule; }
		
		//Parallel | Alternative
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Parallel
		public RuleCall getParallelParserRuleCall_0() { return cParallelParserRuleCall_0; }
		
		//Alternative
		public RuleCall getAlternativeParserRuleCall_1() { return cAlternativeParserRuleCall_1; }
	}
	public class ParallelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.sequence.Sequence.Parallel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cParKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRegionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRegionsOrderedFragmentContainerParserRuleCall_2_0 = (RuleCall)cRegionsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Parallel:
		//	'par' '{' regions+=OrderedFragmentContainer+ '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'par' '{' regions+=OrderedFragmentContainer+ '}'
		public Group getGroup() { return cGroup; }
		
		//'par'
		public Keyword getParKeyword_0() { return cParKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//regions+=OrderedFragmentContainer+
		public Assignment getRegionsAssignment_2() { return cRegionsAssignment_2; }
		
		//OrderedFragmentContainer
		public RuleCall getRegionsOrderedFragmentContainerParserRuleCall_2_0() { return cRegionsOrderedFragmentContainerParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class AlternativeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.sequence.Sequence.Alternative");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAltKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRegionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRegionsOrderedFragmentContainerWithConditionParserRuleCall_2_0 = (RuleCall)cRegionsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Alternative:
		//	'alt' '{' regions+=OrderedFragmentContainerWithCondition+ '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'alt' '{' regions+=OrderedFragmentContainerWithCondition+ '}'
		public Group getGroup() { return cGroup; }
		
		//'alt'
		public Keyword getAltKeyword_0() { return cAltKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//regions+=OrderedFragmentContainerWithCondition+
		public Assignment getRegionsAssignment_2() { return cRegionsAssignment_2; }
		
		//OrderedFragmentContainerWithCondition
		public RuleCall getRegionsOrderedFragmentContainerWithConditionParserRuleCall_2_0() { return cRegionsOrderedFragmentContainerWithConditionParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class LoopElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.sequence.Sequence.Loop");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLoopKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRegionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRegionOrderedFragmentContainerWithConditionMandatoryBracketsParserRuleCall_1_0 = (RuleCall)cRegionAssignment_1.eContents().get(0);
		
		//Loop:
		//	'loop' region=OrderedFragmentContainerWithConditionMandatoryBrackets;
		@Override public ParserRule getRule() { return rule; }
		
		//'loop' region=OrderedFragmentContainerWithConditionMandatoryBrackets
		public Group getGroup() { return cGroup; }
		
		//'loop'
		public Keyword getLoopKeyword_0() { return cLoopKeyword_0; }
		
		//region=OrderedFragmentContainerWithConditionMandatoryBrackets
		public Assignment getRegionAssignment_1() { return cRegionAssignment_1; }
		
		//OrderedFragmentContainerWithConditionMandatoryBrackets
		public RuleCall getRegionOrderedFragmentContainerWithConditionMandatoryBracketsParserRuleCall_1_0() { return cRegionOrderedFragmentContainerWithConditionMandatoryBracketsParserRuleCall_1_0; }
	}
	public class OptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.sequence.Sequence.Option");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOptKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRegionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRegionOrderedFragmentContainerWithConditionMandatoryBracketsParserRuleCall_1_0 = (RuleCall)cRegionAssignment_1.eContents().get(0);
		
		//Option:
		//	'opt' region=OrderedFragmentContainerWithConditionMandatoryBrackets;
		@Override public ParserRule getRule() { return rule; }
		
		//'opt' region=OrderedFragmentContainerWithConditionMandatoryBrackets
		public Group getGroup() { return cGroup; }
		
		//'opt'
		public Keyword getOptKeyword_0() { return cOptKeyword_0; }
		
		//region=OrderedFragmentContainerWithConditionMandatoryBrackets
		public Assignment getRegionAssignment_1() { return cRegionAssignment_1; }
		
		//OrderedFragmentContainerWithConditionMandatoryBrackets
		public RuleCall getRegionOrderedFragmentContainerWithConditionMandatoryBracketsParserRuleCall_1_0() { return cRegionOrderedFragmentContainerWithConditionMandatoryBracketsParserRuleCall_1_0; }
	}
	public class CriticalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.sequence.Sequence.Critical");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCriticalKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRegionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRegionOneOrMultipleFragmentsParserRuleCall_2_0 = (RuleCall)cRegionAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Critical:
		//	'critical' '{' region=OneOrMultipleFragments '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'critical' '{' region=OneOrMultipleFragments '}'
		public Group getGroup() { return cGroup; }
		
		//'critical'
		public Keyword getCriticalKeyword_0() { return cCriticalKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//region=OneOrMultipleFragments
		public Assignment getRegionAssignment_2() { return cRegionAssignment_2; }
		
		//OneOrMultipleFragments
		public RuleCall getRegionOneOrMultipleFragmentsParserRuleCall_2_0() { return cRegionOneOrMultipleFragmentsParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class ReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.sequence.Sequence.Reference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRefKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cReferenceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cReferenceInteractionCrossReference_1_0 = (CrossReference)cReferenceAssignment_1.eContents().get(0);
		private final RuleCall cReferenceInteractionFQNParserRuleCall_1_0_1 = (RuleCall)cReferenceInteractionCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cAsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cAliasAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cAliasIDTerminalRuleCall_2_1_0 = (RuleCall)cAliasAssignment_2_1.eContents().get(0);
		
		//Reference:
		//	'ref' reference=[uml::Interaction|FQN] ('as' alias=ID)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'ref' reference=[uml::Interaction|FQN] ('as' alias=ID)?
		public Group getGroup() { return cGroup; }
		
		//'ref'
		public Keyword getRefKeyword_0() { return cRefKeyword_0; }
		
		//reference=[uml::Interaction|FQN]
		public Assignment getReferenceAssignment_1() { return cReferenceAssignment_1; }
		
		//[uml::Interaction|FQN]
		public CrossReference getReferenceInteractionCrossReference_1_0() { return cReferenceInteractionCrossReference_1_0; }
		
		//FQN
		public RuleCall getReferenceInteractionFQNParserRuleCall_1_0_1() { return cReferenceInteractionFQNParserRuleCall_1_0_1; }
		
		//('as' alias=ID)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'as'
		public Keyword getAsKeyword_2_0() { return cAsKeyword_2_0; }
		
		//alias=ID
		public Assignment getAliasAssignment_2_1() { return cAliasAssignment_2_1; }
		
		//ID
		public RuleCall getAliasIDTerminalRuleCall_2_1_0() { return cAliasIDTerminalRuleCall_2_1_0; }
	}
	public class ConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.sequence.Sequence.Constraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCstrKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cTimeConstraintParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cDurationConstraintParserRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		
		//Constraint:
		//	'cstr' (TimeConstraint | DurationConstraint);
		@Override public ParserRule getRule() { return rule; }
		
		//'cstr' (TimeConstraint | DurationConstraint)
		public Group getGroup() { return cGroup; }
		
		//'cstr'
		public Keyword getCstrKeyword_0() { return cCstrKeyword_0; }
		
		//TimeConstraint | DurationConstraint
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//TimeConstraint
		public RuleCall getTimeConstraintParserRuleCall_1_0() { return cTimeConstraintParserRuleCall_1_0; }
		
		//DurationConstraint
		public RuleCall getDurationConstraintParserRuleCall_1_1() { return cDurationConstraintParserRuleCall_1_1; }
	}
	public class TimeConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.sequence.Sequence.TimeConstraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEventAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEventPointInTimeSelectorParserRuleCall_1_0 = (RuleCall)cEventAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cTKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cTimeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cTimeUnescapedStringParserRuleCall_5_0 = (RuleCall)cTimeAssignment_5.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//TimeConstraint:
		//	'(' event=PointInTimeSelector ')' 't' '[' time=UnescapedString ']';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' event=PointInTimeSelector ')' 't' '[' time=UnescapedString ']'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//event=PointInTimeSelector
		public Assignment getEventAssignment_1() { return cEventAssignment_1; }
		
		//PointInTimeSelector
		public RuleCall getEventPointInTimeSelectorParserRuleCall_1_0() { return cEventPointInTimeSelectorParserRuleCall_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
		
		//'t'
		public Keyword getTKeyword_3() { return cTKeyword_3; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_4() { return cLeftSquareBracketKeyword_4; }
		
		//time=UnescapedString
		public Assignment getTimeAssignment_5() { return cTimeAssignment_5; }
		
		//UnescapedString
		public RuleCall getTimeUnescapedStringParserRuleCall_5_0() { return cTimeUnescapedStringParserRuleCall_5_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_6() { return cRightSquareBracketKeyword_6; }
	}
	public class DurationConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.sequence.Sequence.DurationConstraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIntervalAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIntervalTimeIntervalSelectorParserRuleCall_1_0 = (RuleCall)cIntervalAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cDKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cDurationAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cDurationUnescapedStringParserRuleCall_5_0 = (RuleCall)cDurationAssignment_5.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//DurationConstraint:
		//	'(' interval=TimeIntervalSelector ')' 'd' '[' duration=UnescapedString ']';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' interval=TimeIntervalSelector ')' 'd' '[' duration=UnescapedString ']'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//interval=TimeIntervalSelector
		public Assignment getIntervalAssignment_1() { return cIntervalAssignment_1; }
		
		//TimeIntervalSelector
		public RuleCall getIntervalTimeIntervalSelectorParserRuleCall_1_0() { return cIntervalTimeIntervalSelectorParserRuleCall_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
		
		//'d'
		public Keyword getDKeyword_3() { return cDKeyword_3; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_4() { return cLeftSquareBracketKeyword_4; }
		
		//duration=UnescapedString
		public Assignment getDurationAssignment_5() { return cDurationAssignment_5; }
		
		//UnescapedString
		public RuleCall getDurationUnescapedStringParserRuleCall_5_0() { return cDurationUnescapedStringParserRuleCall_5_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_6() { return cRightSquareBracketKeyword_6; }
	}
	public class ObservationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.sequence.Sequence.Observation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cObsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cTimeObservationParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cDurationObservationParserRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		
		//Observation:
		//	'obs' (TimeObservation | DurationObservation);
		@Override public ParserRule getRule() { return rule; }
		
		//'obs' (TimeObservation | DurationObservation)
		public Group getGroup() { return cGroup; }
		
		//'obs'
		public Keyword getObsKeyword_0() { return cObsKeyword_0; }
		
		//TimeObservation | DurationObservation
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//TimeObservation
		public RuleCall getTimeObservationParserRuleCall_1_0() { return cTimeObservationParserRuleCall_1_0; }
		
		//DurationObservation
		public RuleCall getDurationObservationParserRuleCall_1_1() { return cDurationObservationParserRuleCall_1_1; }
	}
	public class TimeObservationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.sequence.Sequence.TimeObservation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEventAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEventPointInTimeSelectorParserRuleCall_1_0 = (RuleCall)cEventAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cTKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cTimeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cTimeUnescapedStringParserRuleCall_5_0 = (RuleCall)cTimeAssignment_5.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//TimeObservation:
		//	'(' event=PointInTimeSelector ')' 't' '[' time=UnescapedString ']';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' event=PointInTimeSelector ')' 't' '[' time=UnescapedString ']'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//event=PointInTimeSelector
		public Assignment getEventAssignment_1() { return cEventAssignment_1; }
		
		//PointInTimeSelector
		public RuleCall getEventPointInTimeSelectorParserRuleCall_1_0() { return cEventPointInTimeSelectorParserRuleCall_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
		
		//'t'
		public Keyword getTKeyword_3() { return cTKeyword_3; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_4() { return cLeftSquareBracketKeyword_4; }
		
		//time=UnescapedString
		public Assignment getTimeAssignment_5() { return cTimeAssignment_5; }
		
		//UnescapedString
		public RuleCall getTimeUnescapedStringParserRuleCall_5_0() { return cTimeUnescapedStringParserRuleCall_5_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_6() { return cRightSquareBracketKeyword_6; }
	}
	public class DurationObservationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.sequence.Sequence.DurationObservation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIntervalAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIntervalTimeIntervalSelectorParserRuleCall_1_0 = (RuleCall)cIntervalAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cDKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cDurationAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cDurationUnescapedStringParserRuleCall_5_0 = (RuleCall)cDurationAssignment_5.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//DurationObservation:
		//	'(' interval=TimeIntervalSelector ')' 'd' '[' duration=UnescapedString ']';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' interval=TimeIntervalSelector ')' 'd' '[' duration=UnescapedString ']'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//interval=TimeIntervalSelector
		public Assignment getIntervalAssignment_1() { return cIntervalAssignment_1; }
		
		//TimeIntervalSelector
		public RuleCall getIntervalTimeIntervalSelectorParserRuleCall_1_0() { return cIntervalTimeIntervalSelectorParserRuleCall_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
		
		//'d'
		public Keyword getDKeyword_3() { return cDKeyword_3; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_4() { return cLeftSquareBracketKeyword_4; }
		
		//duration=UnescapedString
		public Assignment getDurationAssignment_5() { return cDurationAssignment_5; }
		
		//UnescapedString
		public RuleCall getDurationUnescapedStringParserRuleCall_5_0() { return cDurationUnescapedStringParserRuleCall_5_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_6() { return cRightSquareBracketKeyword_6; }
	}
	public class PointInTimeSelectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.sequence.Sequence.PointInTimeSelector");
		private final Assignment cPointInTimeAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cPointInTimeAliasedPointInTimeCrossReference_0 = (CrossReference)cPointInTimeAssignment.eContents().get(0);
		private final RuleCall cPointInTimeAliasedPointInTimeFQNParserRuleCall_0_1 = (RuleCall)cPointInTimeAliasedPointInTimeCrossReference_0.eContents().get(1);
		
		//PointInTimeSelector:
		//	pointInTime=[AliasedPointInTime|FQN];
		@Override public ParserRule getRule() { return rule; }
		
		//pointInTime=[AliasedPointInTime|FQN]
		public Assignment getPointInTimeAssignment() { return cPointInTimeAssignment; }
		
		//[AliasedPointInTime|FQN]
		public CrossReference getPointInTimeAliasedPointInTimeCrossReference_0() { return cPointInTimeAliasedPointInTimeCrossReference_0; }
		
		//FQN
		public RuleCall getPointInTimeAliasedPointInTimeFQNParserRuleCall_0_1() { return cPointInTimeAliasedPointInTimeFQNParserRuleCall_0_1; }
	}
	public class TimeIntervalSelectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.sequence.Sequence.TimeIntervalSelector");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBiPointInTimeTimeIntervalSelectorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFragmentTimeIntervalSelectorParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//TimeIntervalSelector:
		//	BiPointInTimeTimeIntervalSelector | FragmentTimeIntervalSelector;
		@Override public ParserRule getRule() { return rule; }
		
		//BiPointInTimeTimeIntervalSelector | FragmentTimeIntervalSelector
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BiPointInTimeTimeIntervalSelector
		public RuleCall getBiPointInTimeTimeIntervalSelectorParserRuleCall_0() { return cBiPointInTimeTimeIntervalSelectorParserRuleCall_0; }
		
		//FragmentTimeIntervalSelector
		public RuleCall getFragmentTimeIntervalSelectorParserRuleCall_1() { return cFragmentTimeIntervalSelectorParserRuleCall_1; }
	}
	public class BiPointInTimeTimeIntervalSelectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.sequence.Sequence.BiPointInTimeTimeIntervalSelector");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStartAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cStartPointInTimeSelectorParserRuleCall_0_0 = (RuleCall)cStartAssignment_0.eContents().get(0);
		private final Keyword cCommaKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cEndAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEndPointInTimeSelectorParserRuleCall_2_0 = (RuleCall)cEndAssignment_2.eContents().get(0);
		
		//BiPointInTimeTimeIntervalSelector:
		//	start=PointInTimeSelector ',' end=PointInTimeSelector;
		@Override public ParserRule getRule() { return rule; }
		
		//start=PointInTimeSelector ',' end=PointInTimeSelector
		public Group getGroup() { return cGroup; }
		
		//start=PointInTimeSelector
		public Assignment getStartAssignment_0() { return cStartAssignment_0; }
		
		//PointInTimeSelector
		public RuleCall getStartPointInTimeSelectorParserRuleCall_0_0() { return cStartPointInTimeSelectorParserRuleCall_0_0; }
		
		//','
		public Keyword getCommaKeyword_1() { return cCommaKeyword_1; }
		
		//end=PointInTimeSelector
		public Assignment getEndAssignment_2() { return cEndAssignment_2; }
		
		//PointInTimeSelector
		public RuleCall getEndPointInTimeSelectorParserRuleCall_2_0() { return cEndPointInTimeSelectorParserRuleCall_2_0; }
	}
	public class FragmentTimeIntervalSelectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.sequence.Sequence.FragmentTimeIntervalSelector");
		private final Assignment cNonInstantaneousFragmentAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cNonInstantaneousFragmentNonInstantaneousFragmentCrossReference_0 = (CrossReference)cNonInstantaneousFragmentAssignment.eContents().get(0);
		private final RuleCall cNonInstantaneousFragmentNonInstantaneousFragmentFQNParserRuleCall_0_1 = (RuleCall)cNonInstantaneousFragmentNonInstantaneousFragmentCrossReference_0.eContents().get(1);
		
		//FragmentTimeIntervalSelector:
		//	nonInstantaneousFragment=[NonInstantaneousFragment|FQN];
		@Override public ParserRule getRule() { return rule; }
		
		//nonInstantaneousFragment=[NonInstantaneousFragment|FQN]
		public Assignment getNonInstantaneousFragmentAssignment() { return cNonInstantaneousFragmentAssignment; }
		
		//[NonInstantaneousFragment|FQN]
		public CrossReference getNonInstantaneousFragmentNonInstantaneousFragmentCrossReference_0() { return cNonInstantaneousFragmentNonInstantaneousFragmentCrossReference_0; }
		
		//FQN
		public RuleCall getNonInstantaneousFragmentNonInstantaneousFragmentFQNParserRuleCall_0_1() { return cNonInstantaneousFragmentNonInstantaneousFragmentFQNParserRuleCall_0_1; }
	}
	public class ImplicitSendOccurenceSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.sequence.Sequence.ImplicitSendOccurenceSpecification");
		private final Action cImplicitSendOccurenceSpecificationAction = (Action)rule.eContents().get(1);
		
		//ImplicitSendOccurenceSpecification:
		//	{ImplicitSendOccurenceSpecification};
		@Override public ParserRule getRule() { return rule; }
		
		//{ImplicitSendOccurenceSpecification}
		public Action getImplicitSendOccurenceSpecificationAction() { return cImplicitSendOccurenceSpecificationAction; }
	}
	public class ImplicitArrivalOccurenceSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.sequence.Sequence.ImplicitArrivalOccurenceSpecification");
		private final Action cImplicitArrivalOccurenceSpecificationAction = (Action)rule.eContents().get(1);
		
		//ImplicitArrivalOccurenceSpecification:
		//	{ImplicitArrivalOccurenceSpecification};
		@Override public ParserRule getRule() { return rule; }
		
		//{ImplicitArrivalOccurenceSpecification}
		public Action getImplicitArrivalOccurenceSpecificationAction() { return cImplicitArrivalOccurenceSpecificationAction; }
	}
	public class FQNElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.sequence.Sequence.FQN");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//FQN:
		//	ID ('.' ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	public class InlineCommentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.sequence.Sequence.InlineComment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNoteKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cBodyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBodyCommentBodyParserRuleCall_2_0 = (RuleCall)cBodyAssignment_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//InlineComment commons::Comment:
		//	'note' '[' body=CommentBody ']';
		@Override public ParserRule getRule() { return rule; }
		
		//'note' '[' body=CommentBody ']'
		public Group getGroup() { return cGroup; }
		
		//'note'
		public Keyword getNoteKeyword_0() { return cNoteKeyword_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//body=CommentBody
		public Assignment getBodyAssignment_2() { return cBodyAssignment_2; }
		
		//CommentBody
		public RuleCall getBodyCommentBodyParserRuleCall_2_0() { return cBodyCommentBodyParserRuleCall_2_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}
	public class CommentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.sequence.Sequence.Comment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNoteKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cBodyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBodyCommentBodyParserRuleCall_1_0 = (RuleCall)cBodyAssignment_1.eContents().get(0);
		
		//Comment commons::Comment:
		//	'note' body=CommentBody;
		@Override public ParserRule getRule() { return rule; }
		
		//'note' body=CommentBody
		public Group getGroup() { return cGroup; }
		
		//'note'
		public Keyword getNoteKeyword_0() { return cNoteKeyword_0; }
		
		//body=CommentBody
		public Assignment getBodyAssignment_1() { return cBodyAssignment_1; }
		
		//CommentBody
		public RuleCall getBodyCommentBodyParserRuleCall_1_0() { return cBodyCommentBodyParserRuleCall_1_0; }
	}
	public class CommentBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.sequence.Sequence.CommentBody");
		private final RuleCall cSTRINGTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//CommentBody:
		//	STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall() { return cSTRINGTerminalRuleCall; }
	}
	public class UnescapedStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.sequence.Sequence.UnescapedString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//UnescapedString:
		//	ID | STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//ID | STRING
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1() { return cSTRINGTerminalRuleCall_1; }
	}
	
	public class MessageTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.sequence.Sequence.MessageType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSYNCEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSYNCSyncKeyword_0_0 = (Keyword)cSYNCEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cASYNCEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cASYNCAsyncKeyword_1_0 = (Keyword)cASYNCEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum MessageType:
		//	SYNC="sync"
		//	| ASYNC="async";
		public EnumRule getRule() { return rule; }
		
		//SYNC="sync" | ASYNC="async"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SYNC="sync"
		public EnumLiteralDeclaration getSYNCEnumLiteralDeclaration_0() { return cSYNCEnumLiteralDeclaration_0; }
		
		//"sync"
		public Keyword getSYNCSyncKeyword_0_0() { return cSYNCSyncKeyword_0_0; }
		
		//ASYNC="async"
		public EnumLiteralDeclaration getASYNCEnumLiteralDeclaration_1() { return cASYNCEnumLiteralDeclaration_1; }
		
		//"async"
		public Keyword getASYNCAsyncKeyword_1_0() { return cASYNCAsyncKeyword_1_0; }
	}
	public class ActorTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.sequence.Sequence.ActorType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cHUMANEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cHUMANHumanKeyword_0_0 = (Keyword)cHUMANEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMACHINEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMACHINEMachineKeyword_1_0 = (Keyword)cMACHINEEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum ActorType:
		//	HUMAN='human'
		//	| MACHINE='machine';
		public EnumRule getRule() { return rule; }
		
		//HUMAN='human' | MACHINE='machine'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//HUMAN='human'
		public EnumLiteralDeclaration getHUMANEnumLiteralDeclaration_0() { return cHUMANEnumLiteralDeclaration_0; }
		
		//'human'
		public Keyword getHUMANHumanKeyword_0_0() { return cHUMANHumanKeyword_0_0; }
		
		//MACHINE='machine'
		public EnumLiteralDeclaration getMACHINEEnumLiteralDeclaration_1() { return cMACHINEEnumLiteralDeclaration_1; }
		
		//'machine'
		public Keyword getMACHINEMachineKeyword_1_0() { return cMACHINEMachineKeyword_1_0; }
	}
	
	private final SequenceDiagramElements pSequenceDiagram;
	private final RootPackageElements pRootPackage;
	private final ActorElements pActor;
	private final ActorClassifierMappingElements pActorClassifierMapping;
	private final FragmentElements pFragment;
	private final OneFragmentElements pOneFragment;
	private final OneOrMultipleFragmentsElements pOneOrMultipleFragments;
	private final OrderedFragmentContainerElements pOrderedFragmentContainer;
	private final ConditionElements pCondition;
	private final OrderedFragmentContainerWithConditionElements pOrderedFragmentContainerWithCondition;
	private final OrderedFragmentContainerWithConditionMandatoryBracketsElements pOrderedFragmentContainerWithConditionMandatoryBrackets;
	private final MessageElements pMessage;
	private final ExplicitArrivalOccurenceReferenceElements pExplicitArrivalOccurenceReference;
	private final ExplicitArrivalOccurenceSpecificationElements pExplicitArrivalOccurenceSpecification;
	private final StandardMessageElements pStandardMessage;
	private final ResponseMessageElements pResponseMessage;
	private final FoundMessageElements pFoundMessage;
	private final LostMessageElements pLostMessage;
	private final CreateMessageElements pCreateMessage;
	private final DestructionMessageElements pDestructionMessage;
	private final OccurenceSpecificationElements pOccurenceSpecification;
	private final DestructionOccurenceSpecificationElements pDestructionOccurenceSpecification;
	private final CombinedFragmentElements pCombinedFragment;
	private final SingleRegionContainerElements pSingleRegionContainer;
	private final MultipleRegionContainerElements pMultipleRegionContainer;
	private final ParallelElements pParallel;
	private final AlternativeElements pAlternative;
	private final LoopElements pLoop;
	private final OptionElements pOption;
	private final CriticalElements pCritical;
	private final ReferenceElements pReference;
	private final ConstraintElements pConstraint;
	private final TimeConstraintElements pTimeConstraint;
	private final DurationConstraintElements pDurationConstraint;
	private final ObservationElements pObservation;
	private final TimeObservationElements pTimeObservation;
	private final DurationObservationElements pDurationObservation;
	private final PointInTimeSelectorElements pPointInTimeSelector;
	private final TimeIntervalSelectorElements pTimeIntervalSelector;
	private final BiPointInTimeTimeIntervalSelectorElements pBiPointInTimeTimeIntervalSelector;
	private final FragmentTimeIntervalSelectorElements pFragmentTimeIntervalSelector;
	private final ImplicitSendOccurenceSpecificationElements pImplicitSendOccurenceSpecification;
	private final ImplicitArrivalOccurenceSpecificationElements pImplicitArrivalOccurenceSpecification;
	private final FQNElements pFQN;
	private final InlineCommentElements pInlineComment;
	private final CommentElements pComment;
	private final CommentBodyElements pCommentBody;
	private final UnescapedStringElements pUnescapedString;
	private final MessageTypeElements eMessageType;
	private final ActorTypeElements eActorType;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public SequenceGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pSequenceDiagram = new SequenceDiagramElements();
		this.pRootPackage = new RootPackageElements();
		this.pActor = new ActorElements();
		this.pActorClassifierMapping = new ActorClassifierMappingElements();
		this.pFragment = new FragmentElements();
		this.pOneFragment = new OneFragmentElements();
		this.pOneOrMultipleFragments = new OneOrMultipleFragmentsElements();
		this.pOrderedFragmentContainer = new OrderedFragmentContainerElements();
		this.pCondition = new ConditionElements();
		this.pOrderedFragmentContainerWithCondition = new OrderedFragmentContainerWithConditionElements();
		this.pOrderedFragmentContainerWithConditionMandatoryBrackets = new OrderedFragmentContainerWithConditionMandatoryBracketsElements();
		this.pMessage = new MessageElements();
		this.pExplicitArrivalOccurenceReference = new ExplicitArrivalOccurenceReferenceElements();
		this.pExplicitArrivalOccurenceSpecification = new ExplicitArrivalOccurenceSpecificationElements();
		this.pStandardMessage = new StandardMessageElements();
		this.pResponseMessage = new ResponseMessageElements();
		this.pFoundMessage = new FoundMessageElements();
		this.pLostMessage = new LostMessageElements();
		this.pCreateMessage = new CreateMessageElements();
		this.pDestructionMessage = new DestructionMessageElements();
		this.pOccurenceSpecification = new OccurenceSpecificationElements();
		this.pDestructionOccurenceSpecification = new DestructionOccurenceSpecificationElements();
		this.pCombinedFragment = new CombinedFragmentElements();
		this.pSingleRegionContainer = new SingleRegionContainerElements();
		this.pMultipleRegionContainer = new MultipleRegionContainerElements();
		this.pParallel = new ParallelElements();
		this.pAlternative = new AlternativeElements();
		this.pLoop = new LoopElements();
		this.pOption = new OptionElements();
		this.pCritical = new CriticalElements();
		this.pReference = new ReferenceElements();
		this.pConstraint = new ConstraintElements();
		this.pTimeConstraint = new TimeConstraintElements();
		this.pDurationConstraint = new DurationConstraintElements();
		this.pObservation = new ObservationElements();
		this.pTimeObservation = new TimeObservationElements();
		this.pDurationObservation = new DurationObservationElements();
		this.pPointInTimeSelector = new PointInTimeSelectorElements();
		this.pTimeIntervalSelector = new TimeIntervalSelectorElements();
		this.pBiPointInTimeTimeIntervalSelector = new BiPointInTimeTimeIntervalSelectorElements();
		this.pFragmentTimeIntervalSelector = new FragmentTimeIntervalSelectorElements();
		this.pImplicitSendOccurenceSpecification = new ImplicitSendOccurenceSpecificationElements();
		this.pImplicitArrivalOccurenceSpecification = new ImplicitArrivalOccurenceSpecificationElements();
		this.pFQN = new FQNElements();
		this.pInlineComment = new InlineCommentElements();
		this.pComment = new CommentElements();
		this.pCommentBody = new CommentBodyElements();
		this.pUnescapedString = new UnescapedStringElements();
		this.eMessageType = new MessageTypeElements();
		this.eActorType = new ActorTypeElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.cooperateproject.modeling.textual.sequence.Sequence".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//SequenceDiagram:
	//	{SequenceDiagram}
	//	'@start-seqd' title=STRING
	//	rootPackage=RootPackage
	//	actors+=Actor*
	//	fragments+=Fragment*
	//	fragments+=(Constraint | Observation)*
	//	'@end-seqd';
	public SequenceDiagramElements getSequenceDiagramAccess() {
		return pSequenceDiagram;
	}
	
	public ParserRule getSequenceDiagramRule() {
		return getSequenceDiagramAccess().getRule();
	}
	
	//RootPackage:
	//	'rootElement' name=FQN;
	public RootPackageElements getRootPackageAccess() {
		return pRootPackage;
	}
	
	public ParserRule getRootPackageRule() {
		return getRootPackageAccess().getRule();
	}
	
	//Actor:
	//	deferred?='def'? 'act' (name=ID typeMapping=ActorClassifierMapping? | typeMapping=ActorClassifierMapping 'as' alias=ID
	//	| name=STRING typeMapping=ActorClassifierMapping? 'as' alias=ID) ('role[' actorType=ActorType ']')?
	//	comments+=InlineComment?;
	public ActorElements getActorAccess() {
		return pActor;
	}
	
	public ParserRule getActorRule() {
		return getActorAccess().getRule();
	}
	
	//ActorClassifierMapping:
	//	':' classifier=[uml::Classifier|FQN];
	public ActorClassifierMappingElements getActorClassifierMappingAccess() {
		return pActorClassifierMapping;
	}
	
	public ParserRule getActorClassifierMappingRule() {
		return getActorClassifierMappingAccess().getRule();
	}
	
	//Fragment:
	//	Message | OccurenceSpecification | CombinedFragment | Reference;
	public FragmentElements getFragmentAccess() {
		return pFragment;
	}
	
	public ParserRule getFragmentRule() {
		return getFragmentAccess().getRule();
	}
	
	//OneFragment OrderedFragmentContainer:
	//	fragments+=Fragment;
	public OneFragmentElements getOneFragmentAccess() {
		return pOneFragment;
	}
	
	public ParserRule getOneFragmentRule() {
		return getOneFragmentAccess().getRule();
	}
	
	//OneOrMultipleFragments OrderedFragmentContainer:
	//	fragments+=Fragment+;
	public OneOrMultipleFragmentsElements getOneOrMultipleFragmentsAccess() {
		return pOneOrMultipleFragments;
	}
	
	public ParserRule getOneOrMultipleFragmentsRule() {
		return getOneOrMultipleFragmentsAccess().getRule();
	}
	
	//OrderedFragmentContainer:
	//	'{' OneOrMultipleFragments '}' | OneFragment;
	public OrderedFragmentContainerElements getOrderedFragmentContainerAccess() {
		return pOrderedFragmentContainer;
	}
	
	public ParserRule getOrderedFragmentContainerRule() {
		return getOrderedFragmentContainerAccess().getRule();
	}
	
	//Condition:
	//	'[' condition=UnescapedString ']';
	public ConditionElements getConditionAccess() {
		return pCondition;
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}
	
	//OrderedFragmentContainerWithCondition OrderedFragmentContainer:
	//	condition=Condition ('{' fragments+=Fragment+ '}' | fragments+=Fragment);
	public OrderedFragmentContainerWithConditionElements getOrderedFragmentContainerWithConditionAccess() {
		return pOrderedFragmentContainerWithCondition;
	}
	
	public ParserRule getOrderedFragmentContainerWithConditionRule() {
		return getOrderedFragmentContainerWithConditionAccess().getRule();
	}
	
	//OrderedFragmentContainerWithConditionMandatoryBrackets OrderedFragmentContainer:
	//	condition=Condition '{' fragments+=Fragment+ '}';
	public OrderedFragmentContainerWithConditionMandatoryBracketsElements getOrderedFragmentContainerWithConditionMandatoryBracketsAccess() {
		return pOrderedFragmentContainerWithConditionMandatoryBrackets;
	}
	
	public ParserRule getOrderedFragmentContainerWithConditionMandatoryBracketsRule() {
		return getOrderedFragmentContainerWithConditionMandatoryBracketsAccess().getRule();
	}
	
	//Message:
	//	(StandardMessage | ResponseMessage | FoundMessage | LostMessage | CreateMessage | DestructionMessage) ('as' alias=ID)?
	//	sendEvent=ImplicitSendOccurenceSpecification (arrivalEvent=ExplicitArrivalOccurenceReference |
	//	arrivalEvent=ImplicitArrivalOccurenceSpecification);
	public MessageElements getMessageAccess() {
		return pMessage;
	}
	
	public ParserRule getMessageRule() {
		return getMessageAccess().getRule();
	}
	
	//ExplicitArrivalOccurenceReference:
	//	'arrives' '[' occurenceSpecification=[ExplicitArrivalOccurenceSpecification] ']';
	public ExplicitArrivalOccurenceReferenceElements getExplicitArrivalOccurenceReferenceAccess() {
		return pExplicitArrivalOccurenceReference;
	}
	
	public ParserRule getExplicitArrivalOccurenceReferenceRule() {
		return getExplicitArrivalOccurenceReferenceAccess().getRule();
	}
	
	//ExplicitArrivalOccurenceSpecification:
	//	'arrival' name=ID;
	public ExplicitArrivalOccurenceSpecificationElements getExplicitArrivalOccurenceSpecificationAccess() {
		return pExplicitArrivalOccurenceSpecification;
	}
	
	public ParserRule getExplicitArrivalOccurenceSpecificationRule() {
		return getExplicitArrivalOccurenceSpecificationAccess().getRule();
	}
	
	//StandardMessage:
	//	type=MessageType name=UnescapedString '(' left=[Actor|FQN] ',' right=[Actor|FQN] ')';
	public StandardMessageElements getStandardMessageAccess() {
		return pStandardMessage;
	}
	
	public ParserRule getStandardMessageRule() {
		return getStandardMessageAccess().getRule();
	}
	
	//ResponseMessage:
	//	'reply' name=UnescapedString '(' (left=[Actor|FQN] | '_') ',' (right=[Actor|FQN] | '_') ')';
	public ResponseMessageElements getResponseMessageAccess() {
		return pResponseMessage;
	}
	
	public ParserRule getResponseMessageRule() {
		return getResponseMessageAccess().getRule();
	}
	
	//FoundMessage StandardMessage:
	//	'found' type=MessageType name=UnescapedString '(' '_' ',' right=[Actor|FQN] ')';
	public FoundMessageElements getFoundMessageAccess() {
		return pFoundMessage;
	}
	
	public ParserRule getFoundMessageRule() {
		return getFoundMessageAccess().getRule();
	}
	
	//LostMessage Message:
	//	'lost' ('reply' {ResponseMessage} | {StandardMessage} type=MessageType) name=UnescapedString '(' left=[Actor|FQN] ','
	//	'_' ')';
	public LostMessageElements getLostMessageAccess() {
		return pLostMessage;
	}
	
	public ParserRule getLostMessageRule() {
		return getLostMessageAccess().getRule();
	}
	
	//CreateMessage:
	//	'create' name=UnescapedString? '(' left=[Actor|FQN] ',' right=[Actor|FQN] ')';
	public CreateMessageElements getCreateMessageAccess() {
		return pCreateMessage;
	}
	
	public ParserRule getCreateMessageRule() {
		return getCreateMessageAccess().getRule();
	}
	
	//DestructionMessage:
	//	'dest' name=UnescapedString? '(' left=[Actor|FQN] ',' right=[Actor|FQN] ')';
	public DestructionMessageElements getDestructionMessageAccess() {
		return pDestructionMessage;
	}
	
	public ParserRule getDestructionMessageRule() {
		return getDestructionMessageAccess().getRule();
	}
	
	//OccurenceSpecification:
	//	DestructionOccurenceSpecification | ExplicitArrivalOccurenceSpecification;
	public OccurenceSpecificationElements getOccurenceSpecificationAccess() {
		return pOccurenceSpecification;
	}
	
	public ParserRule getOccurenceSpecificationRule() {
		return getOccurenceSpecificationAccess().getRule();
	}
	
	//DestructionOccurenceSpecification:
	//	'dest' target=[Actor|FQN];
	public DestructionOccurenceSpecificationElements getDestructionOccurenceSpecificationAccess() {
		return pDestructionOccurenceSpecification;
	}
	
	public ParserRule getDestructionOccurenceSpecificationRule() {
		return getDestructionOccurenceSpecificationAccess().getRule();
	}
	
	//CombinedFragment:
	//	MultipleRegionContainer | SingleRegionContainer;
	public CombinedFragmentElements getCombinedFragmentAccess() {
		return pCombinedFragment;
	}
	
	public ParserRule getCombinedFragmentRule() {
		return getCombinedFragmentAccess().getRule();
	}
	
	//SingleRegionContainer:
	//	Loop | Option | Critical;
	public SingleRegionContainerElements getSingleRegionContainerAccess() {
		return pSingleRegionContainer;
	}
	
	public ParserRule getSingleRegionContainerRule() {
		return getSingleRegionContainerAccess().getRule();
	}
	
	//MultipleRegionContainer:
	//	Parallel | Alternative;
	public MultipleRegionContainerElements getMultipleRegionContainerAccess() {
		return pMultipleRegionContainer;
	}
	
	public ParserRule getMultipleRegionContainerRule() {
		return getMultipleRegionContainerAccess().getRule();
	}
	
	//Parallel:
	//	'par' '{' regions+=OrderedFragmentContainer+ '}';
	public ParallelElements getParallelAccess() {
		return pParallel;
	}
	
	public ParserRule getParallelRule() {
		return getParallelAccess().getRule();
	}
	
	//Alternative:
	//	'alt' '{' regions+=OrderedFragmentContainerWithCondition+ '}';
	public AlternativeElements getAlternativeAccess() {
		return pAlternative;
	}
	
	public ParserRule getAlternativeRule() {
		return getAlternativeAccess().getRule();
	}
	
	//Loop:
	//	'loop' region=OrderedFragmentContainerWithConditionMandatoryBrackets;
	public LoopElements getLoopAccess() {
		return pLoop;
	}
	
	public ParserRule getLoopRule() {
		return getLoopAccess().getRule();
	}
	
	//Option:
	//	'opt' region=OrderedFragmentContainerWithConditionMandatoryBrackets;
	public OptionElements getOptionAccess() {
		return pOption;
	}
	
	public ParserRule getOptionRule() {
		return getOptionAccess().getRule();
	}
	
	//Critical:
	//	'critical' '{' region=OneOrMultipleFragments '}';
	public CriticalElements getCriticalAccess() {
		return pCritical;
	}
	
	public ParserRule getCriticalRule() {
		return getCriticalAccess().getRule();
	}
	
	//Reference:
	//	'ref' reference=[uml::Interaction|FQN] ('as' alias=ID)?;
	public ReferenceElements getReferenceAccess() {
		return pReference;
	}
	
	public ParserRule getReferenceRule() {
		return getReferenceAccess().getRule();
	}
	
	//Constraint:
	//	'cstr' (TimeConstraint | DurationConstraint);
	public ConstraintElements getConstraintAccess() {
		return pConstraint;
	}
	
	public ParserRule getConstraintRule() {
		return getConstraintAccess().getRule();
	}
	
	//TimeConstraint:
	//	'(' event=PointInTimeSelector ')' 't' '[' time=UnescapedString ']';
	public TimeConstraintElements getTimeConstraintAccess() {
		return pTimeConstraint;
	}
	
	public ParserRule getTimeConstraintRule() {
		return getTimeConstraintAccess().getRule();
	}
	
	//DurationConstraint:
	//	'(' interval=TimeIntervalSelector ')' 'd' '[' duration=UnescapedString ']';
	public DurationConstraintElements getDurationConstraintAccess() {
		return pDurationConstraint;
	}
	
	public ParserRule getDurationConstraintRule() {
		return getDurationConstraintAccess().getRule();
	}
	
	//Observation:
	//	'obs' (TimeObservation | DurationObservation);
	public ObservationElements getObservationAccess() {
		return pObservation;
	}
	
	public ParserRule getObservationRule() {
		return getObservationAccess().getRule();
	}
	
	//TimeObservation:
	//	'(' event=PointInTimeSelector ')' 't' '[' time=UnescapedString ']';
	public TimeObservationElements getTimeObservationAccess() {
		return pTimeObservation;
	}
	
	public ParserRule getTimeObservationRule() {
		return getTimeObservationAccess().getRule();
	}
	
	//DurationObservation:
	//	'(' interval=TimeIntervalSelector ')' 'd' '[' duration=UnescapedString ']';
	public DurationObservationElements getDurationObservationAccess() {
		return pDurationObservation;
	}
	
	public ParserRule getDurationObservationRule() {
		return getDurationObservationAccess().getRule();
	}
	
	//PointInTimeSelector:
	//	pointInTime=[AliasedPointInTime|FQN];
	public PointInTimeSelectorElements getPointInTimeSelectorAccess() {
		return pPointInTimeSelector;
	}
	
	public ParserRule getPointInTimeSelectorRule() {
		return getPointInTimeSelectorAccess().getRule();
	}
	
	//TimeIntervalSelector:
	//	BiPointInTimeTimeIntervalSelector | FragmentTimeIntervalSelector;
	public TimeIntervalSelectorElements getTimeIntervalSelectorAccess() {
		return pTimeIntervalSelector;
	}
	
	public ParserRule getTimeIntervalSelectorRule() {
		return getTimeIntervalSelectorAccess().getRule();
	}
	
	//BiPointInTimeTimeIntervalSelector:
	//	start=PointInTimeSelector ',' end=PointInTimeSelector;
	public BiPointInTimeTimeIntervalSelectorElements getBiPointInTimeTimeIntervalSelectorAccess() {
		return pBiPointInTimeTimeIntervalSelector;
	}
	
	public ParserRule getBiPointInTimeTimeIntervalSelectorRule() {
		return getBiPointInTimeTimeIntervalSelectorAccess().getRule();
	}
	
	//FragmentTimeIntervalSelector:
	//	nonInstantaneousFragment=[NonInstantaneousFragment|FQN];
	public FragmentTimeIntervalSelectorElements getFragmentTimeIntervalSelectorAccess() {
		return pFragmentTimeIntervalSelector;
	}
	
	public ParserRule getFragmentTimeIntervalSelectorRule() {
		return getFragmentTimeIntervalSelectorAccess().getRule();
	}
	
	//ImplicitSendOccurenceSpecification:
	//	{ImplicitSendOccurenceSpecification};
	public ImplicitSendOccurenceSpecificationElements getImplicitSendOccurenceSpecificationAccess() {
		return pImplicitSendOccurenceSpecification;
	}
	
	public ParserRule getImplicitSendOccurenceSpecificationRule() {
		return getImplicitSendOccurenceSpecificationAccess().getRule();
	}
	
	//ImplicitArrivalOccurenceSpecification:
	//	{ImplicitArrivalOccurenceSpecification};
	public ImplicitArrivalOccurenceSpecificationElements getImplicitArrivalOccurenceSpecificationAccess() {
		return pImplicitArrivalOccurenceSpecification;
	}
	
	public ParserRule getImplicitArrivalOccurenceSpecificationRule() {
		return getImplicitArrivalOccurenceSpecificationAccess().getRule();
	}
	
	//FQN:
	//	ID ('.' ID)*;
	public FQNElements getFQNAccess() {
		return pFQN;
	}
	
	public ParserRule getFQNRule() {
		return getFQNAccess().getRule();
	}
	
	//InlineComment commons::Comment:
	//	'note' '[' body=CommentBody ']';
	public InlineCommentElements getInlineCommentAccess() {
		return pInlineComment;
	}
	
	public ParserRule getInlineCommentRule() {
		return getInlineCommentAccess().getRule();
	}
	
	//Comment commons::Comment:
	//	'note' body=CommentBody;
	public CommentElements getCommentAccess() {
		return pComment;
	}
	
	public ParserRule getCommentRule() {
		return getCommentAccess().getRule();
	}
	
	//CommentBody:
	//	STRING;
	public CommentBodyElements getCommentBodyAccess() {
		return pCommentBody;
	}
	
	public ParserRule getCommentBodyRule() {
		return getCommentBodyAccess().getRule();
	}
	
	//UnescapedString:
	//	ID | STRING;
	public UnescapedStringElements getUnescapedStringAccess() {
		return pUnescapedString;
	}
	
	public ParserRule getUnescapedStringRule() {
		return getUnescapedStringAccess().getRule();
	}
	
	//enum MessageType:
	//	SYNC="sync"
	//	| ASYNC="async";
	public MessageTypeElements getMessageTypeAccess() {
		return eMessageType;
	}
	
	public EnumRule getMessageTypeRule() {
		return getMessageTypeAccess().getRule();
	}
	
	//enum ActorType:
	//	HUMAN='human'
	//	| MACHINE='machine';
	public ActorTypeElements getActorTypeAccess() {
		return eActorType;
	}
	
	public EnumRule getActorTypeRule() {
		return getActorTypeAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
