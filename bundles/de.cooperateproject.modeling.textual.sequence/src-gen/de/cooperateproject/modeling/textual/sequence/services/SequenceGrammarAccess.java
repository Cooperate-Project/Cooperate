/*
 * generated by Xtext 2.11.0
 */
package de.cooperateproject.modeling.textual.sequence.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class SequenceGrammarAccess extends AbstractGrammarElementFinder {
	
	public class SequenceDiagramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.sequence.Sequence.SequenceDiagram");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSequenceDiagramAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cStartSeqdKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTitleAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTitleSTRINGTerminalRuleCall_2_0 = (RuleCall)cTitleAssignment_2.eContents().get(0);
		private final Assignment cRootPackageAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRootPackageRootPackageParserRuleCall_3_0 = (RuleCall)cRootPackageAssignment_3.eContents().get(0);
		private final Keyword cEndSeqdKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//SequenceDiagram:
		//	{SequenceDiagram}
		//	'@start-seqd' title=STRING
		//	rootPackage=RootPackage
		//	'@end-seqd';
		@Override public ParserRule getRule() { return rule; }
		
		//{SequenceDiagram} '@start-seqd' title=STRING rootPackage=RootPackage '@end-seqd'
		public Group getGroup() { return cGroup; }
		
		//{SequenceDiagram}
		public Action getSequenceDiagramAction_0() { return cSequenceDiagramAction_0; }
		
		//'@start-seqd'
		public Keyword getStartSeqdKeyword_1() { return cStartSeqdKeyword_1; }
		
		//title=STRING
		public Assignment getTitleAssignment_2() { return cTitleAssignment_2; }
		
		//STRING
		public RuleCall getTitleSTRINGTerminalRuleCall_2_0() { return cTitleSTRINGTerminalRuleCall_2_0; }
		
		//rootPackage=RootPackage
		public Assignment getRootPackageAssignment_3() { return cRootPackageAssignment_3; }
		
		//RootPackage
		public RuleCall getRootPackageRootPackageParserRuleCall_3_0() { return cRootPackageRootPackageParserRuleCall_3_0; }
		
		//'@end-seqd'
		public Keyword getEndSeqdKeyword_4() { return cEndSeqdKeyword_4; }
	}
	public class RootPackageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.sequence.Sequence.RootPackage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRootElementKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameFQNParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cActorsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cActorsActorParserRuleCall_2_0 = (RuleCall)cActorsAssignment_2.eContents().get(0);
		private final Assignment cInteractionFragmentsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInteractionFragmentsInteractionFragmentParserRuleCall_3_0 = (RuleCall)cInteractionFragmentsAssignment_3.eContents().get(0);
		private final Assignment cClsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cClsClassifierCrossReference_4_0 = (CrossReference)cClsAssignment_4.eContents().get(0);
		private final RuleCall cClsClassifierIDTerminalRuleCall_4_0_1 = (RuleCall)cClsClassifierCrossReference_4_0.eContents().get(1);
		
		//RootPackage:
		//	'rootElement' name=FQN
		//	actors+=Actor*
		//	interactionFragments+=InteractionFragment*
		//	cls+=[uml::Classifier]*;
		@Override public ParserRule getRule() { return rule; }
		
		//'rootElement' name=FQN actors+=Actor* interactionFragments+=InteractionFragment* cls+=[uml::Classifier]*
		public Group getGroup() { return cGroup; }
		
		//'rootElement'
		public Keyword getRootElementKeyword_0() { return cRootElementKeyword_0; }
		
		//name=FQN
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//FQN
		public RuleCall getNameFQNParserRuleCall_1_0() { return cNameFQNParserRuleCall_1_0; }
		
		//actors+=Actor*
		public Assignment getActorsAssignment_2() { return cActorsAssignment_2; }
		
		//Actor
		public RuleCall getActorsActorParserRuleCall_2_0() { return cActorsActorParserRuleCall_2_0; }
		
		//interactionFragments+=InteractionFragment*
		public Assignment getInteractionFragmentsAssignment_3() { return cInteractionFragmentsAssignment_3; }
		
		//InteractionFragment
		public RuleCall getInteractionFragmentsInteractionFragmentParserRuleCall_3_0() { return cInteractionFragmentsInteractionFragmentParserRuleCall_3_0; }
		
		//cls+=[uml::Classifier]*
		public Assignment getClsAssignment_4() { return cClsAssignment_4; }
		
		//[uml::Classifier]
		public CrossReference getClsClassifierCrossReference_4_0() { return cClsClassifierCrossReference_4_0; }
		
		//ID
		public RuleCall getClsClassifierIDTerminalRuleCall_4_0_1() { return cClsClassifierIDTerminalRuleCall_4_0_1; }
	}
	public class ActorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.sequence.Sequence.Actor");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cActKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Assignment cNameAssignment_0_1_0 = (Assignment)cGroup_0_1.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_1_0_0 = (RuleCall)cNameAssignment_0_1_0.eContents().get(0);
		private final Keyword cColonKeyword_0_1_1 = (Keyword)cGroup_0_1.eContents().get(1);
		private final Assignment cTypeAssignment_0_1_2 = (Assignment)cGroup_0_1.eContents().get(2);
		private final CrossReference cTypeClassifierCrossReference_0_1_2_0 = (CrossReference)cTypeAssignment_0_1_2.eContents().get(0);
		private final RuleCall cTypeClassifierFQNParserRuleCall_0_1_2_0_1 = (RuleCall)cTypeClassifierCrossReference_0_1_2_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cNameAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0_0 = (RuleCall)cNameAssignment_1_0.eContents().get(0);
		private final Keyword cColonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cTypeAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final CrossReference cTypeClassifierCrossReference_1_2_0 = (CrossReference)cTypeAssignment_1_2.eContents().get(0);
		private final RuleCall cTypeClassifierFQNParserRuleCall_1_2_0_1 = (RuleCall)cTypeClassifierCrossReference_1_2_0.eContents().get(1);
		private final Keyword cAsKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cAliasAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cAliasIDTerminalRuleCall_1_4_0 = (RuleCall)cAliasAssignment_1_4.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cGroup_2.eContents().get(0);
		private final Keyword cColonKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Assignment cTypeAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final CrossReference cTypeClassifierCrossReference_2_0_1_0 = (CrossReference)cTypeAssignment_2_0_1.eContents().get(0);
		private final RuleCall cTypeClassifierFQNParserRuleCall_2_0_1_0_1 = (RuleCall)cTypeClassifierCrossReference_2_0_1_0.eContents().get(1);
		private final Keyword cAsKeyword_2_0_2 = (Keyword)cGroup_2_0.eContents().get(2);
		private final Assignment cAliasAssignment_2_0_3 = (Assignment)cGroup_2_0.eContents().get(3);
		private final RuleCall cAliasIDTerminalRuleCall_2_0_3_0 = (RuleCall)cAliasAssignment_2_0_3.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cRoleKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cActorTypeAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cActorTypeActorTypeEnumRuleCall_2_1_1_0 = (RuleCall)cActorTypeAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		
		//Actor:
		//	'act' (name=ID ':' type=[uml::Classifier|FQN]) | name=STRING ':' type=[uml::Classifier|FQN] 'as' alias=ID | (':'
		//	type=[uml::Classifier|FQN] 'as' alias=ID) ('role[' actorType=ActorType ']')? //comments+=Comment? 
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'act' (name=ID ':' type=[uml::Classifier|FQN]) | name=STRING ':' type=[uml::Classifier|FQN] 'as' alias=ID | (':'
		//type=[uml::Classifier|FQN] 'as' alias=ID) ('role[' actorType=ActorType ']')?
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'act' (name=ID ':' type=[uml::Classifier|FQN])
		public Group getGroup_0() { return cGroup_0; }
		
		//'act'
		public Keyword getActKeyword_0_0() { return cActKeyword_0_0; }
		
		//name=ID ':' type=[uml::Classifier|FQN]
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//name=ID
		public Assignment getNameAssignment_0_1_0() { return cNameAssignment_0_1_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_1_0_0() { return cNameIDTerminalRuleCall_0_1_0_0; }
		
		//':'
		public Keyword getColonKeyword_0_1_1() { return cColonKeyword_0_1_1; }
		
		//type=[uml::Classifier|FQN]
		public Assignment getTypeAssignment_0_1_2() { return cTypeAssignment_0_1_2; }
		
		//[uml::Classifier|FQN]
		public CrossReference getTypeClassifierCrossReference_0_1_2_0() { return cTypeClassifierCrossReference_0_1_2_0; }
		
		//FQN
		public RuleCall getTypeClassifierFQNParserRuleCall_0_1_2_0_1() { return cTypeClassifierFQNParserRuleCall_0_1_2_0_1; }
		
		//name=STRING ':' type=[uml::Classifier|FQN] 'as' alias=ID
		public Group getGroup_1() { return cGroup_1; }
		
		//name=STRING
		public Assignment getNameAssignment_1_0() { return cNameAssignment_1_0; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0_0() { return cNameSTRINGTerminalRuleCall_1_0_0; }
		
		//':'
		public Keyword getColonKeyword_1_1() { return cColonKeyword_1_1; }
		
		//type=[uml::Classifier|FQN]
		public Assignment getTypeAssignment_1_2() { return cTypeAssignment_1_2; }
		
		//[uml::Classifier|FQN]
		public CrossReference getTypeClassifierCrossReference_1_2_0() { return cTypeClassifierCrossReference_1_2_0; }
		
		//FQN
		public RuleCall getTypeClassifierFQNParserRuleCall_1_2_0_1() { return cTypeClassifierFQNParserRuleCall_1_2_0_1; }
		
		//'as'
		public Keyword getAsKeyword_1_3() { return cAsKeyword_1_3; }
		
		//alias=ID
		public Assignment getAliasAssignment_1_4() { return cAliasAssignment_1_4; }
		
		//ID
		public RuleCall getAliasIDTerminalRuleCall_1_4_0() { return cAliasIDTerminalRuleCall_1_4_0; }
		
		//(':' type=[uml::Classifier|FQN] 'as' alias=ID) ('role[' actorType=ActorType ']')?
		public Group getGroup_2() { return cGroup_2; }
		
		//':' type=[uml::Classifier|FQN] 'as' alias=ID
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//':'
		public Keyword getColonKeyword_2_0_0() { return cColonKeyword_2_0_0; }
		
		//type=[uml::Classifier|FQN]
		public Assignment getTypeAssignment_2_0_1() { return cTypeAssignment_2_0_1; }
		
		//[uml::Classifier|FQN]
		public CrossReference getTypeClassifierCrossReference_2_0_1_0() { return cTypeClassifierCrossReference_2_0_1_0; }
		
		//FQN
		public RuleCall getTypeClassifierFQNParserRuleCall_2_0_1_0_1() { return cTypeClassifierFQNParserRuleCall_2_0_1_0_1; }
		
		//'as'
		public Keyword getAsKeyword_2_0_2() { return cAsKeyword_2_0_2; }
		
		//alias=ID
		public Assignment getAliasAssignment_2_0_3() { return cAliasAssignment_2_0_3; }
		
		//ID
		public RuleCall getAliasIDTerminalRuleCall_2_0_3_0() { return cAliasIDTerminalRuleCall_2_0_3_0; }
		
		//('role[' actorType=ActorType ']')?
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'role['
		public Keyword getRoleKeyword_2_1_0() { return cRoleKeyword_2_1_0; }
		
		//actorType=ActorType
		public Assignment getActorTypeAssignment_2_1_1() { return cActorTypeAssignment_2_1_1; }
		
		//ActorType
		public RuleCall getActorTypeActorTypeEnumRuleCall_2_1_1_0() { return cActorTypeActorTypeEnumRuleCall_2_1_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2_1_2() { return cRightSquareBracketKeyword_2_1_2; }
	}
	public class InteractionFragmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.sequence.Sequence.InteractionFragment");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMessageParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOccurenceSpecificationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//InteractionFragment:
		//	Message | OccurenceSpecification;
		@Override public ParserRule getRule() { return rule; }
		
		//Message | OccurenceSpecification
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Message
		public RuleCall getMessageParserRuleCall_0() { return cMessageParserRuleCall_0; }
		
		//OccurenceSpecification
		public RuleCall getOccurenceSpecificationParserRuleCall_1() { return cOccurenceSpecificationParserRuleCall_1; }
	}
	public class MessageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.sequence.Sequence.Message");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFoundMessageParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLostMessageParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cTypeAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cTypeMessageTypeEnumRuleCall_2_0_0 = (RuleCall)cTypeAssignment_2_0.eContents().get(0);
		private final Assignment cNameAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_2_1_0 = (RuleCall)cNameAssignment_2_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cLeftAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final CrossReference cLeftActorCrossReference_2_3_0 = (CrossReference)cLeftAssignment_2_3.eContents().get(0);
		private final RuleCall cLeftActorFQNParserRuleCall_2_3_0_1 = (RuleCall)cLeftActorCrossReference_2_3_0.eContents().get(1);
		private final Keyword cCommaKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		private final Assignment cRightAssignment_2_5 = (Assignment)cGroup_2.eContents().get(5);
		private final CrossReference cRightActorCrossReference_2_5_0 = (CrossReference)cRightAssignment_2_5.eContents().get(0);
		private final RuleCall cRightActorFQNParserRuleCall_2_5_0_1 = (RuleCall)cRightActorCrossReference_2_5_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2_6 = (Keyword)cGroup_2.eContents().get(6);
		
		//Message:
		//	FoundMessage | LostMessage | type=MessageType name=STRING '(' left=[Actor|FQN] ',' right=[Actor|FQN] ')';
		@Override public ParserRule getRule() { return rule; }
		
		//FoundMessage | LostMessage | type=MessageType name=STRING '(' left=[Actor|FQN] ',' right=[Actor|FQN] ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//FoundMessage
		public RuleCall getFoundMessageParserRuleCall_0() { return cFoundMessageParserRuleCall_0; }
		
		//LostMessage
		public RuleCall getLostMessageParserRuleCall_1() { return cLostMessageParserRuleCall_1; }
		
		//type=MessageType name=STRING '(' left=[Actor|FQN] ',' right=[Actor|FQN] ')'
		public Group getGroup_2() { return cGroup_2; }
		
		//type=MessageType
		public Assignment getTypeAssignment_2_0() { return cTypeAssignment_2_0; }
		
		//MessageType
		public RuleCall getTypeMessageTypeEnumRuleCall_2_0_0() { return cTypeMessageTypeEnumRuleCall_2_0_0; }
		
		//name=STRING
		public Assignment getNameAssignment_2_1() { return cNameAssignment_2_1; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_2_1_0() { return cNameSTRINGTerminalRuleCall_2_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_2() { return cLeftParenthesisKeyword_2_2; }
		
		//left=[Actor|FQN]
		public Assignment getLeftAssignment_2_3() { return cLeftAssignment_2_3; }
		
		//[Actor|FQN]
		public CrossReference getLeftActorCrossReference_2_3_0() { return cLeftActorCrossReference_2_3_0; }
		
		//FQN
		public RuleCall getLeftActorFQNParserRuleCall_2_3_0_1() { return cLeftActorFQNParserRuleCall_2_3_0_1; }
		
		//','
		public Keyword getCommaKeyword_2_4() { return cCommaKeyword_2_4; }
		
		//right=[Actor|FQN]
		public Assignment getRightAssignment_2_5() { return cRightAssignment_2_5; }
		
		//[Actor|FQN]
		public CrossReference getRightActorCrossReference_2_5_0() { return cRightActorCrossReference_2_5_0; }
		
		//FQN
		public RuleCall getRightActorFQNParserRuleCall_2_5_0_1() { return cRightActorFQNParserRuleCall_2_5_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_6() { return cRightParenthesisKeyword_2_6; }
	}
	public class FoundMessageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.sequence.Sequence.FoundMessage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFoundKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeMessageTypeEnumRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameSTRINGTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword c_Keyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cRightAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cRightActorCrossReference_6_0 = (CrossReference)cRightAssignment_6.eContents().get(0);
		private final RuleCall cRightActorFQNParserRuleCall_6_0_1 = (RuleCall)cRightActorCrossReference_6_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//FoundMessage:
		//	'found' type=MessageType name=STRING '(' '_' ',' right=[Actor|FQN] ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'found' type=MessageType name=STRING '(' '_' ',' right=[Actor|FQN] ')'
		public Group getGroup() { return cGroup; }
		
		//'found'
		public Keyword getFoundKeyword_0() { return cFoundKeyword_0; }
		
		//type=MessageType
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//MessageType
		public RuleCall getTypeMessageTypeEnumRuleCall_1_0() { return cTypeMessageTypeEnumRuleCall_1_0; }
		
		//name=STRING
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_2_0() { return cNameSTRINGTerminalRuleCall_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//'_'
		public Keyword get_Keyword_4() { return c_Keyword_4; }
		
		//','
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }
		
		//right=[Actor|FQN]
		public Assignment getRightAssignment_6() { return cRightAssignment_6; }
		
		//[Actor|FQN]
		public CrossReference getRightActorCrossReference_6_0() { return cRightActorCrossReference_6_0; }
		
		//FQN
		public RuleCall getRightActorFQNParserRuleCall_6_0_1() { return cRightActorFQNParserRuleCall_6_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}
	public class LostMessageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.sequence.Sequence.LostMessage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLostKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeMessageTypeEnumRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameSTRINGTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cLeftAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cLeftActorCrossReference_4_0 = (CrossReference)cLeftAssignment_4.eContents().get(0);
		private final RuleCall cLeftActorFQNParserRuleCall_4_0_1 = (RuleCall)cLeftActorCrossReference_4_0.eContents().get(1);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword c_Keyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//LostMessage:
		//	'lost' type=MessageType name=STRING '(' left=[Actor|FQN] ',' '_' ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'lost' type=MessageType name=STRING '(' left=[Actor|FQN] ',' '_' ')'
		public Group getGroup() { return cGroup; }
		
		//'lost'
		public Keyword getLostKeyword_0() { return cLostKeyword_0; }
		
		//type=MessageType
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//MessageType
		public RuleCall getTypeMessageTypeEnumRuleCall_1_0() { return cTypeMessageTypeEnumRuleCall_1_0; }
		
		//name=STRING
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_2_0() { return cNameSTRINGTerminalRuleCall_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//left=[Actor|FQN]
		public Assignment getLeftAssignment_4() { return cLeftAssignment_4; }
		
		//[Actor|FQN]
		public CrossReference getLeftActorCrossReference_4_0() { return cLeftActorCrossReference_4_0; }
		
		//FQN
		public RuleCall getLeftActorFQNParserRuleCall_4_0_1() { return cLeftActorFQNParserRuleCall_4_0_1; }
		
		//','
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }
		
		//'_'
		public Keyword get_Keyword_6() { return c_Keyword_6; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}
	public class OccurenceSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.sequence.Sequence.OccurenceSpecification");
		private final RuleCall cDestructionOccurenceSpecificationParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//OccurenceSpecification:
		//	DestructionOccurenceSpecification;
		@Override public ParserRule getRule() { return rule; }
		
		//DestructionOccurenceSpecification
		public RuleCall getDestructionOccurenceSpecificationParserRuleCall() { return cDestructionOccurenceSpecificationParserRuleCall; }
	}
	public class DestructionOccurenceSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.sequence.Sequence.DestructionOccurenceSpecification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDestKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//DestructionOccurenceSpecification:
		//	'dest' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'dest' name=ID
		public Group getGroup() { return cGroup; }
		
		//'dest'
		public Keyword getDestKeyword_0() { return cDestKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class FQNElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.sequence.Sequence.FQN");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//FQN:
		//	ID ('.' ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	public class CommentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.sequence.Sequence.Comment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNoteKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cBodyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBodyCommentBodyParserRuleCall_2_0 = (RuleCall)cBodyAssignment_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Comment:
		//	'note' '[' body=CommentBody ']';
		@Override public ParserRule getRule() { return rule; }
		
		//'note' '[' body=CommentBody ']'
		public Group getGroup() { return cGroup; }
		
		//'note'
		public Keyword getNoteKeyword_0() { return cNoteKeyword_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//body=CommentBody
		public Assignment getBodyAssignment_2() { return cBodyAssignment_2; }
		
		//CommentBody
		public RuleCall getBodyCommentBodyParserRuleCall_2_0() { return cBodyCommentBodyParserRuleCall_2_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}
	public class CommentBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.sequence.Sequence.CommentBody");
		private final RuleCall cSTRINGTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//CommentBody:
		//	STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall() { return cSTRINGTerminalRuleCall; }
	}
	
	public class MessageTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.sequence.Sequence.MessageType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSYNCEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSYNCSyncKeyword_0_0 = (Keyword)cSYNCEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cASYNCEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cASYNCAsyncKeyword_1_0 = (Keyword)cASYNCEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum MessageType:
		//	SYNC="sync"
		//	| ASYNC="async";
		public EnumRule getRule() { return rule; }
		
		//SYNC="sync" | ASYNC="async"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SYNC="sync"
		public EnumLiteralDeclaration getSYNCEnumLiteralDeclaration_0() { return cSYNCEnumLiteralDeclaration_0; }
		
		//"sync"
		public Keyword getSYNCSyncKeyword_0_0() { return cSYNCSyncKeyword_0_0; }
		
		//ASYNC="async"
		public EnumLiteralDeclaration getASYNCEnumLiteralDeclaration_1() { return cASYNCEnumLiteralDeclaration_1; }
		
		//"async"
		public Keyword getASYNCAsyncKeyword_1_0() { return cASYNCAsyncKeyword_1_0; }
	}
	public class ActorTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.sequence.Sequence.ActorType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cHUMANEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cHUMANHumanKeyword_0_0 = (Keyword)cHUMANEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMACHINEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMACHINEMachineKeyword_1_0 = (Keyword)cMACHINEEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum ActorType:
		//	HUMAN='human'
		//	| MACHINE='machine';
		public EnumRule getRule() { return rule; }
		
		//HUMAN='human' | MACHINE='machine'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//HUMAN='human'
		public EnumLiteralDeclaration getHUMANEnumLiteralDeclaration_0() { return cHUMANEnumLiteralDeclaration_0; }
		
		//'human'
		public Keyword getHUMANHumanKeyword_0_0() { return cHUMANHumanKeyword_0_0; }
		
		//MACHINE='machine'
		public EnumLiteralDeclaration getMACHINEEnumLiteralDeclaration_1() { return cMACHINEEnumLiteralDeclaration_1; }
		
		//'machine'
		public Keyword getMACHINEMachineKeyword_1_0() { return cMACHINEMachineKeyword_1_0; }
	}
	
	private final SequenceDiagramElements pSequenceDiagram;
	private final RootPackageElements pRootPackage;
	private final ActorElements pActor;
	private final InteractionFragmentElements pInteractionFragment;
	private final MessageElements pMessage;
	private final FoundMessageElements pFoundMessage;
	private final LostMessageElements pLostMessage;
	private final OccurenceSpecificationElements pOccurenceSpecification;
	private final DestructionOccurenceSpecificationElements pDestructionOccurenceSpecification;
	private final FQNElements pFQN;
	private final CommentElements pComment;
	private final CommentBodyElements pCommentBody;
	private final MessageTypeElements eMessageType;
	private final ActorTypeElements eActorType;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public SequenceGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pSequenceDiagram = new SequenceDiagramElements();
		this.pRootPackage = new RootPackageElements();
		this.pActor = new ActorElements();
		this.pInteractionFragment = new InteractionFragmentElements();
		this.pMessage = new MessageElements();
		this.pFoundMessage = new FoundMessageElements();
		this.pLostMessage = new LostMessageElements();
		this.pOccurenceSpecification = new OccurenceSpecificationElements();
		this.pDestructionOccurenceSpecification = new DestructionOccurenceSpecificationElements();
		this.pFQN = new FQNElements();
		this.pComment = new CommentElements();
		this.pCommentBody = new CommentBodyElements();
		this.eMessageType = new MessageTypeElements();
		this.eActorType = new ActorTypeElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.cooperateproject.modeling.textual.sequence.Sequence".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//SequenceDiagram:
	//	{SequenceDiagram}
	//	'@start-seqd' title=STRING
	//	rootPackage=RootPackage
	//	'@end-seqd';
	public SequenceDiagramElements getSequenceDiagramAccess() {
		return pSequenceDiagram;
	}
	
	public ParserRule getSequenceDiagramRule() {
		return getSequenceDiagramAccess().getRule();
	}
	
	//RootPackage:
	//	'rootElement' name=FQN
	//	actors+=Actor*
	//	interactionFragments+=InteractionFragment*
	//	cls+=[uml::Classifier]*;
	public RootPackageElements getRootPackageAccess() {
		return pRootPackage;
	}
	
	public ParserRule getRootPackageRule() {
		return getRootPackageAccess().getRule();
	}
	
	//Actor:
	//	'act' (name=ID ':' type=[uml::Classifier|FQN]) | name=STRING ':' type=[uml::Classifier|FQN] 'as' alias=ID | (':'
	//	type=[uml::Classifier|FQN] 'as' alias=ID) ('role[' actorType=ActorType ']')? //comments+=Comment? 
	//;
	public ActorElements getActorAccess() {
		return pActor;
	}
	
	public ParserRule getActorRule() {
		return getActorAccess().getRule();
	}
	
	//InteractionFragment:
	//	Message | OccurenceSpecification;
	public InteractionFragmentElements getInteractionFragmentAccess() {
		return pInteractionFragment;
	}
	
	public ParserRule getInteractionFragmentRule() {
		return getInteractionFragmentAccess().getRule();
	}
	
	//Message:
	//	FoundMessage | LostMessage | type=MessageType name=STRING '(' left=[Actor|FQN] ',' right=[Actor|FQN] ')';
	public MessageElements getMessageAccess() {
		return pMessage;
	}
	
	public ParserRule getMessageRule() {
		return getMessageAccess().getRule();
	}
	
	//FoundMessage:
	//	'found' type=MessageType name=STRING '(' '_' ',' right=[Actor|FQN] ')';
	public FoundMessageElements getFoundMessageAccess() {
		return pFoundMessage;
	}
	
	public ParserRule getFoundMessageRule() {
		return getFoundMessageAccess().getRule();
	}
	
	//LostMessage:
	//	'lost' type=MessageType name=STRING '(' left=[Actor|FQN] ',' '_' ')';
	public LostMessageElements getLostMessageAccess() {
		return pLostMessage;
	}
	
	public ParserRule getLostMessageRule() {
		return getLostMessageAccess().getRule();
	}
	
	//OccurenceSpecification:
	//	DestructionOccurenceSpecification;
	public OccurenceSpecificationElements getOccurenceSpecificationAccess() {
		return pOccurenceSpecification;
	}
	
	public ParserRule getOccurenceSpecificationRule() {
		return getOccurenceSpecificationAccess().getRule();
	}
	
	//DestructionOccurenceSpecification:
	//	'dest' name=ID;
	public DestructionOccurenceSpecificationElements getDestructionOccurenceSpecificationAccess() {
		return pDestructionOccurenceSpecification;
	}
	
	public ParserRule getDestructionOccurenceSpecificationRule() {
		return getDestructionOccurenceSpecificationAccess().getRule();
	}
	
	//FQN:
	//	ID ('.' ID)*;
	public FQNElements getFQNAccess() {
		return pFQN;
	}
	
	public ParserRule getFQNRule() {
		return getFQNAccess().getRule();
	}
	
	//Comment:
	//	'note' '[' body=CommentBody ']';
	public CommentElements getCommentAccess() {
		return pComment;
	}
	
	public ParserRule getCommentRule() {
		return getCommentAccess().getRule();
	}
	
	//CommentBody:
	//	STRING;
	public CommentBodyElements getCommentBodyAccess() {
		return pCommentBody;
	}
	
	public ParserRule getCommentBodyRule() {
		return getCommentBodyAccess().getRule();
	}
	
	//enum MessageType:
	//	SYNC="sync"
	//	| ASYNC="async";
	public MessageTypeElements getMessageTypeAccess() {
		return eMessageType;
	}
	
	public EnumRule getMessageTypeRule() {
		return getMessageTypeAccess().getRule();
	}
	
	//enum ActorType:
	//	HUMAN='human'
	//	| MACHINE='machine';
	public ActorTypeElements getActorTypeAccess() {
		return eActorType;
	}
	
	public EnumRule getActorTypeRule() {
		return getActorTypeAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
