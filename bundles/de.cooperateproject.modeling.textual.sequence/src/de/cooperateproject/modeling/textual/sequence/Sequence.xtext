grammar de.cooperateproject.modeling.textual.sequence.Sequence with org.eclipse.xtext.common.Terminals

import "platform:/resource/de.cooperateproject.modeling.textual.sequence.metamodel/model/Sequence.ecore"
import "platform:/resource/de.cooperateproject.modeling.textual.common.metamodel/model/textualCommons.ecore" as commons
import "platform:/plugin/org.eclipse.uml2.uml/model/UML.ecore" as uml
import "http://www.eclipse.org/emf/2002/Ecore" as ecore



SequenceDiagram:
    {SequenceDiagram}
    '@start-seqd' title=STRING
    rootPackage=RootPackage
    actors += Actor* 
    behaviorFragments += BehaviorFragment*
    '@end-seqd'
;

RootPackage:
    'rootElement' name = FQN
;

Actor:
    (deferred?='def')? 'act'  
        ((name = ID (typeMapping=ActorClassifierMapping)?)
        | (typeMapping=ActorClassifierMapping 'as' alias = ID)
        | (name = STRING (typeMapping=ActorClassifierMapping)? 'as' alias = ID))
    ('role['actorType=ActorType']')? //comments+=Comment? 
;

ActorClassifierMapping:
    ':' ((classifier= [uml::Classifier|FQN]))
;


BehaviorFragment: 
    Message | OccurenceSpecification | CombinedFragment
;


BehaviorFragments:
    (('{' fragments += BehaviorFragment+ '}') | fragments += BehaviorFragment)
;

Message:
    (StandardMessage    |
        ResponseMessage | 
        FoundMessage    |
        LostMessage     |
        CreateMessage   |
        DestructionMessage) 
    ('num['order = Order']')?
    timeConstraint=TimeConstraint?
;

TimeConstraint:
	'time[' constraints+=InnerTimeConstraint+ ']'
;

InnerTimeConstraint:
    type=TimeConstraintType'='value = STRING
;

StandardMessage:
    type=MessageType name=UnescapedString '(' left = [Actor|FQN] ',' right = [Actor|FQN] ')'
;

ResponseMessage:
   'reply' name=UnescapedString '(' (left = [Actor|FQN]|'_') ',' (right = ([Actor|FQN])|'_') ')'   
;

FoundMessage:
    'found' type=MessageType name=UnescapedString '(' '_' ',' right = [Actor|FQN]')'
;

LostMessage:
    'lost' type=MessageType name=UnescapedString '(' left = [Actor|FQN] ',' '_'')'
;

CreateMessage:
    'create' name=UnescapedString? '(' left = [Actor|FQN] ',' right = [Actor|FQN] ')'
;

DestructionMessage:
    'dest' name=UnescapedString? '(' left = [Actor|FQN] ',' right = [Actor|FQN] ')'
;


OccurenceSpecification:
    DestructionOccurenceSpecification
;

DestructionOccurenceSpecification: 
    'dest' target=[Actor|FQN]
;

CombinedFragment:
    Alternative | Option | Parallel | Critical | Loop //| Timed
;

Alternative:
    'alt' '{'
        alternatives += BehaviorFragmentsWithCondition+
    '}'
;

Option:
    'opt' '{'
        optional += BehaviorFragmentsWithCondition
    '}'
;

Parallel:
    'par' '{'
        parallels += BehaviorFragments+
    '}'
;

Critical:
    'critical' '{'
        fragments += BehaviorFragment+
    '}'
;

Loop:
    'loop''['condition=STRING']''{'
        fragments += BehaviorFragment+
    '}'
;

Timed:
    constraint=TimeConstraint '{'
        fragments += BehaviorFragment+
    '}'
;


BehaviorFragmentsWithCondition:
    '['condition=STRING']' (('{' fragments += BehaviorFragment+ '}') | fragments += BehaviorFragment)  
;

FQN:
    ID ('.' ID)*
;

Order:
    INT ('.' INT)*
; 

Comment returns commons::Comment:
    'note' body = CommentBody
;

CommentBody returns ecore::EString:
    STRING
;

UnescapedString returns ecore::EString:
    ID | STRING
;

enum MessageType:
    SYNC = "sync"
    | ASYNC = "async"
;

enum ActorType:
    HUMAN = 'human'
    | MACHINE = 'machine'
;

enum TimeConstraintType:
    DURATION = 'd'
    | TIME = 't'
    | MAXIMUM = 'max'
    | DIFFERENCE = 'diff'
;

