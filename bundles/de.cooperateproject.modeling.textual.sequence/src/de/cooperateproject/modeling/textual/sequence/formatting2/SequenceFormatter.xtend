/*
 * generated by Xtext 2.11.0
 */
package de.cooperateproject.modeling.textual.sequence.formatting2;

import com.google.inject.Inject;
import de.cooperateproject.modeling.textual.sequence.sequence.Actor;
import de.cooperateproject.modeling.textual.sequence.sequence.Alternative;
import de.cooperateproject.modeling.textual.sequence.sequence.Critical;
import de.cooperateproject.modeling.textual.sequence.sequence.Fragment;
import de.cooperateproject.modeling.textual.sequence.sequence.Loop;
import de.cooperateproject.modeling.textual.sequence.sequence.Message;
import de.cooperateproject.modeling.textual.sequence.sequence.Option;
import de.cooperateproject.modeling.textual.sequence.sequence.OrderedFragmentContainer;
import de.cooperateproject.modeling.textual.sequence.sequence.Parallel;
import de.cooperateproject.modeling.textual.sequence.sequence.SequenceDiagram;
import de.cooperateproject.modeling.textual.sequence.services.SequenceGrammarAccess;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import de.cooperateproject.modeling.textual.sequence.sequence.SequencePackage
import de.cooperateproject.modeling.textual.sequence.sequence.RootPackage

class SequenceFormatter extends AbstractFormatter2 {
	
	@Inject extension SequenceGrammarAccess

	def dispatch void format(SequenceDiagram sequencediagram, extension IFormattableDocument document) {
        sequencediagram.regionFor.feature(SequencePackage.Literals.SEQUENCE_DIAGRAM__TITLE).append[newLines = 2]
        format(sequencediagram.getRootPackage(), document);
        for (Actor actors : sequencediagram.getActors()) {
            format(actors, document)
            actors.append[newLine]
        }
        sequencediagram.actors.last?.append[newLines = 2; priority=2]
        
        for (Fragment behaviorFragments : sequencediagram.fragments) {
            format(behaviorFragments, document);
            behaviorFragments.append[newLine]
        }
        sequencediagram.regionFor.keyword(sequenceDiagramAccess.endSeqdKeyword_7).prepend[newLines = 2; priority=2]
	}

    def dispatch void format(RootPackage rootpackage, extension IFormattableDocument document) {
        rootpackage.regionFor.assignment(rootPackageAccess.nameAssignment_1).append[newLines = 2]
    }
    
	def dispatch void format(Actor actor, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(actor.getTypeMapping(), document);
	}

	def dispatch void format(OrderedFragmentContainer orderedfragmentcontainer, extension IFormattableDocument document) {
	    
        // TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
        format(orderedfragmentcontainer.getCondition(), document);
        for (Fragment fragments : orderedfragmentcontainer.fragments) {
            format(fragments, document);
            fragments.append[newLine]
        }
	}

	def dispatch void format(Message message, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(message.getSendEvent(), document);
		format(message.getArrivalEvent(), document);
	}

	def dispatch void format(Parallel parallel, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (OrderedFragmentContainer regions : parallel.getRegions()) {
			format(regions, document);
		}
	}

	def dispatch void format(Alternative alternative, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (OrderedFragmentContainer regions : alternative.getRegions()) {
			format(regions, document);
		}
	}

	def dispatch void format(Loop loop, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(loop.getRegion(), document);
	}

	def dispatch void format(Option option, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(option.getRegion(), document);
	}

	def dispatch void format(Critical critical, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(critical.getRegion(), document);
	}
}
