import TransformationUtils_Usecase;

transformation Textual_to_Graphical_for_Usecase(in textual : TXT, inout graphical : NOTATION, in umlmodel : UML, in umlprimitives : UML);

modeltype NOTATION uses notation('http://www.eclipse.org/gmf/runtime/1.0.2/notation');
modeltype UML uses uml('http://www.eclipse.org/uml2/5.0.0/UML');
modeltype TXT uses usecase('http://www.cooperateproject.de/modeling/language/usecase/Usecase');
modeltype ECORE uses ecore('http://www.eclipse.org/emf/2002/Ecore');
modeltype STYLE uses style('http://www.eclipse.org/papyrus/infra/viewpoints/policy/style');

main() {
	var diagrams := textual.rootObjects()[usecase::UseCaseDiagram];
	assert fatal (diagrams->size() = 1);
	diagrams->map diagramToDiagram();
}

mapping usecase::UseCaseDiagram::diagramToDiagram() : notation::Diagram {
	var rootPackage := self.rootPackage.referencedElement.oclAsType(uml::Package);
	var conditionedExtends := self.rootPackage.relationships->selectByKind(usecase::Extend)->select(condition != null and condition != "");

	type := "UseCase";
	name := self.title;
	measurementUnit := notation::MeasurementUnit::Pixel;
	element := rootPackage.toEObject();
	
	children += self.rootPackage.systems.map systemToShape();
	children += self.rootPackage.actors.map behavioredClassifierToShape();
	children += conditionedExtends.map extendToShape();

	edges += self.rootPackage.relationships.map relationshipToEdge();
	edges += conditionedExtends.map extendToConstraintEdge();
	
	styles += self.map stringValueStyle();
	styles += self.map diagramStyle();
	styles += self.map papyrusViewStyle(rootPackage);
}

mapping usecase::BehavioredClassifier::behavioredClassifierToShape() : notation::Shape
disjuncts usecase::Actor::actorToShape, usecase::UseCase::usecaseToShape
{}

mapping usecase::Actor::actorToShape() : notation::Shape
when {self.oclIsKindOf(usecase::Actor)}
{
	type := PAPYRUS_NOTATION_SHAPE_ACTOR_REGULAR;
	element := self.referencedElement.toEObject();
	children += self.map actorToNameLabel();
	children += self.map actorToStereotypeLabel();
	children += self.map actorToQualifiedNameLabel();
	children += self.map actorToFloatingNameLabel();
	layoutConstraint := result.toEObject().map notationBounds();
}

mapping usecase::System::systemToShape() : notation::Shape
{
	type := PAPYRUS_NOTATION_SHAPE_SUBJECT_REGULAR;
	element := self.referencedElement.toEObject();
	layoutConstraint := result.toEObject().map notationBounds();
	
	children += self.map systemToNameLabel();
	children += self.map systemToFloatingNameLabel();
	children += self.map systemToCompartment();	
}

mapping usecase::System::systemToCompartment() : notation::BasicCompartment
{
	type := PAPYRUS_NOTATION_SHAPE_USECASECOMPARTMENT_REGULAR;
	children := self.usecases.map behavioredClassifierToShape();
	layoutConstraint := result.toEObject().map notationBounds();
}

mapping usecase::UseCase::usecaseToShape() : notation::Shape
when {self.oclIsKindOf(usecase::UseCase)}
{
	type := PAPYRUS_NOTATION_SHAPE_USECASE_NESTED;
	element := self.referencedElement.toEObject();
	
	children += self.map usecaseToNameLabel();
	children += self.map usecaseToFloatingNameLabel();
	children += self.map usecaseToExtensionPointCompartment();
	
	layoutConstraint := result.toEObject().map notationBounds();
}

mapping usecase::UseCase::usecaseToExtensionPointCompartment() : notation::BasicCompartment
{
	type := PAPYRUS_NOTATION_SHAPE_EXTENSIONPOINTCOMPARTMENT_NESTED;
	//eAnnotations += result.map visibleAndTitleAnnotation();
	children += self.extensionPoints.map extensionPointToShape();
	styles += result.toEObject().map sortingStyle();
	styles += result.toEObject().map filteringStyle();
	styles += result.toEObject().map titleStyle();
	layoutConstraint := result.toEObject().map notationBounds();
}

mapping usecase::ExtensionPoint::extensionPointToShape() : notation::Shape
{
	type := PAPYRUS_NOTATION_NODE_EXTENSIONPOINTLABEL_REGULAR;
	element := self.referencedElement.toEObject();
	layoutConstraint := result.toEObject().map locationConstraint();
}

mapping usecase::Extend::extendToShape() : notation::Shape
{
	element := self.referencedElement.oclAsType(uml::Extend).condition.toEObject();
	type := PAPYRUS_NOTATION_SHAPE_CONSTRAINT_REGULAR;
	layoutConstraint := result.toEObject().map notationBounds();
	children += self.map extendToNameLabel();
	children += self.map extendToBodyLabel();
}



mapping usecase::Relationship::relationshipToEdge() : notation::Connector
disjuncts
	usecase::Generalization::generalizationToEdge,
	usecase::Extend::extendToEdge,
	usecase::Association::associationToEdge,
	usecase::Include::includeToEdge
{
}

mapping usecase::Generalization::generalizationToEdge() : notation::Connector
when {self.oclIsKindOf(usecase::Generalization)}
{
	var sourceShape := resolveoneIn(
		usecase::BehavioredClassifier::behavioredClassifierToShape,
		s : notation::Shape | s.element = self.specific.referencedElement.toEObject()
	);
	var targetShape := resolveoneIn(
		usecase::BehavioredClassifier::behavioredClassifierToShape,
		s : notation::Shape | s.element = self.general.referencedElement.toEObject()
	);
	
	type := PAPYRUS_NOTATION_EDGE_GENERALIZATION;
	element := self.referencedElement.toEObject();
	source := sourceShape;
	target := targetShape;
	children += self.map generalizationToSteoretypeLabel();
	styles := result.toEObject().map fontStyle();
	bendpoints := result.map connectorToBendpoint();
}

mapping usecase::Extend::extendToEdge() : notation::Connector
when {self.oclIsKindOf(usecase::Extend)}
{
	var sourceShape := resolveoneIn(
		usecase::UseCase::usecaseToShape,
		s : notation::Shape | s.element = self.extension.referencedElement.toEObject()
	);
	var targetShape := resolveoneIn(
		usecase::UseCase::usecaseToShape,
		s : notation::Shape | s.element = self.extendedCase.referencedElement.toEObject()
	);

	type := PAPYRUS_NOTATION_EDGE_EXTEND;
	element := self.referencedElement.toEObject();
	source := sourceShape;
	target := targetShape;	
	children += self.map extendToKeywordLabel();
	children += self.map extendToStereotypeLabel();
	styles := result.toEObject().map fontStyle();
	bendpoints := result.map connectorToBendpoint();
}

mapping usecase::Association::associationToEdge() : notation::Connector
when {self.oclIsKindOf(usecase::Association)}
{
	var sourceShape := resolveoneIn(
		usecase::Actor::actorToShape,
		s : notation::Shape | s.element = self.actor.referencedElement.toEObject()
	);
	var targetShape := resolveoneIn(
		usecase::UseCase::usecaseToShape,
		s : notation::Shape | s.element = self.usecase.referencedElement.toEObject()
	);
	
	type := PAPYRUS_NOTATION_EDGE_ASSOCIATION;
	source := sourceShape;
	target := targetShape;
	element := self.referencedElement.toEObject();
	styles := result.toEObject().map fontStyle();
	bendpoints := result.map connectorToBendpoint();
	children += self.map stereotypeDecorationAssocation();
	children += self.map nameDecorationAssociation();
	children += self.map targetRoleDecoration();
	children += self.map sourceRoleDecoration();
	children += self.map sourceMultiplicityDecoration();
	children += self.map targetMultiplicityDecoration();
}

mapping usecase::Include::includeToEdge() : notation::Connector
when {self.oclIsKindOf(usecase::Include)}
{
	var sourceShape := resolveoneIn(
		usecase::UseCase::usecaseToShape,
		s : notation::Shape | s.element = self.includingCase.referencedElement.toEObject()
	);
	var targetShape := resolveoneIn(
		usecase::UseCase::usecaseToShape,
		s : notation::Shape | s.element = self.addition.referencedElement.toEObject()
	);

	type := PAPYRUS_NOTATION_EDGE_INCLUDE;
	source := sourceShape;
	target := targetShape;
	element := self.referencedElement.toEObject();
	styles := result.toEObject().map fontStyle();
	bendpoints := result.map connectorToBendpoint();
	children += self.map includeToKeywordLabel();
	children += self.map includeToStereotypeLabel();
}

mapping usecase::Extend::extendToConstraintEdge() : notation::Connector
{
	var umlConstraint := self.referencedElement.oclAsType(uml::Extend).condition;
	var constraintShape := resolveoneIn(
		usecase::Extend::extendToShape,
		s : notation::Shape | s.element.oclAsType(uml::Constraint) = umlConstraint
	);
	var extendEdge := resolveoneIn(
		usecase::Extend::extendToEdge,
		c : notation::Connector | c.element = self.referencedElement.toEObject()
	);
	
	type := PAPYRUS_NOTATION_EDGE_CONSTRAINT;
	element := null;
	source := constraintShape;
	target := extendEdge;
	styles := result.toEObject().map fontStyle();
	bendpoints := result.map connectorToBendpoint();
}


// labels / decorations / ...

mapping usecase::Extend::extendToKeywordLabel() : notation::DecorationNode
{
	type := PAPYRUS_NOTATION_NODE_EXTEND_KEYWORD;
	//eAnnotations += result.map visibleTrueAnnotation();
	layoutConstraint := result.toEObject().map locationConstraint();
}

mapping usecase::Extend::extendToStereotypeLabel() : notation::DecorationNode
{
	type := PAPYRUS_NOTATION_NODE_EXTEND_STEREOTYPE;
	//eAnnotations += result.map visibleTrueAnnotation();
	layoutConstraint := result.toEObject().map locationConstraint();
}

mapping usecase::Association::stereotypeDecorationAssocation() : notation::DecorationNode
{
	type := PAPYRUS_NOTATION_NODE_ASSOCIATION_STEREOTYPE;
	layoutConstraint := result.toEObject().map locationConstraint();
}

mapping usecase::Association::nameDecorationAssociation() : notation::DecorationNode
{
	type := PAPYRUS_NOTATION_NODE_ASSOCIATION_NAME;
	layoutConstraint := result.toEObject().map locationConstraint();
}

mapping usecase::Association::targetRoleDecoration() : notation::DecorationNode
{
	type := PAPYRUS_NOTATION_NODE_ASSOCIATION_TARGETROLE;
	layoutConstraint := result.toEObject().map locationConstraint();
}

mapping usecase::Association::sourceRoleDecoration() : notation::DecorationNode
{
	type := PAPYRUS_NOTATION_NODE_ASSOCIATION_SOURCEROLE;
	layoutConstraint := result.toEObject().map locationConstraint();
}

mapping usecase::Association::sourceMultiplicityDecoration() : notation::DecorationNode
{
	type := PAPYRUS_NOTATION_NODE_ASSOCIATION_SOURCEMULTIPLICITY;
	layoutConstraint := result.toEObject().map locationConstraint();
}

mapping usecase::Association::targetMultiplicityDecoration() : notation::DecorationNode
{
	type := PAPYRUS_NOTATION_NODE_ASSOCIATION_TARGETMULTIPLICITY;
	layoutConstraint := result.toEObject().map locationConstraint();
}

mapping usecase::Include::includeToKeywordLabel() : notation::DecorationNode
{
	type := PAPYRUS_NOTATION_EDGE_INCLUDE_KEYWORD;
	layoutConstraint := result.toEObject().map locationConstraint();
}

mapping usecase::Include::includeToStereotypeLabel() : notation::DecorationNode
{
	type := PAPYRUS_NOTATION_EDGE_INCLUDE_STEREOTYPE;
	layoutConstraint := result.toEObject().map locationConstraint();
}


mapping usecase::System::systemToNameLabel() : notation::DecorationNode
{
	type := PAPYRUS_NOTATION_NODE_CLASSIFIER_NAME_REGULAR;
}

mapping usecase::System::systemToFloatingNameLabel() : notation::DecorationNode
{
	type := PAPYRUS_NOTATION_NODE_CLASSIFIER_FLOATINGNAME_REGULAR;
	layoutConstraint := result.toEObject().map locationConstraint();
}

mapping usecase::UseCase::usecaseToNameLabel() : notation::DecorationNode
{
	type := PAPYRUS_NOTATION_NODE_USECASE_NAME_REGULAR;
}

mapping usecase::UseCase::usecaseToFloatingNameLabel() : notation::DecorationNode
{
	type := PAPYRUS_NOTATION_NODE_USECASE_FLOATINGNAME_REGULAR;
	layoutConstraint := result.toEObject().map locationConstraint();
}

mapping usecase::Actor::actorToNameLabel() : notation::DecorationNode
{
	type := PAPYRUS_NOTATION_NODE_ACTOR_NAME_REGULAR;
	layoutConstraint := result.toEObject().map locationConstraint();
}

mapping usecase::Actor::actorToStereotypeLabel() : notation::DecorationNode
{
	type := PAPYRUS_NOTATION_NODE_ACTOR_STEREOTYPE_REGULAR;
	layoutConstraint := result.toEObject().map locationConstraint();
}

mapping usecase::Actor::actorToQualifiedNameLabel() : notation::DecorationNode
{
	type := PAPYRUS_NOTATION_NODE_ACTOR_QUALIFIEDNAME_REGULAR;
	layoutConstraint := result.toEObject().map locationConstraint();
}

mapping usecase::Actor::actorToFloatingNameLabel() : notation::DecorationNode
{
	type := PAPYRUS_NOTATION_NODE_ACTOR_FLOATINGNAME_REGULAR;
	layoutConstraint := result.toEObject().map locationConstraint();
}

mapping usecase::UseCaseDiagram::stringValueStyle() : notation::StringValueStyle
{
	name := "diagram_compatibility_version";
	stringValue := "1.2.0";	
}

mapping usecase::UseCaseDiagram::diagramStyle() : notation::DiagramStyle
{	
}

mapping usecase::UseCaseDiagram::papyrusViewStyle(rootElement : uml::Package) : style::PapyrusViewStyle
{
	owner := rootElement.toEObject();
}

mapping usecase::Extend::extendToNameLabel() : notation::DecorationNode
{
	type := PAPYRUS_NOTATION_NODE_CONSTRAINT_NAME_REGULAR;
}

mapping usecase::Extend::extendToBodyLabel() : notation::DecorationNode
{
	type := PAPYRUS_NOTATION_NODE_CONSTRAINT_BODY_REGULAR;
}

mapping usecase::Generalization::generalizationToSteoretypeLabel() : notation::DecorationNode
{
	type := PAPYRUS_NOTATION_NODE_GENERALIZATION_STEREOTYPE;
	layoutConstraint := result.toEObject().map locationConstraint();
}






// reusable mappings

mapping notation::DecorationNode::visibleTrueAnnotation() : ecore::EAnnotation
{
	source := "PapyrusCSSForceValue";
	details += result.map annotationToVisibleDetail();
}

mapping notation::DecorationNode::visibleAndTitleAnnotation() : ecore::EAnnotation
inherits  notation::DecorationNode::visibleTrueAnnotation
{
	details += result.map annotationToShowTitleDetail();
}

mapping ecore::EAnnotation::annotationToVisibleDetail() : ecore::EStringToStringMapEntry
{
	key := "visible";
	value := "true";
}

mapping ecore::EAnnotation::annotationToShowTitleDetail() : ecore::EStringToStringMapEntry
{
	key := "showTitle";
	value := "true";
}