import TraceUtils_Sequence;

transformation Graphical_to_Textual_for_Sequence_Trace(in graphicalTrace : TRACE, out textualTrace : TRACE, in textualModel : TEXTUAL, in t2gTransformation : QVTO);

modeltype QVTO uses qvtoperational('http://www.eclipse.org/QVT/1.0.0/Operational');
modeltype TRACE uses trace('http:///www.eclipse.org/m2m/qvt/operational/trace.ecore');
modeltype ECORE uses ecore('http://www.eclipse.org/emf/2002/Ecore');
modeltype TEXTUAL uses sequence('http://www.cooperateproject.de/modeling/textual/sequence/Sequence');
modeltype GRAPHICAL uses notation('http://www.eclipse.org/gmf/runtime/1.0.2/notation');
modeltype STYLE uses style('http://www.eclipse.org/papyrus/infra/viewpoints/policy/style');
modeltype UML uses uml('http://www.eclipse.org/uml2/5.0.0/UML');
modeltype TXTCMN uses textualCommons('http://www.cooperateproject.de/modeling/textual/commons');

main() {
    var traces := graphicalTrace.rootObjects()[trace::Trace];
    assert fatal (traces->size() = 1);
    traces->initializeProperties();
    traces->map trace();
}

helper trace::Trace::initializeProperties() {
    TARGET_TRANSFORMATION_NAME := "Graphical_to_Textual_for_Sequence";
    TARGET_TRANSFORMATION := t2gTransformation.rootObjects()[qvtoperational::expressions::OperationalTransformation]->any(true);
}

mapping trace::Trace::trace() : trace::Trace
{
    traceRecords += self.traceRecords->map traceRecord()->flatten();
}

mapping trace::TraceRecord::traceRecord() : List(trace::TraceRecord)
{
    //result += self.map traceRecordExtended();
}