import TransformationUtils_Component;

transformation Textual_to_Graphical_for_Component(in textual : TXT, inout graphical : NOTATION, in umlmodel : UML, in umlprimitives : UML);

modeltype NOTATION uses notation('http://www.eclipse.org/gmf/runtime/1.0.2/notation');
modeltype UML uses uml('http://www.eclipse.org/uml2/5.0.0/UML');
modeltype TXT uses cmp('http://www.cooperateproject.de/modeling/textual/component/Component');
modeltype TXTCMN uses textualCommons('http://www.cooperateproject.de/modeling/textual/commons');
modeltype ECORE uses ecore('http://www.eclipse.org/emf/2002/Ecore');
modeltype STYLE uses style('http://www.eclipse.org/papyrus/infra/gmfdiag/style');

main() {
	var diagrams := textual.rootObjects()[cmp::ComponentDiagram];
	assert fatal (diagrams->size() = 1);
	diagrams->map diagramToDiagram();
}

mapping cmp::ComponentDiagram::diagramToDiagram() : notation::Diagram {
	var rootPackage := self.rootpackage.referencedElement.oclAsType(uml::Package);
	log ("hier \n\n\n\n\n\n");
	type := "PapyrusUMLComponentDiagram";
	name := self.title;
	measurementUnit := notation::MeasurementUnit::Pixel;
	element := rootPackage.toEObject();
	children +=self.rootpackage.classifiers.map classifiersToShape();
	self.rootpackage.relations.map relationsToShape();

	styles := self.map diagramToStringValueStyle();
	styles += self.map diagramToDiagramStyle();
	styles += self.map diagramToDiagramStylePapyrus();
}

mapping cmp::ComponentDiagram::diagramToStringValueStyle() : notation::StringValueStyle {
	name := "diagram_compatibility_version";
	stringValue := "1.3.0";
}

mapping cmp::ComponentDiagram::diagramToDiagramStyle() : notation::DiagramStyle {
	
}

mapping cmp::ComponentDiagram::diagramToDiagramStylePapyrus() : style::PapyrusDiagramStyle {
	diagramKindId := "org.eclipse.papyrus.uml.diagram.component.root.package";
	owner := self.rootpackage.referencedElement.toEObject();
}

//acutal mapping

mapping cmp::Classifier::classifiersToShape() : notation::Shape
disjuncts cmp::Component::componentToShape, cmp::Interface::interfaceToShape;

mapping cmp::Component::componentToShape() : notation::Shape
when {self.oclIsKindOf(cmp::Component)}
{
log ("hier");
	type := PAPYRUS_NOTATION_SHAPE_COMPONENT_REGULAR;
	element := self.referencedElement.toEObject();
	children += self.map componentToNameLabel();
	children += self.map componentFloatingNameLabel();
	children += self.map componentToCompartment();
	layoutConstraint := result.toEObject().map notationBounds();
}

mapping cmp::Interface::interfaceToShape() : notation::Shape
when {self.oclIsKindOf(cmp::Interface)}
{
	
}

mapping cmp::ClassifierRelation::relationsToShape() : notation::Shape
{
	
}

//TODO restliche commentable einf√ºgen
mapping textualCommons::Commentable::commentableToShape() : notation::Shape
disjuncts cmp::Classifier::classifiersToShape;

mapping cmp::Component::componentToCompartment() : notation::BasicCompartment
{
	type := PAPYRUS_NOTATION_SHAPE_COMPONENT_COMPARTMENT_REGULAR;
	children := self.component.map commentableToShape();
	layoutConstraint := result.toEObject().map notationBounds();
}






// Labels /Decorations /...


mapping cmp::Component::componentToNameLabel() : notation::DecorationNode
{
	type := PAPYRUS_NOTATION_NODE_COMPONENT_NAME_REGULAR;
}

mapping cmp::Component::componentFloatingNameLabel() : notation::DecorationNode
{
	type := PAPYRUS_NOTATION_NODE_COMPONENT_FLOATINGNAME_REGULAR;
	layoutConstraint := result.toEObject().map locationConstraint();
}

//Style
mapping cmp::ComponentDiagram::stringValueStyle() : notation::StringValueStyle
{
	name := "diagram_compatibility_version";
	stringValue := "1.3.0";	
}

mapping cmp::ComponentDiagram::diagramStyle() : notation::DiagramStyle
{	
}

mapping cmp::ComponentDiagram::papyrusViewStyle(rootElement : uml::Package) : style::PapyrusDiagramStyle
{
	owner := rootElement.toEObject();
	diagramKindId := "org.eclipse.papyrus.uml.diagram.component";
}

