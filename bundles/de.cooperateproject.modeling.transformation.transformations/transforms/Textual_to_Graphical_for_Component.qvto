import TransformationUtils_Component;

transformation Textual_to_Graphical_for_Component(in textual : TXT, inout graphical : NOTATION, in umlmodel : UML, in umlprimitives : UML);

modeltype NOTATION uses notation('http://www.eclipse.org/gmf/runtime/1.0.2/notation');
modeltype UML uses uml('http://www.eclipse.org/uml2/5.0.0/UML');
modeltype TXT uses cmp('http://www.cooperateproject.de/modeling/textual/component/Component');
modeltype TXTCMN uses textualCommons('http://www.cooperateproject.de/modeling/textual/commons');
modeltype ECORE uses ecore('http://www.eclipse.org/emf/2002/Ecore');
modeltype STYLE uses style('http://www.eclipse.org/papyrus/infra/gmfdiag/style');

main() {
	var diagrams := textual.rootObjects()[cmp::ComponentDiagram];
	assert fatal (diagrams->size() = 1);
	diagrams->map diagramToDiagram();
}

mapping cmp::ComponentDiagram::diagramToDiagram() : notation::Diagram {
	var rootPackage := self.rootpackage.referencedElement.oclAsType(uml::Package);
	var interfaceRelation = self.rootpackage.findAllInterfaceRelations();
	
	type := "PapyrusUMLComponentDiagram";
	name := self.title;
	measurementUnit := notation::MeasurementUnit::Pixel;

  	element := rootPackage.toEObject();
 
	children +=self.rootpackage.classifiers.map classifiersToShape();
	edges += self.rootpackage.relations.map classifierRelationsToEdge();
	edges += self.rootpackage.classifiers->select(e | e.oclIsKindOf(cmp::Component)).oclAsType(cmp::Component)->flatten().portRelation.map portRelationToEdge();
	styles := self.map diagramToStringValueStyle();
	styles += self.map diagramToDiagramStyle();
	styles += self.map diagramToDiagramStylePapyrus();
	edges += interfaceRelation.map interfaceRelationToEdge();
	log("exit");
	
}

mapping cmp::ComponentDiagram::diagramToStringValueStyle() : notation::StringValueStyle {
	name := "diagram_compatibility_version";
	stringValue := "1.3.0";
}

mapping cmp::ComponentDiagram::diagramToDiagramStyle() : notation::DiagramStyle {
	
}


mapping cmp::ComponentDiagram::diagramToDiagramStylePapyrus() : style::PapyrusDiagramStyle {
	diagramKindId := "org.eclipse.papyrus.uml.diagram.component.root.package";
	owner := self.rootpackage.referencedElement.toEObject();
}

//acutal mapping

mapping cmp::Classifier::classifiersToShape() : notation::Shape
disjuncts cmp::Component::componentToShape, cmp::Interface::interfaceToShape;

mapping cmp::InterfaceRelation::interfaceRelationToEdge() : notation::Connector
disjuncts cmp::Provide::provideToEdge, cmp::Require::requireToEdge;


mapping cmp::Component::componentToShape() : notation::Shape
when {self.oclIsKindOf(cmp::Component)}
{
	type := self.getNestedName(PAPYRUS_NOTATION_SHAPE_COMPONENT_REGULAR);
	element := self.referencedElement.toEObject();
	children += self.map componentToNameLabel();
	children += self.map componentFloatingNameLabel();
	children += self.map componentToCompartment();
	if(self.port->first()!=null) {
		children += self.map portToShapeDisplay();
	};
	children += self.port.map portToShape();
	element := self.referencedElement.oclAsType(ecore::EObject);
	layoutConstraint := result.toEObject().map notationBounds();

}

mapping cmp::Port::portToShape() : notation::Shape
when { self.oclIsKindOf(cmp::Port) }
{
	type := PAPYRUS_NOTATION_SHAPE_PORT_REGULAR;	
	element := self.referencedElement.toEObject();
	children += self.map portToNameLabel();
	children += self.map portToStereotypeLabel();
	element := self.referencedElement.toEObject();
	layoutConstraint := result.toEObject().map notationBounds();
}


mapping cmp::Provide::provideToEdge() : notation::Connector
when { self.oclIsKindOf(cmp::Provide) }
{
	type := PAPYRUS_NOTATION_EDGE_IMPLEMENTATION;	
	source := late resolveoneIn(
		cmp::Component::componentToShape,
		s : notation::Shape | s.element = self.referencedElement.oclAsType(uml::InterfaceRealization).implementingClassifier.toEObject()
	);
		target := late resolveoneIn(
		cmp::Interface::interfaceToShape,
		s : notation::Shape | s.element = self.referencedElement.oclAsType(uml::InterfaceRealization).contract.toEObject()
	);	
	element := self.referencedElement.toEObject();
	children += self.map stereotypeInterfaceDecorationProvide();
	children += self.map stereotypeInterfaceDecorationNameLabel();
	bendpoints := result.map connectorToBendpoint();
	styles += result.toEObject().map fontStyle();
}




mapping cmp::Require::requireToEdge() : notation::Connector
when { self.oclIsKindOf(cmp::Require) }
{
	type := PAPYRUS_NOTATION_EDGE_USAGE;	
	source := late resolveoneIn(
		cmp::Component::componentToShape,
		s : notation::Shape | s.element = self.referencedElement.oclAsType(uml::Usage).source->any(true).toEObject()
	);

	target := late resolveoneIn(
		cmp::Interface::interfaceToShape,
		s : notation::Shape | s.element = self.referencedElement.oclAsType(uml::Usage).target->asOrderedSet()->first().toEObject()
	);	
	element := self.referencedElement.toEObject();
	children += self.map stereotypeInterfaceDecorationNameLabel();
	children += self.map stereotypeInterfaceDecorationRequire();
	bendpoints := result.map connectorToBendpoint();
	styles += result.toEObject().map fontStyle();
}

mapping cmp::Interface::interfaceToShape() : notation::Shape
when {self.oclIsKindOf(cmp::Interface)}
{
	type := PAPYRUS_NOTATION_SHAPE_INTERFACE_REGULAR;
	children += self.map interfaceToNameLabel();
	children += self.map interfaceFloatingNameLabel();
	children += self.map interfaceToAttributeCompartment();

	children += self.map interfaceToOperationCompartment();
	element := self.referencedElement.toEObject();
	layoutConstraint := result.toEObject().map notationBounds();
}

mapping cmp::Attribute::interfaceAttributeToShape() : notation::Shape
{
	type := PAPYRUS_NOTATION_SHAPE_INTERFACE_ATTRIBUTE;
	element := self.referencedElement.toEObject();
	layoutConstraint := result.toEObject().map locationConstraint();
}


mapping cmp::ClassifierRelation::classifierRelationsToEdge() : notation::Edge
disjuncts cmp::Generalization::generalizationToEdge,
	cmp::Manifestation::manifestationToEdge, 
	cmp::Substitution::substitutionToEdge,
	cmp::Dependency::dependencyToEdge,
	cmp::Abstraction::abstractionToEdge
{

}
mapping cmp::PortRelation::portRelationToEdge() : notation::Edge
disjuncts cmp::Connector::connectorToEdge
{

}

mapping cmp::Connector::connectorToEdge() : notation::Connector
when{self.oclIsKindOf(cmp::Connector)}
{
	type:= PAPYRUS_NOTATION_EDGE_CONNECTOR;
	source := late resolveoneIn(
		cmp::Port::portToShape,
		s : notation::Shape | s.element = self.referencedElement.oclAsType(uml::Connector)._end->at(1).role.toEObject()
	);
	target := late resolveoneIn(
		cmp::Port::portToShape,
		s : notation::Shape | s.element = self.referencedElement.oclAsType(uml::Connector)._end->at(2).role.toEObject()
	);

	children += self.map stereotypeConnectorDecoration();	
	children += self.map connectorDecorationNameLabel();
	styles += result.toEObject().map fontStyle();
	bendpoints := result.map connectorToBendpoint();
	//source := self.outerPort;		
	element := self.referencedElement.toEObject();	
	styles += result.toEObject().map fontStyle();
	bendpoints := result.map connectorToBendpoint();	
}


mapping cmp::Generalization::generalizationToEdge() : notation::Connector
when{self.oclIsKindOf(cmp::Generalization)}
{
	type:= PAPYRUS_NOTATION_EDGE_GENERALIZATION;
	source := late resolveoneIn(
		cmp::Classifier::classifiersToShape,
		s : notation::Shape | s.element = self.referencedElement.oclAsType(uml::Generalization).source->any(true).toEObject()
	);
	target := late resolveoneIn(
		cmp::Classifier::classifiersToShape,
		s : notation::Shape | s.element = self.referencedElement.oclAsType(uml::Generalization).target->any(true).toEObject()
	);	

	element := self.referencedElement.toEObject();		
//	children += self.map generalizationDecorationNameLabel();
	children += self.map stereotypeGeneralizationDecoration();
	styles += result.toEObject().map fontStyle();
	bendpoints := result.map connectorToBendpoint();		
}

mapping cmp::Dependency::dependencyToEdge() : notation::Connector
when{self.oclIsKindOf(cmp::Dependency)}
{
	type:= PAPYRUS_NOTATION_EDGE_DEPENDENCY;
	source := late resolveoneIn(
		cmp::Classifier::classifiersToShape,
		s : notation::Shape | s.element = self.referencedElement.oclAsType(uml::Dependency).source->any(true).toEObject()
	);
	target := late resolveoneIn(
		cmp::Classifier::classifiersToShape,
		s : notation::Shape | s.element = self.referencedElement.oclAsType(uml::Dependency).target->any(true).toEObject()
	);	

	element := self.referencedElement.toEObject();		
	children += self.map dependencyDecorationNameLabel();
	children += self.map stereotypeDependencyDecoration();
	styles += result.toEObject().map fontStyle();
	bendpoints := result.map connectorToBendpoint();		
}

mapping cmp::Substitution::substitutionToEdge() : notation::Connector
when{self.oclIsKindOf(cmp::Substitution)}
{
	type:= PAPYRUS_NOTATION_EDGE_SUBSTITUTION;
	source := late resolveoneIn(
		cmp::Classifier::classifiersToShape,
		s : notation::Shape | s.element = self.referencedElement.oclAsType(uml::Substitution).source->any(true).toEObject()
	);
	target := late resolveoneIn(
		cmp::Classifier::classifiersToShape,
		s : notation::Shape | s.element = self.referencedElement.oclAsType(uml::Substitution).target->any(true).toEObject()
	);	

	element := self.referencedElement.toEObject();		
	children += self.map stereotypeSubstitutionDecoration();
	children += self.map substitutionDecorationNameLabel();
	styles += result.toEObject().map fontStyle();
	bendpoints := result.map connectorToBendpoint();		
}

mapping cmp::Manifestation::manifestationToEdge() : notation::Connector
when{self.oclIsKindOf(cmp::Manifestation)}
{
	type:= PAPYRUS_NOTATION_EDGE_MANIFESTATION;
	source := late resolveoneIn(
		cmp::Classifier::classifiersToShape,
		s : notation::Shape | s.element = self.referencedElement.oclAsType(uml::Manifestation).source->any(true).toEObject()
	);
	target := late resolveoneIn(
		cmp::Classifier::classifiersToShape,
		s : notation::Shape | s.element = self.referencedElement.oclAsType(uml::Manifestation).target->any(true).toEObject()
	);	

	element := self.referencedElement.toEObject();		
	children += self.map manifestationDecorationNameLabel();
	children += self.map stereotypeManifestationDecoration();
	styles += result.toEObject().map fontStyle();
	bendpoints := result.map connectorToBendpoint();		
}

mapping cmp::Abstraction::abstractionToEdge() : notation::Connector
when{self.oclIsKindOf(cmp::Abstraction)}
{
	type:= PAPYRUS_NOTATION_EDGE_ABSTRACTION;
	source := late resolveoneIn(
		cmp::Classifier::classifiersToShape,
		s : notation::Shape | s.element = self.referencedElement.oclAsType(uml::Abstraction).source->any(true).toEObject()
	);
	target := late resolveoneIn(
		cmp::Classifier::classifiersToShape,
		s : notation::Shape | s.element = self.referencedElement.oclAsType(uml::Abstraction).target->any(true).toEObject()
	);	

	element := self.referencedElement.toEObject();		
	children += self.map abstractionDecorationNameLabel();
	children += self.map stereotypeAbstractionDecoration();
	styles += result.toEObject().map fontStyle();
	bendpoints := result.map connectorToBendpoint();		
}


//TODO restliche commentable einfügen
mapping textualCommons::Commentable::commentableToShape() : notation::Shape
disjuncts cmp::Classifier::classifiersToShape;

mapping cmp::Component::componentToCompartment() : notation::BasicCompartment
{	
	type := self.getNestedName(PAPYRUS_NOTATION_SHAPE_COMPONENT_COMPARTMENT_REGULAR);
	children += self.nestedInterface.map interfaceToShape();
	styles += result.toEObject().map titleStyle();
	//children += self.component.map commentableToShape();
	children += self.component.map componentToShape();
	layoutConstraint := result.toEObject().map notationBounds();
	
}

mapping cmp::Interface::interfaceToAttributeCompartment() : notation::BasicCompartment
{
	type := PAPYRUS_NOTATION_COMPARTMENT_INTERFACE_PROPERTIES_REGULAR;
	children += self.members->select(oclIsKindOf(cmp::Attribute))->oclAsType(cmp::Attribute)->map interfaceAttributeToShape();
	styles += result.toEObject().map titleStyle();
	styles += result.toEObject().map sortingStyle();
	styles += result.toEObject().map filteringStyle();
	//children := self.interface.map commentableToShape();
	layoutConstraint := result.toEObject().map notationBounds();
}
mapping cmp::Interface::interfaceToOperationCompartment() : notation::BasicCompartment
{
	type := PAPYRUS_NOTATION_COMPARTMENT_INTERFACE_OPERATIONS_REGULAR;
	children += self.members->select(oclIsKindOf(cmp::Method))->oclAsType(cmp::Method)->map interfaceMethodToShape();
	styles += result.toEObject().map titleStyle();
	styles += result.toEObject().map sortingStyle();
	styles += result.toEObject().map filteringStyle();
	//children := self.interface.map commentableToShape();
	layoutConstraint := result.toEObject().map notationBounds();
	
}

mapping cmp::Method::interfaceMethodToShape() : notation::Shape
{
		type := PAPYRUS_NOTATION_SHAPE_INTERFACE_OPERATION;
		element := self.referencedElement.toEObject();
		layoutConstraint := result.toEObject().map locationConstraint();
}

mapping cmp::Component::portToShapeDisplay() : notation::BasicCompartment
{
	type := PAPYRUS_NOTATION_COMPARTMENT_PORT_SHAPE_DISPLAY;
	styles += self.toEObject().map titleStyle();
	layoutConstraint := result.toEObject().map notationBounds();
}


// Labels /Decorations /...


mapping cmp::Component::componentToNameLabel() : notation::DecorationNode
{
	type := self.getNestedName(PAPYRUS_NOTATION_NODE_COMPONENT_NAME_REGULAR);
}

mapping cmp::Port::portToNameLabel() : notation::DecorationNode
{
	type := PAPYRUS_NOTATION_NODE_PORT_FLOATINGNAME_REGULAR;
	layoutConstraint := result.toEObject().map locationConstraint();
}

mapping cmp::Port::portToStereotypeLabel() : notation::DecorationNode
{
	type := PAPYRUS_NOTATION_NODE_PORT_FLOATINGNAME_STEREOTYPE;
	layoutConstraint := result.toEObject().map locationConstraint();
}

mapping cmp::Component::componentFloatingNameLabel() : notation::DecorationNode
{
	type := self.getNestedName(PAPYRUS_NOTATION_NODE_COMPONENT_FLOATINGNAME_REGULAR);
	layoutConstraint := result.toEObject().map locationConstraint();
}

mapping cmp::Interface::interfaceToNameLabel() : notation::DecorationNode
{
	type := PAPYRUS_NOTATION_NODE_INTERFACE_NAME_REGULAR;
}

mapping cmp::Interface::interfaceFloatingNameLabel() : notation::DecorationNode
{
	type := PAPYRUS_NOTATION_NODE_INTERFACE_FLOATINGNAME_REGULAR;
	layoutConstraint := result.toEObject().map locationConstraint();
}

mapping cmp::Provide::stereotypeInterfaceDecorationProvide() : notation::DecorationNode
{
	type := PAPYRUS_NOTATION_NODE_INTERFACE_REALIZATION_STEREOTYPE;
	layoutConstraint := result.toEObject().map locationConstraint();
}

mapping cmp::Require::stereotypeInterfaceDecorationRequire() : notation::DecorationNode
{
	type := PAPYRUS_NOTATION_NODE_INTERFACE_REQUIRE_STEREOTYPE;
	layoutConstraint := result.toEObject().map locationConstraint();
}

mapping cmp::Manifestation::stereotypeManifestationDecoration() : notation::DecorationNode
{
	type := PAPYRUS_NOTATION_EDGE_MANIFESTATION_STEREOTYPE;
	layoutConstraint := result.toEObject().map locationConstraint();
}

mapping cmp::Manifestation::manifestationDecorationNameLabel() : notation::DecorationNode
{
	type := PAPYRUS_NOTATION_EDGE_MANIFESTATION_NAME_REGULAR;
	layoutConstraint := result.toEObject().map locationConstraint();
}

mapping cmp::Abstraction::stereotypeAbstractionDecoration() : notation::DecorationNode
{
	type := PAPYRUS_NOTATION_EDGE_ABSTRACTION_STEREOTYPE;
	layoutConstraint := result.toEObject().map locationConstraint();
}

mapping cmp::Abstraction::abstractionDecorationNameLabel() : notation::DecorationNode
{
	type := PAPYRUS_NOTATION_EDGE_ABSTRACTION_NAME_REGULAR;
	layoutConstraint := result.toEObject().map locationConstraint();
}

mapping cmp::Generalization::stereotypeGeneralizationDecoration() : notation::DecorationNode
{
	type := PAPYRUS_NOTATION_EDGE_GENERALIZATION_STEREOTYPE;
	layoutConstraint := result.toEObject().map locationConstraint();
}

mapping cmp::Generalization::generalizationDecorationNameLabel() : notation::DecorationNode
{
	type := PAPYRUS_NOTATION_EDGE_GENERALIZATION_NAME_REGULAR;
	layoutConstraint := result.toEObject().map locationConstraint();
}

mapping cmp::Connector::stereotypeConnectorDecoration() : notation::DecorationNode
{
	type := PAPYRUS_NOTATION_EDGE_CONNECTOR_STEREOTYPE;
	layoutConstraint := result.toEObject().map locationConstraint();
}

mapping cmp::Connector::connectorDecorationNameLabel() : notation::DecorationNode
{
	type := PAPYRUS_NOTATION_EDGE_CONNECTOR_NAME_REGULAR;
	layoutConstraint := result.toEObject().map locationConstraint();
}

mapping cmp::Dependency::stereotypeDependencyDecoration() : notation::DecorationNode
{
	type := PAPYRUS_NOTATION_EDGE_DEPENDENCY_STEREOTYPE;
	layoutConstraint := result.toEObject().map locationConstraint();
}

mapping cmp::Dependency::dependencyDecorationNameLabel() : notation::DecorationNode
{
	type := PAPYRUS_NOTATION_EDGE_DEPENDENCY_NAME_REGULAR;
	layoutConstraint := result.toEObject().map locationConstraint();
}

mapping cmp::Substitution::stereotypeSubstitutionDecoration() : notation::DecorationNode
{
	type := PAPYRUS_NOTATION_EDGE_SUBSTITUTION_STEREOTYPE;
	layoutConstraint := result.toEObject().map locationConstraint();
}

mapping cmp::Substitution::substitutionDecorationNameLabel() : notation::DecorationNode
{
	type := PAPYRUS_NOTATION_EDGE_SUBSTITUTION_NAME_REGULAR;
	layoutConstraint := result.toEObject().map locationConstraint();
}


mapping cmp::Provide::stereotypeInterfaceDecorationNameLabel() : notation::DecorationNode
{
	type := PAPYRUS_NOTATION_NODE_INTERFACE_REALIZATION_NAME_REGULAR;
	layoutConstraint := result.toEObject().map locationConstraint();
}

mapping cmp::Require::stereotypeInterfaceDecorationNameLabel() : notation::DecorationNode
{
	type := PAPYRUS_NOTATION_NODE_USAGE_NAME_REGULAR;
	layoutConstraint := result.toEObject().map locationConstraint();
}


//Style
mapping cmp::ComponentDiagram::stringValueStyle() : notation::StringValueStyle
{
	name := "diagram_compatibility_version";
	stringValue := "1.3.0";	
}

mapping cmp::ComponentDiagram::diagramStyle() : notation::DiagramStyle
{	
}

mapping cmp::ComponentDiagram::papyrusViewStyle(rootElement : uml::Package) : style::PapyrusDiagramStyle
{
	owner := rootElement.toEObject();
	diagramKindId := "org.eclipse.papyrus.uml.diagram.component";
}
/**
query textualCommons::Element::isNested() : Boolean
{
	var owningPackage := if self.getNearestPackage() = self then self.getNearestPackage().owningPackage else self.getNearestPackage() endif;
	var owningPackage2 := owningPackage.owningPackage;
		log("owning " + owningPackage.toString()+" self " + self.toString() + " nearest " + self.getNearestPackage().toString() + " nearestOwning " + self.getNearestPackage().owningPackage.toString());
	log("owningP2 " + owningPackage2.toString());
	var outi := owningPackage != null and owningPackage2 != null;
	log("varout " + outi.toString());
	return owningPackage != null and owningPackage2 != null;
}**/
query cmp::Component::isNestedCmp() : Boolean
{	log("owning component2" + self.owningComponent.toString() + " self " + self.toString());
	log((if self.owningComponent.toString() = self.toString() then true else false endif).toString());
	return if self.owningComponent.toString() = self.toString() then true else false endif;
}
query cmp::Component::getNestedName(type : String) : String
{
	log("IsNested  " +type.toString() +  "  p" + type.getNestedName(self.isNestedCmp())+"\n");
	//log("is nested? " + self.isNested().toString());
	
	return type.getNestedCmpName(self.isNestedCmp());
}

query String::getNestedCmpName(isNested : Boolean) : String
{
	return if isNested then self + "_CCN" else self endif;
}

// helpers
query cmp::RootPackage::findAllInterfaceRelations() : Sequence(cmp::InterfaceRelation) {
	//var interfaceRelation := self.classifiers.referencedElement->flatten();
	var interfaceRelation = self.classifiers->select(oclIsKindOf(cmp::Component))->oclAsType(cmp::Component).interfaceRelation->flatten();
	return interfaceRelation;
}