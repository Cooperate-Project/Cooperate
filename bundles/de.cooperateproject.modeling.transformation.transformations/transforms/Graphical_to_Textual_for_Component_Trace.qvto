import TraceUtils_Component;

transformation Graphical_to_Textual_for_Component_Trace(in graphicalTrace : TRACE, out textualTrace : TRACE, in textualModel : TEXTUAL, in t2gTransformation : QVTO);

modeltype QVTO uses qvtoperational('http://www.eclipse.org/QVT/1.0.0/Operational');
modeltype TRACE uses trace('http:///www.eclipse.org/m2m/qvt/operational/trace.ecore');
modeltype ECORE uses ecore('http://www.eclipse.org/emf/2002/Ecore');
modeltype TEXTUAL uses cmp('http://www.cooperateproject.de/modeling/textual/component/Component');
modeltype TXTCMN uses textualCommons('http://www.cooperateproject.de/modeling/textual/commons');
modeltype GRAPHICAL uses notation('http://www.eclipse.org/gmf/runtime/1.0.2/notation');
modeltype UML uses uml('http://www.eclipse.org/uml2/5.0.0/UML');
modeltype STYLE uses style('http://www.eclipse.org/papyrus/infra/gmfdiag/style');

main() {
	var traces := graphicalTrace.rootObjects()[trace::Trace];
	assert fatal (traces->size() = 1);
	traces->initializeProperties();
	traces->map trace();
}

helper trace::Trace::initializeProperties() {
	TARGET_TRANSFORMATION_NAME := "Textual_to_Graphical_for_Component";
	TARGET_TRANSFORMATION := t2gTransformation.rootObjects()[qvtoperational::expressions::OperationalTransformation]->any(true);
}

mapping trace::Trace::trace() : trace::Trace
{
	traceRecords += self.traceRecords->map traceRecord()->flatten();
}

mapping trace::TraceRecord::traceRecord() : List(trace::TraceRecord)
{
	result += self.map traceRecordDiagram();
	result += self.map traceRecordClassifier();
	result += self.map traceRecordClassifierRelations();
	result += self.map traceRecordComponentToNode();
	result += self.map traceRecordInterfaceToNode();
	result += self.map traceRecordPortToShape();
	result+= self.map traceRecordClassifier_interfaceToOperationsCompartment();
	result+= self.map traceRecordClassifier_interfaceAttributeToShape();
	result+= self.map traceRecordClassifier_interfaceOperationToShape();
	result += self.map traceRecordExtended_InterfaceRelationToEdge();
	result += self.map traceRecordExtendedProvideToEdge();
	result += self.map traceRecordExtendedRequireToEdge();
	result += self.map traceRecordExtendedManifestationToEdge();
	result += self.map traceRecordExtendedGeneralizationToEdge();
	result += self.map traceRecordExtendedAbstractionToEdge();
	result += self.map traceRecordExtendedSubstitutionToEdge();
	result += self.map traceRecordExtendedDependencyToEdge();
	}


mapping trace::TraceRecord::traceRecordClassifier() :List(trace::TraceRecord)
when {self.mappingOperation.name = "nodeToClassifier"}
{ 
	var classifier := self.getResult().modelElement;
	var shape := self.getSelf().modelElement;
	result += new TraceRecord("classifiersToShape", "Classifier", classifier, "Shape", shape.toEObject());
	result += self.map traceRecordClassifier_FloatingLabelDecorationNode();


}

mapping trace::TraceRecord::traceRecordClassifierRelations() :List(trace::TraceRecord)
when {self.mappingOperation.name = "edgeToClassifierRelation"}
{ 
	var classifierRelation := self.getResult().modelElement;
	var edge := self.getSelf().modelElement;
	result += new TraceRecord("classifierRelationsToEdge", "ClassifierRelation", classifierRelation, "Edge", edge.toEObject());
}


/**
mapping trace::TraceRecord::traceRecordComponent() :List(trace::TraceRecord)
when {self.mappingOperation.name = "nodeToClassifier"}
{ 
	var classifier := self.getResult().modelElement;
	var shape := self.getSelf().modelElement;
	result += new TraceRecord("classifiersToShape", "Classifier", classifier, "Shape", shape.toEObject());
}**/

mapping trace::TraceRecord::traceRecordClassifier_FloatingLabelDecorationNode() : List(trace::TraceRecord)
{
	//result += self.map traceRecordExtendedClassifier_FloatingLabelDecorationNodeComponent();
	//result += self.map traceRecordExtendedClassifier_FloatingLabelDecorationNodeInterface();
	//result += self.map traceRecordShapeToComponent();
	//result += self.map traceRecordExtendedClassifier_FloatingLabelDecorationNodeInterface();
}
/**
mapping trace::TraceRecord::traceRecordShapeToComponent() :List(trace::TraceRecord) //TODO delete
when {self.getResult().modelElement.oclIsKindOf(cmp::Component)} //Aktuell
{ 
	var component1 := self.getResult().modelElement;
	var component := self.getSelf().modelElement;
	//result += new TraceRecord("classifiersToShape", "Classifier1", component1, "Shape", component.toEObject());
}**/


mapping trace::TraceRecord::traceRecordComponentToNode() : List(trace::TraceRecord)
when {self.mappingOperation.name = "nodeToComponent"}
{		
	var classifier := self.getResult().modelElement;
	var shape :=self.getSelf().modelElement.oclAsType(notation::Shape);
	var node := self.getSelfNode().getChild(PAPYRUS_NOTATION_NODE_COMPONENT_FLOATINGNAME_REGULAR);
	result += new TraceRecord("componentToShape", "Component", classifier, "Shape", shape.eobject());
	var decoration :=self.getSelfNode().getChild(PAPYRUS_NOTATION_NODE_COMPONENT_NAME_REGULAR);
	var compartment := self.getSelfNode().getChild(PAPYRUS_NOTATION_SHAPE_COMPONENT_COMPARTMENT_REGULAR);
	result += new TraceRecord("componentFloatingNameLabel", "Component", classifier, "DecorationNode", node.eobject());
	result += new TraceRecord("componentToNameLabel", "Component", classifier, "DecorationNode", decoration.eobject());
	result += new TraceRecord("componentToCompartment", "Component", classifier, "BasicCompartment", compartment.eobject());
	result += new TraceRecord("titleStyle", "EObject", compartment.eobject(), "TitleStyle", compartment.styles->selectByKind(notation::TitleStyle)->any(true).eobject());
	result += node.map traceRecordExtended_locationConstraint();
	result += compartment.map traceRecordExtended_notationBounds();

	//nested component
	var compartmentNested := self.getSelfNode().getChild(PAPYRUS_NOTATION_SHAPE_COMPONENT_COMPARTMENT_INPACKAGE);	
	result+= self.getSelfNode().map traceRecordExtended_notationBounds();
	var portShape := self.getSelfNode().getChild(PAPYRUS_NOTATION_COMPARTMENT_PORT_SHAPE_DISPLAY);
	log("neuer log" + portShape.toString());
	//result += self.getSelfNode(PAPYRUS_NOTATION_COMPARTMENT_PORT_SHAPE_DISPLAY).map traceRecordPortShapeToNode();
	//portShape.map traceRecordPortShapeToNode();
//	result += new TraceRecord("portToShapeDisplay", "Port", classifier, "BasicCompartment", portShape.eobject());
	/**
	var compartment := shape.getChild(PAPYRUS_NOTATION_COMPARTMENT_PACKAGE_PACKAGEABLE_REGULAR).oclAsType(notation::BasicCompartment);
	result += new TraceRecord("packageToCompartment", "Package", package, "BasicCompartment", compartment.eobject());
	result += new TraceRecord("titleStyle", "EObject", compartment.eobject(), "TitleStyle", compartment.styles->selectByKind(notation::TitleStyle)->any(true).eobject());
	result += compartment.map traceRecordExtended_notationBounds();
	**/
	//tmp Port
	var port := self.getSelfNode().getChild(PAPYRUS_NOTATION_COMPARTMENT_PORT_SHAPE_DISPLAY);
	if(port!=null){
	result += new TraceRecord("portToShapeDisplay", "Component", classifier, "BasicCompartment", port.eobject());
	//result += self.getSelfNode().map traceRecordExtended_locationConstraint();
	result += new TraceRecord("titleStyle", "EObject", classifier.eobject(), "TitleStyle", port.styles->selectByKind(notation::TitleStyle)->any(true).eobject());
	//result += port.map traceRecordExtended_locationConstraint();
	result += port.map traceRecordExtended_notationBounds();
	}
	
}

mapping trace::TraceRecord::traceRecordPortShapeToNode() : List(trace::TraceRecord)
when {self.mappingOperation.name = "nodeToInterface"} 
{

}

mapping trace::TraceRecord::traceRecordInterfaceToNode() : List(trace::TraceRecord)
when {self.mappingOperation.name = "nodeToInterface"} 
{
	var classifier := self.getResult().modelElement;
	var node := self.getSelfNode().getChild(PAPYRUS_NOTATION_NODE_INTERFACE_FLOATINGNAME_REGULAR);
	var decoration :=self.getSelfNode().getChild(PAPYRUS_NOTATION_NODE_INTERFACE_NAME_REGULAR);
	result += new TraceRecord("interfaceFloatingNameLabel", "Interface", classifier, "DecorationNode", node.eobject());
	result += new TraceRecord("interfaceToNameLabel", "Interface", classifier, "DecorationNode", decoration.eobject());
	result += node.map traceRecordExtended_locationConstraint();
	var compartment := self.getSelfNode().getChild(PAPYRUS_NOTATION_COMPARTMENT_INTERFACE_PROPERTIES_REGULAR);
	var shape :=self.getSelf().modelElement.oclAsType(notation::Shape);
	result += new TraceRecord("interfaceToAttributeCompartment", "Interface", classifier, "BasicCompartment", compartment.eobject());
	result += new TraceRecord("interfaceToShape", "Interface", classifier, "Shape", shape.eobject());
	result += compartment.oclAsType(notation::BasicCompartment).map traceRecordExtended_basicCompartment();
	result+= self.getSelfNode().map traceRecordExtended_notationBounds();
}

mapping trace::TraceRecord::traceRecordClassifier_interfaceToOperationsCompartment() : List(trace::TraceRecord)
when {self.mappingOperation.name = "nodeToInterface"}
{
	var classifier := self.getResult().modelElement;
	var compartment := self.getSelfNode().getChild(PAPYRUS_NOTATION_COMPARTMENT_INTERFACE_OPERATIONS_REGULAR).eobject();
	result += new TraceRecord("interfaceToOperationCompartment", "Interface", classifier, "BasicCompartment", compartment);
	result += compartment.oclAsType(notation::BasicCompartment).map traceRecordExtended_basicCompartment();

}

mapping trace::TraceRecord::traceRecordPortToShape() : List(trace::TraceRecord)
when {self.mappingOperation.name = "nodeToPort"}
{	
	var port := self.getResult().modelElement;
	var shape := self.getSelf().modelElement;
	var decorationName :=self.getSelfNode().getChild(PAPYRUS_NOTATION_NODE_PORT_FLOATINGNAME_REGULAR);
	var decorationStereotype :=self.getSelfNode().getChild(PAPYRUS_NOTATION_NODE_PORT_FLOATINGNAME_STEREOTYPE);
	result += new TraceRecord("portToShape", "Port", port, "Shape", shape);
	result += new TraceRecord("portToStereotypeLabel", "Port", port.eobject(), "DecorationNode", decorationStereotype.eobject());

	result += new TraceRecord("portToNameLabel", "Port", port, "DecorationNode", decorationName.eobject());
	result+= self.getSelfNode().map traceRecordExtended_notationBounds();
	result+= decorationName.map traceRecordExtended_locationConstraint();
	result+= decorationStereotype.map traceRecordExtended_locationConstraint();

}


mapping trace::TraceRecord::traceRecordDiagram() : List(trace::TraceRecord)
when {self.mappingOperation.name = "diagramToDiagram"}
{
	var notationDiagram := self.getSelf().modelElement.oclAsType(notation::Diagram);
	var componentDiagram := self.getResult().modelElement;
	
	result += new TraceRecord("diagramToDiagram", "ComponentDiagram", componentDiagram, "Diagram", notationDiagram.toEObject());
	result += new TraceRecord("diagramToStringValueStyle", "ComponentDiagram", componentDiagram, "StringValueStyle", notationDiagram.styles->any(oclIsKindOf(notation::StringValueStyle)).eobject());
	result += new TraceRecord("diagramToDiagramStyle", "ComponentDiagram", componentDiagram, "DiagramStyle", notationDiagram.styles->any(oclIsKindOf(notation::DiagramStyle)).eobject());
	result += new TraceRecord("diagramToDiagramStylePapyrus", "ComponentDiagram", componentDiagram, "PapyrusDiagramStyle", notationDiagram.styles->any(oclIsKindOf(style::PapyrusDiagramStyle)).eobject());
}

mapping trace::TraceRecord::traceRecordClassifier_interfaceAttributeToShape() : List(trace::TraceRecord)
when {self.mappingOperation.name = "nodeToProperty"}
{
	var classifier := self.getResult().modelElement;
	var shape := self.getSelf().modelElement;
	result += new TraceRecord("interfaceAttributeToShape", "Attribute", classifier, "Shape", shape);
	result += self.getSelfNode().map traceRecordExtended_locationConstraint();
	//result += compartment.oclAsType(notation::BasicCompartment).map traceRecordExtended_basicCompartment();
}
mapping trace::TraceRecord::traceRecordClassifier_interfaceOperationToShape() : List(trace::TraceRecord)
when {self.mappingOperation.name = "nodeToOperation"}
{
	var classifier := self.getResult().modelElement;
	var shape := self.getSelf().modelElement;
	result += new TraceRecord("interfaceMethodToShape", "Method", classifier, "Shape", shape);
	result += self.getSelfNode().map traceRecordExtended_locationConstraint();
	//result += compartment.oclAsType(notation::BasicCompartment).map traceRecordExtended_basicCompartment();
}
mapping trace::TraceRecord::traceRecordExtendedProvideToEdge() : List(trace::TraceRecord)
when {self.mappingOperation.name = "edgeToProvide"}
{
	var connector := self.getResult().modelElement.oclAsType(cmp::Provide);
	var edge := self.getSelf().modelElement.oclAsType(notation::Connector);
	
	result += new TraceRecord("provideToEdge", "Provide", connector.eobject(), "Connector", edge.eobject());
	result += self.map traceRecordExtendedConnectorToEdge_ConnectorBase();
	result += new TraceRecord("stereotypeInterfaceDecorationProvide", "Provide", connector.eobject(), "DecorationNode", edge.getChild(PAPYRUS_NOTATION_NODE_INTERFACE_REALIZATION_STEREOTYPE).eobject());
	result += new TraceRecord("stereotypeInterfaceDecorationNameLabel", "Provide", connector.eobject(), "DecorationNode", edge.getChild(PAPYRUS_NOTATION_NODE_INTERFACE_REALIZATION_NAME_REGULAR).eobject());
	result += edge.getChild(PAPYRUS_NOTATION_NODE_INTERFACE_REALIZATION_STEREOTYPE).map traceRecordExtended_locationConstraint();
	result += edge.getChild(PAPYRUS_NOTATION_NODE_INTERFACE_REALIZATION_NAME_REGULAR).map traceRecordExtended_locationConstraint();
}
mapping trace::TraceRecord::traceRecordExtendedRequireToEdge() : List(trace::TraceRecord)
when {self.mappingOperation.name = "edgeToRequire"}
{
	var connector := self.getResult().modelElement.oclAsType(cmp::Require);
	var edge := self.getSelf().modelElement.oclAsType(notation::Connector);
	
	result += new TraceRecord("requireToEdge", "Require", connector.eobject(), "Connector", edge.eobject());
	result += self.map traceRecordExtendedConnectorToEdge_ConnectorBase();
	result += new TraceRecord("stereotypeInterfaceDecorationRequire", "Require", connector.eobject(), "DecorationNode", edge.getChild(PAPYRUS_NOTATION_NODE_INTERFACE_REQUIRE_STEREOTYPE).eobject());
	result += new TraceRecord("stereotypeInterfaceDecorationNameLabel", "Require", connector.eobject(), "DecorationNode", edge.getChild(PAPYRUS_NOTATION_NODE_USAGE_NAME_REGULAR).eobject());
	result += edge.getChild(PAPYRUS_NOTATION_NODE_INTERFACE_REQUIRE_STEREOTYPE).map traceRecordExtended_locationConstraint();
	result += edge.getChild(PAPYRUS_NOTATION_NODE_USAGE_NAME_REGULAR).map traceRecordExtended_locationConstraint();
}

mapping trace::TraceRecord::traceRecordExtendedManifestationToEdge() : List(trace::TraceRecord)
when {self.mappingOperation.name = "edgeToManifestation"}
{
	var connector := self.getResult().modelElement.oclAsType(cmp::Manifestation);
	var edge := self.getSelf().modelElement.oclAsType(notation::Connector);
	
	result += new TraceRecord("manifestationToEdge", "Manifestation", connector.eobject(), "Connector", edge.eobject());
	result += self.map traceRecordExtendedConnectorToEdge_ConnectorBase();
	result += new TraceRecord("stereotypeManifestationDecoration", "Manifestation", connector.eobject(), "DecorationNode", edge.getChild(PAPYRUS_NOTATION_EDGE_MANIFESTATION_STEREOTYPE).eobject());
	result += new TraceRecord("manifestationDecorationNameLabel", "Manifestation", connector.eobject(), "DecorationNode", edge.getChild(PAPYRUS_NOTATION_EDGE_MANIFESTATION_NAME_REGULAR).eobject());
	result += edge.getChild(PAPYRUS_NOTATION_EDGE_MANIFESTATION_STEREOTYPE).map traceRecordExtended_locationConstraint();
	result += edge.getChild(PAPYRUS_NOTATION_EDGE_MANIFESTATION_NAME_REGULAR).map traceRecordExtended_locationConstraint();
}

mapping trace::TraceRecord::traceRecordExtendedSubstitutionToEdge() : List(trace::TraceRecord)
when {self.mappingOperation.name = "edgeToSubstitution"}
{
	var connector := self.getResult().modelElement.oclAsType(cmp::Substitution);
	var edge := self.getSelf().modelElement.oclAsType(notation::Connector);
	
	result += new TraceRecord("substitutionToEdge", "Substitution", connector.eobject(), "Connector", edge.eobject());
	result += self.map traceRecordExtendedConnectorToEdge_ConnectorBase();
	result += new TraceRecord("stereotypeSubstitutionDecoration", "Substitution", connector.eobject(), "DecorationNode", edge.getChild(PAPYRUS_NOTATION_EDGE_SUBSTITUTION_STEREOTYPE).eobject());
	result += new TraceRecord("substitutionDecorationNameLabel", "Substitution", connector.eobject(), "DecorationNode", edge.getChild(PAPYRUS_NOTATION_EDGE_SUBSTITUTION_NAME_REGULAR).eobject());
	result += edge.getChild(PAPYRUS_NOTATION_EDGE_SUBSTITUTION_STEREOTYPE).map traceRecordExtended_locationConstraint();
	result += edge.getChild(PAPYRUS_NOTATION_EDGE_SUBSTITUTION_NAME_REGULAR).map traceRecordExtended_locationConstraint();
}

mapping trace::TraceRecord::traceRecordExtendedGeneralizationToEdge() : List(trace::TraceRecord)
when {self.mappingOperation.name = "edgeToGeneralization"}
{
	var connector := self.getResult().modelElement.oclAsType(cmp::Generalization);
	var edge := self.getSelf().modelElement.oclAsType(notation::Connector);
	
	result += new TraceRecord("generalizationToEdge", "Generalization", connector.eobject(), "Connector", edge.eobject());
	result += self.map traceRecordExtendedConnectorToEdge_ConnectorBase();
	result += new TraceRecord("stereotypeGeneralizationDecoration", "Generalization", connector.eobject(), "DecorationNode", edge.getChild(PAPYRUS_NOTATION_EDGE_GENERALIZATION_STEREOTYPE).eobject());
	result += edge.getChild(PAPYRUS_NOTATION_EDGE_GENERALIZATION_STEREOTYPE).map traceRecordExtended_locationConstraint();
}

mapping trace::TraceRecord::traceRecordExtendedAbstractionToEdge() : List(trace::TraceRecord)
when {self.mappingOperation.name = "edgeToAbstraction"}
{
	var connector := self.getResult().modelElement.oclAsType(cmp::Abstraction);
	var edge := self.getSelf().modelElement.oclAsType(notation::Connector);
	
	result += new TraceRecord("abstractionToEdge", "Abstraction", connector.eobject(), "Connector", edge.eobject());
	result += self.map traceRecordExtendedConnectorToEdge_ConnectorBase();
	result += new TraceRecord("stereotypeAbstractionDecoration", "Abstraction", connector.eobject(), "DecorationNode", edge.getChild(PAPYRUS_NOTATION_EDGE_ABSTRACTION_STEREOTYPE).eobject());
	result += new TraceRecord("abstractionDecorationNameLabel", "Abstraction", connector.eobject(), "DecorationNode", edge.getChild(PAPYRUS_NOTATION_EDGE_ABSTRACTION_NAME_REGULAR).eobject());
	result += edge.getChild(PAPYRUS_NOTATION_EDGE_ABSTRACTION_STEREOTYPE).map traceRecordExtended_locationConstraint();
	result += edge.getChild(PAPYRUS_NOTATION_EDGE_ABSTRACTION_NAME_REGULAR).map traceRecordExtended_locationConstraint();
}

mapping trace::TraceRecord::traceRecordExtendedDependencyToEdge() : List(trace::TraceRecord)
when {self.mappingOperation.name = "edgeToDependency"}
{
	var connector := self.getResult().modelElement.oclAsType(cmp::Dependency);
	var edge := self.getSelf().modelElement.oclAsType(notation::Connector);
	
	result += new TraceRecord("dependencyToEdge", "Dependency", connector.eobject(), "Connector", edge.eobject());
	result += self.map traceRecordExtendedConnectorToEdge_ConnectorBase();
	result += new TraceRecord("stereotypeDependencyDecoration", "Dependency", connector.eobject(), "DecorationNode", edge.getChild(PAPYRUS_NOTATION_EDGE_DEPENDENCY_STEREOTYPE).eobject());
	result += new TraceRecord("dependencyDecorationNameLabel", "Dependency", connector.eobject(), "DecorationNode", edge.getChild(PAPYRUS_NOTATION_EDGE_DEPENDENCY_NAME_REGULAR).eobject());
	result += edge.getChild(PAPYRUS_NOTATION_EDGE_DEPENDENCY_STEREOTYPE).map traceRecordExtended_locationConstraint();
	result += edge.getChild(PAPYRUS_NOTATION_EDGE_DEPENDENCY_NAME_REGULAR).map traceRecordExtended_locationConstraint();
}

mapping trace::TraceRecord::traceRecordExtended_InterfaceRelationToEdge() : List(trace::TraceRecord)
when {self.mappingOperation.name = "edgeToInterfaceRelation"}
{
	var connector := self.getResult().modelElement.oclAsType(cmp::InterfaceRelation);
	var edge := self.getSelf().modelElement.oclAsType(notation::Connector);
	
	result += new TraceRecord("interfaceRelationToEdge", "InterfaceRelation", connector.eobject(), "Connector", edge.eobject());
	result += self.map traceRecordExtendedConnectorToEdge_ConnectorBase();
}
mapping trace::TraceRecord::traceRecordExtendedConnectorToEdge_ConnectorBase() : List(trace::TraceRecord)
{
	var connector := self.getResult().modelElement.oclAsType(cmp::Connector);
	var edge := self.getSelf().modelElement.oclAsType(notation::Connector);
	result += edge.eobject().map traceRecordExtendedConnectorToEdge_ConnectorBase(edge);
}
mapping ecore::EObject::traceRecordExtendedConnectorToEdge_ConnectorBase(edge : notation::Connector) : List(trace::TraceRecord)
{
	result += new TraceRecord("connectorToBendpoint", "Connector", edge.eobject(), "RelativeBendpoints", edge.bendpoints.eobject());
	result += new TraceRecord("fontStyle", "EObject", edge.eobject() , "FontStyle", edge.styles->selectByKind(notation::FontStyle)->any(true).eobject());
}
query trace::TraceRecord::getSelfNode() : notation::Node {
	assert error (self.getSelf().modelElement.oclIsKindOf(notation::Node)) with log('The contained model element is not a node.');
	return self.getSelf().modelElement.oclAsType(notation::Node);
}
/**
query getAllClassifiers() : OrderedSet(cmp::Classifier)
{
	return textualModel.rootObjects()[cmp::ComponentDiagram]->any(true).getAllTransitiveClassifiers();
}**/

query trace::TraceRecord::hasCommentLinkForAssociation() : Boolean
{
	var edge := self.getSelf().modelElement.oclAsType(notation::Connector);
	return self.mappingOperation.name = "edgeToCommentLink" and edge.isCommentLinkForAssociation();
}

query notation::Edge::isCommentLinkForAssociation() : Boolean
{
	var referencedElements := self.source.element.oclAsSet()->union(self.target.element.oclAsSet());
	return referencedElements->exists(oclIsKindOf(uml::Association)) and referencedElements->exists(oclIsKindOf(uml::Comment));
}

query notation::Node::getChild(type : String) : notation::Node
{
	return self.getChildInternal(type).oclAsType(notation::Node);
}

query notation::Edge::getChild(type : String) : notation::Node
{
	return self.getChildInternal(type).oclAsType(notation::Node);
}

query notation::View::getChild(type : String) : notation::View
{
	return self.getChildInternal(type);
}

query notation::View::getChildInternal(type : String) : notation::View
{
	var matches := self.children->select(v | v.type = type or v.type = type + "_CCN" );
	assert error (matches->size() = 1) with log('The child has to be identifiable unambigously by its type id ' + type, self);
	return matches->any(true);
}

query notation::Node::getChildren(type : String) : notation::Node
{
	return self.getChildInternalren(type).oclAsType(notation::Node);
}

query notation::Edge::getChildren(type : String) : notation::Node
{
	return self.getChildInternalren(type).oclAsType(notation::Node);
}

query notation::View::getChildren(type : String) : notation::View
{
	return self.getChildInternalren(type);
}

query notation::View::getChildInternalren(type : String) : notation::View
{
	var matches := self.children->any(v | v.type = type or v.type = type + "_CCN" );
	return matches->any(true);
}