import TraceUtils_Component;

transformation Textual_to_Graphical_for_Component_Trace(in textualTrace : TRACE, out graphicalTrace : TRACE, in graphicalModel : GRAPHICAL, in g2tTransformation : QVTO);

modeltype QVTO uses qvtoperational('http://www.eclipse.org/QVT/1.0.0/Operational');
modeltype TRACE uses trace('http:///www.eclipse.org/m2m/qvt/operational/trace.ecore');
modeltype ECORE uses ecore('http://www.eclipse.org/emf/2002/Ecore');
modeltype TEXTUAL uses cmp('http://www.cooperateproject.de/modeling/textual/component/Component');
modeltype TXTCMN uses textualCommons('http://www.cooperateproject.de/modeling/textual/commons');
modeltype GRAPHICAL uses notation('http://www.eclipse.org/gmf/runtime/1.0.2/notation');
modeltype UML uses uml('http://www.eclipse.org/uml2/5.0.0/UML');

main() {
	var traces := textualTrace.rootObjects()[trace::Trace];
	assert fatal (traces->size() = 1);
	traces->initializeProperties();
	traces->map trace();
}

helper trace::Trace::initializeProperties() {
	TARGET_TRANSFORMATION_NAME := "Graphical_to_Textual_for_Component";
	TARGET_TRANSFORMATION := g2tTransformation.rootObjects()[qvtoperational::expressions::OperationalTransformation]->any(true);
}

mapping trace::Trace::trace() : trace::Trace
{
	traceRecords += self.traceRecords->map traceRecord()->flatten();
}

mapping trace::TraceRecord::traceRecord() : List(trace::TraceRecord)
{
	result += self.map traceRecordDiagram();
	result += self.map traceRecordClassifier();
	result += self.map traceRecordClassifierRelation();
	result += self.map traceNodeToComponent();
	result += self.map traceNodeToInterface();
	result += self.map traceNodeToProperty();
	result += self.map traceNodeToMethod();
	result += self.map traceEdgeToInterfaceRelation();
	result += self.map traceEdgeToProvide();
	result += self.map traceEdgeToRequire();
	result += self.map traceEdgeToManifestation();
	result += self.map traceEdgeToAbstraction();
	result += self.map traceEdgeToSubstitution();
	result += self.map traceEdgeToGeneralization();
	result += self.map traceEdgeToDependency();
	result += self.map traceEdgeToConnector();
	result += self.map traceEdgeToPortRelation();
	result += self.map traceNodeToPort();
}


mapping trace::TraceRecord::traceRecordClassifier() :List(trace::TraceRecord)
when {self.mappingOperation.name = "classifiersToShape"}
{ 
	var node := self.getResult().modelElement;
	var classifier := self.getSelf().modelElement;
	result += new TraceRecord("nodeToClassifier", "Node", node, "Classifier", classifier.toEObject());
}
mapping trace::TraceRecord::traceRecordClassifierRelation() :List(trace::TraceRecord)
when {self.mappingOperation.name = "classifierRelationsToEdge"}
{ 
	var edge := self.getResult().modelElement;
	var classifierRelation := self.getSelf().modelElement;
	result += new TraceRecord("edgeToClassifierRelation", "Edge", edge, "ClassifierRelation", classifierRelation.toEObject());
}
mapping trace::TraceRecord::traceRecordDiagram() : List(trace::TraceRecord)
when {self.mappingOperation.name = "diagramToDiagram"}
{
	var notationDiagram := self.getResult().modelElement;
	var componentDiagram := self.getSelf().modelElement.oclAsType(cmp::ComponentDiagram);
	
	result += new TraceRecord("diagramToDiagram", "Diagram", notationDiagram, "ComponentDiagram", componentDiagram.eobject());
	result += new TraceRecord("diagramToRootPackage", "Diagram", notationDiagram, "RootPackage", componentDiagram.rootpackage.eobject());
}

mapping trace::TraceRecord::traceNodeToComponent() : List(trace::TraceRecord)
when {self.mappingOperation.name = "componentToShape"}
{
	var node := self.getResult().modelElement;
	var component := self.getSelf().modelElement.oclAsType(cmp::Component);
	result += new TraceRecord("nodeToComponent", "Node", node, "Component", component.eobject());
}

mapping trace::TraceRecord::traceNodeToPort() : List(trace::TraceRecord)
when {self.mappingOperation.name = "portToShape"}
{
	var node := self.getResult().modelElement;
	var port := self.getSelf().modelElement.oclAsType(cmp::Port);
	result += new TraceRecord("nodeToPort", "Node", node, "Port", port.eobject());
}


mapping trace::TraceRecord::traceNodeToInterface() : List(trace::TraceRecord)
when {self.mappingOperation.name = "interfaceToShape"}
{
	var node := self.getResult().modelElement;
	var interface := self.getSelf().modelElement.oclAsType(cmp::Interface);
	result += new TraceRecord("nodeToInterface", "Node", node, "Interface", interface.eobject());
}

mapping trace::TraceRecord::traceNodeToProperty() : List(trace::TraceRecord)
when {self.mappingOperation.name = "interfaceAttributeToShape"}
{
	var node := self.getResult().modelElement;
	var attribute := self.getSelf().modelElement.oclAsType(cmp::Attribute);
	result += new TraceRecord("nodeToProperty", "Node", node, "Attribute", attribute.eobject());
}

mapping trace::TraceRecord::traceNodeToMethod() : List(trace::TraceRecord)
when {self.mappingOperation.name = "interfaceMethodToShape"}
{
	var node := self.getResult().modelElement;
	var method := self.getSelf().modelElement.oclAsType(cmp::Method);
	result += new TraceRecord("nodeToOperation", "Node", node, "Method", method.eobject());
	result += method.parameters->map traceRecordShapeOperation_Parameter()->flatten();
}
mapping trace::TraceRecord::traceEdgeToInterfaceRelation() : List(trace::TraceRecord)
when {self.mappingOperation.name = "interfaceRelationToEdge"}
{
	var edge := self.getResult().modelElement;
	var ifaceRelation := self.getSelf().modelElement.oclAsType(cmp::InterfaceRelation);
	result += new TraceRecord("edgeToInterfaceRelation", "Edge", edge, "InterfaceRelation", ifaceRelation.eobject());
}

mapping trace::TraceRecord::traceEdgeToPortRelation() : List(trace::TraceRecord)
when {self.mappingOperation.name = "portRelationToEdge"}
{
	var edge := self.getResult().modelElement;
	var portRelation := self.getSelf().modelElement.oclAsType(cmp::PortRelation);
	result += new TraceRecord("edgeToPortRelation", "Edge", edge, "PortRelation", portRelation.eobject());
}

mapping trace::TraceRecord::traceEdgeToProvide() : List(trace::TraceRecord)
when {self.mappingOperation.name = "provideToEdge"}
{
	var edge := self.getResult().modelElement;
	var provide := self.getSelf().modelElement.oclAsType(cmp::Provide);
	result += new TraceRecord("edgeToProvide", "Edge", edge, "Provide", provide.eobject());
}
mapping trace::TraceRecord::traceEdgeToRequire() : List(trace::TraceRecord)
when {self.mappingOperation.name = "requireToEdge"}
{
	var edge := self.getResult().modelElement;
	var require := self.getSelf().modelElement.oclAsType(cmp::Require);
	result += new TraceRecord("edgeToRequire", "Edge", edge, "Require", require.eobject());
}

mapping trace::TraceRecord::traceEdgeToManifestation() : List(trace::TraceRecord)
when {self.mappingOperation.name = "manifestationToEdge"}
{
	var edge := self.getResult().modelElement;
	var manifestation := self.getSelf().modelElement.oclAsType(cmp::Manifestation);
	result += new TraceRecord("edgeToManifestation", "Edge", edge, "Manifestation", manifestation.eobject());
}

mapping trace::TraceRecord::traceEdgeToDependency() : List(trace::TraceRecord)
when {self.mappingOperation.name = "dependencyToEdge"}
{
	var edge := self.getResult().modelElement;
	var dependency := self.getSelf().modelElement.oclAsType(cmp::Dependency);
	result += new TraceRecord("edgeToDependency", "Edge", edge, "Dependency", dependency.eobject());
}

mapping trace::TraceRecord::traceEdgeToGeneralization() : List(trace::TraceRecord)
when {self.mappingOperation.name = "generalizationToEdge"}
{
	var edge := self.getResult().modelElement;
	var generalization := self.getSelf().modelElement.oclAsType(cmp::Generalization);
	result += new TraceRecord("edgeToGeneralization", "Edge", edge, "Generalization", generalization.eobject());
}

mapping trace::TraceRecord::traceEdgeToAbstraction() : List(trace::TraceRecord)
when {self.mappingOperation.name = "abstractionToEdge"}
{
	var edge := self.getResult().modelElement;
	var abstraction := self.getSelf().modelElement.oclAsType(cmp::Abstraction);
	result += new TraceRecord("edgeToAbstraction", "Edge", edge, "Abstraction", abstraction.eobject());
}

mapping trace::TraceRecord::traceEdgeToSubstitution() : List(trace::TraceRecord)
when {self.mappingOperation.name = "substitutionToEdge"}
{
	var edge := self.getResult().modelElement;
	var substitution := self.getSelf().modelElement.oclAsType(cmp::Substitution);
	result += new TraceRecord("edgeToSubstitution", "Edge", edge, "Substitution", substitution.eobject());
}

mapping trace::TraceRecord::traceEdgeToConnector() : List(trace::TraceRecord)
when {self.mappingOperation.name = "connectorToEdge"}
{
	var edge := self.getResult().modelElement;
	var connector := self.getSelf().modelElement.oclAsType(cmp::Connector);
	result += new TraceRecord("edgeToConnector", "Edge", edge, "Connector", connector.eobject());
}

mapping cmp::Parameter::traceRecordShapeOperation_Parameter() : List(trace::TraceRecord)
{
	result += new TraceRecord("umlParameterToParameter", "Parameter", self.referencedElement.eobject(), "Parameter", self.eobject());
}