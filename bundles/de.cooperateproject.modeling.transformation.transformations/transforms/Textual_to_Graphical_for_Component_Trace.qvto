import TraceUtils_Component;

transformation Textual_to_Graphical_for_Component_Trace(in textualTrace : TRACE, out graphicalTrace : TRACE, in graphicalModel : GRAPHICAL, in g2tTransformation : QVTO);

modeltype QVTO uses qvtoperational('http://www.eclipse.org/QVT/1.0.0/Operational');
modeltype TRACE uses trace('http:///www.eclipse.org/m2m/qvt/operational/trace.ecore');
modeltype ECORE uses ecore('http://www.eclipse.org/emf/2002/Ecore');
modeltype TEXTUAL uses cmp('http://www.cooperateproject.de/modeling/textual/component/Component');
modeltype TXTCMN uses textualCommons('http://www.cooperateproject.de/modeling/textual/commons');
modeltype GRAPHICAL uses notation('http://www.eclipse.org/gmf/runtime/1.0.2/notation');
modeltype UML uses uml('http://www.eclipse.org/uml2/5.0.0/UML');

main() {
	var traces := textualTrace.rootObjects()[trace::Trace];
	assert fatal (traces->size() = 1);
	traces->initializeProperties();
	traces->map trace();
}

helper trace::Trace::initializeProperties() {
	TARGET_TRANSFORMATION_NAME := "Graphical_to_Textual_for_Component";
	TARGET_TRANSFORMATION := g2tTransformation.rootObjects()[qvtoperational::expressions::OperationalTransformation]->any(true);
}

mapping trace::Trace::trace() : trace::Trace
{
	traceRecords += self.traceRecords->map traceRecord()->flatten();
}

mapping trace::TraceRecord::traceRecord() : List(trace::TraceRecord)
{
	result += self.map traceRecordDiagram();
	result += self.map traceNodeToComponent();

}

mapping trace::TraceRecord::traceRecordDiagram() : List(trace::TraceRecord)
when {self.mappingOperation.name = "diagramToDiagram"}
{
	var notationDiagram := self.getResult().modelElement;
	var componentDiagram := self.getSelf().modelElement.oclAsType(cmp::ComponentDiagram);
	
	result += new TraceRecord("diagramToDiagram", "Diagram", notationDiagram, "ComponentDiagram", componentDiagram.eobject());
	result += new TraceRecord("diagramToRootPackage", "Diagram", notationDiagram, "RootPackage", componentDiagram.rootpackage.eobject());
}

mapping trace::TraceRecord::traceNodeToComponent() : List(trace::TraceRecord)
when {self.mappingOperation.name = "componentToShape"}
{
	var node := self.getResult().modelElement;
	//var actor := self.getSelf().modelElement.oclAsType(usecase::Actor);
		//result += new TraceRecord("edgeToGeneralization", "Edge", edge, "Generalization", generalization.eobject());
	var component := self.getSelf().modelElement.oclAsType(cmp::Component);
	result += new TraceRecord("nodeToComponent", "Node", node, "Component", component.eobject());
}