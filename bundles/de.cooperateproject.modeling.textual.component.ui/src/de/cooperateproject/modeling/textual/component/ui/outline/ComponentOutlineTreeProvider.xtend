/*
 * generated by Xtext 2.11.0
 */
package de.cooperateproject.modeling.textual.component.ui.outline

import de.cooperateproject.modeling.textual.common.outline.CooperateOutlineTreeProvider
import org.eclipse.xtext.ui.editor.outline.IOutlineNode
import de.cooperateproject.modeling.textual.component.component.ComponentDiagram
import de.cooperateproject.modeling.textual.component.component.RootPackage
import de.cooperateproject.modeling.textual.common.outline.UMLImage
import de.cooperateproject.modeling.textual.component.component.ComponentPackage
import de.cooperateproject.modeling.textual.component.component.Component
import de.cooperateproject.modeling.textual.common.metamodel.textualCommons.Commentable
import de.cooperateproject.modeling.textual.component.component.Connector
import de.cooperateproject.modeling.textual.component.component.Interface
import de.cooperateproject.modeling.textual.component.component.Class

/**
 * Customization of the default outline structure.
 *
 * See https://www.eclipse.org/Xtext/documentation/304_ide_concepts.html#outline
 */
class ComponentOutlineTreeProvider extends CooperateOutlineTreeProvider {
    
    protected def dispatch createNode(IOutlineNode parentNode, RootPackage element) {
        if (element.owningPackage === null) {
           createEObjectNode(parentNode, element.referencedElement)
        } else {
           createEObjectNode(parentNode, element)
        }
    }

    dispatch def createChildren(IOutlineNode parentNode, ComponentDiagram root) {
        if (root.rootpackage === null) {
            return
        }
        val pkg = root.rootpackage

        createFeatureNode(parentNode, pkg, ComponentPackage.Literals.ROOT_PACKAGE__CLASSIFIERS,
            UMLImage.COMPONENT.image, getStyledString("Classifiers", pkg.classifiers.size), false)
        createFeatureNode(parentNode, pkg, ComponentPackage.Literals.ROOT_PACKAGE__RELATIONS,
            UMLImage.ASSOCIATION.image, getStyledString("Relations", pkg.relations.size), false)
    }
    
    dispatch def createChildren(IOutlineNode parentNode, Component component) {
        component.port.forEach[x|createEObjectNode(parentNode, x)]
        component.packagedElements.forEach[x|createEObjectNode(parentNode, x)]
        component.interfaceRelation.forEach[x|createEObjectNode(parentNode, x)]
        component.attributes.forEach[x|createEObjectNode(parentNode, x)]
        component.connectors.forEach[x|createEObjectNode(parentNode, x)]
        _createChildren(parentNode, component as Commentable<?>)
    }
    
    dispatch def createChildren(IOutlineNode parentNode, Interface object) {
       object.members.forEach[x|createEObjectNode(parentNode, x)]
       _createChildren(parentNode, object as Commentable<?>)
    }
    dispatch def createChildren(IOutlineNode parentNode, Class object) {
       object.interfaceRelation.forEach[x|createEObjectNode(parentNode, x)]
       _createChildren(parentNode, object as Commentable<?>)
    }
    
    dispatch def createChildren(IOutlineNode parentNode, Connector object) {
    }      
       
    dispatch def createChildren(IOutlineNode parentNode, Void object) {
       //Do nothing for a null object
    }
}
