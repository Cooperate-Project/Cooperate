// automatically generated by Xtext
grammar de.cooperateproject.modeling.textual.component.Component with org.eclipse.xtext.common.Terminals

import "http://www.cooperateproject.de/modeling/textual/component/Component"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "platform:/resource/de.cooperateproject.modeling.textual.common.metamodel/model/textualCommons.ecore" as textualCommons
import "platform:/plugin/org.eclipse.uml2.uml/model/UML.ecore" as uml

ComponentDiagram returns ComponentDiagram: 
	{ComponentDiagram}
		'@start-cpd' title=EString
		 rootpackage=RootPackage
		'@end-cpd'
;


ClassifierRelation returns ClassifierRelation: 
	Generalization | Abstraction | Manifestation | Substitution | Dependency;

Classifier returns Classifier: 
	Interface | Component;

NameString returns ecore::EString: 
	STRING
;


PortRelation returns PortRelation: 
	Connector;

InterfaceRelation returns InterfaceRelation: 
	Provide | Require;


Member returns Member: 
	Method | Attribute;



EString returns ecore::EString: 
	STRING | ID;

RootPackage returns RootPackage: 
	{RootPackage}
	'rootPackage' name=FQN
			classifier+=Classifier*
			relation+=ClassifierRelation*
	;

Component returns Component: 
	{Component}
	'component'
	((name=STRING 'as' alias = ID)|name = ID)'{'  (
		(((comments+=Comment)? 
		(component+=Component)*
		(port+=Port)*
		(portrelation+=PortRelation)*
		(interfacerelation+=InterfaceRelation)*
		(interface+=Interface)* )))'}'
		
		;


Generalization returns Generalization:
		'isa' '(' leftclassifier=[Classifier|EString] "," rightclassifier=[Classifier|EString] ')' 
;

Abstraction returns Abstraction:
		'abs' '(' leftclassifier=[Classifier|EString] "," rightclassifier=[Classifier|EString] ')'
 ;

Manifestation returns Manifestation:
		'man' '(' leftclassifier=[Classifier|EString] "," rightclassifier=[Classifier|EString] ')' 
;

Substitution returns Substitution:
		'sub' '(' leftclassifier=[Classifier|EString] "," rightclassifier=[Classifier|EString] ')' 
;

Dependency returns Dependency:
		'dep' '(' leftclassifier=[Classifier|EString] "," rightclassifier=[Classifier|EString] ')' 
;



Comment returns textualCommons::Comment: 
		'note' body=EString
;

Port returns Port:
	{Port}
	(visibility = Visibility)? 'port'
	name = ID 
;

Interface returns Interface: 
	{Interface}
	'interface'
	((name=STRING 'as' alias = ID)|name = ID)( (comments+=Comment)? |
		(('{' (comments+=Comment)? (member += Member)* '}')))
;


Connector returns Connector: 
	'con' ((name=EString 'as' alias = ID)|name = ID) 
	'('
		leftport=[Port] ',' rightport=[Port] ',' interface=[Interface|EString]
	')';

Provide returns Provide: 
	{Provide}
		'provide' interface=[Interface|FQN]
;

Require returns Require: 
	{Require}
		'require' interface=[Interface|FQN]
;

enum Visibility returns textualCommons::Visibility: 
	PUBLIC = '+' 
	| PUBLIC = 'public'
	| PRIVATE = '-' 
	| PRIVATE = 'private'
	| PROTECTED = '#' 
	| PROTECTED = 'protected'
	| PACKAGE = '~'
;

EBoolean returns ecore::EBoolean: 
	'true' | 'false';


Method returns Method: 
	{Method}
	(visibility = Visibility)? 
	(abstract ?= 'abstract')? 
	(static ?= 'static')? 
	name = ID '(' 
	(parameters += Parameter (',' parameters += Parameter)*)* ')' 
	(':' type = [uml::Classifier|FQN])?
;

Attribute returns Attribute: 
	{Attribute} 
	(visibility = Visibility)? 
	(static ?= 'static')? 
	name = ID ':' type=[uml::Classifier|FQN]
;

Parameter returns Parameter: 
	(visibility = Visibility)? 
	(static ?= 'static')? 
	name = ID ':' type = [uml::Classifier|FQN]
;

	
FQN:
    ID ("." ID)*
;

@Override
terminal ID         : '^'?('a'..'z'|'A'..'Z') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
terminal UNDERSCORE : '_';