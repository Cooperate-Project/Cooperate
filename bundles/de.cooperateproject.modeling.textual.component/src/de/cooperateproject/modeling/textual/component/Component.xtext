// automatically generated by Xtext
grammar de.cooperateproject.modeling.textual.component.Component with org.eclipse.xtext.common.Terminals

import "http://www.cooperateproject.de/modeling/textual/component/Component"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "platform:/resource/de.cooperateproject.modeling.textual.common.metamodel/model/textualCommons.ecore" as textualCommons
import "platform:/plugin/org.eclipse.uml2.uml/model/UML.ecore" as uml

ComponentDiagram returns ComponentDiagram: 
	{ComponentDiagram}
		'@start-cpd' title=STRING
		 rootpackage=RootPackage
		'@end-cpd'
;


ClassifierRelation returns ClassifierRelation: 
	Generalization | Abstraction | Manifestation | Substitution | Dependency;

Classifier returns Classifier: 
	Interface | Component | Class;


InterfaceRelation returns InterfaceRelation: 
	Provide | Require;


Member returns Member: 
	Method | Attribute;

	
	

RootPackage:
	{RootPackage} 
	('rootPackage' name=FQN)?
			classifiers+=Classifier*
			relations+=ClassifierRelation*
	;

Component returns Component: 
	'component'	(name = ID | alias = ID 'as' name = STRING) (
		 (comments+=Comment)? | 
		 ('{'
			(comments+=Comment)? 
			(interfaceRelation+=InterfaceRelation)*
			(port+=Port)*
		 	(attributes+=ComponentTypeAttribute)*  
			(connectors+=Connector)*
			(packagedElements+=Classifier)*
		 '}' ))
		
		;

Class returns Class:
	'class' (name = ID | alias = ID 'as' name = STRING) ( (comments+=Comment)? |
		(('{' (comments+=Comment)? (interfaceRelation+=InterfaceRelation)* '}')))
	
;


Generalization returns Generalization:
		'isa' '(' leftClassifier=[Classifier] "," rightClassifier=[Classifier] ')' 
;

Abstraction returns Abstraction:
		'abs' '(' leftClassifier=[Classifier] "," rightClassifier=[Classifier] ')'
 ;

Manifestation returns Manifestation:
		'man' '(' leftClassifier=[Classifier] "," rightClassifier=[Classifier] ')' 
;

Substitution returns Substitution:
		'sub' '(' leftClassifier=[Classifier] "," rightClassifier=[Classifier] ')' 
;

Dependency returns Dependency:
		'dep' '(' leftClassifier=[Classifier] "," rightClassifier=[Classifier] ')' 
;

Comment returns textualCommons::Comment: 
		'note' body=STRING
;

Port returns Port:
	(visibility = Visibility)? 'port'
	name = ID 
	'realizes' (conjugated?=('~'|'conjugated'))? realizedClassifier=[Classifier]
;

Interface returns Interface: 
	'interface'
	(name = ID | alias = ID 'as' name = STRING)( (comments+=Comment)? |
		(('{' (comments+=Comment)? (members += Member)* '}')))
;


Connector returns Connector: 
	'con' (name = ID | alias = ID 'as' name = STRING)
	'('
		connectorEnds+=ConnectorEnd (',' connectorEnds+=ConnectorEnd)* 
	')';

ConnectorEnd returns ConnectorEnd:
	(part=[Attribute]'.')? role=[Port]
;

Provide returns Provide: 
	{Provide}
		'provide' (name = ID | alias = ID 'as' name = STRING) interface=[Interface|FQN]
;

Require returns Require: 
	{Require}
		'require' (name = ID | alias = ID 'as' name = STRING) interface=[Interface|FQN]
;

enum Visibility returns uml::VisibilityKind: 
	public = '+' 
	| public = 'public'
	| private = '-' 
	| private = 'private'
	| protected = '#' 
	| protected = 'protected'
	| package = '~'
;

Method returns Method: 
	{Method}
	(visibility = Visibility)? 
	(abstract ?= 'abstract')? 
	(static ?= 'static')? 
	name = ID '(' 
	(parameters += Parameter (',' parameters += Parameter)*)* ')' 
	(':' type = [uml::Classifier|FQN])?
;

Attribute returns Attribute: 
	(visibility = Visibility)? 
	(static ?= 'static')? 
	name = ID ':' type=[uml::Classifier|FQN]
;

ComponentTypeAttribute returns Attribute: 
	name = ID ':' type=[uml::Component|FQN]
;

Parameter returns Parameter: 
	(visibility = Visibility)? 
	(static ?= 'static')? 
	name = ID ':' type = [uml::Classifier|FQN]
;

	
FQN:
    ID ("." ID)*
;

@Override
terminal ID         : '^'?('a'..'z'|'A'..'Z') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;