/*
 * generated by Xtext 2.11.0
 */
package de.cooperateproject.modeling.textual.component.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class ComponentGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ComponentDiagramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.component.Component.ComponentDiagram");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cComponentDiagramAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cStartCpdKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTitleAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTitleEStringParserRuleCall_2_0 = (RuleCall)cTitleAssignment_2.eContents().get(0);
		private final Assignment cRootpackageAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRootpackageRootPackageParserRuleCall_3_0 = (RuleCall)cRootpackageAssignment_3.eContents().get(0);
		private final Keyword cEndCpdKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ComponentDiagram:
		//	{ComponentDiagram}
		//	'@start-cpd' title=EString
		//	rootpackage=RootPackage
		//	'@end-cpd';
		@Override public ParserRule getRule() { return rule; }
		
		//{ComponentDiagram} '@start-cpd' title=EString rootpackage=RootPackage '@end-cpd'
		public Group getGroup() { return cGroup; }
		
		//{ComponentDiagram}
		public Action getComponentDiagramAction_0() { return cComponentDiagramAction_0; }
		
		//'@start-cpd'
		public Keyword getStartCpdKeyword_1() { return cStartCpdKeyword_1; }
		
		//title=EString
		public Assignment getTitleAssignment_2() { return cTitleAssignment_2; }
		
		//EString
		public RuleCall getTitleEStringParserRuleCall_2_0() { return cTitleEStringParserRuleCall_2_0; }
		
		//rootpackage=RootPackage
		public Assignment getRootpackageAssignment_3() { return cRootpackageAssignment_3; }
		
		//RootPackage
		public RuleCall getRootpackageRootPackageParserRuleCall_3_0() { return cRootpackageRootPackageParserRuleCall_3_0; }
		
		//'@end-cpd'
		public Keyword getEndCpdKeyword_4() { return cEndCpdKeyword_4; }
	}
	public class ClassifierRelationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.component.Component.ClassifierRelation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cGeneralizationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAbstractionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cManifestationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cSubstitutionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cDependencyParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//ClassifierRelation:
		//	Generalization | Abstraction | Manifestation | Substitution | Dependency;
		@Override public ParserRule getRule() { return rule; }
		
		//Generalization | Abstraction | Manifestation | Substitution | Dependency
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Generalization
		public RuleCall getGeneralizationParserRuleCall_0() { return cGeneralizationParserRuleCall_0; }
		
		//Abstraction
		public RuleCall getAbstractionParserRuleCall_1() { return cAbstractionParserRuleCall_1; }
		
		//Manifestation
		public RuleCall getManifestationParserRuleCall_2() { return cManifestationParserRuleCall_2; }
		
		//Substitution
		public RuleCall getSubstitutionParserRuleCall_3() { return cSubstitutionParserRuleCall_3; }
		
		//Dependency
		public RuleCall getDependencyParserRuleCall_4() { return cDependencyParserRuleCall_4; }
	}
	public class ClassifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.component.Component.Classifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInterfaceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cComponentParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Classifier:
		//	Interface | Component;
		@Override public ParserRule getRule() { return rule; }
		
		//Interface | Component
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Interface
		public RuleCall getInterfaceParserRuleCall_0() { return cInterfaceParserRuleCall_0; }
		
		//Component
		public RuleCall getComponentParserRuleCall_1() { return cComponentParserRuleCall_1; }
	}
	public class NameStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.component.Component.NameString");
		private final RuleCall cSTRINGTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//NameString:
		//	STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall() { return cSTRINGTerminalRuleCall; }
	}
	public class PortRelationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.component.Component.PortRelation");
		private final RuleCall cConnectorParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//PortRelation:
		//	Connector;
		@Override public ParserRule getRule() { return rule; }
		
		//Connector
		public RuleCall getConnectorParserRuleCall() { return cConnectorParserRuleCall; }
	}
	public class InterfaceRelationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.component.Component.InterfaceRelation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cProvideParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRequireParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//InterfaceRelation:
		//	Provide | Require;
		@Override public ParserRule getRule() { return rule; }
		
		//Provide | Require
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Provide
		public RuleCall getProvideParserRuleCall_0() { return cProvideParserRuleCall_0; }
		
		//Require
		public RuleCall getRequireParserRuleCall_1() { return cRequireParserRuleCall_1; }
	}
	public class MemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.component.Component.Member");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMethodParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAttributeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Member:
		//	Method | Attribute;
		@Override public ParserRule getRule() { return rule; }
		
		//Method | Attribute
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Method
		public RuleCall getMethodParserRuleCall_0() { return cMethodParserRuleCall_0; }
		
		//Attribute
		public RuleCall getAttributeParserRuleCall_1() { return cAttributeParserRuleCall_1; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.component.Component.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString:
		//	STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class RootPackageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.component.Component.RootPackage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRootPackageAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRootPackageKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameFQNParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cClassifierAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cClassifierClassifierParserRuleCall_3_0 = (RuleCall)cClassifierAssignment_3.eContents().get(0);
		private final Assignment cRelationAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRelationClassifierRelationParserRuleCall_4_0 = (RuleCall)cRelationAssignment_4.eContents().get(0);
		
		//RootPackage:
		//	{RootPackage}
		//	'rootPackage' name=FQN
		//	classifier+=Classifier*
		//	relation+=ClassifierRelation*;
		@Override public ParserRule getRule() { return rule; }
		
		//{RootPackage} 'rootPackage' name=FQN classifier+=Classifier* relation+=ClassifierRelation*
		public Group getGroup() { return cGroup; }
		
		//{RootPackage}
		public Action getRootPackageAction_0() { return cRootPackageAction_0; }
		
		//'rootPackage'
		public Keyword getRootPackageKeyword_1() { return cRootPackageKeyword_1; }
		
		//name=FQN
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//FQN
		public RuleCall getNameFQNParserRuleCall_2_0() { return cNameFQNParserRuleCall_2_0; }
		
		//classifier+=Classifier*
		public Assignment getClassifierAssignment_3() { return cClassifierAssignment_3; }
		
		//Classifier
		public RuleCall getClassifierClassifierParserRuleCall_3_0() { return cClassifierClassifierParserRuleCall_3_0; }
		
		//relation+=ClassifierRelation*
		public Assignment getRelationAssignment_4() { return cRelationAssignment_4; }
		
		//ClassifierRelation
		public RuleCall getRelationClassifierRelationParserRuleCall_4_0() { return cRelationClassifierRelationParserRuleCall_4_0; }
	}
	public class ComponentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.component.Component.Component");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cComponentAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cComponentKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Assignment cNameAssignment_2_0_0 = (Assignment)cGroup_2_0.eContents().get(0);
		private final RuleCall cNameSTRINGTerminalRuleCall_2_0_0_0 = (RuleCall)cNameAssignment_2_0_0.eContents().get(0);
		private final Keyword cAsKeyword_2_0_1 = (Keyword)cGroup_2_0.eContents().get(1);
		private final Assignment cAliasAssignment_2_0_2 = (Assignment)cGroup_2_0.eContents().get(2);
		private final RuleCall cAliasIDTerminalRuleCall_2_0_2_0 = (RuleCall)cAliasAssignment_2_0_2.eContents().get(0);
		private final Assignment cNameAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_2_1_0 = (RuleCall)cNameAssignment_2_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cCommentsAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cCommentsCommentParserRuleCall_4_0_0 = (RuleCall)cCommentsAssignment_4_0.eContents().get(0);
		private final Assignment cComponentAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cComponentComponentParserRuleCall_4_1_0 = (RuleCall)cComponentAssignment_4_1.eContents().get(0);
		private final Assignment cPortAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cPortPortParserRuleCall_4_2_0 = (RuleCall)cPortAssignment_4_2.eContents().get(0);
		private final Assignment cPortrelationAssignment_4_3 = (Assignment)cGroup_4.eContents().get(3);
		private final RuleCall cPortrelationPortRelationParserRuleCall_4_3_0 = (RuleCall)cPortrelationAssignment_4_3.eContents().get(0);
		private final Assignment cInterfacerelationAssignment_4_4 = (Assignment)cGroup_4.eContents().get(4);
		private final RuleCall cInterfacerelationInterfaceRelationParserRuleCall_4_4_0 = (RuleCall)cInterfacerelationAssignment_4_4.eContents().get(0);
		private final Assignment cInterfaceAssignment_4_5 = (Assignment)cGroup_4.eContents().get(5);
		private final RuleCall cInterfaceInterfaceParserRuleCall_4_5_0 = (RuleCall)cInterfaceAssignment_4_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Component:
		//	{Component}
		//	'component' (name=STRING 'as' alias=ID | name=ID) '{' (comments+=Comment?
		//	component+=Component*
		//	port+=Port*
		//	portrelation+=PortRelation*
		//	interfacerelation+=InterfaceRelation*
		//	interface+=Interface*) '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Component} 'component' (name=STRING 'as' alias=ID | name=ID) '{' (comments+=Comment? component+=Component* port+=Port*
		//portrelation+=PortRelation* interfacerelation+=InterfaceRelation* interface+=Interface*) '}'
		public Group getGroup() { return cGroup; }
		
		//{Component}
		public Action getComponentAction_0() { return cComponentAction_0; }
		
		//'component'
		public Keyword getComponentKeyword_1() { return cComponentKeyword_1; }
		
		//name=STRING 'as' alias=ID | name=ID
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//name=STRING 'as' alias=ID
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//name=STRING
		public Assignment getNameAssignment_2_0_0() { return cNameAssignment_2_0_0; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_2_0_0_0() { return cNameSTRINGTerminalRuleCall_2_0_0_0; }
		
		//'as'
		public Keyword getAsKeyword_2_0_1() { return cAsKeyword_2_0_1; }
		
		//alias=ID
		public Assignment getAliasAssignment_2_0_2() { return cAliasAssignment_2_0_2; }
		
		//ID
		public RuleCall getAliasIDTerminalRuleCall_2_0_2_0() { return cAliasIDTerminalRuleCall_2_0_2_0; }
		
		//name=ID
		public Assignment getNameAssignment_2_1() { return cNameAssignment_2_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_1_0() { return cNameIDTerminalRuleCall_2_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//comments+=Comment? component+=Component* port+=Port* portrelation+=PortRelation* interfacerelation+=InterfaceRelation*
		//interface+=Interface*
		public Group getGroup_4() { return cGroup_4; }
		
		//comments+=Comment?
		public Assignment getCommentsAssignment_4_0() { return cCommentsAssignment_4_0; }
		
		//Comment
		public RuleCall getCommentsCommentParserRuleCall_4_0_0() { return cCommentsCommentParserRuleCall_4_0_0; }
		
		//component+=Component*
		public Assignment getComponentAssignment_4_1() { return cComponentAssignment_4_1; }
		
		//Component
		public RuleCall getComponentComponentParserRuleCall_4_1_0() { return cComponentComponentParserRuleCall_4_1_0; }
		
		//port+=Port*
		public Assignment getPortAssignment_4_2() { return cPortAssignment_4_2; }
		
		//Port
		public RuleCall getPortPortParserRuleCall_4_2_0() { return cPortPortParserRuleCall_4_2_0; }
		
		//portrelation+=PortRelation*
		public Assignment getPortrelationAssignment_4_3() { return cPortrelationAssignment_4_3; }
		
		//PortRelation
		public RuleCall getPortrelationPortRelationParserRuleCall_4_3_0() { return cPortrelationPortRelationParserRuleCall_4_3_0; }
		
		//interfacerelation+=InterfaceRelation*
		public Assignment getInterfacerelationAssignment_4_4() { return cInterfacerelationAssignment_4_4; }
		
		//InterfaceRelation
		public RuleCall getInterfacerelationInterfaceRelationParserRuleCall_4_4_0() { return cInterfacerelationInterfaceRelationParserRuleCall_4_4_0; }
		
		//interface+=Interface*
		public Assignment getInterfaceAssignment_4_5() { return cInterfaceAssignment_4_5; }
		
		//Interface
		public RuleCall getInterfaceInterfaceParserRuleCall_4_5_0() { return cInterfaceInterfaceParserRuleCall_4_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class GeneralizationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.component.Component.Generalization");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIsaKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLeftclassifierAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cLeftclassifierClassifierCrossReference_2_0 = (CrossReference)cLeftclassifierAssignment_2.eContents().get(0);
		private final RuleCall cLeftclassifierClassifierEStringParserRuleCall_2_0_1 = (RuleCall)cLeftclassifierClassifierCrossReference_2_0.eContents().get(1);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRightclassifierAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cRightclassifierClassifierCrossReference_4_0 = (CrossReference)cRightclassifierAssignment_4.eContents().get(0);
		private final RuleCall cRightclassifierClassifierEStringParserRuleCall_4_0_1 = (RuleCall)cRightclassifierClassifierCrossReference_4_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Generalization:
		//	'isa' '(' leftclassifier=[Classifier|EString] "," rightclassifier=[Classifier|EString] ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'isa' '(' leftclassifier=[Classifier|EString] "," rightclassifier=[Classifier|EString] ')'
		public Group getGroup() { return cGroup; }
		
		//'isa'
		public Keyword getIsaKeyword_0() { return cIsaKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//leftclassifier=[Classifier|EString]
		public Assignment getLeftclassifierAssignment_2() { return cLeftclassifierAssignment_2; }
		
		//[Classifier|EString]
		public CrossReference getLeftclassifierClassifierCrossReference_2_0() { return cLeftclassifierClassifierCrossReference_2_0; }
		
		//EString
		public RuleCall getLeftclassifierClassifierEStringParserRuleCall_2_0_1() { return cLeftclassifierClassifierEStringParserRuleCall_2_0_1; }
		
		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//rightclassifier=[Classifier|EString]
		public Assignment getRightclassifierAssignment_4() { return cRightclassifierAssignment_4; }
		
		//[Classifier|EString]
		public CrossReference getRightclassifierClassifierCrossReference_4_0() { return cRightclassifierClassifierCrossReference_4_0; }
		
		//EString
		public RuleCall getRightclassifierClassifierEStringParserRuleCall_4_0_1() { return cRightclassifierClassifierEStringParserRuleCall_4_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class AbstractionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.component.Component.Abstraction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAbsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLeftclassifierAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cLeftclassifierClassifierCrossReference_2_0 = (CrossReference)cLeftclassifierAssignment_2.eContents().get(0);
		private final RuleCall cLeftclassifierClassifierEStringParserRuleCall_2_0_1 = (RuleCall)cLeftclassifierClassifierCrossReference_2_0.eContents().get(1);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRightclassifierAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cRightclassifierClassifierCrossReference_4_0 = (CrossReference)cRightclassifierAssignment_4.eContents().get(0);
		private final RuleCall cRightclassifierClassifierEStringParserRuleCall_4_0_1 = (RuleCall)cRightclassifierClassifierCrossReference_4_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Abstraction:
		//	'abs' '(' leftclassifier=[Classifier|EString] "," rightclassifier=[Classifier|EString] ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'abs' '(' leftclassifier=[Classifier|EString] "," rightclassifier=[Classifier|EString] ')'
		public Group getGroup() { return cGroup; }
		
		//'abs'
		public Keyword getAbsKeyword_0() { return cAbsKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//leftclassifier=[Classifier|EString]
		public Assignment getLeftclassifierAssignment_2() { return cLeftclassifierAssignment_2; }
		
		//[Classifier|EString]
		public CrossReference getLeftclassifierClassifierCrossReference_2_0() { return cLeftclassifierClassifierCrossReference_2_0; }
		
		//EString
		public RuleCall getLeftclassifierClassifierEStringParserRuleCall_2_0_1() { return cLeftclassifierClassifierEStringParserRuleCall_2_0_1; }
		
		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//rightclassifier=[Classifier|EString]
		public Assignment getRightclassifierAssignment_4() { return cRightclassifierAssignment_4; }
		
		//[Classifier|EString]
		public CrossReference getRightclassifierClassifierCrossReference_4_0() { return cRightclassifierClassifierCrossReference_4_0; }
		
		//EString
		public RuleCall getRightclassifierClassifierEStringParserRuleCall_4_0_1() { return cRightclassifierClassifierEStringParserRuleCall_4_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class ManifestationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.component.Component.Manifestation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cManKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLeftclassifierAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cLeftclassifierClassifierCrossReference_2_0 = (CrossReference)cLeftclassifierAssignment_2.eContents().get(0);
		private final RuleCall cLeftclassifierClassifierEStringParserRuleCall_2_0_1 = (RuleCall)cLeftclassifierClassifierCrossReference_2_0.eContents().get(1);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRightclassifierAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cRightclassifierClassifierCrossReference_4_0 = (CrossReference)cRightclassifierAssignment_4.eContents().get(0);
		private final RuleCall cRightclassifierClassifierEStringParserRuleCall_4_0_1 = (RuleCall)cRightclassifierClassifierCrossReference_4_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Manifestation:
		//	'man' '(' leftclassifier=[Classifier|EString] "," rightclassifier=[Classifier|EString] ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'man' '(' leftclassifier=[Classifier|EString] "," rightclassifier=[Classifier|EString] ')'
		public Group getGroup() { return cGroup; }
		
		//'man'
		public Keyword getManKeyword_0() { return cManKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//leftclassifier=[Classifier|EString]
		public Assignment getLeftclassifierAssignment_2() { return cLeftclassifierAssignment_2; }
		
		//[Classifier|EString]
		public CrossReference getLeftclassifierClassifierCrossReference_2_0() { return cLeftclassifierClassifierCrossReference_2_0; }
		
		//EString
		public RuleCall getLeftclassifierClassifierEStringParserRuleCall_2_0_1() { return cLeftclassifierClassifierEStringParserRuleCall_2_0_1; }
		
		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//rightclassifier=[Classifier|EString]
		public Assignment getRightclassifierAssignment_4() { return cRightclassifierAssignment_4; }
		
		//[Classifier|EString]
		public CrossReference getRightclassifierClassifierCrossReference_4_0() { return cRightclassifierClassifierCrossReference_4_0; }
		
		//EString
		public RuleCall getRightclassifierClassifierEStringParserRuleCall_4_0_1() { return cRightclassifierClassifierEStringParserRuleCall_4_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class SubstitutionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.component.Component.Substitution");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSubKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLeftclassifierAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cLeftclassifierClassifierCrossReference_2_0 = (CrossReference)cLeftclassifierAssignment_2.eContents().get(0);
		private final RuleCall cLeftclassifierClassifierEStringParserRuleCall_2_0_1 = (RuleCall)cLeftclassifierClassifierCrossReference_2_0.eContents().get(1);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRightclassifierAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cRightclassifierClassifierCrossReference_4_0 = (CrossReference)cRightclassifierAssignment_4.eContents().get(0);
		private final RuleCall cRightclassifierClassifierEStringParserRuleCall_4_0_1 = (RuleCall)cRightclassifierClassifierCrossReference_4_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Substitution:
		//	'sub' '(' leftclassifier=[Classifier|EString] "," rightclassifier=[Classifier|EString] ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'sub' '(' leftclassifier=[Classifier|EString] "," rightclassifier=[Classifier|EString] ')'
		public Group getGroup() { return cGroup; }
		
		//'sub'
		public Keyword getSubKeyword_0() { return cSubKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//leftclassifier=[Classifier|EString]
		public Assignment getLeftclassifierAssignment_2() { return cLeftclassifierAssignment_2; }
		
		//[Classifier|EString]
		public CrossReference getLeftclassifierClassifierCrossReference_2_0() { return cLeftclassifierClassifierCrossReference_2_0; }
		
		//EString
		public RuleCall getLeftclassifierClassifierEStringParserRuleCall_2_0_1() { return cLeftclassifierClassifierEStringParserRuleCall_2_0_1; }
		
		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//rightclassifier=[Classifier|EString]
		public Assignment getRightclassifierAssignment_4() { return cRightclassifierAssignment_4; }
		
		//[Classifier|EString]
		public CrossReference getRightclassifierClassifierCrossReference_4_0() { return cRightclassifierClassifierCrossReference_4_0; }
		
		//EString
		public RuleCall getRightclassifierClassifierEStringParserRuleCall_4_0_1() { return cRightclassifierClassifierEStringParserRuleCall_4_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class DependencyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.component.Component.Dependency");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDepKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLeftclassifierAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cLeftclassifierClassifierCrossReference_2_0 = (CrossReference)cLeftclassifierAssignment_2.eContents().get(0);
		private final RuleCall cLeftclassifierClassifierEStringParserRuleCall_2_0_1 = (RuleCall)cLeftclassifierClassifierCrossReference_2_0.eContents().get(1);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRightclassifierAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cRightclassifierClassifierCrossReference_4_0 = (CrossReference)cRightclassifierAssignment_4.eContents().get(0);
		private final RuleCall cRightclassifierClassifierEStringParserRuleCall_4_0_1 = (RuleCall)cRightclassifierClassifierCrossReference_4_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Dependency:
		//	'dep' '(' leftclassifier=[Classifier|EString] "," rightclassifier=[Classifier|EString] ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'dep' '(' leftclassifier=[Classifier|EString] "," rightclassifier=[Classifier|EString] ')'
		public Group getGroup() { return cGroup; }
		
		//'dep'
		public Keyword getDepKeyword_0() { return cDepKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//leftclassifier=[Classifier|EString]
		public Assignment getLeftclassifierAssignment_2() { return cLeftclassifierAssignment_2; }
		
		//[Classifier|EString]
		public CrossReference getLeftclassifierClassifierCrossReference_2_0() { return cLeftclassifierClassifierCrossReference_2_0; }
		
		//EString
		public RuleCall getLeftclassifierClassifierEStringParserRuleCall_2_0_1() { return cLeftclassifierClassifierEStringParserRuleCall_2_0_1; }
		
		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//rightclassifier=[Classifier|EString]
		public Assignment getRightclassifierAssignment_4() { return cRightclassifierAssignment_4; }
		
		//[Classifier|EString]
		public CrossReference getRightclassifierClassifierCrossReference_4_0() { return cRightclassifierClassifierCrossReference_4_0; }
		
		//EString
		public RuleCall getRightclassifierClassifierEStringParserRuleCall_4_0_1() { return cRightclassifierClassifierEStringParserRuleCall_4_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class CommentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.component.Component.Comment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNoteKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cBodyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBodyEStringParserRuleCall_1_0 = (RuleCall)cBodyAssignment_1.eContents().get(0);
		
		//Comment textualCommons::Comment:
		//	'note' body=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//'note' body=EString
		public Group getGroup() { return cGroup; }
		
		//'note'
		public Keyword getNoteKeyword_0() { return cNoteKeyword_0; }
		
		//body=EString
		public Assignment getBodyAssignment_1() { return cBodyAssignment_1; }
		
		//EString
		public RuleCall getBodyEStringParserRuleCall_1_0() { return cBodyEStringParserRuleCall_1_0; }
	}
	public class PortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.component.Component.Port");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPortAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cVisibilityAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVisibilityVisibilityEnumRuleCall_1_0 = (RuleCall)cVisibilityAssignment_1.eContents().get(0);
		private final Keyword cPortKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		
		//Port:
		//	{Port} visibility=Visibility? 'port'
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//{Port} visibility=Visibility? 'port' name=ID
		public Group getGroup() { return cGroup; }
		
		//{Port}
		public Action getPortAction_0() { return cPortAction_0; }
		
		//visibility=Visibility?
		public Assignment getVisibilityAssignment_1() { return cVisibilityAssignment_1; }
		
		//Visibility
		public RuleCall getVisibilityVisibilityEnumRuleCall_1_0() { return cVisibilityVisibilityEnumRuleCall_1_0; }
		
		//'port'
		public Keyword getPortKeyword_2() { return cPortKeyword_2; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
	}
	public class InterfaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.component.Component.Interface");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInterfaceAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cInterfaceKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Assignment cNameAssignment_2_0_0 = (Assignment)cGroup_2_0.eContents().get(0);
		private final RuleCall cNameSTRINGTerminalRuleCall_2_0_0_0 = (RuleCall)cNameAssignment_2_0_0.eContents().get(0);
		private final Keyword cAsKeyword_2_0_1 = (Keyword)cGroup_2_0.eContents().get(1);
		private final Assignment cAliasAssignment_2_0_2 = (Assignment)cGroup_2_0.eContents().get(2);
		private final RuleCall cAliasIDTerminalRuleCall_2_0_2_0 = (RuleCall)cAliasAssignment_2_0_2.eContents().get(0);
		private final Assignment cNameAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_2_1_0 = (RuleCall)cNameAssignment_2_1.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cCommentsAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cCommentsCommentParserRuleCall_3_0_0 = (RuleCall)cCommentsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cCommentsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cCommentsCommentParserRuleCall_3_1_1_0 = (RuleCall)cCommentsAssignment_3_1_1.eContents().get(0);
		private final Assignment cMemberAssignment_3_1_2 = (Assignment)cGroup_3_1.eContents().get(2);
		private final RuleCall cMemberMemberParserRuleCall_3_1_2_0 = (RuleCall)cMemberAssignment_3_1_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_1_3 = (Keyword)cGroup_3_1.eContents().get(3);
		
		//Interface:
		//	{Interface}
		//	'interface' (name=STRING 'as' alias=ID | name=ID) (comments+=Comment? | '{' comments+=Comment? member+=Member* '}');
		@Override public ParserRule getRule() { return rule; }
		
		//{Interface} 'interface' (name=STRING 'as' alias=ID | name=ID) (comments+=Comment? | '{' comments+=Comment?
		//member+=Member* '}')
		public Group getGroup() { return cGroup; }
		
		//{Interface}
		public Action getInterfaceAction_0() { return cInterfaceAction_0; }
		
		//'interface'
		public Keyword getInterfaceKeyword_1() { return cInterfaceKeyword_1; }
		
		//name=STRING 'as' alias=ID | name=ID
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//name=STRING 'as' alias=ID
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//name=STRING
		public Assignment getNameAssignment_2_0_0() { return cNameAssignment_2_0_0; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_2_0_0_0() { return cNameSTRINGTerminalRuleCall_2_0_0_0; }
		
		//'as'
		public Keyword getAsKeyword_2_0_1() { return cAsKeyword_2_0_1; }
		
		//alias=ID
		public Assignment getAliasAssignment_2_0_2() { return cAliasAssignment_2_0_2; }
		
		//ID
		public RuleCall getAliasIDTerminalRuleCall_2_0_2_0() { return cAliasIDTerminalRuleCall_2_0_2_0; }
		
		//name=ID
		public Assignment getNameAssignment_2_1() { return cNameAssignment_2_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_1_0() { return cNameIDTerminalRuleCall_2_1_0; }
		
		//comments+=Comment? | '{' comments+=Comment? member+=Member* '}'
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//comments+=Comment?
		public Assignment getCommentsAssignment_3_0() { return cCommentsAssignment_3_0; }
		
		//Comment
		public RuleCall getCommentsCommentParserRuleCall_3_0_0() { return cCommentsCommentParserRuleCall_3_0_0; }
		
		//'{' comments+=Comment? member+=Member* '}'
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3_1_0() { return cLeftCurlyBracketKeyword_3_1_0; }
		
		//comments+=Comment?
		public Assignment getCommentsAssignment_3_1_1() { return cCommentsAssignment_3_1_1; }
		
		//Comment
		public RuleCall getCommentsCommentParserRuleCall_3_1_1_0() { return cCommentsCommentParserRuleCall_3_1_1_0; }
		
		//member+=Member*
		public Assignment getMemberAssignment_3_1_2() { return cMemberAssignment_3_1_2; }
		
		//Member
		public RuleCall getMemberMemberParserRuleCall_3_1_2_0() { return cMemberMemberParserRuleCall_3_1_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3_1_3() { return cRightCurlyBracketKeyword_3_1_3; }
	}
	public class ConnectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.component.Component.Connector");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cNameAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final RuleCall cNameEStringParserRuleCall_1_0_0_0 = (RuleCall)cNameAssignment_1_0_0.eContents().get(0);
		private final Keyword cAsKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cAliasAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cAliasIDTerminalRuleCall_1_0_2_0 = (RuleCall)cAliasAssignment_1_0_2.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLeftportAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cLeftportPortCrossReference_3_0 = (CrossReference)cLeftportAssignment_3.eContents().get(0);
		private final RuleCall cLeftportPortIDTerminalRuleCall_3_0_1 = (RuleCall)cLeftportPortCrossReference_3_0.eContents().get(1);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cRightportAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cRightportPortCrossReference_5_0 = (CrossReference)cRightportAssignment_5.eContents().get(0);
		private final RuleCall cRightportPortIDTerminalRuleCall_5_0_1 = (RuleCall)cRightportPortCrossReference_5_0.eContents().get(1);
		private final Keyword cCommaKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cInterfaceAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final CrossReference cInterfaceInterfaceCrossReference_7_0 = (CrossReference)cInterfaceAssignment_7.eContents().get(0);
		private final RuleCall cInterfaceInterfaceEStringParserRuleCall_7_0_1 = (RuleCall)cInterfaceInterfaceCrossReference_7_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Connector:
		//	'con' (name=EString 'as' alias=ID | name=ID)
		//	'('
		//	leftport=[Port] ',' rightport=[Port] ',' interface=[Interface|EString]
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//'con' (name=EString 'as' alias=ID | name=ID) '(' leftport=[Port] ',' rightport=[Port] ',' interface=[Interface|EString]
		//')'
		public Group getGroup() { return cGroup; }
		
		//'con'
		public Keyword getConKeyword_0() { return cConKeyword_0; }
		
		//name=EString 'as' alias=ID | name=ID
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//name=EString 'as' alias=ID
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//name=EString
		public Assignment getNameAssignment_1_0_0() { return cNameAssignment_1_0_0; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0_0_0() { return cNameEStringParserRuleCall_1_0_0_0; }
		
		//'as'
		public Keyword getAsKeyword_1_0_1() { return cAsKeyword_1_0_1; }
		
		//alias=ID
		public Assignment getAliasAssignment_1_0_2() { return cAliasAssignment_1_0_2; }
		
		//ID
		public RuleCall getAliasIDTerminalRuleCall_1_0_2_0() { return cAliasIDTerminalRuleCall_1_0_2_0; }
		
		//name=ID
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_1_0() { return cNameIDTerminalRuleCall_1_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//leftport=[Port]
		public Assignment getLeftportAssignment_3() { return cLeftportAssignment_3; }
		
		//[Port]
		public CrossReference getLeftportPortCrossReference_3_0() { return cLeftportPortCrossReference_3_0; }
		
		//ID
		public RuleCall getLeftportPortIDTerminalRuleCall_3_0_1() { return cLeftportPortIDTerminalRuleCall_3_0_1; }
		
		//','
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//rightport=[Port]
		public Assignment getRightportAssignment_5() { return cRightportAssignment_5; }
		
		//[Port]
		public CrossReference getRightportPortCrossReference_5_0() { return cRightportPortCrossReference_5_0; }
		
		//ID
		public RuleCall getRightportPortIDTerminalRuleCall_5_0_1() { return cRightportPortIDTerminalRuleCall_5_0_1; }
		
		//','
		public Keyword getCommaKeyword_6() { return cCommaKeyword_6; }
		
		//interface=[Interface|EString]
		public Assignment getInterfaceAssignment_7() { return cInterfaceAssignment_7; }
		
		//[Interface|EString]
		public CrossReference getInterfaceInterfaceCrossReference_7_0() { return cInterfaceInterfaceCrossReference_7_0; }
		
		//EString
		public RuleCall getInterfaceInterfaceEStringParserRuleCall_7_0_1() { return cInterfaceInterfaceEStringParserRuleCall_7_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_8() { return cRightParenthesisKeyword_8; }
	}
	public class ProvideElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.component.Component.Provide");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cProvideAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cProvideKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cInterfaceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cInterfaceInterfaceCrossReference_2_0 = (CrossReference)cInterfaceAssignment_2.eContents().get(0);
		private final RuleCall cInterfaceInterfaceFQNParserRuleCall_2_0_1 = (RuleCall)cInterfaceInterfaceCrossReference_2_0.eContents().get(1);
		
		//Provide:
		//	{Provide}
		//	'provide' interface=[Interface|FQN];
		@Override public ParserRule getRule() { return rule; }
		
		//{Provide} 'provide' interface=[Interface|FQN]
		public Group getGroup() { return cGroup; }
		
		//{Provide}
		public Action getProvideAction_0() { return cProvideAction_0; }
		
		//'provide'
		public Keyword getProvideKeyword_1() { return cProvideKeyword_1; }
		
		//interface=[Interface|FQN]
		public Assignment getInterfaceAssignment_2() { return cInterfaceAssignment_2; }
		
		//[Interface|FQN]
		public CrossReference getInterfaceInterfaceCrossReference_2_0() { return cInterfaceInterfaceCrossReference_2_0; }
		
		//FQN
		public RuleCall getInterfaceInterfaceFQNParserRuleCall_2_0_1() { return cInterfaceInterfaceFQNParserRuleCall_2_0_1; }
	}
	public class RequireElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.component.Component.Require");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRequireAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRequireKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cInterfaceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cInterfaceInterfaceCrossReference_2_0 = (CrossReference)cInterfaceAssignment_2.eContents().get(0);
		private final RuleCall cInterfaceInterfaceFQNParserRuleCall_2_0_1 = (RuleCall)cInterfaceInterfaceCrossReference_2_0.eContents().get(1);
		
		//Require:
		//	{Require}
		//	'require' interface=[Interface|FQN];
		@Override public ParserRule getRule() { return rule; }
		
		//{Require} 'require' interface=[Interface|FQN]
		public Group getGroup() { return cGroup; }
		
		//{Require}
		public Action getRequireAction_0() { return cRequireAction_0; }
		
		//'require'
		public Keyword getRequireKeyword_1() { return cRequireKeyword_1; }
		
		//interface=[Interface|FQN]
		public Assignment getInterfaceAssignment_2() { return cInterfaceAssignment_2; }
		
		//[Interface|FQN]
		public CrossReference getInterfaceInterfaceCrossReference_2_0() { return cInterfaceInterfaceCrossReference_2_0; }
		
		//FQN
		public RuleCall getInterfaceInterfaceFQNParserRuleCall_2_0_1() { return cInterfaceInterfaceFQNParserRuleCall_2_0_1; }
	}
	public class EBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.component.Component.EBoolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//EBoolean ecore::EBoolean:
		//	'true' | 'false';
		@Override public ParserRule getRule() { return rule; }
		
		//'true' | 'false'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'true'
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }
		
		//'false'
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}
	public class MethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.component.Component.Method");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMethodAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cVisibilityAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVisibilityVisibilityEnumRuleCall_1_0 = (RuleCall)cVisibilityAssignment_1.eContents().get(0);
		private final Assignment cAbstractAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cAbstractAbstractKeyword_2_0 = (Keyword)cAbstractAssignment_2.eContents().get(0);
		private final Assignment cStaticAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cStaticStaticKeyword_3_0 = (Keyword)cStaticAssignment_3.eContents().get(0);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameIDTerminalRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Assignment cParametersAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final RuleCall cParametersParameterParserRuleCall_6_0_0 = (RuleCall)cParametersAssignment_6_0.eContents().get(0);
		private final Group cGroup_6_1 = (Group)cGroup_6.eContents().get(1);
		private final Keyword cCommaKeyword_6_1_0 = (Keyword)cGroup_6_1.eContents().get(0);
		private final Assignment cParametersAssignment_6_1_1 = (Assignment)cGroup_6_1.eContents().get(1);
		private final RuleCall cParametersParameterParserRuleCall_6_1_1_0 = (RuleCall)cParametersAssignment_6_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cColonKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cTypeAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final CrossReference cTypeClassifierCrossReference_8_1_0 = (CrossReference)cTypeAssignment_8_1.eContents().get(0);
		private final RuleCall cTypeClassifierFQNParserRuleCall_8_1_0_1 = (RuleCall)cTypeClassifierCrossReference_8_1_0.eContents().get(1);
		
		//Method:
		//	{Method} visibility=Visibility?
		//	abstract?='abstract'?
		//	static?='static'?
		//	name=ID '(' (parameters+=Parameter (',' parameters+=Parameter)*)* ')' (':' type=[uml::Classifier|FQN])?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Method} visibility=Visibility? abstract?='abstract'? static?='static'? name=ID '(' (parameters+=Parameter (','
		//parameters+=Parameter)*)* ')' (':' type=[uml::Classifier|FQN])?
		public Group getGroup() { return cGroup; }
		
		//{Method}
		public Action getMethodAction_0() { return cMethodAction_0; }
		
		//visibility=Visibility?
		public Assignment getVisibilityAssignment_1() { return cVisibilityAssignment_1; }
		
		//Visibility
		public RuleCall getVisibilityVisibilityEnumRuleCall_1_0() { return cVisibilityVisibilityEnumRuleCall_1_0; }
		
		//abstract?='abstract'?
		public Assignment getAbstractAssignment_2() { return cAbstractAssignment_2; }
		
		//'abstract'
		public Keyword getAbstractAbstractKeyword_2_0() { return cAbstractAbstractKeyword_2_0; }
		
		//static?='static'?
		public Assignment getStaticAssignment_3() { return cStaticAssignment_3; }
		
		//'static'
		public Keyword getStaticStaticKeyword_3_0() { return cStaticStaticKeyword_3_0; }
		
		//name=ID
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_4_0() { return cNameIDTerminalRuleCall_4_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_5() { return cLeftParenthesisKeyword_5; }
		
		//(parameters+=Parameter (',' parameters+=Parameter)*)*
		public Group getGroup_6() { return cGroup_6; }
		
		//parameters+=Parameter
		public Assignment getParametersAssignment_6_0() { return cParametersAssignment_6_0; }
		
		//Parameter
		public RuleCall getParametersParameterParserRuleCall_6_0_0() { return cParametersParameterParserRuleCall_6_0_0; }
		
		//(',' parameters+=Parameter)*
		public Group getGroup_6_1() { return cGroup_6_1; }
		
		//','
		public Keyword getCommaKeyword_6_1_0() { return cCommaKeyword_6_1_0; }
		
		//parameters+=Parameter
		public Assignment getParametersAssignment_6_1_1() { return cParametersAssignment_6_1_1; }
		
		//Parameter
		public RuleCall getParametersParameterParserRuleCall_6_1_1_0() { return cParametersParameterParserRuleCall_6_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
		
		//(':' type=[uml::Classifier|FQN])?
		public Group getGroup_8() { return cGroup_8; }
		
		//':'
		public Keyword getColonKeyword_8_0() { return cColonKeyword_8_0; }
		
		//type=[uml::Classifier|FQN]
		public Assignment getTypeAssignment_8_1() { return cTypeAssignment_8_1; }
		
		//[uml::Classifier|FQN]
		public CrossReference getTypeClassifierCrossReference_8_1_0() { return cTypeClassifierCrossReference_8_1_0; }
		
		//FQN
		public RuleCall getTypeClassifierFQNParserRuleCall_8_1_0_1() { return cTypeClassifierFQNParserRuleCall_8_1_0_1; }
	}
	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.component.Component.Attribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAttributeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cVisibilityAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVisibilityVisibilityEnumRuleCall_1_0 = (RuleCall)cVisibilityAssignment_1.eContents().get(0);
		private final Assignment cStaticAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cStaticStaticKeyword_2_0 = (Keyword)cStaticAssignment_2.eContents().get(0);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cTypeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cTypeClassifierCrossReference_5_0 = (CrossReference)cTypeAssignment_5.eContents().get(0);
		private final RuleCall cTypeClassifierFQNParserRuleCall_5_0_1 = (RuleCall)cTypeClassifierCrossReference_5_0.eContents().get(1);
		
		//Attribute:
		//	{Attribute} visibility=Visibility?
		//	static?='static'?
		//	name=ID ':' type=[uml::Classifier|FQN];
		@Override public ParserRule getRule() { return rule; }
		
		//{Attribute} visibility=Visibility? static?='static'? name=ID ':' type=[uml::Classifier|FQN]
		public Group getGroup() { return cGroup; }
		
		//{Attribute}
		public Action getAttributeAction_0() { return cAttributeAction_0; }
		
		//visibility=Visibility?
		public Assignment getVisibilityAssignment_1() { return cVisibilityAssignment_1; }
		
		//Visibility
		public RuleCall getVisibilityVisibilityEnumRuleCall_1_0() { return cVisibilityVisibilityEnumRuleCall_1_0; }
		
		//static?='static'?
		public Assignment getStaticAssignment_2() { return cStaticAssignment_2; }
		
		//'static'
		public Keyword getStaticStaticKeyword_2_0() { return cStaticStaticKeyword_2_0; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//':'
		public Keyword getColonKeyword_4() { return cColonKeyword_4; }
		
		//type=[uml::Classifier|FQN]
		public Assignment getTypeAssignment_5() { return cTypeAssignment_5; }
		
		//[uml::Classifier|FQN]
		public CrossReference getTypeClassifierCrossReference_5_0() { return cTypeClassifierCrossReference_5_0; }
		
		//FQN
		public RuleCall getTypeClassifierFQNParserRuleCall_5_0_1() { return cTypeClassifierFQNParserRuleCall_5_0_1; }
	}
	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.component.Component.Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVisibilityAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVisibilityVisibilityEnumRuleCall_0_0 = (RuleCall)cVisibilityAssignment_0.eContents().get(0);
		private final Assignment cStaticAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cStaticStaticKeyword_1_0 = (Keyword)cStaticAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cTypeClassifierCrossReference_4_0 = (CrossReference)cTypeAssignment_4.eContents().get(0);
		private final RuleCall cTypeClassifierFQNParserRuleCall_4_0_1 = (RuleCall)cTypeClassifierCrossReference_4_0.eContents().get(1);
		
		//Parameter:
		//	visibility=Visibility?
		//	static?='static'?
		//	name=ID ':' type=[uml::Classifier|FQN];
		@Override public ParserRule getRule() { return rule; }
		
		//visibility=Visibility? static?='static'? name=ID ':' type=[uml::Classifier|FQN]
		public Group getGroup() { return cGroup; }
		
		//visibility=Visibility?
		public Assignment getVisibilityAssignment_0() { return cVisibilityAssignment_0; }
		
		//Visibility
		public RuleCall getVisibilityVisibilityEnumRuleCall_0_0() { return cVisibilityVisibilityEnumRuleCall_0_0; }
		
		//static?='static'?
		public Assignment getStaticAssignment_1() { return cStaticAssignment_1; }
		
		//'static'
		public Keyword getStaticStaticKeyword_1_0() { return cStaticStaticKeyword_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//type=[uml::Classifier|FQN]
		public Assignment getTypeAssignment_4() { return cTypeAssignment_4; }
		
		//[uml::Classifier|FQN]
		public CrossReference getTypeClassifierCrossReference_4_0() { return cTypeClassifierCrossReference_4_0; }
		
		//FQN
		public RuleCall getTypeClassifierFQNParserRuleCall_4_0_1() { return cTypeClassifierFQNParserRuleCall_4_0_1; }
	}
	public class FQNElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.component.Component.FQN");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//FQN:
		//	ID ("." ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ("." ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	
	public class VisibilityElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.component.Component.Visibility");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPublicEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPublicPlusSignKeyword_0_0 = (Keyword)cPublicEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cPublicEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cPublicPublicKeyword_1_0 = (Keyword)cPublicEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cPrivateEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cPrivateHyphenMinusKeyword_2_0 = (Keyword)cPrivateEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cPrivateEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cPrivatePrivateKeyword_3_0 = (Keyword)cPrivateEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cProtectedEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cProtectedNumberSignKeyword_4_0 = (Keyword)cProtectedEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cProtectedEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cProtectedProtectedKeyword_5_0 = (Keyword)cProtectedEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cPackageEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cPackageTildeKeyword_6_0 = (Keyword)cPackageEnumLiteralDeclaration_6.eContents().get(0);
		
		//enum Visibility returns uml::VisibilityKind:
		//	public='+'
		//	| public | private='-'
		//	| private | protected='#'
		//	| protected | package='~';
		public EnumRule getRule() { return rule; }
		
		//public='+' | public | private='-' | private | protected='#' | protected | package='~'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//public='+'
		public EnumLiteralDeclaration getPublicEnumLiteralDeclaration_0() { return cPublicEnumLiteralDeclaration_0; }
		
		//'+'
		public Keyword getPublicPlusSignKeyword_0_0() { return cPublicPlusSignKeyword_0_0; }
		
		//public
		public EnumLiteralDeclaration getPublicEnumLiteralDeclaration_1() { return cPublicEnumLiteralDeclaration_1; }
		
		//'public'
		public Keyword getPublicPublicKeyword_1_0() { return cPublicPublicKeyword_1_0; }
		
		//private='-'
		public EnumLiteralDeclaration getPrivateEnumLiteralDeclaration_2() { return cPrivateEnumLiteralDeclaration_2; }
		
		//'-'
		public Keyword getPrivateHyphenMinusKeyword_2_0() { return cPrivateHyphenMinusKeyword_2_0; }
		
		//private
		public EnumLiteralDeclaration getPrivateEnumLiteralDeclaration_3() { return cPrivateEnumLiteralDeclaration_3; }
		
		//'private'
		public Keyword getPrivatePrivateKeyword_3_0() { return cPrivatePrivateKeyword_3_0; }
		
		//protected='#'
		public EnumLiteralDeclaration getProtectedEnumLiteralDeclaration_4() { return cProtectedEnumLiteralDeclaration_4; }
		
		//'#'
		public Keyword getProtectedNumberSignKeyword_4_0() { return cProtectedNumberSignKeyword_4_0; }
		
		//protected
		public EnumLiteralDeclaration getProtectedEnumLiteralDeclaration_5() { return cProtectedEnumLiteralDeclaration_5; }
		
		//'protected'
		public Keyword getProtectedProtectedKeyword_5_0() { return cProtectedProtectedKeyword_5_0; }
		
		//package='~'
		public EnumLiteralDeclaration getPackageEnumLiteralDeclaration_6() { return cPackageEnumLiteralDeclaration_6; }
		
		//'~'
		public Keyword getPackageTildeKeyword_6_0() { return cPackageTildeKeyword_6_0; }
	}
	
	private final ComponentDiagramElements pComponentDiagram;
	private final ClassifierRelationElements pClassifierRelation;
	private final ClassifierElements pClassifier;
	private final NameStringElements pNameString;
	private final PortRelationElements pPortRelation;
	private final InterfaceRelationElements pInterfaceRelation;
	private final MemberElements pMember;
	private final EStringElements pEString;
	private final RootPackageElements pRootPackage;
	private final ComponentElements pComponent;
	private final GeneralizationElements pGeneralization;
	private final AbstractionElements pAbstraction;
	private final ManifestationElements pManifestation;
	private final SubstitutionElements pSubstitution;
	private final DependencyElements pDependency;
	private final CommentElements pComment;
	private final PortElements pPort;
	private final InterfaceElements pInterface;
	private final ConnectorElements pConnector;
	private final ProvideElements pProvide;
	private final RequireElements pRequire;
	private final VisibilityElements eVisibility;
	private final EBooleanElements pEBoolean;
	private final MethodElements pMethod;
	private final AttributeElements pAttribute;
	private final ParameterElements pParameter;
	private final FQNElements pFQN;
	private final TerminalRule tID;
	private final TerminalRule tUNDERSCORE;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public ComponentGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pComponentDiagram = new ComponentDiagramElements();
		this.pClassifierRelation = new ClassifierRelationElements();
		this.pClassifier = new ClassifierElements();
		this.pNameString = new NameStringElements();
		this.pPortRelation = new PortRelationElements();
		this.pInterfaceRelation = new InterfaceRelationElements();
		this.pMember = new MemberElements();
		this.pEString = new EStringElements();
		this.pRootPackage = new RootPackageElements();
		this.pComponent = new ComponentElements();
		this.pGeneralization = new GeneralizationElements();
		this.pAbstraction = new AbstractionElements();
		this.pManifestation = new ManifestationElements();
		this.pSubstitution = new SubstitutionElements();
		this.pDependency = new DependencyElements();
		this.pComment = new CommentElements();
		this.pPort = new PortElements();
		this.pInterface = new InterfaceElements();
		this.pConnector = new ConnectorElements();
		this.pProvide = new ProvideElements();
		this.pRequire = new RequireElements();
		this.eVisibility = new VisibilityElements();
		this.pEBoolean = new EBooleanElements();
		this.pMethod = new MethodElements();
		this.pAttribute = new AttributeElements();
		this.pParameter = new ParameterElements();
		this.pFQN = new FQNElements();
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.component.Component.ID");
		this.tUNDERSCORE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.component.Component.UNDERSCORE");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.cooperateproject.modeling.textual.component.Component".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//ComponentDiagram:
	//	{ComponentDiagram}
	//	'@start-cpd' title=EString
	//	rootpackage=RootPackage
	//	'@end-cpd';
	public ComponentDiagramElements getComponentDiagramAccess() {
		return pComponentDiagram;
	}
	
	public ParserRule getComponentDiagramRule() {
		return getComponentDiagramAccess().getRule();
	}
	
	//ClassifierRelation:
	//	Generalization | Abstraction | Manifestation | Substitution | Dependency;
	public ClassifierRelationElements getClassifierRelationAccess() {
		return pClassifierRelation;
	}
	
	public ParserRule getClassifierRelationRule() {
		return getClassifierRelationAccess().getRule();
	}
	
	//Classifier:
	//	Interface | Component;
	public ClassifierElements getClassifierAccess() {
		return pClassifier;
	}
	
	public ParserRule getClassifierRule() {
		return getClassifierAccess().getRule();
	}
	
	//NameString:
	//	STRING;
	public NameStringElements getNameStringAccess() {
		return pNameString;
	}
	
	public ParserRule getNameStringRule() {
		return getNameStringAccess().getRule();
	}
	
	//PortRelation:
	//	Connector;
	public PortRelationElements getPortRelationAccess() {
		return pPortRelation;
	}
	
	public ParserRule getPortRelationRule() {
		return getPortRelationAccess().getRule();
	}
	
	//InterfaceRelation:
	//	Provide | Require;
	public InterfaceRelationElements getInterfaceRelationAccess() {
		return pInterfaceRelation;
	}
	
	public ParserRule getInterfaceRelationRule() {
		return getInterfaceRelationAccess().getRule();
	}
	
	//Member:
	//	Method | Attribute;
	public MemberElements getMemberAccess() {
		return pMember;
	}
	
	public ParserRule getMemberRule() {
		return getMemberAccess().getRule();
	}
	
	//EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//RootPackage:
	//	{RootPackage}
	//	'rootPackage' name=FQN
	//	classifier+=Classifier*
	//	relation+=ClassifierRelation*;
	public RootPackageElements getRootPackageAccess() {
		return pRootPackage;
	}
	
	public ParserRule getRootPackageRule() {
		return getRootPackageAccess().getRule();
	}
	
	//Component:
	//	{Component}
	//	'component' (name=STRING 'as' alias=ID | name=ID) '{' (comments+=Comment?
	//	component+=Component*
	//	port+=Port*
	//	portrelation+=PortRelation*
	//	interfacerelation+=InterfaceRelation*
	//	interface+=Interface*) '}';
	public ComponentElements getComponentAccess() {
		return pComponent;
	}
	
	public ParserRule getComponentRule() {
		return getComponentAccess().getRule();
	}
	
	//Generalization:
	//	'isa' '(' leftclassifier=[Classifier|EString] "," rightclassifier=[Classifier|EString] ')';
	public GeneralizationElements getGeneralizationAccess() {
		return pGeneralization;
	}
	
	public ParserRule getGeneralizationRule() {
		return getGeneralizationAccess().getRule();
	}
	
	//Abstraction:
	//	'abs' '(' leftclassifier=[Classifier|EString] "," rightclassifier=[Classifier|EString] ')';
	public AbstractionElements getAbstractionAccess() {
		return pAbstraction;
	}
	
	public ParserRule getAbstractionRule() {
		return getAbstractionAccess().getRule();
	}
	
	//Manifestation:
	//	'man' '(' leftclassifier=[Classifier|EString] "," rightclassifier=[Classifier|EString] ')';
	public ManifestationElements getManifestationAccess() {
		return pManifestation;
	}
	
	public ParserRule getManifestationRule() {
		return getManifestationAccess().getRule();
	}
	
	//Substitution:
	//	'sub' '(' leftclassifier=[Classifier|EString] "," rightclassifier=[Classifier|EString] ')';
	public SubstitutionElements getSubstitutionAccess() {
		return pSubstitution;
	}
	
	public ParserRule getSubstitutionRule() {
		return getSubstitutionAccess().getRule();
	}
	
	//Dependency:
	//	'dep' '(' leftclassifier=[Classifier|EString] "," rightclassifier=[Classifier|EString] ')';
	public DependencyElements getDependencyAccess() {
		return pDependency;
	}
	
	public ParserRule getDependencyRule() {
		return getDependencyAccess().getRule();
	}
	
	//Comment textualCommons::Comment:
	//	'note' body=EString;
	public CommentElements getCommentAccess() {
		return pComment;
	}
	
	public ParserRule getCommentRule() {
		return getCommentAccess().getRule();
	}
	
	//Port:
	//	{Port} visibility=Visibility? 'port'
	//	name=ID;
	public PortElements getPortAccess() {
		return pPort;
	}
	
	public ParserRule getPortRule() {
		return getPortAccess().getRule();
	}
	
	//Interface:
	//	{Interface}
	//	'interface' (name=STRING 'as' alias=ID | name=ID) (comments+=Comment? | '{' comments+=Comment? member+=Member* '}');
	public InterfaceElements getInterfaceAccess() {
		return pInterface;
	}
	
	public ParserRule getInterfaceRule() {
		return getInterfaceAccess().getRule();
	}
	
	//Connector:
	//	'con' (name=EString 'as' alias=ID | name=ID)
	//	'('
	//	leftport=[Port] ',' rightport=[Port] ',' interface=[Interface|EString]
	//	')';
	public ConnectorElements getConnectorAccess() {
		return pConnector;
	}
	
	public ParserRule getConnectorRule() {
		return getConnectorAccess().getRule();
	}
	
	//Provide:
	//	{Provide}
	//	'provide' interface=[Interface|FQN];
	public ProvideElements getProvideAccess() {
		return pProvide;
	}
	
	public ParserRule getProvideRule() {
		return getProvideAccess().getRule();
	}
	
	//Require:
	//	{Require}
	//	'require' interface=[Interface|FQN];
	public RequireElements getRequireAccess() {
		return pRequire;
	}
	
	public ParserRule getRequireRule() {
		return getRequireAccess().getRule();
	}
	
	//enum Visibility returns uml::VisibilityKind:
	//	public='+'
	//	| public | private='-'
	//	| private | protected='#'
	//	| protected | package='~';
	public VisibilityElements getVisibilityAccess() {
		return eVisibility;
	}
	
	public EnumRule getVisibilityRule() {
		return getVisibilityAccess().getRule();
	}
	
	//EBoolean ecore::EBoolean:
	//	'true' | 'false';
	public EBooleanElements getEBooleanAccess() {
		return pEBoolean;
	}
	
	public ParserRule getEBooleanRule() {
		return getEBooleanAccess().getRule();
	}
	
	//Method:
	//	{Method} visibility=Visibility?
	//	abstract?='abstract'?
	//	static?='static'?
	//	name=ID '(' (parameters+=Parameter (',' parameters+=Parameter)*)* ')' (':' type=[uml::Classifier|FQN])?;
	public MethodElements getMethodAccess() {
		return pMethod;
	}
	
	public ParserRule getMethodRule() {
		return getMethodAccess().getRule();
	}
	
	//Attribute:
	//	{Attribute} visibility=Visibility?
	//	static?='static'?
	//	name=ID ':' type=[uml::Classifier|FQN];
	public AttributeElements getAttributeAccess() {
		return pAttribute;
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}
	
	//Parameter:
	//	visibility=Visibility?
	//	static?='static'?
	//	name=ID ':' type=[uml::Classifier|FQN];
	public ParameterElements getParameterAccess() {
		return pParameter;
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}
	
	//FQN:
	//	ID ("." ID)*;
	public FQNElements getFQNAccess() {
		return pFQN;
	}
	
	public ParserRule getFQNRule() {
		return getFQNAccess().getRule();
	}
	
	//@ Override terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return tID;
	}
	
	//terminal UNDERSCORE:
	//	'_';
	public TerminalRule getUNDERSCORERule() {
		return tUNDERSCORE;
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
