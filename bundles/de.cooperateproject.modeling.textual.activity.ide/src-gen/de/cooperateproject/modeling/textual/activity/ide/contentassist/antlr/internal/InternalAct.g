/*
 * generated by Xtext 2.12.0
 */
grammar InternalAct;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package de.cooperateproject.modeling.textual.activity.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package de.cooperateproject.modeling.textual.activity.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import de.cooperateproject.modeling.textual.activity.services.ActGrammarAccess;

}
@parser::members {
	private ActGrammarAccess grammarAccess;

	public void setGrammarAccess(ActGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleActivityDiagram
entryRuleActivityDiagram
:
{ before(grammarAccess.getActivityDiagramRule()); }
	 ruleActivityDiagram
{ after(grammarAccess.getActivityDiagramRule()); } 
	 EOF 
;

// Rule ActivityDiagram
ruleActivityDiagram 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getActivityDiagramAccess().getGroup()); }
		(rule__ActivityDiagram__Group__0)
		{ after(grammarAccess.getActivityDiagramAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRootPackage
entryRuleRootPackage
:
{ before(grammarAccess.getRootPackageRule()); }
	 ruleRootPackage
{ after(grammarAccess.getRootPackageRule()); } 
	 EOF 
;

// Rule RootPackage
ruleRootPackage 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRootPackageAccess().getGroup()); }
		(rule__RootPackage__Group__0)
		{ after(grammarAccess.getRootPackageAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNode
entryRuleNode
:
{ before(grammarAccess.getNodeRule()); }
	 ruleNode
{ after(grammarAccess.getNodeRule()); } 
	 EOF 
;

// Rule Node
ruleNode 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNodeAccess().getAlternatives()); }
		(rule__Node__Alternatives)
		{ after(grammarAccess.getNodeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleActionNode
entryRuleActionNode
:
{ before(grammarAccess.getActionNodeRule()); }
	 ruleActionNode
{ after(grammarAccess.getActionNodeRule()); } 
	 EOF 
;

// Rule ActionNode
ruleActionNode 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getActionNodeAccess().getGroup()); }
		(rule__ActionNode__Group__0)
		{ after(grammarAccess.getActionNodeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleControlNode
entryRuleControlNode
:
{ before(grammarAccess.getControlNodeRule()); }
	 ruleControlNode
{ after(grammarAccess.getControlNodeRule()); } 
	 EOF 
;

// Rule ControlNode
ruleControlNode 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getControlNodeAccess().getAlternatives()); }
		(rule__ControlNode__Alternatives)
		{ after(grammarAccess.getControlNodeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleInitialNode
entryRuleInitialNode
:
{ before(grammarAccess.getInitialNodeRule()); }
	 ruleInitialNode
{ after(grammarAccess.getInitialNodeRule()); } 
	 EOF 
;

// Rule InitialNode
ruleInitialNode 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getInitialNodeAccess().getGroup()); }
		(rule__InitialNode__Group__0)
		{ after(grammarAccess.getInitialNodeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFinalNode
entryRuleFinalNode
:
{ before(grammarAccess.getFinalNodeRule()); }
	 ruleFinalNode
{ after(grammarAccess.getFinalNodeRule()); } 
	 EOF 
;

// Rule FinalNode
ruleFinalNode 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFinalNodeAccess().getGroup()); }
		(rule__FinalNode__Group__0)
		{ after(grammarAccess.getFinalNodeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFlowFinalNode
entryRuleFlowFinalNode
:
{ before(grammarAccess.getFlowFinalNodeRule()); }
	 ruleFlowFinalNode
{ after(grammarAccess.getFlowFinalNodeRule()); } 
	 EOF 
;

// Rule FlowFinalNode
ruleFlowFinalNode 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFlowFinalNodeAccess().getGroup()); }
		(rule__FlowFinalNode__Group__0)
		{ after(grammarAccess.getFlowFinalNodeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDecisionNode
entryRuleDecisionNode
:
{ before(grammarAccess.getDecisionNodeRule()); }
	 ruleDecisionNode
{ after(grammarAccess.getDecisionNodeRule()); } 
	 EOF 
;

// Rule DecisionNode
ruleDecisionNode 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDecisionNodeAccess().getGroup()); }
		(rule__DecisionNode__Group__0)
		{ after(grammarAccess.getDecisionNodeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMergeNode
entryRuleMergeNode
:
{ before(grammarAccess.getMergeNodeRule()); }
	 ruleMergeNode
{ after(grammarAccess.getMergeNodeRule()); } 
	 EOF 
;

// Rule MergeNode
ruleMergeNode 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMergeNodeAccess().getGroup()); }
		(rule__MergeNode__Group__0)
		{ after(grammarAccess.getMergeNodeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFlow
entryRuleFlow
:
{ before(grammarAccess.getFlowRule()); }
	 ruleFlow
{ after(grammarAccess.getFlowRule()); } 
	 EOF 
;

// Rule Flow
ruleFlow 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFlowAccess().getGroup()); }
		(rule__Flow__Group__0)
		{ after(grammarAccess.getFlowAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFQN
entryRuleFQN
:
{ before(grammarAccess.getFQNRule()); }
	 ruleFQN
{ after(grammarAccess.getFQNRule()); } 
	 EOF 
;

// Rule FQN
ruleFQN 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFQNAccess().getGroup()); }
		(rule__FQN__Group__0)
		{ after(grammarAccess.getFQNAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Node__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNodeAccess().getActionNodeParserRuleCall_0()); }
		ruleActionNode
		{ after(grammarAccess.getNodeAccess().getActionNodeParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getNodeAccess().getControlNodeParserRuleCall_1()); }
		ruleControlNode
		{ after(grammarAccess.getNodeAccess().getControlNodeParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionNode__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActionNodeAccess().getNameAssignment_1_0()); }
		(rule__ActionNode__NameAssignment_1_0)
		{ after(grammarAccess.getActionNodeAccess().getNameAssignment_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getActionNodeAccess().getGroup_1_1()); }
		(rule__ActionNode__Group_1_1__0)
		{ after(grammarAccess.getActionNodeAccess().getGroup_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ControlNode__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getControlNodeAccess().getInitialNodeParserRuleCall_0()); }
		ruleInitialNode
		{ after(grammarAccess.getControlNodeAccess().getInitialNodeParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getControlNodeAccess().getFinalNodeParserRuleCall_1()); }
		ruleFinalNode
		{ after(grammarAccess.getControlNodeAccess().getFinalNodeParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getControlNodeAccess().getFlowFinalNodeParserRuleCall_2()); }
		ruleFlowFinalNode
		{ after(grammarAccess.getControlNodeAccess().getFlowFinalNodeParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getControlNodeAccess().getDecisionNodeParserRuleCall_3()); }
		ruleDecisionNode
		{ after(grammarAccess.getControlNodeAccess().getDecisionNodeParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getControlNodeAccess().getMergeNodeParserRuleCall_4()); }
		ruleMergeNode
		{ after(grammarAccess.getControlNodeAccess().getMergeNodeParserRuleCall_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ActivityDiagram__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ActivityDiagram__Group__0__Impl
	rule__ActivityDiagram__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ActivityDiagram__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActivityDiagramAccess().getActivityDiagramAction_0()); }
	()
	{ after(grammarAccess.getActivityDiagramAccess().getActivityDiagramAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ActivityDiagram__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ActivityDiagram__Group__1__Impl
	rule__ActivityDiagram__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ActivityDiagram__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActivityDiagramAccess().getStartActdKeyword_1()); }
	'@start-actd'
	{ after(grammarAccess.getActivityDiagramAccess().getStartActdKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ActivityDiagram__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ActivityDiagram__Group__2__Impl
	rule__ActivityDiagram__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ActivityDiagram__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActivityDiagramAccess().getTitleAssignment_2()); }
	(rule__ActivityDiagram__TitleAssignment_2)
	{ after(grammarAccess.getActivityDiagramAccess().getTitleAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ActivityDiagram__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ActivityDiagram__Group__3__Impl
	rule__ActivityDiagram__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ActivityDiagram__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActivityDiagramAccess().getRootPackageAssignment_3()); }
	(rule__ActivityDiagram__RootPackageAssignment_3)
	{ after(grammarAccess.getActivityDiagramAccess().getRootPackageAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ActivityDiagram__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ActivityDiagram__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ActivityDiagram__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActivityDiagramAccess().getEndActdKeyword_4()); }
	'@end-actd'
	{ after(grammarAccess.getActivityDiagramAccess().getEndActdKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RootPackage__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RootPackage__Group__0__Impl
	rule__RootPackage__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RootPackage__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRootPackageAccess().getRootPackageAction_0()); }
	()
	{ after(grammarAccess.getRootPackageAccess().getRootPackageAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RootPackage__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RootPackage__Group__1__Impl
	rule__RootPackage__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RootPackage__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRootPackageAccess().getGroup_1()); }
	(rule__RootPackage__Group_1__0)?
	{ after(grammarAccess.getRootPackageAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RootPackage__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RootPackage__Group__2__Impl
	rule__RootPackage__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__RootPackage__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRootPackageAccess().getGroup_2()); }
	(rule__RootPackage__Group_2__0)?
	{ after(grammarAccess.getRootPackageAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RootPackage__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RootPackage__Group__3__Impl
	rule__RootPackage__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__RootPackage__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRootPackageAccess().getNodesAssignment_3()); }
	(rule__RootPackage__NodesAssignment_3)*
	{ after(grammarAccess.getRootPackageAccess().getNodesAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RootPackage__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RootPackage__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RootPackage__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRootPackageAccess().getRelationsAssignment_4()); }
	(rule__RootPackage__RelationsAssignment_4)*
	{ after(grammarAccess.getRootPackageAccess().getRelationsAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RootPackage__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RootPackage__Group_1__0__Impl
	rule__RootPackage__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RootPackage__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRootPackageAccess().getRootPackageKeyword_1_0()); }
	'rootPackage'
	{ after(grammarAccess.getRootPackageAccess().getRootPackageKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RootPackage__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RootPackage__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RootPackage__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRootPackageAccess().getNameAssignment_1_1()); }
	(rule__RootPackage__NameAssignment_1_1)
	{ after(grammarAccess.getRootPackageAccess().getNameAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RootPackage__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RootPackage__Group_2__0__Impl
	rule__RootPackage__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RootPackage__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRootPackageAccess().getActivityNameKeyword_2_0()); }
	'activityName'
	{ after(grammarAccess.getRootPackageAccess().getActivityNameKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RootPackage__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RootPackage__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RootPackage__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRootPackageAccess().getActivityNameAssignment_2_1()); }
	(rule__RootPackage__ActivityNameAssignment_2_1)
	{ after(grammarAccess.getRootPackageAccess().getActivityNameAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ActionNode__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ActionNode__Group__0__Impl
	rule__ActionNode__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionNode__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActionNodeAccess().getActnKeyword_0()); }
	'actn'
	{ after(grammarAccess.getActionNodeAccess().getActnKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionNode__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ActionNode__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionNode__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActionNodeAccess().getAlternatives_1()); }
	(rule__ActionNode__Alternatives_1)
	{ after(grammarAccess.getActionNodeAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ActionNode__Group_1_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ActionNode__Group_1_1__0__Impl
	rule__ActionNode__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionNode__Group_1_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActionNodeAccess().getNameAssignment_1_1_0()); }
	(rule__ActionNode__NameAssignment_1_1_0)
	{ after(grammarAccess.getActionNodeAccess().getNameAssignment_1_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionNode__Group_1_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ActionNode__Group_1_1__1__Impl
	rule__ActionNode__Group_1_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionNode__Group_1_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActionNodeAccess().getAsKeyword_1_1_1()); }
	'as'
	{ after(grammarAccess.getActionNodeAccess().getAsKeyword_1_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionNode__Group_1_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ActionNode__Group_1_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionNode__Group_1_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActionNodeAccess().getAliasAssignment_1_1_2()); }
	(rule__ActionNode__AliasAssignment_1_1_2)
	{ after(grammarAccess.getActionNodeAccess().getAliasAssignment_1_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__InitialNode__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InitialNode__Group__0__Impl
	rule__InitialNode__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InitialNode__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInitialNodeAccess().getInitialNodeAction_0()); }
	()
	{ after(grammarAccess.getInitialNodeAccess().getInitialNodeAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__InitialNode__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InitialNode__Group__1__Impl
	rule__InitialNode__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__InitialNode__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInitialNodeAccess().getIniKeyword_1()); }
	'ini'
	{ after(grammarAccess.getInitialNodeAccess().getIniKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__InitialNode__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InitialNode__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InitialNode__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInitialNodeAccess().getNameAssignment_2()); }
	(rule__InitialNode__NameAssignment_2)?
	{ after(grammarAccess.getInitialNodeAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FinalNode__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FinalNode__Group__0__Impl
	rule__FinalNode__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FinalNode__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFinalNodeAccess().getFinalNodeAction_0()); }
	()
	{ after(grammarAccess.getFinalNodeAccess().getFinalNodeAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FinalNode__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FinalNode__Group__1__Impl
	rule__FinalNode__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FinalNode__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFinalNodeAccess().getFinKeyword_1()); }
	'fin'
	{ after(grammarAccess.getFinalNodeAccess().getFinKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FinalNode__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FinalNode__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FinalNode__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFinalNodeAccess().getNameAssignment_2()); }
	(rule__FinalNode__NameAssignment_2)?
	{ after(grammarAccess.getFinalNodeAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FlowFinalNode__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FlowFinalNode__Group__0__Impl
	rule__FlowFinalNode__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FlowFinalNode__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFlowFinalNodeAccess().getFlowFinalNodeAction_0()); }
	()
	{ after(grammarAccess.getFlowFinalNodeAccess().getFlowFinalNodeAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FlowFinalNode__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FlowFinalNode__Group__1__Impl
	rule__FlowFinalNode__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FlowFinalNode__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFlowFinalNodeAccess().getFfinKeyword_1()); }
	'ffin'
	{ after(grammarAccess.getFlowFinalNodeAccess().getFfinKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FlowFinalNode__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FlowFinalNode__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FlowFinalNode__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFlowFinalNodeAccess().getNameAssignment_2()); }
	(rule__FlowFinalNode__NameAssignment_2)?
	{ after(grammarAccess.getFlowFinalNodeAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DecisionNode__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DecisionNode__Group__0__Impl
	rule__DecisionNode__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DecisionNode__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDecisionNodeAccess().getDecnKeyword_0()); }
	'decn'
	{ after(grammarAccess.getDecisionNodeAccess().getDecnKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DecisionNode__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DecisionNode__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DecisionNode__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDecisionNodeAccess().getNameAssignment_1()); }
	(rule__DecisionNode__NameAssignment_1)
	{ after(grammarAccess.getDecisionNodeAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MergeNode__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MergeNode__Group__0__Impl
	rule__MergeNode__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MergeNode__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMergeNodeAccess().getMrgnKeyword_0()); }
	'mrgn'
	{ after(grammarAccess.getMergeNodeAccess().getMrgnKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MergeNode__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MergeNode__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MergeNode__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMergeNodeAccess().getNameAssignment_1()); }
	(rule__MergeNode__NameAssignment_1)
	{ after(grammarAccess.getMergeNodeAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Flow__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Flow__Group__0__Impl
	rule__Flow__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Flow__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFlowAccess().getFlwKeyword_0()); }
	'flw'
	{ after(grammarAccess.getFlowAccess().getFlwKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Flow__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Flow__Group__1__Impl
	rule__Flow__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Flow__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFlowAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getFlowAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Flow__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Flow__Group__2__Impl
	rule__Flow__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Flow__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFlowAccess().getRelatedElementsAssignment_2()); }
	(rule__Flow__RelatedElementsAssignment_2)
	{ after(grammarAccess.getFlowAccess().getRelatedElementsAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Flow__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Flow__Group__3__Impl
	rule__Flow__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Flow__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFlowAccess().getGroup_3()); }
	(rule__Flow__Group_3__0)*
	{ after(grammarAccess.getFlowAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Flow__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Flow__Group__4__Impl
	rule__Flow__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Flow__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFlowAccess().getRightParenthesisKeyword_4()); }
	')'
	{ after(grammarAccess.getFlowAccess().getRightParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Flow__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Flow__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Flow__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFlowAccess().getGroup_5()); }
	(rule__Flow__Group_5__0)?
	{ after(grammarAccess.getFlowAccess().getGroup_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Flow__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Flow__Group_3__0__Impl
	rule__Flow__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Flow__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFlowAccess().getCommaKeyword_3_0()); }
	','
	{ after(grammarAccess.getFlowAccess().getCommaKeyword_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Flow__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Flow__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Flow__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFlowAccess().getRelatedElementsAssignment_3_1()); }
	(rule__Flow__RelatedElementsAssignment_3_1)
	{ after(grammarAccess.getFlowAccess().getRelatedElementsAssignment_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Flow__Group_5__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Flow__Group_5__0__Impl
	rule__Flow__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Flow__Group_5__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFlowAccess().getLeftSquareBracketKeyword_5_0()); }
	'['
	{ after(grammarAccess.getFlowAccess().getLeftSquareBracketKeyword_5_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Flow__Group_5__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Flow__Group_5__1__Impl
	rule__Flow__Group_5__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Flow__Group_5__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFlowAccess().getConditionAssignment_5_1()); }
	(rule__Flow__ConditionAssignment_5_1)
	{ after(grammarAccess.getFlowAccess().getConditionAssignment_5_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Flow__Group_5__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Flow__Group_5__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Flow__Group_5__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFlowAccess().getRightSquareBracketKeyword_5_2()); }
	']'
	{ after(grammarAccess.getFlowAccess().getRightSquareBracketKeyword_5_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FQN__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FQN__Group__0__Impl
	rule__FQN__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FQN__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFQNAccess().getIDTerminalRuleCall_0()); }
	RULE_ID
	{ after(grammarAccess.getFQNAccess().getIDTerminalRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FQN__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FQN__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FQN__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFQNAccess().getGroup_1()); }
	(rule__FQN__Group_1__0)*
	{ after(grammarAccess.getFQNAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FQN__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FQN__Group_1__0__Impl
	rule__FQN__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FQN__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFQNAccess().getFullStopKeyword_1_0()); }
	'.'
	{ after(grammarAccess.getFQNAccess().getFullStopKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FQN__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FQN__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FQN__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFQNAccess().getIDTerminalRuleCall_1_1()); }
	RULE_ID
	{ after(grammarAccess.getFQNAccess().getIDTerminalRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ActivityDiagram__TitleAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActivityDiagramAccess().getTitleSTRINGTerminalRuleCall_2_0()); }
		RULE_STRING
		{ after(grammarAccess.getActivityDiagramAccess().getTitleSTRINGTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ActivityDiagram__RootPackageAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActivityDiagramAccess().getRootPackageRootPackageParserRuleCall_3_0()); }
		ruleRootPackage
		{ after(grammarAccess.getActivityDiagramAccess().getRootPackageRootPackageParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RootPackage__NameAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRootPackageAccess().getNameFQNParserRuleCall_1_1_0()); }
		ruleFQN
		{ after(grammarAccess.getRootPackageAccess().getNameFQNParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RootPackage__ActivityNameAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRootPackageAccess().getActivityNameSTRINGTerminalRuleCall_2_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getRootPackageAccess().getActivityNameSTRINGTerminalRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RootPackage__NodesAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRootPackageAccess().getNodesNodeParserRuleCall_3_0()); }
		ruleNode
		{ after(grammarAccess.getRootPackageAccess().getNodesNodeParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RootPackage__RelationsAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRootPackageAccess().getRelationsFlowParserRuleCall_4_0()); }
		ruleFlow
		{ after(grammarAccess.getRootPackageAccess().getRelationsFlowParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionNode__NameAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActionNodeAccess().getNameIDTerminalRuleCall_1_0_0()); }
		RULE_ID
		{ after(grammarAccess.getActionNodeAccess().getNameIDTerminalRuleCall_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionNode__NameAssignment_1_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActionNodeAccess().getNameIDTerminalRuleCall_1_1_0_0()); }
		RULE_ID
		{ after(grammarAccess.getActionNodeAccess().getNameIDTerminalRuleCall_1_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionNode__AliasAssignment_1_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActionNodeAccess().getAliasSTRINGTerminalRuleCall_1_1_2_0()); }
		RULE_STRING
		{ after(grammarAccess.getActionNodeAccess().getAliasSTRINGTerminalRuleCall_1_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__InitialNode__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInitialNodeAccess().getNameIDTerminalRuleCall_2_0()); }
		RULE_ID
		{ after(grammarAccess.getInitialNodeAccess().getNameIDTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FinalNode__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFinalNodeAccess().getNameIDTerminalRuleCall_2_0()); }
		RULE_ID
		{ after(grammarAccess.getFinalNodeAccess().getNameIDTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FlowFinalNode__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFlowFinalNodeAccess().getNameIDTerminalRuleCall_2_0()); }
		RULE_ID
		{ after(grammarAccess.getFlowFinalNodeAccess().getNameIDTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DecisionNode__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDecisionNodeAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getDecisionNodeAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MergeNode__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMergeNodeAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getMergeNodeAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Flow__RelatedElementsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFlowAccess().getRelatedElementsNodeCrossReference_2_0()); }
		(
			{ before(grammarAccess.getFlowAccess().getRelatedElementsNodeIDTerminalRuleCall_2_0_1()); }
			RULE_ID
			{ after(grammarAccess.getFlowAccess().getRelatedElementsNodeIDTerminalRuleCall_2_0_1()); }
		)
		{ after(grammarAccess.getFlowAccess().getRelatedElementsNodeCrossReference_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Flow__RelatedElementsAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFlowAccess().getRelatedElementsNodeCrossReference_3_1_0()); }
		(
			{ before(grammarAccess.getFlowAccess().getRelatedElementsNodeIDTerminalRuleCall_3_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getFlowAccess().getRelatedElementsNodeIDTerminalRuleCall_3_1_0_1()); }
		)
		{ after(grammarAccess.getFlowAccess().getRelatedElementsNodeCrossReference_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Flow__ConditionAssignment_5_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFlowAccess().getConditionIDTerminalRuleCall_5_1_0()); }
		RULE_ID
		{ after(grammarAccess.getFlowAccess().getConditionIDTerminalRuleCall_5_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
