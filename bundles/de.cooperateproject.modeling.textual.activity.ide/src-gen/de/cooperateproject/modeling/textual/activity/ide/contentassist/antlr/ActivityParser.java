/*
 * generated by Xtext
 */
package de.cooperateproject.modeling.textual.activity.ide.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import de.cooperateproject.modeling.textual.activity.services.ActivityGrammarAccess;

public class ActivityParser extends AbstractContentAssistParser {
	
	@Inject
	private ActivityGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected de.cooperateproject.modeling.textual.activity.ide.contentassist.antlr.internal.InternalActivityParser createParser() {
		de.cooperateproject.modeling.textual.activity.ide.contentassist.antlr.internal.InternalActivityParser result = new de.cooperateproject.modeling.textual.activity.ide.contentassist.antlr.internal.InternalActivityParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getActivityDiagramAccess().getAlternatives_2(), "rule__ActivityDiagram__Alternatives_2");
					put(grammarAccess.getNameAccess().getLongNameAlternatives_0_0_0(), "rule__Name__LongNameAlternatives_0_0_0");
					put(grammarAccess.getReferenceAccess().getAlternatives(), "rule__Reference__Alternatives");
					put(grammarAccess.getStartEndEnumAccess().getAlternatives(), "rule__StartEndEnum__Alternatives");
					put(grammarAccess.getActivityDiagramAccess().getGroup(), "rule__ActivityDiagram__Group__0");
					put(grammarAccess.getActionAccess().getGroup(), "rule__Action__Group__0");
					put(grammarAccess.getConditionAccess().getGroup(), "rule__Condition__Group__0");
					put(grammarAccess.getForkAccess().getGroup(), "rule__Fork__Group__0");
					put(grammarAccess.getNameAccess().getGroup(), "rule__Name__Group__0");
					put(grammarAccess.getNameAccess().getGroup_0(), "rule__Name__Group_0__0");
					put(grammarAccess.getAssociationAccess().getGroup(), "rule__Association__Group__0");
					put(grammarAccess.getCommentAccess().getGroup(), "rule__Comment__Group__0");
					put(grammarAccess.getActivityDiagramAccess().getActionsAssignment_2_0(), "rule__ActivityDiagram__ActionsAssignment_2_0");
					put(grammarAccess.getActivityDiagramAccess().getConditionsAssignment_2_1(), "rule__ActivityDiagram__ConditionsAssignment_2_1");
					put(grammarAccess.getActivityDiagramAccess().getForksAssignment_2_2(), "rule__ActivityDiagram__ForksAssignment_2_2");
					put(grammarAccess.getActivityDiagramAccess().getAssociationsAssignment_2_3(), "rule__ActivityDiagram__AssociationsAssignment_2_3");
					put(grammarAccess.getActionAccess().getNameAssignment_1(), "rule__Action__NameAssignment_1");
					put(grammarAccess.getActionAccess().getCommentAssignment_2(), "rule__Action__CommentAssignment_2");
					put(grammarAccess.getConditionAccess().getConditionStartAssignment_1(), "rule__Condition__ConditionStartAssignment_1");
					put(grammarAccess.getConditionAccess().getConditionEndAssignment_3(), "rule__Condition__ConditionEndAssignment_3");
					put(grammarAccess.getConditionAccess().getCommentAssignment_4(), "rule__Condition__CommentAssignment_4");
					put(grammarAccess.getConditionEndAccess().getNameAssignment(), "rule__ConditionEnd__NameAssignment");
					put(grammarAccess.getForkAccess().getForkStartAssignment_1(), "rule__Fork__ForkStartAssignment_1");
					put(grammarAccess.getForkAccess().getForkEndAssignment_3(), "rule__Fork__ForkEndAssignment_3");
					put(grammarAccess.getForkAccess().getCommentAssignment_4(), "rule__Fork__CommentAssignment_4");
					put(grammarAccess.getForkEndAccess().getNameAssignment(), "rule__ForkEnd__NameAssignment");
					put(grammarAccess.getNameAccess().getLongNameAssignment_0_0(), "rule__Name__LongNameAssignment_0_0");
					put(grammarAccess.getNameAccess().getNameAssignment_1(), "rule__Name__NameAssignment_1");
					put(grammarAccess.getAssociationAccess().getLeftAssignment_0(), "rule__Association__LeftAssignment_0");
					put(grammarAccess.getAssociationAccess().getRightAssignment_2(), "rule__Association__RightAssignment_2");
					put(grammarAccess.getAssociationAccess().getCommentAssignment_3(), "rule__Association__CommentAssignment_3");
					put(grammarAccess.getActivityElementReferenceAccess().getTypeAssignment(), "rule__ActivityElementReference__TypeAssignment");
					put(grammarAccess.getStartEndReferenceAccess().getTypeAssignment(), "rule__StartEndReference__TypeAssignment");
					put(grammarAccess.getCommentAccess().getDescriptionAssignment_1(), "rule__Comment__DescriptionAssignment_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			de.cooperateproject.modeling.textual.activity.ide.contentassist.antlr.internal.InternalActivityParser typedParser = (de.cooperateproject.modeling.textual.activity.ide.contentassist.antlr.internal.InternalActivityParser) parser;
			typedParser.entryRuleActivityDiagram();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public ActivityGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(ActivityGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
