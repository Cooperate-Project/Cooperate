/*
 * generated by Xtext
 */
grammar InternalActivity;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package de.cooperateproject.modeling.textual.activity.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package de.cooperateproject.modeling.textual.activity.ide.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import de.cooperateproject.modeling.textual.activity.services.ActivityGrammarAccess;

}

@parser::members {
 
 	private ActivityGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(ActivityGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleActivityDiagram
entryRuleActivityDiagram 
:
{ before(grammarAccess.getActivityDiagramRule()); }
	 ruleActivityDiagram
{ after(grammarAccess.getActivityDiagramRule()); } 
	 EOF 
;

// Rule ActivityDiagram
ruleActivityDiagram
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getActivityDiagramAccess().getGroup()); }
(rule__ActivityDiagram__Group__0)
{ after(grammarAccess.getActivityDiagramAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleActivityElement
entryRuleActivityElement 
:
{ before(grammarAccess.getActivityElementRule()); }
	 ruleActivityElement
{ after(grammarAccess.getActivityElementRule()); } 
	 EOF 
;

// Rule ActivityElement
ruleActivityElement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getActivityElementAccess().getAlternatives()); }
(rule__ActivityElement__Alternatives)
{ after(grammarAccess.getActivityElementAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAction
entryRuleAction 
:
{ before(grammarAccess.getActionRule()); }
	 ruleAction
{ after(grammarAccess.getActionRule()); } 
	 EOF 
;

// Rule Action
ruleAction
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getActionAccess().getGroup()); }
(rule__Action__Group__0)
{ after(grammarAccess.getActionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCondition
entryRuleCondition 
:
{ before(grammarAccess.getConditionRule()); }
	 ruleCondition
{ after(grammarAccess.getConditionRule()); } 
	 EOF 
;

// Rule Condition
ruleCondition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getConditionAccess().getGroup()); }
(rule__Condition__Group__0)
{ after(grammarAccess.getConditionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleConditionEnd
entryRuleConditionEnd 
:
{ before(grammarAccess.getConditionEndRule()); }
	 ruleConditionEnd
{ after(grammarAccess.getConditionEndRule()); } 
	 EOF 
;

// Rule ConditionEnd
ruleConditionEnd
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getConditionEndAccess().getGroup()); }
(rule__ConditionEnd__Group__0)
{ after(grammarAccess.getConditionEndAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFork
entryRuleFork 
:
{ before(grammarAccess.getForkRule()); }
	 ruleFork
{ after(grammarAccess.getForkRule()); } 
	 EOF 
;

// Rule Fork
ruleFork
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getForkAccess().getGroup()); }
(rule__Fork__Group__0)
{ after(grammarAccess.getForkAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleForkEnd
entryRuleForkEnd 
:
{ before(grammarAccess.getForkEndRule()); }
	 ruleForkEnd
{ after(grammarAccess.getForkEndRule()); } 
	 EOF 
;

// Rule ForkEnd
ruleForkEnd
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getForkEndAccess().getGroup()); }
(rule__ForkEnd__Group__0)
{ after(grammarAccess.getForkEndAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAssociation
entryRuleAssociation 
:
{ before(grammarAccess.getAssociationRule()); }
	 ruleAssociation
{ after(grammarAccess.getAssociationRule()); } 
	 EOF 
;

// Rule Association
ruleAssociation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAssociationAccess().getGroup()); }
(rule__Association__Group__0)
{ after(grammarAccess.getAssociationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleReference
entryRuleReference 
:
{ before(grammarAccess.getReferenceRule()); }
	 ruleReference
{ after(grammarAccess.getReferenceRule()); } 
	 EOF 
;

// Rule Reference
ruleReference
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getReferenceAccess().getAlternatives()); }
(rule__Reference__Alternatives)
{ after(grammarAccess.getReferenceAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDefReference
entryRuleDefReference 
:
{ before(grammarAccess.getDefReferenceRule()); }
	 ruleDefReference
{ after(grammarAccess.getDefReferenceRule()); } 
	 EOF 
;

// Rule DefReference
ruleDefReference
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDefReferenceAccess().getTypeAssignment()); }
(rule__DefReference__TypeAssignment)
{ after(grammarAccess.getDefReferenceAccess().getTypeAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}





// Entry rule entryRuleStartAndEnd
entryRuleStartAndEnd 
:
{ before(grammarAccess.getStartAndEndRule()); }
	 ruleStartAndEnd
{ after(grammarAccess.getStartAndEndRule()); } 
	 EOF 
;

// Rule StartAndEnd
ruleStartAndEnd
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStartAndEndAccess().getTypeAssignment()); }
(rule__StartAndEnd__TypeAssignment)
{ after(grammarAccess.getStartAndEndAccess().getTypeAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleComment
entryRuleComment 
:
{ before(grammarAccess.getCommentRule()); }
	 ruleComment
{ after(grammarAccess.getCommentRule()); } 
	 EOF 
;

// Rule Comment
ruleComment
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCommentAccess().getGroup()); }
(rule__Comment__Group__0)
{ after(grammarAccess.getCommentAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}




// Rule StartAndEndEnum
ruleStartAndEndEnum
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStartAndEndEnumAccess().getAlternatives()); }
(rule__StartAndEndEnum__Alternatives)
{ after(grammarAccess.getStartAndEndEnumAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__ActivityElement__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActivityElementAccess().getActionParserRuleCall_0()); }
	ruleAction
{ after(grammarAccess.getActivityElementAccess().getActionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getActivityElementAccess().getConditionParserRuleCall_1()); }
	ruleCondition
{ after(grammarAccess.getActivityElementAccess().getConditionParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getActivityElementAccess().getForkParserRuleCall_2()); }
	ruleFork
{ after(grammarAccess.getActivityElementAccess().getForkParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getActivityElementAccess().getAssociationParserRuleCall_3()); }
	ruleAssociation
{ after(grammarAccess.getActivityElementAccess().getAssociationParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Action__LongNameAlternatives_1_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionAccess().getLongNameSTRINGTerminalRuleCall_1_0_0_0()); }
	RULE_STRING
{ after(grammarAccess.getActionAccess().getLongNameSTRINGTerminalRuleCall_1_0_0_0()); }
)

    |(
{ before(grammarAccess.getActionAccess().getLongNameIDTerminalRuleCall_1_0_0_1()); }
	RULE_ID
{ after(grammarAccess.getActionAccess().getLongNameIDTerminalRuleCall_1_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionEnd__LongNameAlternatives_0_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionEndAccess().getLongNameSTRINGTerminalRuleCall_0_0_0_0()); }
	RULE_STRING
{ after(grammarAccess.getConditionEndAccess().getLongNameSTRINGTerminalRuleCall_0_0_0_0()); }
)

    |(
{ before(grammarAccess.getConditionEndAccess().getLongNameIDTerminalRuleCall_0_0_0_1()); }
	RULE_ID
{ after(grammarAccess.getConditionEndAccess().getLongNameIDTerminalRuleCall_0_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ForkEnd__LongNameAlternatives_0_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForkEndAccess().getLongNameSTRINGTerminalRuleCall_0_0_0_0()); }
	RULE_STRING
{ after(grammarAccess.getForkEndAccess().getLongNameSTRINGTerminalRuleCall_0_0_0_0()); }
)

    |(
{ before(grammarAccess.getForkEndAccess().getLongNameIDTerminalRuleCall_0_0_0_1()); }
	RULE_ID
{ after(grammarAccess.getForkEndAccess().getLongNameIDTerminalRuleCall_0_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Reference__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReferenceAccess().getDefReferenceParserRuleCall_0()); }
	ruleDefReference
{ after(grammarAccess.getReferenceAccess().getDefReferenceParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getReferenceAccess().getStartAndEndParserRuleCall_1()); }
	ruleStartAndEnd
{ after(grammarAccess.getReferenceAccess().getStartAndEndParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StartAndEndEnum__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStartAndEndEnumAccess().getSTARTEnumLiteralDeclaration_0()); }
(	'start' 
)
{ after(grammarAccess.getStartAndEndEnumAccess().getSTARTEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getStartAndEndEnumAccess().getENDEnumLiteralDeclaration_1()); }
(	'end' 
)
{ after(grammarAccess.getStartAndEndEnumAccess().getENDEnumLiteralDeclaration_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__ActivityDiagram__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ActivityDiagram__Group__0__Impl
	rule__ActivityDiagram__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ActivityDiagram__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActivityDiagramAccess().getActivityDiagramAction_0()); }
(

)
{ after(grammarAccess.getActivityDiagramAccess().getActivityDiagramAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ActivityDiagram__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ActivityDiagram__Group__1__Impl
	rule__ActivityDiagram__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ActivityDiagram__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActivityDiagramAccess().getStartactivityKeyword_1()); }

	'@startactivity' 

{ after(grammarAccess.getActivityDiagramAccess().getStartactivityKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ActivityDiagram__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ActivityDiagram__Group__2__Impl
	rule__ActivityDiagram__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ActivityDiagram__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActivityDiagramAccess().getElementsAssignment_2()); }
(rule__ActivityDiagram__ElementsAssignment_2)*
{ after(grammarAccess.getActivityDiagramAccess().getElementsAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ActivityDiagram__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ActivityDiagram__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ActivityDiagram__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActivityDiagramAccess().getEndactivityKeyword_3()); }

	'@endactivity' 

{ after(grammarAccess.getActivityDiagramAccess().getEndactivityKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Action__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Action__Group__0__Impl
	rule__Action__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionAccess().getActionKeyword_0()); }

	'action' 

{ after(grammarAccess.getActionAccess().getActionKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Action__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Action__Group__1__Impl
	rule__Action__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionAccess().getGroup_1()); }
(rule__Action__Group_1__0)?
{ after(grammarAccess.getActionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Action__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Action__Group__2__Impl
	rule__Action__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionAccess().getNameAssignment_2()); }
(rule__Action__NameAssignment_2)
{ after(grammarAccess.getActionAccess().getNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Action__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Action__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionAccess().getCommentAssignment_3()); }
(rule__Action__CommentAssignment_3)?
{ after(grammarAccess.getActionAccess().getCommentAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Action__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Action__Group_1__0__Impl
	rule__Action__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionAccess().getLongNameAssignment_1_0()); }
(rule__Action__LongNameAssignment_1_0)
{ after(grammarAccess.getActionAccess().getLongNameAssignment_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Action__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Action__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionAccess().getAsKeyword_1_1()); }

	'as' 

{ after(grammarAccess.getActionAccess().getAsKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Condition__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Condition__Group__0__Impl
	rule__Condition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionAccess().getConditionKeyword_0()); }

	'condition' 

{ after(grammarAccess.getConditionAccess().getConditionKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Condition__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Condition__Group__1__Impl
	rule__Condition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionAccess().getConditionStartAssignment_1()); }
(rule__Condition__ConditionStartAssignment_1)
{ after(grammarAccess.getConditionAccess().getConditionStartAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Condition__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Condition__Group__2__Impl
	rule__Condition__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionAccess().getColonKeyword_2()); }

	':' 

{ after(grammarAccess.getConditionAccess().getColonKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Condition__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Condition__Group__3__Impl
	rule__Condition__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionAccess().getConditionEndAssignment_3()); }
(rule__Condition__ConditionEndAssignment_3)
{ after(grammarAccess.getConditionAccess().getConditionEndAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Condition__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Condition__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionAccess().getCommentAssignment_4()); }
(rule__Condition__CommentAssignment_4)?
{ after(grammarAccess.getConditionAccess().getCommentAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__ConditionEnd__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConditionEnd__Group__0__Impl
	rule__ConditionEnd__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionEnd__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionEndAccess().getGroup_0()); }
(rule__ConditionEnd__Group_0__0)?
{ after(grammarAccess.getConditionEndAccess().getGroup_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConditionEnd__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConditionEnd__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionEnd__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionEndAccess().getNameAssignment_1()); }
(rule__ConditionEnd__NameAssignment_1)
{ after(grammarAccess.getConditionEndAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ConditionEnd__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConditionEnd__Group_0__0__Impl
	rule__ConditionEnd__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionEnd__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionEndAccess().getLongNameAssignment_0_0()); }
(rule__ConditionEnd__LongNameAssignment_0_0)
{ after(grammarAccess.getConditionEndAccess().getLongNameAssignment_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConditionEnd__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConditionEnd__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionEnd__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionEndAccess().getAsKeyword_0_1()); }

	'as' 

{ after(grammarAccess.getConditionEndAccess().getAsKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Fork__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Fork__Group__0__Impl
	rule__Fork__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Fork__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForkAccess().getForkKeyword_0()); }

	'fork' 

{ after(grammarAccess.getForkAccess().getForkKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Fork__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Fork__Group__1__Impl
	rule__Fork__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Fork__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForkAccess().getForkStartAssignment_1()); }
(rule__Fork__ForkStartAssignment_1)
{ after(grammarAccess.getForkAccess().getForkStartAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Fork__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Fork__Group__2__Impl
	rule__Fork__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Fork__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForkAccess().getColonKeyword_2()); }

	':' 

{ after(grammarAccess.getForkAccess().getColonKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Fork__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Fork__Group__3__Impl
	rule__Fork__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Fork__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForkAccess().getForkEndAssignment_3()); }
(rule__Fork__ForkEndAssignment_3)
{ after(grammarAccess.getForkAccess().getForkEndAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Fork__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Fork__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Fork__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForkAccess().getCommentAssignment_4()); }
(rule__Fork__CommentAssignment_4)?
{ after(grammarAccess.getForkAccess().getCommentAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__ForkEnd__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForkEnd__Group__0__Impl
	rule__ForkEnd__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ForkEnd__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForkEndAccess().getGroup_0()); }
(rule__ForkEnd__Group_0__0)?
{ after(grammarAccess.getForkEndAccess().getGroup_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ForkEnd__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForkEnd__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ForkEnd__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForkEndAccess().getNameAssignment_1()); }
(rule__ForkEnd__NameAssignment_1)
{ after(grammarAccess.getForkEndAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ForkEnd__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForkEnd__Group_0__0__Impl
	rule__ForkEnd__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ForkEnd__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForkEndAccess().getLongNameAssignment_0_0()); }
(rule__ForkEnd__LongNameAssignment_0_0)
{ after(grammarAccess.getForkEndAccess().getLongNameAssignment_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ForkEnd__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForkEnd__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ForkEnd__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForkEndAccess().getAsKeyword_0_1()); }

	'as' 

{ after(grammarAccess.getForkEndAccess().getAsKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Association__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Association__Group__0__Impl
	rule__Association__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Association__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssociationAccess().getLeftAssignment_0()); }
(rule__Association__LeftAssignment_0)
{ after(grammarAccess.getAssociationAccess().getLeftAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Association__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Association__Group__1__Impl
	rule__Association__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Association__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssociationAccess().getHyphenMinusKeyword_1()); }

	'-' 

{ after(grammarAccess.getAssociationAccess().getHyphenMinusKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Association__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Association__Group__2__Impl
	rule__Association__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Association__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssociationAccess().getRightAssignment_2()); }
(rule__Association__RightAssignment_2)
{ after(grammarAccess.getAssociationAccess().getRightAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Association__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Association__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Association__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssociationAccess().getCommentAssignment_3()); }
(rule__Association__CommentAssignment_3)?
{ after(grammarAccess.getAssociationAccess().getCommentAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Comment__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Comment__Group__0__Impl
	rule__Comment__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Comment__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCommentAccess().getNoteKeyword_0()); }

	'note[' 

{ after(grammarAccess.getCommentAccess().getNoteKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Comment__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Comment__Group__1__Impl
	rule__Comment__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Comment__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCommentAccess().getDescriptionAssignment_1()); }
(rule__Comment__DescriptionAssignment_1)
{ after(grammarAccess.getCommentAccess().getDescriptionAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Comment__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Comment__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Comment__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCommentAccess().getRightSquareBracketKeyword_2()); }

	']' 

{ after(grammarAccess.getCommentAccess().getRightSquareBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}









rule__ActivityDiagram__ElementsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActivityDiagramAccess().getElementsActivityElementParserRuleCall_2_0()); }
	ruleActivityElement{ after(grammarAccess.getActivityDiagramAccess().getElementsActivityElementParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Action__LongNameAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionAccess().getLongNameAlternatives_1_0_0()); }
(rule__Action__LongNameAlternatives_1_0_0)
{ after(grammarAccess.getActionAccess().getLongNameAlternatives_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Action__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionAccess().getNameIDTerminalRuleCall_2_0()); }
	RULE_ID{ after(grammarAccess.getActionAccess().getNameIDTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Action__CommentAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionAccess().getCommentCommentParserRuleCall_3_0()); }
	ruleComment{ after(grammarAccess.getActionAccess().getCommentCommentParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__ConditionStartAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionAccess().getConditionStartConditionEndParserRuleCall_1_0()); }
	ruleConditionEnd{ after(grammarAccess.getConditionAccess().getConditionStartConditionEndParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__ConditionEndAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionAccess().getConditionEndConditionEndParserRuleCall_3_0()); }
	ruleConditionEnd{ after(grammarAccess.getConditionAccess().getConditionEndConditionEndParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__CommentAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionAccess().getCommentCommentParserRuleCall_4_0()); }
	ruleComment{ after(grammarAccess.getConditionAccess().getCommentCommentParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionEnd__LongNameAssignment_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionEndAccess().getLongNameAlternatives_0_0_0()); }
(rule__ConditionEnd__LongNameAlternatives_0_0_0)
{ after(grammarAccess.getConditionEndAccess().getLongNameAlternatives_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionEnd__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionEndAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getConditionEndAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Fork__ForkStartAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForkAccess().getForkStartForkEndParserRuleCall_1_0()); }
	ruleForkEnd{ after(grammarAccess.getForkAccess().getForkStartForkEndParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Fork__ForkEndAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForkAccess().getForkEndForkEndParserRuleCall_3_0()); }
	ruleForkEnd{ after(grammarAccess.getForkAccess().getForkEndForkEndParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Fork__CommentAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForkAccess().getCommentCommentParserRuleCall_4_0()); }
	ruleComment{ after(grammarAccess.getForkAccess().getCommentCommentParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ForkEnd__LongNameAssignment_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForkEndAccess().getLongNameAlternatives_0_0_0()); }
(rule__ForkEnd__LongNameAlternatives_0_0_0)
{ after(grammarAccess.getForkEndAccess().getLongNameAlternatives_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ForkEnd__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForkEndAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getForkEndAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Association__LeftAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssociationAccess().getLeftReferenceParserRuleCall_0_0()); }
	ruleReference{ after(grammarAccess.getAssociationAccess().getLeftReferenceParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Association__RightAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssociationAccess().getRightReferenceParserRuleCall_2_0()); }
	ruleReference{ after(grammarAccess.getAssociationAccess().getRightReferenceParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Association__CommentAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssociationAccess().getCommentCommentParserRuleCall_3_0()); }
	ruleComment{ after(grammarAccess.getAssociationAccess().getCommentCommentParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DefReference__TypeAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefReferenceAccess().getTypeDefRefCrossReference_0()); }
(
{ before(grammarAccess.getDefReferenceAccess().getTypeDefRefIDTerminalRuleCall_0_1()); }
	RULE_ID{ after(grammarAccess.getDefReferenceAccess().getTypeDefRefIDTerminalRuleCall_0_1()); }
)
{ after(grammarAccess.getDefReferenceAccess().getTypeDefRefCrossReference_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StartAndEnd__TypeAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStartAndEndAccess().getTypeStartAndEndEnumEnumRuleCall_0()); }
	ruleStartAndEndEnum{ after(grammarAccess.getStartAndEndAccess().getTypeStartAndEndEnumEnumRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Comment__DescriptionAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCommentAccess().getDescriptionSTRINGTerminalRuleCall_1_0()); }
	RULE_STRING{ after(grammarAccess.getCommentAccess().getDescriptionSTRINGTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


