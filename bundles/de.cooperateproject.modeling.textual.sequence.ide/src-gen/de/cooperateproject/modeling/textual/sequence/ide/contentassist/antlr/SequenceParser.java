/*
 * generated by Xtext 2.11.0
 */
package de.cooperateproject.modeling.textual.sequence.ide.contentassist.antlr;

import com.google.inject.Inject;
import de.cooperateproject.modeling.textual.sequence.ide.contentassist.antlr.internal.InternalSequenceParser;
import de.cooperateproject.modeling.textual.sequence.services.SequenceGrammarAccess;
import java.util.HashMap;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class SequenceParser extends AbstractContentAssistParser {

	@Inject
	private SequenceGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalSequenceParser createParser() {
		InternalSequenceParser result = new InternalSequenceParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getActorAccess().getAlternatives(), "rule__Actor__Alternatives");
					put(grammarAccess.getInteractionFragmentAccess().getAlternatives(), "rule__InteractionFragment__Alternatives");
					put(grammarAccess.getMessageAccess().getAlternatives(), "rule__Message__Alternatives");
					put(grammarAccess.getMessageTypeAccess().getAlternatives(), "rule__MessageType__Alternatives");
					put(grammarAccess.getActorTypeAccess().getAlternatives(), "rule__ActorType__Alternatives");
					put(grammarAccess.getSequenceDiagramAccess().getGroup(), "rule__SequenceDiagram__Group__0");
					put(grammarAccess.getRootPackageAccess().getGroup(), "rule__RootPackage__Group__0");
					put(grammarAccess.getActorAccess().getGroup_0(), "rule__Actor__Group_0__0");
					put(grammarAccess.getActorAccess().getGroup_0_1(), "rule__Actor__Group_0_1__0");
					put(grammarAccess.getActorAccess().getGroup_1(), "rule__Actor__Group_1__0");
					put(grammarAccess.getActorAccess().getGroup_2(), "rule__Actor__Group_2__0");
					put(grammarAccess.getActorAccess().getGroup_2_0(), "rule__Actor__Group_2_0__0");
					put(grammarAccess.getActorAccess().getGroup_2_1(), "rule__Actor__Group_2_1__0");
					put(grammarAccess.getMessageAccess().getGroup_2(), "rule__Message__Group_2__0");
					put(grammarAccess.getFoundMessageAccess().getGroup(), "rule__FoundMessage__Group__0");
					put(grammarAccess.getLostMessageAccess().getGroup(), "rule__LostMessage__Group__0");
					put(grammarAccess.getDestructionOccurenceSpecificationAccess().getGroup(), "rule__DestructionOccurenceSpecification__Group__0");
					put(grammarAccess.getFQNAccess().getGroup(), "rule__FQN__Group__0");
					put(grammarAccess.getFQNAccess().getGroup_1(), "rule__FQN__Group_1__0");
					put(grammarAccess.getCommentAccess().getGroup(), "rule__Comment__Group__0");
					put(grammarAccess.getSequenceDiagramAccess().getTitleAssignment_2(), "rule__SequenceDiagram__TitleAssignment_2");
					put(grammarAccess.getSequenceDiagramAccess().getRootPackageAssignment_3(), "rule__SequenceDiagram__RootPackageAssignment_3");
					put(grammarAccess.getRootPackageAccess().getNameAssignment_1(), "rule__RootPackage__NameAssignment_1");
					put(grammarAccess.getRootPackageAccess().getActorsAssignment_2(), "rule__RootPackage__ActorsAssignment_2");
					put(grammarAccess.getRootPackageAccess().getInteractionFragmentsAssignment_3(), "rule__RootPackage__InteractionFragmentsAssignment_3");
					put(grammarAccess.getRootPackageAccess().getClsAssignment_4(), "rule__RootPackage__ClsAssignment_4");
					put(grammarAccess.getActorAccess().getNameAssignment_0_1_0(), "rule__Actor__NameAssignment_0_1_0");
					put(grammarAccess.getActorAccess().getTypeAssignment_0_1_2(), "rule__Actor__TypeAssignment_0_1_2");
					put(grammarAccess.getActorAccess().getNameAssignment_1_0(), "rule__Actor__NameAssignment_1_0");
					put(grammarAccess.getActorAccess().getTypeAssignment_1_2(), "rule__Actor__TypeAssignment_1_2");
					put(grammarAccess.getActorAccess().getAliasAssignment_1_4(), "rule__Actor__AliasAssignment_1_4");
					put(grammarAccess.getActorAccess().getTypeAssignment_2_0_1(), "rule__Actor__TypeAssignment_2_0_1");
					put(grammarAccess.getActorAccess().getAliasAssignment_2_0_3(), "rule__Actor__AliasAssignment_2_0_3");
					put(grammarAccess.getActorAccess().getActorTypeAssignment_2_1_1(), "rule__Actor__ActorTypeAssignment_2_1_1");
					put(grammarAccess.getMessageAccess().getTypeAssignment_2_0(), "rule__Message__TypeAssignment_2_0");
					put(grammarAccess.getMessageAccess().getNameAssignment_2_1(), "rule__Message__NameAssignment_2_1");
					put(grammarAccess.getMessageAccess().getLeftAssignment_2_3(), "rule__Message__LeftAssignment_2_3");
					put(grammarAccess.getMessageAccess().getRightAssignment_2_5(), "rule__Message__RightAssignment_2_5");
					put(grammarAccess.getFoundMessageAccess().getTypeAssignment_1(), "rule__FoundMessage__TypeAssignment_1");
					put(grammarAccess.getFoundMessageAccess().getNameAssignment_2(), "rule__FoundMessage__NameAssignment_2");
					put(grammarAccess.getFoundMessageAccess().getRightAssignment_6(), "rule__FoundMessage__RightAssignment_6");
					put(grammarAccess.getLostMessageAccess().getTypeAssignment_1(), "rule__LostMessage__TypeAssignment_1");
					put(grammarAccess.getLostMessageAccess().getNameAssignment_2(), "rule__LostMessage__NameAssignment_2");
					put(grammarAccess.getLostMessageAccess().getLeftAssignment_4(), "rule__LostMessage__LeftAssignment_4");
					put(grammarAccess.getDestructionOccurenceSpecificationAccess().getNameAssignment_1(), "rule__DestructionOccurenceSpecification__NameAssignment_1");
					put(grammarAccess.getCommentAccess().getBodyAssignment_2(), "rule__Comment__BodyAssignment_2");
				}
			};
		}
		return nameMappings.get(element);
	}
			
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public SequenceGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(SequenceGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
