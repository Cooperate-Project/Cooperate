/*
 * generated by Xtext 2.11.0
 */
package de.cooperateproject.modeling.textual.sequence.tests.matching

import com.google.inject.Inject
import de.cooperateproject.modeling.textual.sequence.matching.SequenceMatchingContext
import de.cooperateproject.modeling.textual.sequence.sequence.SequenceDiagram
import de.cooperateproject.modeling.textual.sequence.sequence.SequencePackage
import de.cooperateproject.modeling.textual.sequence.tests.AbstractSequenceTest
import de.cooperateproject.modeling.textual.sequence.tests.scoping.util.SequenceCustomizedInjectorProvider
import de.cooperateproject.modeling.textual.xtext.runtime.matching.provider.InitialCandidatesConfigurationProvider
import java.util.Collections
import org.eclipse.emf.common.util.URI
import org.eclipse.emf.ecore.resource.ResourceSet
import org.eclipse.uml2.uml.Interaction
import org.eclipse.uml2.uml.Model
import org.eclipse.uml2.uml.UMLPackage
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.XtextRunner
import org.eclipse.xtext.testing.util.ParseHelper
import org.eclipse.xtext.testing.validation.ValidationTestHelper
import org.junit.Test
import org.junit.runner.RunWith

@RunWith(XtextRunner)
@InjectWith(SequenceCustomizedInjectorProvider.DefaultProvider)
class SequenceMatchingTest extends AbstractSequenceTest{
	@Inject
	ParseHelper<SequenceDiagram> parseHelper
	
	@Inject ValidationTestHelper validationTestHelper
	
	override setup() {
		super.setup()
		rs.packageRegistry.put(SequencePackage.eNS_URI, SequencePackage.eINSTANCE)
	}
	
	
	@Test
	def void testDiagramOnly() {
	    loadModels("diagramonly", rs).matchSimple
	}
	
	private static def matchSimple(Pair<SequenceDiagram, Model> models) {
	    val candProv = new InitialCandidatesConfigurationProvider(models.value.eContents.filter(Interaction), Interaction)
        val context = new SequenceMatchingContext(candProv)
        context.doMatch(Collections.singletonList(models.key), UMLPackage.eINSTANCE.interaction)
        context
	}
	
	private static def loadModels(String testname, ResourceSet rs) {
		val ruml = rs.getResource(URI.createFileURI('''testmodels/mapping/«testname».uml'''), true)
		val rseq = rs.getResource(URI.createFileURI('''testmodels/mapping/«testname».xmi'''), true)
		
		return rseq.contents.get(0) as SequenceDiagram -> ruml.contents.get(0) as Model
	}
}

