/*
 * generated by Xtext
 */
package de.cooperateproject.modeling.textual.cls.ide.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import de.cooperateproject.modeling.textual.cls.services.ClsGrammarAccess;

public class ClsParser extends AbstractContentAssistParser {
	
	@Inject
	private ClsGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected de.cooperateproject.modeling.textual.cls.ide.contentassist.antlr.internal.InternalClsParser createParser() {
		de.cooperateproject.modeling.textual.cls.ide.contentassist.antlr.internal.InternalClsParser result = new de.cooperateproject.modeling.textual.cls.ide.contentassist.antlr.internal.InternalClsParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getClassElementAccess().getAlternatives(), "rule__ClassElement__Alternatives");
					put(grammarAccess.getTypeAccess().getAlternatives(), "rule__Type__Alternatives");
					put(grammarAccess.getClassDefAccess().getAlternatives_0(), "rule__ClassDef__Alternatives_0");
					put(grammarAccess.getNameAccess().getAlternatives(), "rule__Name__Alternatives");
					put(grammarAccess.getNameAccess().getLongnameAlternatives_1_0_0(), "rule__Name__LongnameAlternatives_1_0_0");
					put(grammarAccess.getMemberAccess().getAlternatives(), "rule__Member__Alternatives");
					put(grammarAccess.getConnectorAccess().getAlternatives(), "rule__Connector__Alternatives");
					put(grammarAccess.getConnectorLabelAccess().getLabelAlternatives_0(), "rule__ConnectorLabel__LabelAlternatives_0");
					put(grammarAccess.getConnectorCardinalitiyAccess().getDirectionAlternatives_4_2_0(), "rule__ConnectorCardinalitiy__DirectionAlternatives_4_2_0");
					put(grammarAccess.getCardinalityAccess().getAlternatives(), "rule__Cardinality__Alternatives");
					put(grammarAccess.getCardinalityAccess().getAlternatives_1_2(), "rule__Cardinality__Alternatives_1_2");
					put(grammarAccess.getVisibilityAccess().getAlternatives(), "rule__Visibility__Alternatives");
					put(grammarAccess.getDataTypeEnumAccess().getAlternatives(), "rule__DataTypeEnum__Alternatives");
					put(grammarAccess.getClassDiagramAccess().getGroup(), "rule__ClassDiagram__Group__0");
					put(grammarAccess.getClassDefAccess().getGroup(), "rule__ClassDef__Group__0");
					put(grammarAccess.getClassDefAccess().getGroup_3(), "rule__ClassDef__Group_3__0");
					put(grammarAccess.getNameAccess().getGroup_1(), "rule__Name__Group_1__0");
					put(grammarAccess.getClassAccess().getGroup(), "rule__Class__Group__0");
					put(grammarAccess.getAttributeAccess().getGroup(), "rule__Attribute__Group__0");
					put(grammarAccess.getMethodeAccess().getGroup(), "rule__Methode__Group__0");
					put(grammarAccess.getMethodeAccess().getGroup_6(), "rule__Methode__Group_6__0");
					put(grammarAccess.getMethodeAccess().getGroup_6_1(), "rule__Methode__Group_6_1__0");
					put(grammarAccess.getMethodeAccess().getGroup_8(), "rule__Methode__Group_8__0");
					put(grammarAccess.getGeneralizationAccess().getGroup(), "rule__Generalization__Group__0");
					put(grammarAccess.getImplementationAccess().getGroup(), "rule__Implementation__Group__0");
					put(grammarAccess.getCommentLinkAccess().getGroup(), "rule__CommentLink__Group__0");
					put(grammarAccess.getAssociationAccess().getGroup(), "rule__Association__Group__0");
					put(grammarAccess.getConnectorCardinalitiyAccess().getGroup(), "rule__ConnectorCardinalitiy__Group__0");
					put(grammarAccess.getConnectorCardinalitiyAccess().getGroup_3(), "rule__ConnectorCardinalitiy__Group_3__0");
					put(grammarAccess.getConnectorCardinalitiyAccess().getGroup_4(), "rule__ConnectorCardinalitiy__Group_4__0");
					put(grammarAccess.getCardinalityAccess().getGroup_1(), "rule__Cardinality__Group_1__0");
					put(grammarAccess.getCommentAccess().getGroup(), "rule__Comment__Group__0");
					put(grammarAccess.getClassDiagramAccess().getElementsAssignment_2(), "rule__ClassDiagram__ElementsAssignment_2");
					put(grammarAccess.getClassTypeAccess().getTypeAssignment(), "rule__ClassType__TypeAssignment");
					put(grammarAccess.getDataTypeAccess().getTypeAssignment(), "rule__DataType__TypeAssignment");
					put(grammarAccess.getClassDefAccess().getClassesAssignment_2(), "rule__ClassDef__ClassesAssignment_2");
					put(grammarAccess.getClassDefAccess().getClassesAssignment_3_1(), "rule__ClassDef__ClassesAssignment_3_1");
					put(grammarAccess.getNameAccess().getNameAssignment_0(), "rule__Name__NameAssignment_0");
					put(grammarAccess.getNameAccess().getLongnameAssignment_1_0(), "rule__Name__LongnameAssignment_1_0");
					put(grammarAccess.getNameAccess().getNameAssignment_1_2(), "rule__Name__NameAssignment_1_2");
					put(grammarAccess.getClassAccess().getAbstractAssignment_0(), "rule__Class__AbstractAssignment_0");
					put(grammarAccess.getClassAccess().getNameAssignment_1(), "rule__Class__NameAssignment_1");
					put(grammarAccess.getClassAccess().getMembersAssignment_3(), "rule__Class__MembersAssignment_3");
					put(grammarAccess.getAttributeAccess().getVisibilityAssignment_1(), "rule__Attribute__VisibilityAssignment_1");
					put(grammarAccess.getAttributeAccess().getStaticAssignment_2(), "rule__Attribute__StaticAssignment_2");
					put(grammarAccess.getAttributeAccess().getFinalAssignment_3(), "rule__Attribute__FinalAssignment_3");
					put(grammarAccess.getAttributeAccess().getNameAssignment_4(), "rule__Attribute__NameAssignment_4");
					put(grammarAccess.getAttributeAccess().getTypeAssignment_6(), "rule__Attribute__TypeAssignment_6");
					put(grammarAccess.getMethodeAccess().getVisibilityAssignment_0(), "rule__Methode__VisibilityAssignment_0");
					put(grammarAccess.getMethodeAccess().getAbstractAssignment_1(), "rule__Methode__AbstractAssignment_1");
					put(grammarAccess.getMethodeAccess().getStaticAssignment_2(), "rule__Methode__StaticAssignment_2");
					put(grammarAccess.getMethodeAccess().getFinalAssignment_3(), "rule__Methode__FinalAssignment_3");
					put(grammarAccess.getMethodeAccess().getNameAssignment_4(), "rule__Methode__NameAssignment_4");
					put(grammarAccess.getMethodeAccess().getAttributesAssignment_6_0(), "rule__Methode__AttributesAssignment_6_0");
					put(grammarAccess.getMethodeAccess().getAttributesAssignment_6_1_1(), "rule__Methode__AttributesAssignment_6_1_1");
					put(grammarAccess.getMethodeAccess().getTypeAssignment_8_1(), "rule__Methode__TypeAssignment_8_1");
					put(grammarAccess.getGeneralizationAccess().getLeftAssignment_0(), "rule__Generalization__LeftAssignment_0");
					put(grammarAccess.getGeneralizationAccess().getRightAssignment_2(), "rule__Generalization__RightAssignment_2");
					put(grammarAccess.getImplementationAccess().getLeftAssignment_0(), "rule__Implementation__LeftAssignment_0");
					put(grammarAccess.getImplementationAccess().getRightAssignment_2(), "rule__Implementation__RightAssignment_2");
					put(grammarAccess.getCommentLinkAccess().getLeftAssignment_0(), "rule__CommentLink__LeftAssignment_0");
					put(grammarAccess.getCommentLinkAccess().getCommentAssignment_2(), "rule__CommentLink__CommentAssignment_2");
					put(grammarAccess.getAssociationAccess().getLeftAssignment_0(), "rule__Association__LeftAssignment_0");
					put(grammarAccess.getAssociationAccess().getRightAssignment_2(), "rule__Association__RightAssignment_2");
					put(grammarAccess.getAssociationAccess().getCardinalityAssignment_3(), "rule__Association__CardinalityAssignment_3");
					put(grammarAccess.getAssociationAccess().getCommentAssignment_4(), "rule__Association__CommentAssignment_4");
					put(grammarAccess.getAssociationEndAccess().getTypeAssignment(), "rule__AssociationEnd__TypeAssignment");
					put(grammarAccess.getConnectorLabelAccess().getLabelAssignment(), "rule__ConnectorLabel__LabelAssignment");
					put(grammarAccess.getConnectorCardinalitiyAccess().getLeftAssignment_2(), "rule__ConnectorCardinalitiy__LeftAssignment_2");
					put(grammarAccess.getConnectorCardinalitiyAccess().getRightAssignment_3_1(), "rule__ConnectorCardinalitiy__RightAssignment_3_1");
					put(grammarAccess.getConnectorCardinalitiyAccess().getLabelAssignment_4_1(), "rule__ConnectorCardinalitiy__LabelAssignment_4_1");
					put(grammarAccess.getConnectorCardinalitiyAccess().getDirectionAssignment_4_2(), "rule__ConnectorCardinalitiy__DirectionAssignment_4_2");
					put(grammarAccess.getCommentAccess().getCommentAssignment_2(), "rule__Comment__CommentAssignment_2");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			de.cooperateproject.modeling.textual.cls.ide.contentassist.antlr.internal.InternalClsParser typedParser = (de.cooperateproject.modeling.textual.cls.ide.contentassist.antlr.internal.InternalClsParser) parser;
			typedParser.entryRuleClassDiagram();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public ClsGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(ClsGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
