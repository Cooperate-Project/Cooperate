import TransformationUtils_Class;

transformation Textual_to_Graphical_for_Class(in textual : TXT, inout graphical : NOTATION, in umlmodel : UML, in umlprimitives : UML);

modeltype NOTATION uses notation('http://www.eclipse.org/gmf/runtime/1.0.2/notation');
modeltype UML uses uml('http://www.eclipse.org/uml2/5.0.0/UML');
modeltype TXT uses cls('http://www.cooperateproject.de/modeling/textual/cls/Cls');
modeltype ECORE uses ecore('http://www.eclipse.org/emf/2002/Ecore');
modeltype STYLE uses style('http://www.eclipse.org/papyrus/infra/gmfdiag/style');
modeltype TXTCMN uses textualCommons('http://www.cooperateproject.de/modeling/textual/commons');

main() {
    var diagrams := textual.rootObjects()[cls::ClassDiagram];
    assert fatal (diagrams->size() = 1) with log ("Expected one diagram but got other number.", diagrams->size());
    diagrams->map diagramToDiagram();
}

mapping cls::ClassDiagram::diagramToDiagram() : notation::Diagram {
    type := "PapyrusUMLClassDiagram";
    name := self.title;
    measurementUnit := notation::MeasurementUnit::Pixel;
    
    var umlRootElement := self.rootPackage.referencedElement.oclAsType(uml::Package);
    element := umlRootElement.toEObject();
    var allConnectors := self.getAllTransitiveConnectors();
    var allPackages := self.getAllTransitivePackages();
    
    children += self.rootPackage.packages.oclAsType(cls::Package)->map packageToShape();
    children += self.rootPackage.classifiers->map classifierToShape();
    children += allConnectors->selectByKind(cls::Association)->select(memberEnds->size() > 2)->map multiAssociationToShape(); // all nested in root
    children += self.rootPackage.connectors->select(isCommented())->selectByKind(textualCommons::Commentable).comments->map commentToShape();
    children += self.rootPackage.classifiers->select(isCommented())->selectByKind(textualCommons::Commentable).comments->map commentToShape();
    
    edges += allConnectors->map connectorToConnector();
    edges += allConnectors->selectByKind(cls::Association)->select(memberEnds->size() > 2).memberEnds->map connectorEndToEdge();
    edges += allConnectors->select(isCommented())->selectByKind(textualCommons::Commentable).comments->map commentToEdge();
    edges += self.rootPackage.classifiers->select(isCommented())->selectByKind(textualCommons::Commentable).comments->map commentToEdge();
    edges += allPackages->collect(packageImports)->map packageImportToEdge();
    
    styles += self.map stringValueStyle();
    styles += self.map diagramStyle();
    styles += self.map papyrusViewStyle(umlRootElement);
}

mapping cls::Package::packageToShape() : notation::Shape
{
    type := self.getNestedName(PAPYRUS_NOTATION_SHAPE_PACKAGE_REGULAR);
    element := self.referencedElement.toEObject();
    
    children += self.map nameDecorationPackage();
    children += self.map packageToCompartment();
    
    layoutConstraint := result.toEObject().map notationBounds();
}

mapping cls::Package::packageToCompartment() : notation::BasicCompartment
{
    type := self.getNestedName(PAPYRUS_NOTATION_COMPARTMENT_PACKAGE_PACKAGEABLE_REGULAR);
    styles += result.toEObject().map titleStyle();
    layoutConstraint := result.toEObject().map notationBounds();
    
    children += self.packages.oclAsType(cls::Package)->map packageToShape();
    children += self.classifiers->map classifierToShape();
    children += self.classifiers->select(isCommented())
        ->union(self.connectors->select(isCommented()))->selectByKind(textualCommons::Commentable).comments->map commentToShape();
}



// classifiers

mapping cls::Classifier::classifierToShape() : notation::Shape
merges cls::Classifier::classToShape, cls::Classifier::interfaceToShape
{
    element := self.referencedElement.oclAsType(ecore::EObject);
    
    children += self.map classifierToNameDecorationNode();
    children += self.map classifierToFloatingLabelDecorationNode();
    
    children += self.map classifierToAttributesCompartment();
    children += self.map classifierToOperationsCompartment();
    children += self.map classifierToSignalsCompartment();
    
    layoutConstraint := result.toEObject().map notationBounds();
}

mapping cls::Classifier::interfaceToShape() : notation::Shape
when {self.oclIsKindOf(cls::Interface)}
{
    type := self.getNestedName(PAPYRUS_NOTATION_SHAPE_INTERFACE_REGULAR);
}

mapping cls::Classifier::classToShape() : notation::Shape
when {self.oclIsKindOf(cls::Class)}
{
    type := self.getNestedName(PAPYRUS_NOTATION_SHAPE_CLASS_REGULAR);
}

mapping textualCommons::Comment::commentToShape() : notation::Shape
{
    type := self.getNestedName(PAPYRUS_NOTATION_SHAPE_COMMENT_REGULAR);
    element := self.referencedElement.toEObject();
    children += self.map commentLabelBodyHintDecoration();
    layoutConstraint := result.toEObject().map notationBounds();
}

mapping cls::Association::multiAssociationToShape() : notation::Shape
{
    type := PAPYRUS_NOTATION_SHAPE_NARY_REGULAR;
    element := self.referencedElement.toEObject();
    layoutConstraint := result.toEObject().map locationConstraint();
    children += self.map multiAssociationToFloatingLabelDecorationNode();
}

mapping cls::Classifier::classifierToAttributesCompartment() : notation::BasicCompartment
merges cls::Classifier::classToAttributesCompartment, cls::Classifier::interfaceToAttributesCompartment
{
    children += self.members->select(oclIsKindOf(cls::Attribute))->oclAsType(cls::Attribute)->map attributeToShape();
    styles += result.toEObject().map titleStyle();
    styles += result.toEObject().map sortingStyle();
    styles += result.toEObject().map filteringStyle();
    layoutConstraint := result.toEObject().map notationBounds();
}

mapping cls::Classifier::classToAttributesCompartment() : notation::BasicCompartment
when {self.oclIsKindOf(cls::Class)}
{
    type := self.getNestedName(PAPYRUS_NOTATION_COMPARTMENT_CLASS_PROPERTIES_REGULAR);
}

mapping cls::Classifier::interfaceToAttributesCompartment() : notation::BasicCompartment
when {self.oclIsKindOf(cls::Interface)}
{
    type := self.getNestedName(PAPYRUS_NOTATION_COMPARTMENT_INTERFACE_PROPERTIES_REGULAR);
}

mapping cls::Attribute::attributeToShape() : notation::Shape
merges cls::Attribute::classAttributeToShape, cls::Attribute::interfaceAttributeToShape
{
    element := self.referencedElement.oclAsType(ecore::EObject);
    layoutConstraint := result.toEObject().map locationConstraint();
}

mapping cls::Attribute::classAttributeToShape() : notation::Shape
when {self.owner.oclIsKindOf(cls::Class)}
{   
    type := PAPYRUS_NOTATION_SHAPE_CLASS_ATTRIBUTE;
}

mapping cls::Attribute::interfaceAttributeToShape() : notation::Shape
when {self.owner.oclIsKindOf(cls::Interface)}
{   
    type := PAPYRUS_NOTATION_SHAPE_INTERFACE_ATTRIBUTE;
}

mapping cls::Classifier::classifierToOperationsCompartment() : notation::BasicCompartment
merges cls::Classifier::classToOperationsCompartment, cls::Classifier::interfaceToOperationsCompartment
{
    children += self.members->select(oclIsKindOf(cls::Method))->oclAsType(cls::Method)->map methodToShape();
    styles += result.toEObject().map titleStyle();
    styles += result.toEObject().map sortingStyle();
    styles += result.toEObject().map filteringStyle();
    layoutConstraint := result.toEObject().map notationBounds();
}

mapping cls::Classifier::classToOperationsCompartment() : notation::BasicCompartment
when {self.oclIsKindOf(cls::Class)}
{
    type := self.getNestedName(PAPYRUS_NOTATION_COMPARTMENT_CLASS_OPERATIONS_REGULAR);
}

mapping cls::Classifier::interfaceToOperationsCompartment() : notation::BasicCompartment
when {self.oclIsKindOf(cls::Interface)}
{
    type := self.getNestedName(PAPYRUS_NOTATION_COMPARTMENT_INTERFACE_OPERATIONS_REGULAR);
}

mapping cls::Method::methodToShape() : notation::Shape
merges cls::Method::classMethodToShape, cls::Method::interfaceMethodToShape
{
    element := self.referencedElement.oclAsType(ecore::EObject);
    layoutConstraint := result.toEObject().map locationConstraint();
}

mapping cls::Method::classMethodToShape() : notation::Shape
when {self.owner.oclIsKindOf(cls::Class)}
{
    type := PAPYRUS_NOTATION_SHAPE_CLASS_OPERATION;
}

mapping cls::Method::interfaceMethodToShape() : notation::Shape
when {self.owner.oclIsKindOf(cls::Interface)}
{
    type := PAPYRUS_NOTATION_SHAPE_INTERFACE_OPERATION;
}

mapping cls::Classifier::classifierToSignalsCompartment() : notation::BasicCompartment
merges cls::Classifier::classToSignalsCompartment, cls::Classifier::interfaceToSignalsCompartment
{
    styles += result.toEObject().map titleStyle();
    styles += result.toEObject().map sortingStyle();
    styles += result.toEObject().map filteringStyle();
    layoutConstraint := result.toEObject().map notationBounds();
}

mapping cls::Classifier::classToSignalsCompartment() : notation::BasicCompartment
when {self.oclIsKindOf(cls::Class)}
{
    type := self.getNestedName(PAPYRUS_NOTATION_COMPARTMENT_CLASS_NESTED_REGULAR);
}

mapping cls::Classifier::interfaceToSignalsCompartment() : notation::BasicCompartment
when {self.oclIsKindOf(cls::Interface)}
{
    type := self.getNestedName(PAPYRUS_NOTATION_COMPARTMENT_INTERFACE_NESTED_REGULAR);
}



mapping cls::Classifier::classifierToNameDecorationNode() : notation::DecorationNode
merges cls::Classifier::classToNameDecorationNode, cls::Classifier::interfaceToNameDecorationNode
{
}

mapping cls::Classifier::classToNameDecorationNode() : notation::DecorationNode
when{self.oclIsKindOf(cls::Class)}
{
    type := self.getNestedName(PAPYRUS_NOTATION_NODE_CLASS_NAME_REGULAR);
}

mapping cls::Classifier::interfaceToNameDecorationNode() : notation::DecorationNode
when{self.oclIsKindOf(cls::Interface)}
{
    type := self.getNestedName(PAPYRUS_NOTATION_NODE_INTERFACE_NAME_REGULAR);
}

mapping cls::Classifier::classifierToFloatingLabelDecorationNode() : notation::DecorationNode
merges cls::Classifier::classToFloatingLabelDecorationNode, cls::Classifier::interfaceToFloatingLabelDecorationNode
{
    layoutConstraint := result.toEObject().map locationConstraint();
}

mapping cls::Classifier::classToFloatingLabelDecorationNode() : notation::DecorationNode
when {self.oclIsKindOf(cls::Class)}
{
    type := self.getNestedName(PAPYRUS_NOTATION_NODE_CLASS_FLOATINGLABEL_REGULAR);
}

mapping cls::Classifier::interfaceToFloatingLabelDecorationNode() : notation::DecorationNode
when {self.oclIsKindOf(cls::Interface)}
{
    type := self.getNestedName(PAPYRUS_NOTATION_NODE_INTERFACE_FLOATINGLABEL_REGULAR);
}


// connectors

mapping cls::Connector::connectorToConnector() : notation::Connector
disjuncts cls::Association::connectorToEdge, cls::Generalization::generalizationToEdge, cls::Implementation::implementationToEdge
{
}

mapping cls::Association::connectorToEdge() : notation::Connector
when { self.oclIsKindOf(cls::Association) and self.memberEnds->size() <= 2 }
{
    var sourceMemberEnd = self.memberEnds->at(1);
    var targetMemberEnd = self.memberEnds->at(2);
    
    type := PAPYRUS_NOTATION_EDGE_ASSOCIATION;
    
    var sourceProperty := sourceMemberEnd.referencedElement.oclAsType(uml::Property);
    source := late resolveoneIn(cls::Classifier::classifierToShape, s : notation::Shape | s.element = sourceProperty.type.toEObject());
    var targetProperty := targetMemberEnd.referencedElement.oclAsType(uml::Property);
    target := late resolveoneIn(cls::Classifier::classifierToShape, s : notation::Shape | s.element = targetProperty.type.toEObject());
    
    element := self.referencedElement.toEObject();

    children += self.map stereotypeDecorationAssocation();
    children += self.map nameDecorationAssociation();
    children += targetMemberEnd.map targetRoleDecoration();
    children += sourceMemberEnd.map sourceRoleDecoration();
    children += sourceMemberEnd.map sourceMultiplicityDecoration();
    children += targetMemberEnd.map targetMultiplicityDecoration();
    
    bendpoints := result.map connectorToBendpoint();
    styles += result.toEObject().map fontStyle();
}

mapping cls::Generalization::generalizationToEdge() : notation::Connector
when { self.oclIsKindOf(cls::Generalization) }
{
    type := PAPYRUS_NOTATION_EDGE_GENERALIZATION;
    
    var umlGeneralization := self.referencedElement.oclAsType(uml::Generalization);
    
    source := late resolveoneIn(cls::Classifier::classifierToShape, s : notation::Shape | s.element = umlGeneralization.specific.toEObject());
    target := late resolveoneIn(cls::Classifier::classifierToShape, s : notation::Shape | s.element = umlGeneralization.general.toEObject());
    
    element := umlGeneralization.toEObject();
    
    children += self.map stereotypeDecorationGeneralization();
    
    bendpoints := result.map connectorToBendpoint();
    styles += result.toEObject().map fontStyle();
}

mapping cls::Implementation::implementationToEdge() : notation::Connector
when { self.oclIsKindOf(cls::Implementation) }
{
    type := PAPYRUS_NOTATION_EDGE_IMPLEMENTATION;
    
    var umlInterfaceRealization := self.referencedElement.oclAsType(uml::InterfaceRealization);
        
    source := late resolveoneIn(cls::Classifier::classifierToShape, s : notation::Shape | s.element = umlInterfaceRealization.implementingClassifier.toEObject());
    target := late resolveoneIn(cls::Classifier::classifierToShape, s : notation::Shape | s.element = umlInterfaceRealization.contract.toEObject());
    
    element := umlInterfaceRealization.toEObject();
    
    children += self.map stereotypeDecorationImplementation();
    children += self.map nameDecorationImplementation();
    
    bendpoints := result.map connectorToBendpoint();
    styles += result.toEObject().map fontStyle();
}

mapping cls::AssociationMemberEnd::connectorEndToEdge() : notation::Connector
{
    type := PAPYRUS_NOTATION_EDGE_ASSOCIATIONBRANCH;
    
    var umlAssociation := self.association.referencedElement;
    element := umlAssociation.toEObject();

    
    var associationDiamondShape := self.association.resolveoneIn(cls::Association::multiAssociationToShape);
    assert error (associationDiamondShape != null) with log('Could not find the association diamond for a n-ary association.', umlAssociation);
    source := associationDiamondShape;
    
    var umlProperty := self.referencedElement.oclAsType(uml::Property);
    target := late resolveoneIn(cls::Classifier::classifierToShape, s : notation::Shape | s.element = umlProperty.type.toEObject());

    children += self.map targetRoleDecorationMemberEnd();
    children += self.map targetMultiplicityDecorationMemberEnd();

    bendpoints := result.map connectorToBendpoint();
    styles += result.toEObject().map fontStyle();
    styles += self.map semanticBranchStyle();
}

mapping textualCommons::Comment::commentToEdge() : notation::Connector
{
    type := PAPYRUS_NOTATION_EDGE_COMMENTLINK;
    
    var commentShape := self.resolveoneIn(textualCommons::Comment::commentToShape);
    var realCommentedElement := self.commentedElement.oclAsType(textualCommons::PackageableElement);

    source := commentShape;
    target := realCommentedElement.typeToView();
    result.toEObject().eUnset(notation::View.oclAsType(ecore::EClass).eStructuralFeatures->any(name = "element"));
    
    bendpoints := result.map connectorToBendpoint();
    styles += result.toEObject().map fontStyle();
}

mapping textualCommons::PackageImport::packageImportToEdge() : notation::Connector
{
    var umlPackageImport := self.referencedElement.oclAsType(uml::PackageImport);

    type := PAPYRUS_NOTATION_EDGE_PACKAGEIMPORT;
    element := umlPackageImport.toEObject();
    
    source := self.importingPackage.resolveoneIn(cls::Package::packageToShape);
    target := late resolveoneIn(cls::Package::packageToShape, s: notation::Shape | s.element = umlPackageImport.importedPackage.toEObject());
    
    children += self.map stereotypeDecorationPackageImport();
    
    bendpoints := result.map connectorToBendpoint();
    styles += result.toEObject().map fontStyle();
}




// decoration nodes

/*
5038 Comment Label Body Hint
6001 Stereotype (Association)
6002 Name (Association)
6003 TargetRole (Association)
6005 SourceRole (Association)
6007 Stereotype (Generalization)
6008 Stereotype (Interface Realization)
6009 Name (Interface Realization)
6024 TargetRole (AssociationBranch)
6033 SourceMultiplicity
6034 TargetMultiplicity
6035 TargetMultiplicity (AssociationBranch)
8521 Floating Label (Association Diamond)
*/

mapping textualCommons::Comment::commentLabelBodyHintDecoration() : notation::DecorationNode
{
    type := self.getNestedName(PAPYRUS_NOTATION_NODE_COMMENT_BODY_REGULAR);
}

mapping cls::Association::stereotypeDecorationAssocation() : notation::DecorationNode
{
    type := PAPYRUS_NOTATION_NODE_ASSOCIATION_STEREOTYPE;
    layoutConstraint := result.toEObject().map locationConstraint();
}

mapping cls::Association::nameDecorationAssociation() : notation::DecorationNode
{
    type := PAPYRUS_NOTATION_NODE_ASSOCIATION_NAME;
    layoutConstraint := result.toEObject().map locationConstraint();
}

mapping cls::Package::nameDecorationPackage() : notation::DecorationNode
{
    type := self.getNestedName(PAPYRUS_NOTATION_NODE_PACKAGE_NAME_REGULAR);
}

mapping cls::AssociationMemberEnd::targetRoleDecoration() : notation::DecorationNode
//when {self.referencedElement.oclAsType(uml::Type).name.length() > 0}
{
    type := PAPYRUS_NOTATION_NODE_ASSOCIATION_TARGETROLE;
    layoutConstraint := result.toEObject().map locationConstraint();
}

mapping cls::AssociationMemberEnd::sourceRoleDecoration() : notation::DecorationNode
//when {self.referencedElement.oclAsType(uml::Type).name.length() > 0}
{
    type := PAPYRUS_NOTATION_NODE_ASSOCIATION_SOURCEROLE;
    layoutConstraint := result.toEObject().map locationConstraint();
}

mapping cls::Generalization::stereotypeDecorationGeneralization() : notation::DecorationNode
{
    type := PAPYRUS_NOTATION_NODE_GENERALIZATION_STEREOTYPE;
    layoutConstraint := result.toEObject().map locationConstraint();
}

mapping cls::Implementation::stereotypeDecorationImplementation() : notation::DecorationNode
{
    type := PAPYRUS_NOTATION_NODE_INTERFACEREALIZATION_STEREOTYPE;
    layoutConstraint := result.toEObject().map locationConstraint();
}

mapping cls::Implementation::nameDecorationImplementation() : notation::DecorationNode
{
    type := PAPYRUS_NOTATION_NODE_INTERFACEREALIZATION_NAME;
    layoutConstraint := result.toEObject().map locationConstraint();
}

mapping cls::AssociationMemberEnd::targetRoleDecorationMemberEnd() : notation::DecorationNode
{
    type := PAPYRUS_NOTATION_NODE_ASSOCIATIONBRANCH_ROLENAME;
    layoutConstraint := result.toEObject().map locationConstraint();
}

mapping cls::AssociationMemberEnd::sourceMultiplicityDecoration() : notation::DecorationNode
//when {self.referencedElement.oclAsType(uml::Type).name.length() > 0}
{
    type := PAPYRUS_NOTATION_NODE_ASSOCIATION_SOURCEMULTIPLICITY;
    layoutConstraint := result.toEObject().map locationConstraint();
}

mapping cls::AssociationMemberEnd::targetMultiplicityDecoration() : notation::DecorationNode
//when {self.referencedElement.oclAsType(uml::Type).name.length() > 0}
{
    type := PAPYRUS_NOTATION_NODE_ASSOCIATION_TARGETMULTIPLICITY;
    layoutConstraint := result.toEObject().map locationConstraint();
}

mapping cls::AssociationMemberEnd::targetMultiplicityDecorationMemberEnd() : notation::DecorationNode
//when {self.cardinality != null}
{
    type := PAPYRUS_NOTATION_NODE_ASSOCIATIONBRANCH_MULTIPLICITY;
    layoutConstraint := result.toEObject().map locationConstraint();
}

mapping cls::Association::multiAssociationToFloatingLabelDecorationNode(): notation::DecorationNode
{
    type := PAPYRUS_NOTATION_NODE_NARY_NAME;
    layoutConstraint := result.toEObject().map locationConstraint();
}

mapping textualCommons::PackageImport::stereotypeDecorationPackageImport() : notation::DecorationNode
{
    type := PAPYRUS_NOTATION_NODE_PACKAGEIMPORT_STEREOTYPE;
    layoutConstraint := result.toEObject().map locationConstraint();
}

// style stuff

mapping cls::ClassDiagram::stringValueStyle() : notation::StringValueStyle
{
    name := "diagram_compatibility_version";
    stringValue := "1.3.0"; 
}

mapping cls::ClassDiagram::diagramStyle() : notation::DiagramStyle
{   
}

mapping cls::ClassDiagram::papyrusViewStyle(rootElement : uml::Package) : style::PapyrusDiagramStyle
{
    owner := rootElement.toEObject();
    diagramKindId := "org.eclipse.papyrus.uml.diagram.class";
}

mapping cls::AssociationMemberEnd::semanticBranchStyle() : notation::EObjectValueStyle
{
    name := "Semantic_Branch_Style";
    eObjectValue := self.referencedElement.toEObject();
}

// helpers

query textualCommons::PackageableElement::typeToView() : notation::View
{
    return if self.oclIsKindOf(cls::Association) or self.oclIsKindOf(cls::Generalization)
    or self.oclIsKindOf(cls::Implementation) or self.oclIsKindOf(textualCommons::PackageImport) then self.typeToEdge() else self.typeToShape() endif;
}

query textualCommons::PackageableElement::typeToEdge() : notation::View
{
    return self.resolveoneIn(cls::Connector::connectorToConnector);
}

query textualCommons::PackageableElement::typeToShape() : notation::View
{
    return self.resolveoneIn(cls::Classifier::classifierToShape);
}

query textualCommons::Element::isCommentable() : Boolean
{
    return self.oclIsKindOf(textualCommons::Commentable);
}

query textualCommons::Element::isCommented() : Boolean
{
    return self.isCommentable() and not self.oclAsType(textualCommons::Commentable).comments->isEmpty();
}

query textualCommons::Element::isNested() : Boolean
{
    var owningPackage := if self.getNearestPackage() = self then self.getNearestPackage().owningPackage else self.getNearestPackage() endif;
    var owningPackage2 := owningPackage.owningPackage;
    return owningPackage != null and owningPackage2 != null;
}

query textualCommons::Element::getNestedName(type : String) : String
{
    return type.getNestedName(self.isNested());
}