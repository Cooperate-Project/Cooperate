import TransformationUtils_Activity;

transformation Textual_to_Graphical_for_Activity(in textual : TXT, inout graphical : NOTATION, in umlmodel : UML, in umlprimitives : UML);

modeltype NOTATION uses notation('http://www.eclipse.org/gmf/runtime/1.0.2/notation');
modeltype UML uses uml('http://www.eclipse.org/uml2/5.0.0/UML');
modeltype TXT uses act('http://www.cooperateproject.de/modeling/textual/activity/Activity');
modeltype TXTCMN uses textualCommons('http://www.cooperateproject.de/modeling/textual/commons');
modeltype ECORE uses ecore('http://www.eclipse.org/emf/2002/Ecore');
modeltype STYLE uses style('http://www.eclipse.org/papyrus/infra/gmfdiag/style');

main() {
    var diagrams := textual.rootObjects()[act::ActivityDiagram];
    assert fatal (diagrams->size() = 1) with log ("Expected one diagram but got other number.", diagrams->size());
    diagrams->map diagramToDiagram();
}

mapping act::ActivityDiagram::diagramToDiagram() : notation::Diagram {
    type := "PapyrusUMLActivityDiagram";
    name := self.title;
    measurementUnit := notation::MeasurementUnit::Pixel;
    
    var umlRootElement := self.rootPackage.referencedElement.oclAsType(uml::Package);
    element := umlRootElement.toEObject();
    
 	// TODO: Child elements
    
    styles := self.map stringValueStyle();
    styles += self.map diagramStyle();
    styles += self.map papyrusViewStyle(umlRootElement);
}

mapping act::ActivityDiagram::papyrusViewStyle(rootElement : uml::Package) : style::PapyrusDiagramStyle {
    owner := rootElement.toEObject();
    diagramKindId := "org.eclipse.papyrus.uml.diagram.activity";
}

mapping act::ActivityDiagram::stringValueStyle() : notation::StringValueStyle {
    name := "diagram_compatibility_version";
    stringValue := "1.3.0"; 
}

mapping act::ActivityDiagram::diagramStyle() : notation::DiagramStyle {   
}

// actuall mapping

// TODO: Implement