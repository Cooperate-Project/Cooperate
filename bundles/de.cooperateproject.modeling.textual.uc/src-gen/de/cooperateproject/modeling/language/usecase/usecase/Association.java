/**
 * generated by Xtext 2.9.0
 */
package de.cooperateproject.modeling.language.usecase.usecase;

import org.eclipse.emf.common.util.EList;

/**
 * <!-- begin-user-doc -->
 * A representation of the model object '<em><b>Association</b></em>'.
 * <!-- end-user-doc -->
 *
 * <p>
 * The following features are supported:
 * </p>
 * <ul>
 *   <li>{@link de.cooperateproject.modeling.language.usecase.usecase.Association#getVisibility <em>Visibility</em>}</li>
 *   <li>{@link de.cooperateproject.modeling.language.usecase.usecase.Association#getModifiers <em>Modifiers</em>}</li>
 *   <li>{@link de.cooperateproject.modeling.language.usecase.usecase.Association#getBaseAssociations <em>Base Associations</em>}</li>
 *   <li>{@link de.cooperateproject.modeling.language.usecase.usecase.Association#getActorMultiplicity <em>Actor Multiplicity</em>}</li>
 *   <li>{@link de.cooperateproject.modeling.language.usecase.usecase.Association#getActor <em>Actor</em>}</li>
 *   <li>{@link de.cooperateproject.modeling.language.usecase.usecase.Association#getUsecaseMultiplicity <em>Usecase Multiplicity</em>}</li>
 *   <li>{@link de.cooperateproject.modeling.language.usecase.usecase.Association#getUsecase <em>Usecase</em>}</li>
 *   <li>{@link de.cooperateproject.modeling.language.usecase.usecase.Association#getOwnedRules <em>Owned Rules</em>}</li>
 * </ul>
 *
 * @see de.cooperateproject.modeling.language.usecase.usecase.UsecasePackage#getAssociation()
 * @model
 * @generated
 */
public interface Association extends Commentable
{
  /**
   * Returns the value of the '<em><b>Visibility</b></em>' attribute.
   * The literals are from the enumeration {@link de.cooperateproject.modeling.language.usecase.usecase.Visibility}.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of the '<em>Visibility</em>' attribute isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @return the value of the '<em>Visibility</em>' attribute.
   * @see de.cooperateproject.modeling.language.usecase.usecase.Visibility
   * @see #setVisibility(Visibility)
   * @see de.cooperateproject.modeling.language.usecase.usecase.UsecasePackage#getAssociation_Visibility()
   * @model
   * @generated
   */
  Visibility getVisibility();

  /**
   * Sets the value of the '{@link de.cooperateproject.modeling.language.usecase.usecase.Association#getVisibility <em>Visibility</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param value the new value of the '<em>Visibility</em>' attribute.
   * @see de.cooperateproject.modeling.language.usecase.usecase.Visibility
   * @see #getVisibility()
   * @generated
   */
  void setVisibility(Visibility value);

  /**
   * Returns the value of the '<em><b>Modifiers</b></em>' attribute list.
   * The list contents are of type {@link de.cooperateproject.modeling.language.usecase.usecase.Modifier}.
   * The literals are from the enumeration {@link de.cooperateproject.modeling.language.usecase.usecase.Modifier}.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of the '<em>Modifiers</em>' attribute list isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @return the value of the '<em>Modifiers</em>' attribute list.
   * @see de.cooperateproject.modeling.language.usecase.usecase.Modifier
   * @see de.cooperateproject.modeling.language.usecase.usecase.UsecasePackage#getAssociation_Modifiers()
   * @model unique="false"
   * @generated
   */
  EList<Modifier> getModifiers();

  /**
   * Returns the value of the '<em><b>Base Associations</b></em>' reference list.
   * The list contents are of type {@link de.cooperateproject.modeling.language.usecase.usecase.Association}.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of the '<em>Base Associations</em>' reference list isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @return the value of the '<em>Base Associations</em>' reference list.
   * @see de.cooperateproject.modeling.language.usecase.usecase.UsecasePackage#getAssociation_BaseAssociations()
   * @model
   * @generated
   */
  EList<Association> getBaseAssociations();

  /**
   * Returns the value of the '<em><b>Actor Multiplicity</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of the '<em>Actor Multiplicity</em>' containment reference isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @return the value of the '<em>Actor Multiplicity</em>' containment reference.
   * @see #setActorMultiplicity(Multiplicity)
   * @see de.cooperateproject.modeling.language.usecase.usecase.UsecasePackage#getAssociation_ActorMultiplicity()
   * @model containment="true"
   * @generated
   */
  Multiplicity getActorMultiplicity();

  /**
   * Sets the value of the '{@link de.cooperateproject.modeling.language.usecase.usecase.Association#getActorMultiplicity <em>Actor Multiplicity</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param value the new value of the '<em>Actor Multiplicity</em>' containment reference.
   * @see #getActorMultiplicity()
   * @generated
   */
  void setActorMultiplicity(Multiplicity value);

  /**
   * Returns the value of the '<em><b>Actor</b></em>' reference.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of the '<em>Actor</em>' reference isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @return the value of the '<em>Actor</em>' reference.
   * @see #setActor(Actor)
   * @see de.cooperateproject.modeling.language.usecase.usecase.UsecasePackage#getAssociation_Actor()
   * @model
   * @generated
   */
  Actor getActor();

  /**
   * Sets the value of the '{@link de.cooperateproject.modeling.language.usecase.usecase.Association#getActor <em>Actor</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param value the new value of the '<em>Actor</em>' reference.
   * @see #getActor()
   * @generated
   */
  void setActor(Actor value);

  /**
   * Returns the value of the '<em><b>Usecase Multiplicity</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of the '<em>Usecase Multiplicity</em>' containment reference isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @return the value of the '<em>Usecase Multiplicity</em>' containment reference.
   * @see #setUsecaseMultiplicity(Multiplicity)
   * @see de.cooperateproject.modeling.language.usecase.usecase.UsecasePackage#getAssociation_UsecaseMultiplicity()
   * @model containment="true"
   * @generated
   */
  Multiplicity getUsecaseMultiplicity();

  /**
   * Sets the value of the '{@link de.cooperateproject.modeling.language.usecase.usecase.Association#getUsecaseMultiplicity <em>Usecase Multiplicity</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param value the new value of the '<em>Usecase Multiplicity</em>' containment reference.
   * @see #getUsecaseMultiplicity()
   * @generated
   */
  void setUsecaseMultiplicity(Multiplicity value);

  /**
   * Returns the value of the '<em><b>Usecase</b></em>' reference.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of the '<em>Usecase</em>' reference isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @return the value of the '<em>Usecase</em>' reference.
   * @see #setUsecase(UseCase)
   * @see de.cooperateproject.modeling.language.usecase.usecase.UsecasePackage#getAssociation_Usecase()
   * @model
   * @generated
   */
  UseCase getUsecase();

  /**
   * Sets the value of the '{@link de.cooperateproject.modeling.language.usecase.usecase.Association#getUsecase <em>Usecase</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param value the new value of the '<em>Usecase</em>' reference.
   * @see #getUsecase()
   * @generated
   */
  void setUsecase(UseCase value);

  /**
   * Returns the value of the '<em><b>Owned Rules</b></em>' containment reference list.
   * The list contents are of type {@link de.cooperateproject.modeling.language.usecase.usecase.Constraint}.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of the '<em>Owned Rules</em>' containment reference list isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @return the value of the '<em>Owned Rules</em>' containment reference list.
   * @see de.cooperateproject.modeling.language.usecase.usecase.UsecasePackage#getAssociation_OwnedRules()
   * @model containment="true"
   * @generated
   */
  EList<Constraint> getOwnedRules();

} // Association
