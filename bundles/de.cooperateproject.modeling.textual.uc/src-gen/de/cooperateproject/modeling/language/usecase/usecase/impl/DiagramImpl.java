/**
 * generated by Xtext 2.9.0
 */
package de.cooperateproject.modeling.language.usecase.usecase.impl;

import de.cooperateproject.modeling.language.usecase.usecase.Actor;
import de.cooperateproject.modeling.language.usecase.usecase.Association;
import de.cooperateproject.modeling.language.usecase.usecase.Diagram;
import de.cooperateproject.modeling.language.usecase.usecase.Test;
import de.cooperateproject.modeling.language.usecase.usecase.Test2;
import de.cooperateproject.modeling.language.usecase.usecase.UMLModelReference;
import de.cooperateproject.modeling.language.usecase.usecase.UsecasePackage;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Diagram</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link de.cooperateproject.modeling.language.usecase.usecase.impl.DiagramImpl#getUmlModel <em>Uml Model</em>}</li>
 *   <li>{@link de.cooperateproject.modeling.language.usecase.usecase.impl.DiagramImpl#getTest <em>Test</em>}</li>
 *   <li>{@link de.cooperateproject.modeling.language.usecase.usecase.impl.DiagramImpl#getTest2 <em>Test2</em>}</li>
 *   <li>{@link de.cooperateproject.modeling.language.usecase.usecase.impl.DiagramImpl#getActors <em>Actors</em>}</li>
 *   <li>{@link de.cooperateproject.modeling.language.usecase.usecase.impl.DiagramImpl#getSystem <em>System</em>}</li>
 *   <li>{@link de.cooperateproject.modeling.language.usecase.usecase.impl.DiagramImpl#getAssociations <em>Associations</em>}</li>
 * </ul>
 *
 * @generated
 */
public class DiagramImpl extends MinimalEObjectImpl.Container implements Diagram
{
  /**
   * The cached value of the '{@link #getUmlModel() <em>Uml Model</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getUmlModel()
   * @generated
   * @ordered
   */
  protected UMLModelReference umlModel;

  /**
   * The cached value of the '{@link #getTest() <em>Test</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTest()
   * @generated
   * @ordered
   */
  protected Test test;

  /**
   * The cached value of the '{@link #getTest2() <em>Test2</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTest2()
   * @generated
   * @ordered
   */
  protected Test2 test2;

  /**
   * The cached value of the '{@link #getActors() <em>Actors</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getActors()
   * @generated
   * @ordered
   */
  protected EList<Actor> actors;

  /**
   * The cached value of the '{@link #getSystem() <em>System</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSystem()
   * @generated
   * @ordered
   */
  protected de.cooperateproject.modeling.language.usecase.usecase.System system;

  /**
   * The cached value of the '{@link #getAssociations() <em>Associations</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAssociations()
   * @generated
   * @ordered
   */
  protected EList<Association> associations;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DiagramImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return UsecasePackage.Literals.DIAGRAM;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public UMLModelReference getUmlModel()
  {
    return umlModel;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetUmlModel(UMLModelReference newUmlModel, NotificationChain msgs)
  {
    UMLModelReference oldUmlModel = umlModel;
    umlModel = newUmlModel;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, UsecasePackage.DIAGRAM__UML_MODEL, oldUmlModel, newUmlModel);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setUmlModel(UMLModelReference newUmlModel)
  {
    if (newUmlModel != umlModel)
    {
      NotificationChain msgs = null;
      if (umlModel != null)
        msgs = ((InternalEObject)umlModel).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - UsecasePackage.DIAGRAM__UML_MODEL, null, msgs);
      if (newUmlModel != null)
        msgs = ((InternalEObject)newUmlModel).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - UsecasePackage.DIAGRAM__UML_MODEL, null, msgs);
      msgs = basicSetUmlModel(newUmlModel, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, UsecasePackage.DIAGRAM__UML_MODEL, newUmlModel, newUmlModel));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Test getTest()
  {
    return test;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetTest(Test newTest, NotificationChain msgs)
  {
    Test oldTest = test;
    test = newTest;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, UsecasePackage.DIAGRAM__TEST, oldTest, newTest);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setTest(Test newTest)
  {
    if (newTest != test)
    {
      NotificationChain msgs = null;
      if (test != null)
        msgs = ((InternalEObject)test).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - UsecasePackage.DIAGRAM__TEST, null, msgs);
      if (newTest != null)
        msgs = ((InternalEObject)newTest).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - UsecasePackage.DIAGRAM__TEST, null, msgs);
      msgs = basicSetTest(newTest, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, UsecasePackage.DIAGRAM__TEST, newTest, newTest));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Test2 getTest2()
  {
    return test2;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetTest2(Test2 newTest2, NotificationChain msgs)
  {
    Test2 oldTest2 = test2;
    test2 = newTest2;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, UsecasePackage.DIAGRAM__TEST2, oldTest2, newTest2);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setTest2(Test2 newTest2)
  {
    if (newTest2 != test2)
    {
      NotificationChain msgs = null;
      if (test2 != null)
        msgs = ((InternalEObject)test2).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - UsecasePackage.DIAGRAM__TEST2, null, msgs);
      if (newTest2 != null)
        msgs = ((InternalEObject)newTest2).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - UsecasePackage.DIAGRAM__TEST2, null, msgs);
      msgs = basicSetTest2(newTest2, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, UsecasePackage.DIAGRAM__TEST2, newTest2, newTest2));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Actor> getActors()
  {
    if (actors == null)
    {
      actors = new EObjectContainmentEList<Actor>(Actor.class, this, UsecasePackage.DIAGRAM__ACTORS);
    }
    return actors;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public de.cooperateproject.modeling.language.usecase.usecase.System getSystem()
  {
    return system;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetSystem(de.cooperateproject.modeling.language.usecase.usecase.System newSystem, NotificationChain msgs)
  {
    de.cooperateproject.modeling.language.usecase.usecase.System oldSystem = system;
    system = newSystem;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, UsecasePackage.DIAGRAM__SYSTEM, oldSystem, newSystem);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setSystem(de.cooperateproject.modeling.language.usecase.usecase.System newSystem)
  {
    if (newSystem != system)
    {
      NotificationChain msgs = null;
      if (system != null)
        msgs = ((InternalEObject)system).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - UsecasePackage.DIAGRAM__SYSTEM, null, msgs);
      if (newSystem != null)
        msgs = ((InternalEObject)newSystem).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - UsecasePackage.DIAGRAM__SYSTEM, null, msgs);
      msgs = basicSetSystem(newSystem, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, UsecasePackage.DIAGRAM__SYSTEM, newSystem, newSystem));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Association> getAssociations()
  {
    if (associations == null)
    {
      associations = new EObjectContainmentEList<Association>(Association.class, this, UsecasePackage.DIAGRAM__ASSOCIATIONS);
    }
    return associations;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case UsecasePackage.DIAGRAM__UML_MODEL:
        return basicSetUmlModel(null, msgs);
      case UsecasePackage.DIAGRAM__TEST:
        return basicSetTest(null, msgs);
      case UsecasePackage.DIAGRAM__TEST2:
        return basicSetTest2(null, msgs);
      case UsecasePackage.DIAGRAM__ACTORS:
        return ((InternalEList<?>)getActors()).basicRemove(otherEnd, msgs);
      case UsecasePackage.DIAGRAM__SYSTEM:
        return basicSetSystem(null, msgs);
      case UsecasePackage.DIAGRAM__ASSOCIATIONS:
        return ((InternalEList<?>)getAssociations()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case UsecasePackage.DIAGRAM__UML_MODEL:
        return getUmlModel();
      case UsecasePackage.DIAGRAM__TEST:
        return getTest();
      case UsecasePackage.DIAGRAM__TEST2:
        return getTest2();
      case UsecasePackage.DIAGRAM__ACTORS:
        return getActors();
      case UsecasePackage.DIAGRAM__SYSTEM:
        return getSystem();
      case UsecasePackage.DIAGRAM__ASSOCIATIONS:
        return getAssociations();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case UsecasePackage.DIAGRAM__UML_MODEL:
        setUmlModel((UMLModelReference)newValue);
        return;
      case UsecasePackage.DIAGRAM__TEST:
        setTest((Test)newValue);
        return;
      case UsecasePackage.DIAGRAM__TEST2:
        setTest2((Test2)newValue);
        return;
      case UsecasePackage.DIAGRAM__ACTORS:
        getActors().clear();
        getActors().addAll((Collection<? extends Actor>)newValue);
        return;
      case UsecasePackage.DIAGRAM__SYSTEM:
        setSystem((de.cooperateproject.modeling.language.usecase.usecase.System)newValue);
        return;
      case UsecasePackage.DIAGRAM__ASSOCIATIONS:
        getAssociations().clear();
        getAssociations().addAll((Collection<? extends Association>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case UsecasePackage.DIAGRAM__UML_MODEL:
        setUmlModel((UMLModelReference)null);
        return;
      case UsecasePackage.DIAGRAM__TEST:
        setTest((Test)null);
        return;
      case UsecasePackage.DIAGRAM__TEST2:
        setTest2((Test2)null);
        return;
      case UsecasePackage.DIAGRAM__ACTORS:
        getActors().clear();
        return;
      case UsecasePackage.DIAGRAM__SYSTEM:
        setSystem((de.cooperateproject.modeling.language.usecase.usecase.System)null);
        return;
      case UsecasePackage.DIAGRAM__ASSOCIATIONS:
        getAssociations().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case UsecasePackage.DIAGRAM__UML_MODEL:
        return umlModel != null;
      case UsecasePackage.DIAGRAM__TEST:
        return test != null;
      case UsecasePackage.DIAGRAM__TEST2:
        return test2 != null;
      case UsecasePackage.DIAGRAM__ACTORS:
        return actors != null && !actors.isEmpty();
      case UsecasePackage.DIAGRAM__SYSTEM:
        return system != null;
      case UsecasePackage.DIAGRAM__ASSOCIATIONS:
        return associations != null && !associations.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //DiagramImpl
