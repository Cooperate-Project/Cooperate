/*
 * generated by Xtext 2.9.0
 */
package de.cooperateproject.modeling.language.usecase.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class UseCaseGrammarAccess extends AbstractGrammarElementFinder {
	
	public class DiagramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.language.usecase.UseCase.Diagram");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cUmlModelAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cUmlModelUMLModelReferenceParserRuleCall_0_0 = (RuleCall)cUmlModelAssignment_0.eContents().get(0);
		private final Assignment cTestAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTestTestParserRuleCall_1_0 = (RuleCall)cTestAssignment_1.eContents().get(0);
		private final Assignment cTest2Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTest2Test2ParserRuleCall_2_0 = (RuleCall)cTest2Assignment_2.eContents().get(0);
		private final Assignment cActorsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cActorsActorParserRuleCall_3_0 = (RuleCall)cActorsAssignment_3.eContents().get(0);
		private final Assignment cSystemAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSystemSystemParserRuleCall_4_0 = (RuleCall)cSystemAssignment_4.eContents().get(0);
		private final Assignment cAssociationsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cAssociationsAssociationParserRuleCall_5_0 = (RuleCall)cAssociationsAssignment_5.eContents().get(0);
		
		//Diagram:
		//	umlModel=UMLModelReference test=Test test2=Test2 actors+=Actor* system=System associations+=Association*;
		@Override public ParserRule getRule() { return rule; }
		
		////(actors+=Actor | associations+=Association)* system=System | (actors+=Actor | associations+=Association)*;
		//umlModel=UMLModelReference test=Test test2=Test2 actors+=Actor* system=System associations+=Association*
		public Group getGroup() { return cGroup; }
		
		////(actors+=Actor | associations+=Association)* system=System | (actors+=Actor | associations+=Association)*;
		//umlModel=UMLModelReference
		public Assignment getUmlModelAssignment_0() { return cUmlModelAssignment_0; }
		
		//UMLModelReference
		public RuleCall getUmlModelUMLModelReferenceParserRuleCall_0_0() { return cUmlModelUMLModelReferenceParserRuleCall_0_0; }
		
		//test=Test
		public Assignment getTestAssignment_1() { return cTestAssignment_1; }
		
		//Test
		public RuleCall getTestTestParserRuleCall_1_0() { return cTestTestParserRuleCall_1_0; }
		
		//test2=Test2
		public Assignment getTest2Assignment_2() { return cTest2Assignment_2; }
		
		//Test2
		public RuleCall getTest2Test2ParserRuleCall_2_0() { return cTest2Test2ParserRuleCall_2_0; }
		
		//actors+=Actor*
		public Assignment getActorsAssignment_3() { return cActorsAssignment_3; }
		
		//Actor
		public RuleCall getActorsActorParserRuleCall_3_0() { return cActorsActorParserRuleCall_3_0; }
		
		//system=System
		public Assignment getSystemAssignment_4() { return cSystemAssignment_4; }
		
		//System
		public RuleCall getSystemSystemParserRuleCall_4_0() { return cSystemSystemParserRuleCall_4_0; }
		
		//associations+=Association*
		public Assignment getAssociationsAssignment_5() { return cAssociationsAssignment_5; }
		
		//Association
		public RuleCall getAssociationsAssociationParserRuleCall_5_0() { return cAssociationsAssociationParserRuleCall_5_0; }
	}
	public class UMLModelReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.language.usecase.UseCase.UMLModelReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportURIAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportURIImportURIParserRuleCall_1_0 = (RuleCall)cImportURIAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//UMLModelReference:
		//	'use' importURI=ImportURI ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'use' importURI=ImportURI ';'
		public Group getGroup() { return cGroup; }
		
		//'use'
		public Keyword getUseKeyword_0() { return cUseKeyword_0; }
		
		//importURI=ImportURI
		public Assignment getImportURIAssignment_1() { return cImportURIAssignment_1; }
		
		//ImportURI
		public RuleCall getImportURIImportURIParserRuleCall_1_0() { return cImportURIImportURIParserRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class ImportURIElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.language.usecase.UseCase.ImportURI");
		private final RuleCall cSTRINGTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ImportURI:
		//	STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall() { return cSTRINGTerminalRuleCall; }
	}
	public class TestElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.language.usecase.UseCase.Test");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTestKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cActorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cActorActorCrossReference_1_0 = (CrossReference)cActorAssignment_1.eContents().get(0);
		private final RuleCall cActorActorNameParserRuleCall_1_0_1 = (RuleCall)cActorActorCrossReference_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Test:
		//	'test' actor=[Actor|Name] ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'test' actor=[Actor|Name] ';'
		public Group getGroup() { return cGroup; }
		
		//'test'
		public Keyword getTestKeyword_0() { return cTestKeyword_0; }
		
		//actor=[Actor|Name]
		public Assignment getActorAssignment_1() { return cActorAssignment_1; }
		
		//[Actor|Name]
		public CrossReference getActorActorCrossReference_1_0() { return cActorActorCrossReference_1_0; }
		
		//Name
		public RuleCall getActorActorNameParserRuleCall_1_0_1() { return cActorActorNameParserRuleCall_1_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class Test2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.language.usecase.UseCase.Test2");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTest2Keyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cActorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cActorActorCrossReference_1_0 = (CrossReference)cActorAssignment_1.eContents().get(0);
		private final RuleCall cActorActorFQNParserRuleCall_1_0_1 = (RuleCall)cActorActorCrossReference_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Test2:
		//	'test2' actor=[uml::Actor|FQN] ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'test2' actor=[uml::Actor|FQN] ';'
		public Group getGroup() { return cGroup; }
		
		//'test2'
		public Keyword getTest2Keyword_0() { return cTest2Keyword_0; }
		
		//actor=[uml::Actor|FQN]
		public Assignment getActorAssignment_1() { return cActorAssignment_1; }
		
		//[uml::Actor|FQN]
		public CrossReference getActorActorCrossReference_1_0() { return cActorActorCrossReference_1_0; }
		
		//FQN
		public RuleCall getActorActorFQNParserRuleCall_1_0_1() { return cActorActorFQNParserRuleCall_1_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class FQNElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.language.usecase.UseCase.FQN");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//FQN:
		//	ID ('.' ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	public class CommentableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.language.usecase.UseCase.Commentable");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cActorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSystemParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cUseCaseParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cAssociationParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cExtensionPointParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cExtensionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cIncludeParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//Commentable:
		//	Actor | System | UseCase | Association | ExtensionPoint | Extension | Include;
		@Override public ParserRule getRule() { return rule; }
		
		//Actor | System | UseCase | Association | ExtensionPoint | Extension | Include
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Actor
		public RuleCall getActorParserRuleCall_0() { return cActorParserRuleCall_0; }
		
		//System
		public RuleCall getSystemParserRuleCall_1() { return cSystemParserRuleCall_1; }
		
		//UseCase
		public RuleCall getUseCaseParserRuleCall_2() { return cUseCaseParserRuleCall_2; }
		
		//Association
		public RuleCall getAssociationParserRuleCall_3() { return cAssociationParserRuleCall_3; }
		
		//ExtensionPoint
		public RuleCall getExtensionPointParserRuleCall_4() { return cExtensionPointParserRuleCall_4; }
		
		//Extension
		public RuleCall getExtensionParserRuleCall_5() { return cExtensionParserRuleCall_5; }
		
		//Include
		public RuleCall getIncludeParserRuleCall_6() { return cIncludeParserRuleCall_6; }
	}
	public class ActorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.language.usecase.UseCase.Actor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cActorAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cCommentsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCommentsCommentParserRuleCall_1_0 = (RuleCall)cCommentsAssignment_1.eContents().get(0);
		private final Assignment cVisibilityAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVisibilityVisibilityEnumRuleCall_2_0 = (RuleCall)cVisibilityAssignment_2.eContents().get(0);
		private final Assignment cModifiersAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cModifiersModifierEnumRuleCall_3_0 = (RuleCall)cModifiersAssignment_3.eContents().get(0);
		private final Keyword cActorKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cNameAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cNameNameParserRuleCall_5_0 = (RuleCall)cNameAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cExtendsKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cBaseActorsAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final CrossReference cBaseActorsActorCrossReference_6_1_0 = (CrossReference)cBaseActorsAssignment_6_1.eContents().get(0);
		private final RuleCall cBaseActorsActorNameParserRuleCall_6_1_0_1 = (RuleCall)cBaseActorsActorCrossReference_6_1_0.eContents().get(1);
		private final Alternatives cAlternatives_7 = (Alternatives)cGroup.eContents().get(7);
		private final Group cGroup_7_0 = (Group)cAlternatives_7.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_7_0_0 = (Keyword)cGroup_7_0.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7_0_1 = (Keyword)cGroup_7_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_7_1 = (Keyword)cAlternatives_7.eContents().get(1);
		
		//Actor:
		//	{Actor} comments+=Comment* visibility=Visibility? modifiers+=Modifier* 'actor' name=Name ('extends'
		//	baseActors+=[Actor|Name])? ('{' '}' | ';');
		@Override public ParserRule getRule() { return rule; }
		
		//{Actor} comments+=Comment* visibility=Visibility? modifiers+=Modifier* 'actor' name=Name ('extends'
		//baseActors+=[Actor|Name])? ('{' '}' | ';')
		public Group getGroup() { return cGroup; }
		
		//{Actor}
		public Action getActorAction_0() { return cActorAction_0; }
		
		//comments+=Comment*
		public Assignment getCommentsAssignment_1() { return cCommentsAssignment_1; }
		
		//Comment
		public RuleCall getCommentsCommentParserRuleCall_1_0() { return cCommentsCommentParserRuleCall_1_0; }
		
		//visibility=Visibility?
		public Assignment getVisibilityAssignment_2() { return cVisibilityAssignment_2; }
		
		//Visibility
		public RuleCall getVisibilityVisibilityEnumRuleCall_2_0() { return cVisibilityVisibilityEnumRuleCall_2_0; }
		
		//modifiers+=Modifier*
		public Assignment getModifiersAssignment_3() { return cModifiersAssignment_3; }
		
		//Modifier
		public RuleCall getModifiersModifierEnumRuleCall_3_0() { return cModifiersModifierEnumRuleCall_3_0; }
		
		//'actor'
		public Keyword getActorKeyword_4() { return cActorKeyword_4; }
		
		//name=Name
		public Assignment getNameAssignment_5() { return cNameAssignment_5; }
		
		//Name
		public RuleCall getNameNameParserRuleCall_5_0() { return cNameNameParserRuleCall_5_0; }
		
		//('extends' baseActors+=[Actor|Name])?
		public Group getGroup_6() { return cGroup_6; }
		
		//'extends'
		public Keyword getExtendsKeyword_6_0() { return cExtendsKeyword_6_0; }
		
		//baseActors+=[Actor|Name]
		public Assignment getBaseActorsAssignment_6_1() { return cBaseActorsAssignment_6_1; }
		
		//[Actor|Name]
		public CrossReference getBaseActorsActorCrossReference_6_1_0() { return cBaseActorsActorCrossReference_6_1_0; }
		
		//Name
		public RuleCall getBaseActorsActorNameParserRuleCall_6_1_0_1() { return cBaseActorsActorNameParserRuleCall_6_1_0_1; }
		
		//('{' '}' | ';')
		public Alternatives getAlternatives_7() { return cAlternatives_7; }
		
		//'{' '}'
		public Group getGroup_7_0() { return cGroup_7_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_7_0_0() { return cLeftCurlyBracketKeyword_7_0_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7_0_1() { return cRightCurlyBracketKeyword_7_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_7_1() { return cSemicolonKeyword_7_1; }
	}
	public class SystemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.language.usecase.UseCase.System");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCommentsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCommentsCommentParserRuleCall_0_0 = (RuleCall)cCommentsAssignment_0.eContents().get(0);
		private final Keyword cSystemKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameNameParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cUsecasesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cUsecasesUseCaseParserRuleCall_4_0 = (RuleCall)cUsecasesAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//System:
		//	comments+=Comment* "system" name=Name '{' usecases+=UseCase* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//comments+=Comment* "system" name=Name '{' usecases+=UseCase* '}'
		public Group getGroup() { return cGroup; }
		
		//comments+=Comment*
		public Assignment getCommentsAssignment_0() { return cCommentsAssignment_0; }
		
		//Comment
		public RuleCall getCommentsCommentParserRuleCall_0_0() { return cCommentsCommentParserRuleCall_0_0; }
		
		//"system"
		public Keyword getSystemKeyword_1() { return cSystemKeyword_1; }
		
		//name=Name
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//Name
		public RuleCall getNameNameParserRuleCall_2_0() { return cNameNameParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//usecases+=UseCase*
		public Assignment getUsecasesAssignment_4() { return cUsecasesAssignment_4; }
		
		//UseCase
		public RuleCall getUsecasesUseCaseParserRuleCall_4_0() { return cUsecasesUseCaseParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class UseCaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.language.usecase.UseCase.UseCase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCommentsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCommentsCommentParserRuleCall_0_0 = (RuleCall)cCommentsAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cUsecaseKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cUCKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameNameParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cExtendsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cBaseUseCasesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cBaseUseCasesUseCaseCrossReference_3_1_0 = (CrossReference)cBaseUseCasesAssignment_3_1.eContents().get(0);
		private final RuleCall cBaseUseCasesUseCaseNameParserRuleCall_3_1_0_1 = (RuleCall)cBaseUseCasesUseCaseCrossReference_3_1_0.eContents().get(1);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Keyword cSemicolonKeyword_4_0 = (Keyword)cAlternatives_4.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cAlternatives_4.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Alternatives cAlternatives_4_1_1 = (Alternatives)cGroup_4_1.eContents().get(1);
		private final Assignment cExtensionPointsAssignment_4_1_1_0 = (Assignment)cAlternatives_4_1_1.eContents().get(0);
		private final RuleCall cExtensionPointsExtensionPointParserRuleCall_4_1_1_0_0 = (RuleCall)cExtensionPointsAssignment_4_1_1_0.eContents().get(0);
		private final Assignment cExtensionsAssignment_4_1_1_1 = (Assignment)cAlternatives_4_1_1.eContents().get(1);
		private final RuleCall cExtensionsExtensionParserRuleCall_4_1_1_1_0 = (RuleCall)cExtensionsAssignment_4_1_1_1.eContents().get(0);
		private final Assignment cIncludesAssignment_4_1_1_2 = (Assignment)cAlternatives_4_1_1.eContents().get(2);
		private final RuleCall cIncludesIncludeParserRuleCall_4_1_1_2_0 = (RuleCall)cIncludesAssignment_4_1_1_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_1_2 = (Keyword)cGroup_4_1.eContents().get(2);
		
		//UseCase:
		//	comments+=Comment* ('usecase' | 'UC') name=Name ('extends' baseUseCases+=[UseCase|Name])? (';' | '{'
		//	(extensionPoints+=ExtensionPoint | extensions+=Extension | includes+=Include)*
		//	'}');
		@Override public ParserRule getRule() { return rule; }
		
		//comments+=Comment* ('usecase' | 'UC') name=Name ('extends' baseUseCases+=[UseCase|Name])? (';' | '{'
		//(extensionPoints+=ExtensionPoint | extensions+=Extension | includes+=Include)* '}')
		public Group getGroup() { return cGroup; }
		
		//comments+=Comment*
		public Assignment getCommentsAssignment_0() { return cCommentsAssignment_0; }
		
		//Comment
		public RuleCall getCommentsCommentParserRuleCall_0_0() { return cCommentsCommentParserRuleCall_0_0; }
		
		//('usecase' | 'UC')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'usecase'
		public Keyword getUsecaseKeyword_1_0() { return cUsecaseKeyword_1_0; }
		
		//'UC'
		public Keyword getUCKeyword_1_1() { return cUCKeyword_1_1; }
		
		//name=Name
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//Name
		public RuleCall getNameNameParserRuleCall_2_0() { return cNameNameParserRuleCall_2_0; }
		
		//('extends' baseUseCases+=[UseCase|Name])?
		public Group getGroup_3() { return cGroup_3; }
		
		//'extends'
		public Keyword getExtendsKeyword_3_0() { return cExtendsKeyword_3_0; }
		
		//baseUseCases+=[UseCase|Name]
		public Assignment getBaseUseCasesAssignment_3_1() { return cBaseUseCasesAssignment_3_1; }
		
		//[UseCase|Name]
		public CrossReference getBaseUseCasesUseCaseCrossReference_3_1_0() { return cBaseUseCasesUseCaseCrossReference_3_1_0; }
		
		//Name
		public RuleCall getBaseUseCasesUseCaseNameParserRuleCall_3_1_0_1() { return cBaseUseCasesUseCaseNameParserRuleCall_3_1_0_1; }
		
		//(';' | '{' (extensionPoints+=ExtensionPoint | extensions+=Extension | includes+=Include)* '}')
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//';'
		public Keyword getSemicolonKeyword_4_0() { return cSemicolonKeyword_4_0; }
		
		//'{' (extensionPoints+=ExtensionPoint | extensions+=Extension | includes+=Include)* '}'
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4_1_0() { return cLeftCurlyBracketKeyword_4_1_0; }
		
		//(extensionPoints+=ExtensionPoint | extensions+=Extension | includes+=Include)*
		public Alternatives getAlternatives_4_1_1() { return cAlternatives_4_1_1; }
		
		//extensionPoints+=ExtensionPoint
		public Assignment getExtensionPointsAssignment_4_1_1_0() { return cExtensionPointsAssignment_4_1_1_0; }
		
		//ExtensionPoint
		public RuleCall getExtensionPointsExtensionPointParserRuleCall_4_1_1_0_0() { return cExtensionPointsExtensionPointParserRuleCall_4_1_1_0_0; }
		
		//extensions+=Extension
		public Assignment getExtensionsAssignment_4_1_1_1() { return cExtensionsAssignment_4_1_1_1; }
		
		//Extension
		public RuleCall getExtensionsExtensionParserRuleCall_4_1_1_1_0() { return cExtensionsExtensionParserRuleCall_4_1_1_1_0; }
		
		//includes+=Include
		public Assignment getIncludesAssignment_4_1_1_2() { return cIncludesAssignment_4_1_1_2; }
		
		//Include
		public RuleCall getIncludesIncludeParserRuleCall_4_1_1_2_0() { return cIncludesIncludeParserRuleCall_4_1_1_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4_1_2() { return cRightCurlyBracketKeyword_4_1_2; }
	}
	public class ExtensionPointElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.language.usecase.UseCase.ExtensionPoint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCommentsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCommentsCommentParserRuleCall_0_0 = (RuleCall)cCommentsAssignment_0.eContents().get(0);
		private final Assignment cVisibilityAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVisibilityVisibilityEnumRuleCall_1_0 = (RuleCall)cVisibilityAssignment_1.eContents().get(0);
		private final Assignment cModifiersAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cModifiersModifierEnumRuleCall_2_0 = (RuleCall)cModifiersAssignment_2.eContents().get(0);
		private final Keyword cExtensionpointKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameNameParserRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ExtensionPoint:
		//	comments+=Comment* visibility=Visibility? modifiers+=Modifier* 'extensionpoint' name=Name ';';
		@Override public ParserRule getRule() { return rule; }
		
		//comments+=Comment* visibility=Visibility? modifiers+=Modifier* 'extensionpoint' name=Name ';'
		public Group getGroup() { return cGroup; }
		
		//comments+=Comment*
		public Assignment getCommentsAssignment_0() { return cCommentsAssignment_0; }
		
		//Comment
		public RuleCall getCommentsCommentParserRuleCall_0_0() { return cCommentsCommentParserRuleCall_0_0; }
		
		//visibility=Visibility?
		public Assignment getVisibilityAssignment_1() { return cVisibilityAssignment_1; }
		
		//Visibility
		public RuleCall getVisibilityVisibilityEnumRuleCall_1_0() { return cVisibilityVisibilityEnumRuleCall_1_0; }
		
		//modifiers+=Modifier*
		public Assignment getModifiersAssignment_2() { return cModifiersAssignment_2; }
		
		//Modifier
		public RuleCall getModifiersModifierEnumRuleCall_2_0() { return cModifiersModifierEnumRuleCall_2_0; }
		
		//'extensionpoint'
		public Keyword getExtensionpointKeyword_3() { return cExtensionpointKeyword_3; }
		
		//name=Name
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }
		
		//Name
		public RuleCall getNameNameParserRuleCall_4_0() { return cNameNameParserRuleCall_4_0; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class ExtensionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.language.usecase.UseCase.Extension");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCommentsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCommentsCommentParserRuleCall_0_0 = (RuleCall)cCommentsAssignment_0.eContents().get(0);
		private final Assignment cVisibilityAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVisibilityVisibilityEnumRuleCall_1_0 = (RuleCall)cVisibilityAssignment_1.eContents().get(0);
		private final Keyword cExtensionKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameNameParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLocationKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cLocationAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cLocationExtensionPointCrossReference_6_0 = (CrossReference)cLocationAssignment_6.eContents().get(0);
		private final RuleCall cLocationExtensionPointNameParserRuleCall_6_0_1 = (RuleCall)cLocationExtensionPointCrossReference_6_0.eContents().get(1);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cConditionKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cConditionAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cConditionConstraintParserRuleCall_7_1_0 = (RuleCall)cConditionAssignment_7_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_7_2 = (Keyword)cGroup_7.eContents().get(2);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Extension:
		//	comments+=Comment* visibility=Visibility? 'extension' name=Name? '{' 'location' location=[ExtensionPoint|Name]
		//	('condition' condition=Constraint ';')? '}';
		@Override public ParserRule getRule() { return rule; }
		
		//comments+=Comment* visibility=Visibility? 'extension' name=Name? '{' 'location' location=[ExtensionPoint|Name]
		//('condition' condition=Constraint ';')? '}'
		public Group getGroup() { return cGroup; }
		
		//comments+=Comment*
		public Assignment getCommentsAssignment_0() { return cCommentsAssignment_0; }
		
		//Comment
		public RuleCall getCommentsCommentParserRuleCall_0_0() { return cCommentsCommentParserRuleCall_0_0; }
		
		//visibility=Visibility?
		public Assignment getVisibilityAssignment_1() { return cVisibilityAssignment_1; }
		
		//Visibility
		public RuleCall getVisibilityVisibilityEnumRuleCall_1_0() { return cVisibilityVisibilityEnumRuleCall_1_0; }
		
		//'extension'
		public Keyword getExtensionKeyword_2() { return cExtensionKeyword_2; }
		
		//name=Name?
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//Name
		public RuleCall getNameNameParserRuleCall_3_0() { return cNameNameParserRuleCall_3_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//'location'
		public Keyword getLocationKeyword_5() { return cLocationKeyword_5; }
		
		//location=[ExtensionPoint|Name]
		public Assignment getLocationAssignment_6() { return cLocationAssignment_6; }
		
		//[ExtensionPoint|Name]
		public CrossReference getLocationExtensionPointCrossReference_6_0() { return cLocationExtensionPointCrossReference_6_0; }
		
		//Name
		public RuleCall getLocationExtensionPointNameParserRuleCall_6_0_1() { return cLocationExtensionPointNameParserRuleCall_6_0_1; }
		
		//('condition' condition=Constraint ';')?
		public Group getGroup_7() { return cGroup_7; }
		
		//'condition'
		public Keyword getConditionKeyword_7_0() { return cConditionKeyword_7_0; }
		
		//condition=Constraint
		public Assignment getConditionAssignment_7_1() { return cConditionAssignment_7_1; }
		
		//Constraint
		public RuleCall getConditionConstraintParserRuleCall_7_1_0() { return cConditionConstraintParserRuleCall_7_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_7_2() { return cSemicolonKeyword_7_2; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class IncludeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.language.usecase.UseCase.Include");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCommentsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCommentsCommentParserRuleCall_0_0 = (RuleCall)cCommentsAssignment_0.eContents().get(0);
		private final Assignment cVisibilityAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVisibilityVisibilityEnumRuleCall_1_0 = (RuleCall)cVisibilityAssignment_1.eContents().get(0);
		private final Keyword cIncludeKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameNameParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Assignment cAdditionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cAdditionUseCaseCrossReference_4_0 = (CrossReference)cAdditionAssignment_4.eContents().get(0);
		private final RuleCall cAdditionUseCaseNameParserRuleCall_4_0_1 = (RuleCall)cAdditionUseCaseCrossReference_4_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Include:
		//	comments+=Comment* visibility=Visibility? 'include' name=Name? addition=[UseCase|Name] ';';
		@Override public ParserRule getRule() { return rule; }
		
		//comments+=Comment* visibility=Visibility? 'include' name=Name? addition=[UseCase|Name] ';'
		public Group getGroup() { return cGroup; }
		
		//comments+=Comment*
		public Assignment getCommentsAssignment_0() { return cCommentsAssignment_0; }
		
		//Comment
		public RuleCall getCommentsCommentParserRuleCall_0_0() { return cCommentsCommentParserRuleCall_0_0; }
		
		//visibility=Visibility?
		public Assignment getVisibilityAssignment_1() { return cVisibilityAssignment_1; }
		
		//Visibility
		public RuleCall getVisibilityVisibilityEnumRuleCall_1_0() { return cVisibilityVisibilityEnumRuleCall_1_0; }
		
		//'include'
		public Keyword getIncludeKeyword_2() { return cIncludeKeyword_2; }
		
		//name=Name?
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//Name
		public RuleCall getNameNameParserRuleCall_3_0() { return cNameNameParserRuleCall_3_0; }
		
		//addition=[UseCase|Name]
		public Assignment getAdditionAssignment_4() { return cAdditionAssignment_4; }
		
		//[UseCase|Name]
		public CrossReference getAdditionUseCaseCrossReference_4_0() { return cAdditionUseCaseCrossReference_4_0; }
		
		//Name
		public RuleCall getAdditionUseCaseNameParserRuleCall_4_0_1() { return cAdditionUseCaseNameParserRuleCall_4_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class ConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.language.usecase.UseCase.Constraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLanguageAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLanguageExpressionTypeParserRuleCall_0_0 = (RuleCall)cLanguageAssignment_0.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionSTRINGTerminalRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		
		//Constraint:
		//	language=ExpressionType expression=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//language=ExpressionType expression=STRING
		public Group getGroup() { return cGroup; }
		
		//language=ExpressionType
		public Assignment getLanguageAssignment_0() { return cLanguageAssignment_0; }
		
		//ExpressionType
		public RuleCall getLanguageExpressionTypeParserRuleCall_0_0() { return cLanguageExpressionTypeParserRuleCall_0_0; }
		
		//expression=STRING
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }
		
		//STRING
		public RuleCall getExpressionSTRINGTerminalRuleCall_1_0() { return cExpressionSTRINGTerminalRuleCall_1_0; }
	}
	public class AssociationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.language.usecase.UseCase.Association");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCommentsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCommentsCommentParserRuleCall_0_0 = (RuleCall)cCommentsAssignment_0.eContents().get(0);
		private final Assignment cVisibilityAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVisibilityVisibilityEnumRuleCall_1_0 = (RuleCall)cVisibilityAssignment_1.eContents().get(0);
		private final Assignment cModifiersAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cModifiersModifierEnumRuleCall_2_0 = (RuleCall)cModifiersAssignment_2.eContents().get(0);
		private final Keyword cAssociationKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameNameParserRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cExtendsKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cBaseAssociationsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final CrossReference cBaseAssociationsAssociationCrossReference_5_1_0 = (CrossReference)cBaseAssociationsAssignment_5_1.eContents().get(0);
		private final RuleCall cBaseAssociationsAssociationNameParserRuleCall_5_1_0_1 = (RuleCall)cBaseAssociationsAssociationCrossReference_5_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cActorMultiplicityAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cActorMultiplicityMultiplicityParserRuleCall_7_0 = (RuleCall)cActorMultiplicityAssignment_7.eContents().get(0);
		private final Assignment cActorAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final CrossReference cActorActorCrossReference_8_0 = (CrossReference)cActorAssignment_8.eContents().get(0);
		private final RuleCall cActorActorNameParserRuleCall_8_0_1 = (RuleCall)cActorActorCrossReference_8_0.eContents().get(1);
		private final Assignment cUsecaseMultiplicityAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cUsecaseMultiplicityMultiplicityParserRuleCall_9_0 = (RuleCall)cUsecaseMultiplicityAssignment_9.eContents().get(0);
		private final Assignment cUsecaseAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final CrossReference cUsecaseUseCaseCrossReference_10_0 = (CrossReference)cUsecaseAssignment_10.eContents().get(0);
		private final RuleCall cUsecaseUseCaseNameParserRuleCall_10_0_1 = (RuleCall)cUsecaseUseCaseCrossReference_10_0.eContents().get(1);
		private final Group cGroup_11 = (Group)cGroup.eContents().get(11);
		private final Keyword cRuleKeyword_11_0 = (Keyword)cGroup_11.eContents().get(0);
		private final Assignment cOwnedRulesAssignment_11_1 = (Assignment)cGroup_11.eContents().get(1);
		private final RuleCall cOwnedRulesConstraintParserRuleCall_11_1_0 = (RuleCall)cOwnedRulesAssignment_11_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_11_2 = (Keyword)cGroup_11.eContents().get(2);
		private final Keyword cRightCurlyBracketKeyword_12 = (Keyword)cGroup.eContents().get(12);
		
		//Association:
		//	comments+=Comment* visibility=Visibility? modifiers+=Modifier* "association" name=Name? ('extends'
		//	baseAssociations+=[Association|Name])? '{' actorMultiplicity=Multiplicity? actor=[Actor|Name]
		//	usecaseMultiplicity=Multiplicity? usecase=[UseCase|Name] ('rule' ownedRules+=Constraint ';')* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//comments+=Comment* visibility=Visibility? modifiers+=Modifier* "association" name=Name? ('extends'
		//baseAssociations+=[Association|Name])? '{' actorMultiplicity=Multiplicity? actor=[Actor|Name]
		//usecaseMultiplicity=Multiplicity? usecase=[UseCase|Name] ('rule' ownedRules+=Constraint ';')* '}'
		public Group getGroup() { return cGroup; }
		
		//comments+=Comment*
		public Assignment getCommentsAssignment_0() { return cCommentsAssignment_0; }
		
		//Comment
		public RuleCall getCommentsCommentParserRuleCall_0_0() { return cCommentsCommentParserRuleCall_0_0; }
		
		//visibility=Visibility?
		public Assignment getVisibilityAssignment_1() { return cVisibilityAssignment_1; }
		
		//Visibility
		public RuleCall getVisibilityVisibilityEnumRuleCall_1_0() { return cVisibilityVisibilityEnumRuleCall_1_0; }
		
		//modifiers+=Modifier*
		public Assignment getModifiersAssignment_2() { return cModifiersAssignment_2; }
		
		//Modifier
		public RuleCall getModifiersModifierEnumRuleCall_2_0() { return cModifiersModifierEnumRuleCall_2_0; }
		
		//"association"
		public Keyword getAssociationKeyword_3() { return cAssociationKeyword_3; }
		
		//name=Name?
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }
		
		//Name
		public RuleCall getNameNameParserRuleCall_4_0() { return cNameNameParserRuleCall_4_0; }
		
		//('extends' baseAssociations+=[Association|Name])?
		public Group getGroup_5() { return cGroup_5; }
		
		//'extends'
		public Keyword getExtendsKeyword_5_0() { return cExtendsKeyword_5_0; }
		
		//baseAssociations+=[Association|Name]
		public Assignment getBaseAssociationsAssignment_5_1() { return cBaseAssociationsAssignment_5_1; }
		
		//[Association|Name]
		public CrossReference getBaseAssociationsAssociationCrossReference_5_1_0() { return cBaseAssociationsAssociationCrossReference_5_1_0; }
		
		//Name
		public RuleCall getBaseAssociationsAssociationNameParserRuleCall_5_1_0_1() { return cBaseAssociationsAssociationNameParserRuleCall_5_1_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_6() { return cLeftCurlyBracketKeyword_6; }
		
		//actorMultiplicity=Multiplicity?
		public Assignment getActorMultiplicityAssignment_7() { return cActorMultiplicityAssignment_7; }
		
		//Multiplicity
		public RuleCall getActorMultiplicityMultiplicityParserRuleCall_7_0() { return cActorMultiplicityMultiplicityParserRuleCall_7_0; }
		
		//actor=[Actor|Name]
		public Assignment getActorAssignment_8() { return cActorAssignment_8; }
		
		//[Actor|Name]
		public CrossReference getActorActorCrossReference_8_0() { return cActorActorCrossReference_8_0; }
		
		//Name
		public RuleCall getActorActorNameParserRuleCall_8_0_1() { return cActorActorNameParserRuleCall_8_0_1; }
		
		//usecaseMultiplicity=Multiplicity?
		public Assignment getUsecaseMultiplicityAssignment_9() { return cUsecaseMultiplicityAssignment_9; }
		
		//Multiplicity
		public RuleCall getUsecaseMultiplicityMultiplicityParserRuleCall_9_0() { return cUsecaseMultiplicityMultiplicityParserRuleCall_9_0; }
		
		//usecase=[UseCase|Name]
		public Assignment getUsecaseAssignment_10() { return cUsecaseAssignment_10; }
		
		//[UseCase|Name]
		public CrossReference getUsecaseUseCaseCrossReference_10_0() { return cUsecaseUseCaseCrossReference_10_0; }
		
		//Name
		public RuleCall getUsecaseUseCaseNameParserRuleCall_10_0_1() { return cUsecaseUseCaseNameParserRuleCall_10_0_1; }
		
		//('rule' ownedRules+=Constraint ';')*
		public Group getGroup_11() { return cGroup_11; }
		
		//'rule'
		public Keyword getRuleKeyword_11_0() { return cRuleKeyword_11_0; }
		
		//ownedRules+=Constraint
		public Assignment getOwnedRulesAssignment_11_1() { return cOwnedRulesAssignment_11_1; }
		
		//Constraint
		public RuleCall getOwnedRulesConstraintParserRuleCall_11_1_0() { return cOwnedRulesConstraintParserRuleCall_11_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_11_2() { return cSemicolonKeyword_11_2; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_12() { return cRightCurlyBracketKeyword_12; }
	}
	public class MultiplicityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.language.usecase.UseCase.Multiplicity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLowerBoundAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLowerBoundMultiplicityElementParserRuleCall_0_0 = (RuleCall)cLowerBoundAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cUpperBoundAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cUpperBoundMultiplicityElementParserRuleCall_1_1_0 = (RuleCall)cUpperBoundAssignment_1_1.eContents().get(0);
		
		//Multiplicity:
		//	lowerBound=MultiplicityElement ('..' upperBound=MultiplicityElement)?;
		@Override public ParserRule getRule() { return rule; }
		
		//lowerBound=MultiplicityElement ('..' upperBound=MultiplicityElement)?
		public Group getGroup() { return cGroup; }
		
		//lowerBound=MultiplicityElement
		public Assignment getLowerBoundAssignment_0() { return cLowerBoundAssignment_0; }
		
		//MultiplicityElement
		public RuleCall getLowerBoundMultiplicityElementParserRuleCall_0_0() { return cLowerBoundMultiplicityElementParserRuleCall_0_0; }
		
		//('..' upperBound=MultiplicityElement)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'..'
		public Keyword getFullStopFullStopKeyword_1_0() { return cFullStopFullStopKeyword_1_0; }
		
		//upperBound=MultiplicityElement
		public Assignment getUpperBoundAssignment_1_1() { return cUpperBoundAssignment_1_1; }
		
		//MultiplicityElement
		public RuleCall getUpperBoundMultiplicityElementParserRuleCall_1_1_0() { return cUpperBoundMultiplicityElementParserRuleCall_1_1_0; }
	}
	public class MultiplicityElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.language.usecase.UseCase.MultiplicityElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Keyword cAsteriskKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//MultiplicityElement ecore::EIntegerObject:
		//	INT | '*'
		@Override public ParserRule getRule() { return rule; }
		
		//INT | '*'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_1() { return cAsteriskKeyword_1; }
	}
	public class ExpressionTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.language.usecase.UseCase.ExpressionType");
		private final RuleCall cSTRINGTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ExpressionType:
		//	STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall() { return cSTRINGTerminalRuleCall; }
	}
	public class AnnotationDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.language.usecase.UseCase.AnnotationDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommercialAtKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cAnnotationParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//AnnotationDefinition:
		//	'@' Annotation;
		@Override public ParserRule getRule() { return rule; }
		
		//'@' Annotation
		public Group getGroup() { return cGroup; }
		
		//'@'
		public Keyword getCommercialAtKeyword_0() { return cCommercialAtKeyword_0; }
		
		//Annotation
		public RuleCall getAnnotationParserRuleCall_1() { return cAnnotationParserRuleCall_1; }
	}
	public class AnnotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.language.usecase.UseCase.Annotation");
		private final RuleCall cAnnotationDefinedParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Annotation:
		//	AnnotationDefined;
		@Override public ParserRule getRule() { return rule; }
		
		//AnnotationDefined
		public RuleCall getAnnotationDefinedParserRuleCall() { return cAnnotationDefinedParserRuleCall; }
	}
	public class AnnotationDefinedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.language.usecase.UseCase.AnnotationDefined");
		private final Keyword cDefinedKeyword = (Keyword)rule.eContents().get(1);
		
		//AnnotationDefined:
		//	'defined';
		@Override public ParserRule getRule() { return rule; }
		
		//'defined'
		public Keyword getDefinedKeyword() { return cDefinedKeyword; }
	}
	public class NameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.language.usecase.UseCase.Name");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Name:
		//	ID | STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//ID | STRING
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1() { return cSTRINGTerminalRuleCall_1; }
	}
	public class CommentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.language.usecase.UseCase.Comment");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cML_COMMENTTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSL_COMMENTTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Comment:
		//	ML_COMMENT | SL_COMMENT;
		@Override public ParserRule getRule() { return rule; }
		
		//ML_COMMENT | SL_COMMENT
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ML_COMMENT
		public RuleCall getML_COMMENTTerminalRuleCall_0() { return cML_COMMENTTerminalRuleCall_0; }
		
		//SL_COMMENT
		public RuleCall getSL_COMMENTTerminalRuleCall_1() { return cSL_COMMENTTerminalRuleCall_1; }
	}
	
	public class ModifierElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.language.usecase.UseCase.Modifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cFINALEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cFINALFinalKeyword_0_0 = (Keyword)cFINALEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cABSTRACTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cABSTRACTAbstractKeyword_1_0 = (Keyword)cABSTRACTEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cLEAFEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cLEAFLeafKeyword_2_0 = (Keyword)cLEAFEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum Modifier:
		//	FINAL='final' | ABSTRACT='abstract' | LEAF='leaf';
		public EnumRule getRule() { return rule; }
		
		//FINAL='final' | ABSTRACT='abstract' | LEAF='leaf'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//FINAL='final'
		public EnumLiteralDeclaration getFINALEnumLiteralDeclaration_0() { return cFINALEnumLiteralDeclaration_0; }
		
		//'final'
		public Keyword getFINALFinalKeyword_0_0() { return cFINALFinalKeyword_0_0; }
		
		//ABSTRACT='abstract'
		public EnumLiteralDeclaration getABSTRACTEnumLiteralDeclaration_1() { return cABSTRACTEnumLiteralDeclaration_1; }
		
		//'abstract'
		public Keyword getABSTRACTAbstractKeyword_1_0() { return cABSTRACTAbstractKeyword_1_0; }
		
		//LEAF='leaf'
		public EnumLiteralDeclaration getLEAFEnumLiteralDeclaration_2() { return cLEAFEnumLiteralDeclaration_2; }
		
		//'leaf'
		public Keyword getLEAFLeafKeyword_2_0() { return cLEAFLeafKeyword_2_0; }
	}
	public class VisibilityElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.language.usecase.UseCase.Visibility");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPUBLICEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPUBLICPublicKeyword_0_0 = (Keyword)cPUBLICEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cPRIVATEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cPRIVATEPrivateKeyword_1_0 = (Keyword)cPRIVATEEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cPROTECTEDEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cPROTECTEDProtectedKeyword_2_0 = (Keyword)cPROTECTEDEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cPACKAGEEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cPACKAGEPackageKeyword_3_0 = (Keyword)cPACKAGEEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum Visibility:
		//	PUBLIC='public' | PRIVATE='private' | PROTECTED='protected' | PACKAGE='package';
		public EnumRule getRule() { return rule; }
		
		//PUBLIC='public' | PRIVATE='private' | PROTECTED='protected' | PACKAGE='package'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PUBLIC='public'
		public EnumLiteralDeclaration getPUBLICEnumLiteralDeclaration_0() { return cPUBLICEnumLiteralDeclaration_0; }
		
		//'public'
		public Keyword getPUBLICPublicKeyword_0_0() { return cPUBLICPublicKeyword_0_0; }
		
		//PRIVATE='private'
		public EnumLiteralDeclaration getPRIVATEEnumLiteralDeclaration_1() { return cPRIVATEEnumLiteralDeclaration_1; }
		
		//'private'
		public Keyword getPRIVATEPrivateKeyword_1_0() { return cPRIVATEPrivateKeyword_1_0; }
		
		//PROTECTED='protected'
		public EnumLiteralDeclaration getPROTECTEDEnumLiteralDeclaration_2() { return cPROTECTEDEnumLiteralDeclaration_2; }
		
		//'protected'
		public Keyword getPROTECTEDProtectedKeyword_2_0() { return cPROTECTEDProtectedKeyword_2_0; }
		
		//PACKAGE='package'
		public EnumLiteralDeclaration getPACKAGEEnumLiteralDeclaration_3() { return cPACKAGEEnumLiteralDeclaration_3; }
		
		//'package'
		public Keyword getPACKAGEPackageKeyword_3_0() { return cPACKAGEPackageKeyword_3_0; }
	}
	
	private final DiagramElements pDiagram;
	private final UMLModelReferenceElements pUMLModelReference;
	private final ImportURIElements pImportURI;
	private final TestElements pTest;
	private final Test2Elements pTest2;
	private final FQNElements pFQN;
	private final CommentableElements pCommentable;
	private final ActorElements pActor;
	private final SystemElements pSystem;
	private final UseCaseElements pUseCase;
	private final ExtensionPointElements pExtensionPoint;
	private final ExtensionElements pExtension;
	private final IncludeElements pInclude;
	private final ConstraintElements pConstraint;
	private final AssociationElements pAssociation;
	private final ModifierElements eModifier;
	private final VisibilityElements eVisibility;
	private final MultiplicityElements pMultiplicity;
	private final MultiplicityElementElements pMultiplicityElement;
	private final ExpressionTypeElements pExpressionType;
	private final AnnotationDefinitionElements pAnnotationDefinition;
	private final AnnotationElements pAnnotation;
	private final AnnotationDefinedElements pAnnotationDefined;
	private final NameElements pName;
	private final CommentElements pComment;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public UseCaseGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pDiagram = new DiagramElements();
		this.pUMLModelReference = new UMLModelReferenceElements();
		this.pImportURI = new ImportURIElements();
		this.pTest = new TestElements();
		this.pTest2 = new Test2Elements();
		this.pFQN = new FQNElements();
		this.pCommentable = new CommentableElements();
		this.pActor = new ActorElements();
		this.pSystem = new SystemElements();
		this.pUseCase = new UseCaseElements();
		this.pExtensionPoint = new ExtensionPointElements();
		this.pExtension = new ExtensionElements();
		this.pInclude = new IncludeElements();
		this.pConstraint = new ConstraintElements();
		this.pAssociation = new AssociationElements();
		this.eModifier = new ModifierElements();
		this.eVisibility = new VisibilityElements();
		this.pMultiplicity = new MultiplicityElements();
		this.pMultiplicityElement = new MultiplicityElementElements();
		this.pExpressionType = new ExpressionTypeElements();
		this.pAnnotationDefinition = new AnnotationDefinitionElements();
		this.pAnnotation = new AnnotationElements();
		this.pAnnotationDefined = new AnnotationDefinedElements();
		this.pName = new NameElements();
		this.pComment = new CommentElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.cooperateproject.modeling.language.usecase.UseCase".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Diagram:
	//	umlModel=UMLModelReference test=Test test2=Test2 actors+=Actor* system=System associations+=Association*;
	public DiagramElements getDiagramAccess() {
		return pDiagram;
	}
	
	public ParserRule getDiagramRule() {
		return getDiagramAccess().getRule();
	}
	
	//UMLModelReference:
	//	'use' importURI=ImportURI ';';
	public UMLModelReferenceElements getUMLModelReferenceAccess() {
		return pUMLModelReference;
	}
	
	public ParserRule getUMLModelReferenceRule() {
		return getUMLModelReferenceAccess().getRule();
	}
	
	//ImportURI:
	//	STRING;
	public ImportURIElements getImportURIAccess() {
		return pImportURI;
	}
	
	public ParserRule getImportURIRule() {
		return getImportURIAccess().getRule();
	}
	
	//Test:
	//	'test' actor=[Actor|Name] ';';
	public TestElements getTestAccess() {
		return pTest;
	}
	
	public ParserRule getTestRule() {
		return getTestAccess().getRule();
	}
	
	//Test2:
	//	'test2' actor=[uml::Actor|FQN] ';';
	public Test2Elements getTest2Access() {
		return pTest2;
	}
	
	public ParserRule getTest2Rule() {
		return getTest2Access().getRule();
	}
	
	//FQN:
	//	ID ('.' ID)*;
	public FQNElements getFQNAccess() {
		return pFQN;
	}
	
	public ParserRule getFQNRule() {
		return getFQNAccess().getRule();
	}
	
	//Commentable:
	//	Actor | System | UseCase | Association | ExtensionPoint | Extension | Include;
	public CommentableElements getCommentableAccess() {
		return pCommentable;
	}
	
	public ParserRule getCommentableRule() {
		return getCommentableAccess().getRule();
	}
	
	//Actor:
	//	{Actor} comments+=Comment* visibility=Visibility? modifiers+=Modifier* 'actor' name=Name ('extends'
	//	baseActors+=[Actor|Name])? ('{' '}' | ';');
	public ActorElements getActorAccess() {
		return pActor;
	}
	
	public ParserRule getActorRule() {
		return getActorAccess().getRule();
	}
	
	//System:
	//	comments+=Comment* "system" name=Name '{' usecases+=UseCase* '}';
	public SystemElements getSystemAccess() {
		return pSystem;
	}
	
	public ParserRule getSystemRule() {
		return getSystemAccess().getRule();
	}
	
	//UseCase:
	//	comments+=Comment* ('usecase' | 'UC') name=Name ('extends' baseUseCases+=[UseCase|Name])? (';' | '{'
	//	(extensionPoints+=ExtensionPoint | extensions+=Extension | includes+=Include)*
	//	'}');
	public UseCaseElements getUseCaseAccess() {
		return pUseCase;
	}
	
	public ParserRule getUseCaseRule() {
		return getUseCaseAccess().getRule();
	}
	
	//ExtensionPoint:
	//	comments+=Comment* visibility=Visibility? modifiers+=Modifier* 'extensionpoint' name=Name ';';
	public ExtensionPointElements getExtensionPointAccess() {
		return pExtensionPoint;
	}
	
	public ParserRule getExtensionPointRule() {
		return getExtensionPointAccess().getRule();
	}
	
	//Extension:
	//	comments+=Comment* visibility=Visibility? 'extension' name=Name? '{' 'location' location=[ExtensionPoint|Name]
	//	('condition' condition=Constraint ';')? '}';
	public ExtensionElements getExtensionAccess() {
		return pExtension;
	}
	
	public ParserRule getExtensionRule() {
		return getExtensionAccess().getRule();
	}
	
	//Include:
	//	comments+=Comment* visibility=Visibility? 'include' name=Name? addition=[UseCase|Name] ';';
	public IncludeElements getIncludeAccess() {
		return pInclude;
	}
	
	public ParserRule getIncludeRule() {
		return getIncludeAccess().getRule();
	}
	
	//Constraint:
	//	language=ExpressionType expression=STRING;
	public ConstraintElements getConstraintAccess() {
		return pConstraint;
	}
	
	public ParserRule getConstraintRule() {
		return getConstraintAccess().getRule();
	}
	
	//Association:
	//	comments+=Comment* visibility=Visibility? modifiers+=Modifier* "association" name=Name? ('extends'
	//	baseAssociations+=[Association|Name])? '{' actorMultiplicity=Multiplicity? actor=[Actor|Name]
	//	usecaseMultiplicity=Multiplicity? usecase=[UseCase|Name] ('rule' ownedRules+=Constraint ';')* '}';
	public AssociationElements getAssociationAccess() {
		return pAssociation;
	}
	
	public ParserRule getAssociationRule() {
		return getAssociationAccess().getRule();
	}
	
	//enum Modifier:
	//	FINAL='final' | ABSTRACT='abstract' | LEAF='leaf';
	public ModifierElements getModifierAccess() {
		return eModifier;
	}
	
	public EnumRule getModifierRule() {
		return getModifierAccess().getRule();
	}
	
	//enum Visibility:
	//	PUBLIC='public' | PRIVATE='private' | PROTECTED='protected' | PACKAGE='package';
	public VisibilityElements getVisibilityAccess() {
		return eVisibility;
	}
	
	public EnumRule getVisibilityRule() {
		return getVisibilityAccess().getRule();
	}
	
	//Multiplicity:
	//	lowerBound=MultiplicityElement ('..' upperBound=MultiplicityElement)?;
	public MultiplicityElements getMultiplicityAccess() {
		return pMultiplicity;
	}
	
	public ParserRule getMultiplicityRule() {
		return getMultiplicityAccess().getRule();
	}
	
	//MultiplicityElement ecore::EIntegerObject:
	//	INT | '*'
	public MultiplicityElementElements getMultiplicityElementAccess() {
		return pMultiplicityElement;
	}
	
	public ParserRule getMultiplicityElementRule() {
		return getMultiplicityElementAccess().getRule();
	}
	
	//ExpressionType:
	//	STRING;
	public ExpressionTypeElements getExpressionTypeAccess() {
		return pExpressionType;
	}
	
	public ParserRule getExpressionTypeRule() {
		return getExpressionTypeAccess().getRule();
	}
	
	//AnnotationDefinition:
	//	'@' Annotation;
	public AnnotationDefinitionElements getAnnotationDefinitionAccess() {
		return pAnnotationDefinition;
	}
	
	public ParserRule getAnnotationDefinitionRule() {
		return getAnnotationDefinitionAccess().getRule();
	}
	
	//Annotation:
	//	AnnotationDefined;
	public AnnotationElements getAnnotationAccess() {
		return pAnnotation;
	}
	
	public ParserRule getAnnotationRule() {
		return getAnnotationAccess().getRule();
	}
	
	//AnnotationDefined:
	//	'defined';
	public AnnotationDefinedElements getAnnotationDefinedAccess() {
		return pAnnotationDefined;
	}
	
	public ParserRule getAnnotationDefinedRule() {
		return getAnnotationDefinedAccess().getRule();
	}
	
	//Name:
	//	ID | STRING;
	public NameElements getNameAccess() {
		return pName;
	}
	
	public ParserRule getNameRule() {
		return getNameAccess().getRule();
	}
	
	//Comment:
	//	ML_COMMENT | SL_COMMENT;
	public CommentElements getCommentAccess() {
		return pComment;
	}
	
	public ParserRule getCommentRule() {
		return getCommentAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
