/**
 * generated by Xtext 2.9.0
 */
package de.cooperateproject.modeling.language.usecase.usecase;


/**
 * <!-- begin-user-doc -->
 * A representation of the model object '<em><b>Extension</b></em>'.
 * <!-- end-user-doc -->
 *
 * <p>
 * The following features are supported:
 * </p>
 * <ul>
 *   <li>{@link de.cooperateproject.modeling.language.usecase.usecase.Extension#getVisibility <em>Visibility</em>}</li>
 *   <li>{@link de.cooperateproject.modeling.language.usecase.usecase.Extension#getLocation <em>Location</em>}</li>
 *   <li>{@link de.cooperateproject.modeling.language.usecase.usecase.Extension#getCondition <em>Condition</em>}</li>
 * </ul>
 *
 * @see de.cooperateproject.modeling.language.usecase.usecase.UsecasePackage#getExtension()
 * @model
 * @generated
 */
public interface Extension extends Commentable
{
  /**
   * Returns the value of the '<em><b>Visibility</b></em>' attribute.
   * The literals are from the enumeration {@link de.cooperateproject.modeling.language.usecase.usecase.Visibility}.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of the '<em>Visibility</em>' attribute isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @return the value of the '<em>Visibility</em>' attribute.
   * @see de.cooperateproject.modeling.language.usecase.usecase.Visibility
   * @see #setVisibility(Visibility)
   * @see de.cooperateproject.modeling.language.usecase.usecase.UsecasePackage#getExtension_Visibility()
   * @model
   * @generated
   */
  Visibility getVisibility();

  /**
   * Sets the value of the '{@link de.cooperateproject.modeling.language.usecase.usecase.Extension#getVisibility <em>Visibility</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param value the new value of the '<em>Visibility</em>' attribute.
   * @see de.cooperateproject.modeling.language.usecase.usecase.Visibility
   * @see #getVisibility()
   * @generated
   */
  void setVisibility(Visibility value);

  /**
   * Returns the value of the '<em><b>Location</b></em>' reference.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of the '<em>Location</em>' reference isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @return the value of the '<em>Location</em>' reference.
   * @see #setLocation(ExtensionPoint)
   * @see de.cooperateproject.modeling.language.usecase.usecase.UsecasePackage#getExtension_Location()
   * @model
   * @generated
   */
  ExtensionPoint getLocation();

  /**
   * Sets the value of the '{@link de.cooperateproject.modeling.language.usecase.usecase.Extension#getLocation <em>Location</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param value the new value of the '<em>Location</em>' reference.
   * @see #getLocation()
   * @generated
   */
  void setLocation(ExtensionPoint value);

  /**
   * Returns the value of the '<em><b>Condition</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of the '<em>Condition</em>' containment reference isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @return the value of the '<em>Condition</em>' containment reference.
   * @see #setCondition(Constraint)
   * @see de.cooperateproject.modeling.language.usecase.usecase.UsecasePackage#getExtension_Condition()
   * @model containment="true"
   * @generated
   */
  Constraint getCondition();

  /**
   * Sets the value of the '{@link de.cooperateproject.modeling.language.usecase.usecase.Extension#getCondition <em>Condition</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param value the new value of the '<em>Condition</em>' containment reference.
   * @see #getCondition()
   * @generated
   */
  void setCondition(Constraint value);

} // Extension
