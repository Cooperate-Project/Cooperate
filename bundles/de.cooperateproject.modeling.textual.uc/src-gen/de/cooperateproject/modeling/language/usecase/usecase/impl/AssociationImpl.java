/**
 * generated by Xtext 2.9.0
 */
package de.cooperateproject.modeling.language.usecase.usecase.impl;

import de.cooperateproject.modeling.language.usecase.usecase.Actor;
import de.cooperateproject.modeling.language.usecase.usecase.Association;
import de.cooperateproject.modeling.language.usecase.usecase.Constraint;
import de.cooperateproject.modeling.language.usecase.usecase.Modifier;
import de.cooperateproject.modeling.language.usecase.usecase.Multiplicity;
import de.cooperateproject.modeling.language.usecase.usecase.UseCase;
import de.cooperateproject.modeling.language.usecase.usecase.UsecasePackage;
import de.cooperateproject.modeling.language.usecase.usecase.Visibility;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EDataTypeEList;
import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.EObjectResolvingEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Association</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link de.cooperateproject.modeling.language.usecase.usecase.impl.AssociationImpl#getVisibility <em>Visibility</em>}</li>
 *   <li>{@link de.cooperateproject.modeling.language.usecase.usecase.impl.AssociationImpl#getModifiers <em>Modifiers</em>}</li>
 *   <li>{@link de.cooperateproject.modeling.language.usecase.usecase.impl.AssociationImpl#getBaseAssociations <em>Base Associations</em>}</li>
 *   <li>{@link de.cooperateproject.modeling.language.usecase.usecase.impl.AssociationImpl#getActorMultiplicity <em>Actor Multiplicity</em>}</li>
 *   <li>{@link de.cooperateproject.modeling.language.usecase.usecase.impl.AssociationImpl#getActor <em>Actor</em>}</li>
 *   <li>{@link de.cooperateproject.modeling.language.usecase.usecase.impl.AssociationImpl#getUsecaseMultiplicity <em>Usecase Multiplicity</em>}</li>
 *   <li>{@link de.cooperateproject.modeling.language.usecase.usecase.impl.AssociationImpl#getUsecase <em>Usecase</em>}</li>
 *   <li>{@link de.cooperateproject.modeling.language.usecase.usecase.impl.AssociationImpl#getOwnedRules <em>Owned Rules</em>}</li>
 * </ul>
 *
 * @generated
 */
public class AssociationImpl extends CommentableImpl implements Association
{
  /**
   * The default value of the '{@link #getVisibility() <em>Visibility</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVisibility()
   * @generated
   * @ordered
   */
  protected static final Visibility VISIBILITY_EDEFAULT = Visibility.PUBLIC;

  /**
   * The cached value of the '{@link #getVisibility() <em>Visibility</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVisibility()
   * @generated
   * @ordered
   */
  protected Visibility visibility = VISIBILITY_EDEFAULT;

  /**
   * The cached value of the '{@link #getModifiers() <em>Modifiers</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getModifiers()
   * @generated
   * @ordered
   */
  protected EList<Modifier> modifiers;

  /**
   * The cached value of the '{@link #getBaseAssociations() <em>Base Associations</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBaseAssociations()
   * @generated
   * @ordered
   */
  protected EList<Association> baseAssociations;

  /**
   * The cached value of the '{@link #getActorMultiplicity() <em>Actor Multiplicity</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getActorMultiplicity()
   * @generated
   * @ordered
   */
  protected Multiplicity actorMultiplicity;

  /**
   * The cached value of the '{@link #getActor() <em>Actor</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getActor()
   * @generated
   * @ordered
   */
  protected Actor actor;

  /**
   * The cached value of the '{@link #getUsecaseMultiplicity() <em>Usecase Multiplicity</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getUsecaseMultiplicity()
   * @generated
   * @ordered
   */
  protected Multiplicity usecaseMultiplicity;

  /**
   * The cached value of the '{@link #getUsecase() <em>Usecase</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getUsecase()
   * @generated
   * @ordered
   */
  protected UseCase usecase;

  /**
   * The cached value of the '{@link #getOwnedRules() <em>Owned Rules</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOwnedRules()
   * @generated
   * @ordered
   */
  protected EList<Constraint> ownedRules;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected AssociationImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return UsecasePackage.Literals.ASSOCIATION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Visibility getVisibility()
  {
    return visibility;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setVisibility(Visibility newVisibility)
  {
    Visibility oldVisibility = visibility;
    visibility = newVisibility == null ? VISIBILITY_EDEFAULT : newVisibility;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, UsecasePackage.ASSOCIATION__VISIBILITY, oldVisibility, visibility));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Modifier> getModifiers()
  {
    if (modifiers == null)
    {
      modifiers = new EDataTypeEList<Modifier>(Modifier.class, this, UsecasePackage.ASSOCIATION__MODIFIERS);
    }
    return modifiers;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Association> getBaseAssociations()
  {
    if (baseAssociations == null)
    {
      baseAssociations = new EObjectResolvingEList<Association>(Association.class, this, UsecasePackage.ASSOCIATION__BASE_ASSOCIATIONS);
    }
    return baseAssociations;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Multiplicity getActorMultiplicity()
  {
    return actorMultiplicity;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetActorMultiplicity(Multiplicity newActorMultiplicity, NotificationChain msgs)
  {
    Multiplicity oldActorMultiplicity = actorMultiplicity;
    actorMultiplicity = newActorMultiplicity;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, UsecasePackage.ASSOCIATION__ACTOR_MULTIPLICITY, oldActorMultiplicity, newActorMultiplicity);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setActorMultiplicity(Multiplicity newActorMultiplicity)
  {
    if (newActorMultiplicity != actorMultiplicity)
    {
      NotificationChain msgs = null;
      if (actorMultiplicity != null)
        msgs = ((InternalEObject)actorMultiplicity).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - UsecasePackage.ASSOCIATION__ACTOR_MULTIPLICITY, null, msgs);
      if (newActorMultiplicity != null)
        msgs = ((InternalEObject)newActorMultiplicity).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - UsecasePackage.ASSOCIATION__ACTOR_MULTIPLICITY, null, msgs);
      msgs = basicSetActorMultiplicity(newActorMultiplicity, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, UsecasePackage.ASSOCIATION__ACTOR_MULTIPLICITY, newActorMultiplicity, newActorMultiplicity));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Actor getActor()
  {
    if (actor != null && actor.eIsProxy())
    {
      InternalEObject oldActor = (InternalEObject)actor;
      actor = (Actor)eResolveProxy(oldActor);
      if (actor != oldActor)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, UsecasePackage.ASSOCIATION__ACTOR, oldActor, actor));
      }
    }
    return actor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Actor basicGetActor()
  {
    return actor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setActor(Actor newActor)
  {
    Actor oldActor = actor;
    actor = newActor;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, UsecasePackage.ASSOCIATION__ACTOR, oldActor, actor));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Multiplicity getUsecaseMultiplicity()
  {
    return usecaseMultiplicity;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetUsecaseMultiplicity(Multiplicity newUsecaseMultiplicity, NotificationChain msgs)
  {
    Multiplicity oldUsecaseMultiplicity = usecaseMultiplicity;
    usecaseMultiplicity = newUsecaseMultiplicity;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, UsecasePackage.ASSOCIATION__USECASE_MULTIPLICITY, oldUsecaseMultiplicity, newUsecaseMultiplicity);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setUsecaseMultiplicity(Multiplicity newUsecaseMultiplicity)
  {
    if (newUsecaseMultiplicity != usecaseMultiplicity)
    {
      NotificationChain msgs = null;
      if (usecaseMultiplicity != null)
        msgs = ((InternalEObject)usecaseMultiplicity).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - UsecasePackage.ASSOCIATION__USECASE_MULTIPLICITY, null, msgs);
      if (newUsecaseMultiplicity != null)
        msgs = ((InternalEObject)newUsecaseMultiplicity).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - UsecasePackage.ASSOCIATION__USECASE_MULTIPLICITY, null, msgs);
      msgs = basicSetUsecaseMultiplicity(newUsecaseMultiplicity, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, UsecasePackage.ASSOCIATION__USECASE_MULTIPLICITY, newUsecaseMultiplicity, newUsecaseMultiplicity));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public UseCase getUsecase()
  {
    if (usecase != null && usecase.eIsProxy())
    {
      InternalEObject oldUsecase = (InternalEObject)usecase;
      usecase = (UseCase)eResolveProxy(oldUsecase);
      if (usecase != oldUsecase)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, UsecasePackage.ASSOCIATION__USECASE, oldUsecase, usecase));
      }
    }
    return usecase;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public UseCase basicGetUsecase()
  {
    return usecase;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setUsecase(UseCase newUsecase)
  {
    UseCase oldUsecase = usecase;
    usecase = newUsecase;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, UsecasePackage.ASSOCIATION__USECASE, oldUsecase, usecase));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Constraint> getOwnedRules()
  {
    if (ownedRules == null)
    {
      ownedRules = new EObjectContainmentEList<Constraint>(Constraint.class, this, UsecasePackage.ASSOCIATION__OWNED_RULES);
    }
    return ownedRules;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case UsecasePackage.ASSOCIATION__ACTOR_MULTIPLICITY:
        return basicSetActorMultiplicity(null, msgs);
      case UsecasePackage.ASSOCIATION__USECASE_MULTIPLICITY:
        return basicSetUsecaseMultiplicity(null, msgs);
      case UsecasePackage.ASSOCIATION__OWNED_RULES:
        return ((InternalEList<?>)getOwnedRules()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case UsecasePackage.ASSOCIATION__VISIBILITY:
        return getVisibility();
      case UsecasePackage.ASSOCIATION__MODIFIERS:
        return getModifiers();
      case UsecasePackage.ASSOCIATION__BASE_ASSOCIATIONS:
        return getBaseAssociations();
      case UsecasePackage.ASSOCIATION__ACTOR_MULTIPLICITY:
        return getActorMultiplicity();
      case UsecasePackage.ASSOCIATION__ACTOR:
        if (resolve) return getActor();
        return basicGetActor();
      case UsecasePackage.ASSOCIATION__USECASE_MULTIPLICITY:
        return getUsecaseMultiplicity();
      case UsecasePackage.ASSOCIATION__USECASE:
        if (resolve) return getUsecase();
        return basicGetUsecase();
      case UsecasePackage.ASSOCIATION__OWNED_RULES:
        return getOwnedRules();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case UsecasePackage.ASSOCIATION__VISIBILITY:
        setVisibility((Visibility)newValue);
        return;
      case UsecasePackage.ASSOCIATION__MODIFIERS:
        getModifiers().clear();
        getModifiers().addAll((Collection<? extends Modifier>)newValue);
        return;
      case UsecasePackage.ASSOCIATION__BASE_ASSOCIATIONS:
        getBaseAssociations().clear();
        getBaseAssociations().addAll((Collection<? extends Association>)newValue);
        return;
      case UsecasePackage.ASSOCIATION__ACTOR_MULTIPLICITY:
        setActorMultiplicity((Multiplicity)newValue);
        return;
      case UsecasePackage.ASSOCIATION__ACTOR:
        setActor((Actor)newValue);
        return;
      case UsecasePackage.ASSOCIATION__USECASE_MULTIPLICITY:
        setUsecaseMultiplicity((Multiplicity)newValue);
        return;
      case UsecasePackage.ASSOCIATION__USECASE:
        setUsecase((UseCase)newValue);
        return;
      case UsecasePackage.ASSOCIATION__OWNED_RULES:
        getOwnedRules().clear();
        getOwnedRules().addAll((Collection<? extends Constraint>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case UsecasePackage.ASSOCIATION__VISIBILITY:
        setVisibility(VISIBILITY_EDEFAULT);
        return;
      case UsecasePackage.ASSOCIATION__MODIFIERS:
        getModifiers().clear();
        return;
      case UsecasePackage.ASSOCIATION__BASE_ASSOCIATIONS:
        getBaseAssociations().clear();
        return;
      case UsecasePackage.ASSOCIATION__ACTOR_MULTIPLICITY:
        setActorMultiplicity((Multiplicity)null);
        return;
      case UsecasePackage.ASSOCIATION__ACTOR:
        setActor((Actor)null);
        return;
      case UsecasePackage.ASSOCIATION__USECASE_MULTIPLICITY:
        setUsecaseMultiplicity((Multiplicity)null);
        return;
      case UsecasePackage.ASSOCIATION__USECASE:
        setUsecase((UseCase)null);
        return;
      case UsecasePackage.ASSOCIATION__OWNED_RULES:
        getOwnedRules().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case UsecasePackage.ASSOCIATION__VISIBILITY:
        return visibility != VISIBILITY_EDEFAULT;
      case UsecasePackage.ASSOCIATION__MODIFIERS:
        return modifiers != null && !modifiers.isEmpty();
      case UsecasePackage.ASSOCIATION__BASE_ASSOCIATIONS:
        return baseAssociations != null && !baseAssociations.isEmpty();
      case UsecasePackage.ASSOCIATION__ACTOR_MULTIPLICITY:
        return actorMultiplicity != null;
      case UsecasePackage.ASSOCIATION__ACTOR:
        return actor != null;
      case UsecasePackage.ASSOCIATION__USECASE_MULTIPLICITY:
        return usecaseMultiplicity != null;
      case UsecasePackage.ASSOCIATION__USECASE:
        return usecase != null;
      case UsecasePackage.ASSOCIATION__OWNED_RULES:
        return ownedRules != null && !ownedRules.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (visibility: ");
    result.append(visibility);
    result.append(", modifiers: ");
    result.append(modifiers);
    result.append(')');
    return result.toString();
  }

} //AssociationImpl
