/*
 * generated by Xtext 2.9.0
 */
grammar InternalUseCase;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package de.cooperateproject.modeling.language.usecase.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package de.cooperateproject.modeling.language.usecase.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import de.cooperateproject.modeling.language.usecase.services.UseCaseGrammarAccess;

}

@parser::members {

 	private UseCaseGrammarAccess grammarAccess;

    public InternalUseCaseParser(TokenStream input, UseCaseGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Diagram";
   	}

   	@Override
   	protected UseCaseGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleDiagram
entryRuleDiagram returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDiagramRule()); }
	iv_ruleDiagram=ruleDiagram
	{ $current=$iv_ruleDiagram.current; }
	EOF;

// Rule Diagram
ruleDiagram returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getDiagramAccess().getUmlModelUMLModelReferenceParserRuleCall_0_0());
				}
				lv_umlModel_0_0=ruleUMLModelReference
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDiagramRule());
					}
					set(
						$current,
						"umlModel",
						lv_umlModel_0_0,
						"de.cooperateproject.modeling.language.usecase.UseCase.UMLModelReference");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getDiagramAccess().getTestTestParserRuleCall_1_0());
				}
				lv_test_1_0=ruleTest
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDiagramRule());
					}
					set(
						$current,
						"test",
						lv_test_1_0,
						"de.cooperateproject.modeling.language.usecase.UseCase.Test");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getDiagramAccess().getTest2Test2ParserRuleCall_2_0());
				}
				lv_test2_2_0=ruleTest2
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDiagramRule());
					}
					set(
						$current,
						"test2",
						lv_test2_2_0,
						"de.cooperateproject.modeling.language.usecase.UseCase.Test2");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getDiagramAccess().getActorsActorParserRuleCall_3_0());
				}
				lv_actors_3_0=ruleActor
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDiagramRule());
					}
					add(
						$current,
						"actors",
						lv_actors_3_0,
						"de.cooperateproject.modeling.language.usecase.UseCase.Actor");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getDiagramAccess().getSystemSystemParserRuleCall_4_0());
				}
				lv_system_4_0=ruleSystem
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDiagramRule());
					}
					set(
						$current,
						"system",
						lv_system_4_0,
						"de.cooperateproject.modeling.language.usecase.UseCase.System");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getDiagramAccess().getAssociationsAssociationParserRuleCall_5_0());
				}
				lv_associations_5_0=ruleAssociation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDiagramRule());
					}
					add(
						$current,
						"associations",
						lv_associations_5_0,
						"de.cooperateproject.modeling.language.usecase.UseCase.Association");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleUMLModelReference
entryRuleUMLModelReference returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUMLModelReferenceRule()); }
	iv_ruleUMLModelReference=ruleUMLModelReference
	{ $current=$iv_ruleUMLModelReference.current; }
	EOF;

// Rule UMLModelReference
ruleUMLModelReference returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='use'
		{
			newLeafNode(otherlv_0, grammarAccess.getUMLModelReferenceAccess().getUseKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getUMLModelReferenceAccess().getImportURIImportURIParserRuleCall_1_0());
				}
				lv_importURI_1_0=ruleImportURI
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUMLModelReferenceRule());
					}
					set(
						$current,
						"importURI",
						lv_importURI_1_0,
						"de.cooperateproject.modeling.language.usecase.UseCase.ImportURI");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=';'
		{
			newLeafNode(otherlv_2, grammarAccess.getUMLModelReferenceAccess().getSemicolonKeyword_2());
		}
	)
;

// Entry rule entryRuleImportURI
entryRuleImportURI returns [String current=null]:
	{ newCompositeNode(grammarAccess.getImportURIRule()); }
	iv_ruleImportURI=ruleImportURI
	{ $current=$iv_ruleImportURI.current.getText(); }
	EOF;

// Rule ImportURI
ruleImportURI returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	this_STRING_0=RULE_STRING
	{
		$current.merge(this_STRING_0);
	}
	{
		newLeafNode(this_STRING_0, grammarAccess.getImportURIAccess().getSTRINGTerminalRuleCall());
	}
;

// Entry rule entryRuleTest
entryRuleTest returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTestRule()); }
	iv_ruleTest=ruleTest
	{ $current=$iv_ruleTest.current; }
	EOF;

// Rule Test
ruleTest returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='test'
		{
			newLeafNode(otherlv_0, grammarAccess.getTestAccess().getTestKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTestRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getTestAccess().getActorActorCrossReference_1_0());
				}
				ruleName
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=';'
		{
			newLeafNode(otherlv_2, grammarAccess.getTestAccess().getSemicolonKeyword_2());
		}
	)
;

// Entry rule entryRuleTest2
entryRuleTest2 returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTest2Rule()); }
	iv_ruleTest2=ruleTest2
	{ $current=$iv_ruleTest2.current; }
	EOF;

// Rule Test2
ruleTest2 returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='test2'
		{
			newLeafNode(otherlv_0, grammarAccess.getTest2Access().getTest2Keyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTest2Rule());
					}
				}
				{
					newCompositeNode(grammarAccess.getTest2Access().getActorActorCrossReference_1_0());
				}
				ruleFQN
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=';'
		{
			newLeafNode(otherlv_2, grammarAccess.getTest2Access().getSemicolonKeyword_2());
		}
	)
;

// Entry rule entryRuleFQN
entryRuleFQN returns [String current=null]:
	{ newCompositeNode(grammarAccess.getFQNRule()); }
	iv_ruleFQN=ruleFQN
	{ $current=$iv_ruleFQN.current.getText(); }
	EOF;

// Rule FQN
ruleFQN returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_ID_0=RULE_ID
		{
			$current.merge(this_ID_0);
		}
		{
			newLeafNode(this_ID_0, grammarAccess.getFQNAccess().getIDTerminalRuleCall_0());
		}
		(
			kw='.'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getFQNAccess().getFullStopKeyword_1_0());
			}
			this_ID_2=RULE_ID
			{
				$current.merge(this_ID_2);
			}
			{
				newLeafNode(this_ID_2, grammarAccess.getFQNAccess().getIDTerminalRuleCall_1_1());
			}
		)*
	)
;

// Entry rule entryRuleActor
entryRuleActor returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getActorRule()); }
	iv_ruleActor=ruleActor
	{ $current=$iv_ruleActor.current; }
	EOF;

// Rule Actor
ruleActor returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getActorAccess().getActorAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getActorAccess().getCommentsCommentParserRuleCall_1_0());
				}
				lv_comments_1_0=ruleComment
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getActorRule());
					}
					add(
						$current,
						"comments",
						lv_comments_1_0,
						"de.cooperateproject.modeling.language.usecase.UseCase.Comment");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getActorAccess().getVisibilityVisibilityEnumRuleCall_2_0());
				}
				lv_visibility_2_0=ruleVisibility
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getActorRule());
					}
					set(
						$current,
						"visibility",
						lv_visibility_2_0,
						"de.cooperateproject.modeling.language.usecase.UseCase.Visibility");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getActorAccess().getModifiersModifierEnumRuleCall_3_0());
				}
				lv_modifiers_3_0=ruleModifier
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getActorRule());
					}
					add(
						$current,
						"modifiers",
						lv_modifiers_3_0,
						"de.cooperateproject.modeling.language.usecase.UseCase.Modifier");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_4='actor'
		{
			newLeafNode(otherlv_4, grammarAccess.getActorAccess().getActorKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getActorAccess().getNameNameParserRuleCall_5_0());
				}
				lv_name_5_0=ruleName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getActorRule());
					}
					set(
						$current,
						"name",
						lv_name_5_0,
						"de.cooperateproject.modeling.language.usecase.UseCase.Name");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_6='extends'
			{
				newLeafNode(otherlv_6, grammarAccess.getActorAccess().getExtendsKeyword_6_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getActorRule());
						}
					}
					{
						newCompositeNode(grammarAccess.getActorAccess().getBaseActorsActorCrossReference_6_1_0());
					}
					ruleName
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			(
				otherlv_8='{'
				{
					newLeafNode(otherlv_8, grammarAccess.getActorAccess().getLeftCurlyBracketKeyword_7_0_0());
				}
				otherlv_9='}'
				{
					newLeafNode(otherlv_9, grammarAccess.getActorAccess().getRightCurlyBracketKeyword_7_0_1());
				}
			)
			    |
			otherlv_10=';'
			{
				newLeafNode(otherlv_10, grammarAccess.getActorAccess().getSemicolonKeyword_7_1());
			}
		)
	)
;

// Entry rule entryRuleSystem
entryRuleSystem returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSystemRule()); }
	iv_ruleSystem=ruleSystem
	{ $current=$iv_ruleSystem.current; }
	EOF;

// Rule System
ruleSystem returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getSystemAccess().getCommentsCommentParserRuleCall_0_0());
				}
				lv_comments_0_0=ruleComment
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSystemRule());
					}
					add(
						$current,
						"comments",
						lv_comments_0_0,
						"de.cooperateproject.modeling.language.usecase.UseCase.Comment");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_1='system'
		{
			newLeafNode(otherlv_1, grammarAccess.getSystemAccess().getSystemKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSystemAccess().getNameNameParserRuleCall_2_0());
				}
				lv_name_2_0=ruleName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSystemRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"de.cooperateproject.modeling.language.usecase.UseCase.Name");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='{'
		{
			newLeafNode(otherlv_3, grammarAccess.getSystemAccess().getLeftCurlyBracketKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSystemAccess().getUsecasesUseCaseParserRuleCall_4_0());
				}
				lv_usecases_4_0=ruleUseCase
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSystemRule());
					}
					add(
						$current,
						"usecases",
						lv_usecases_4_0,
						"de.cooperateproject.modeling.language.usecase.UseCase.UseCase");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_5='}'
		{
			newLeafNode(otherlv_5, grammarAccess.getSystemAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleUseCase
entryRuleUseCase returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUseCaseRule()); }
	iv_ruleUseCase=ruleUseCase
	{ $current=$iv_ruleUseCase.current; }
	EOF;

// Rule UseCase
ruleUseCase returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getUseCaseAccess().getCommentsCommentParserRuleCall_0_0());
				}
				lv_comments_0_0=ruleComment
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUseCaseRule());
					}
					add(
						$current,
						"comments",
						lv_comments_0_0,
						"de.cooperateproject.modeling.language.usecase.UseCase.Comment");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			otherlv_1='usecase'
			{
				newLeafNode(otherlv_1, grammarAccess.getUseCaseAccess().getUsecaseKeyword_1_0());
			}
			    |
			otherlv_2='UC'
			{
				newLeafNode(otherlv_2, grammarAccess.getUseCaseAccess().getUCKeyword_1_1());
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getUseCaseAccess().getNameNameParserRuleCall_2_0());
				}
				lv_name_3_0=ruleName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUseCaseRule());
					}
					set(
						$current,
						"name",
						lv_name_3_0,
						"de.cooperateproject.modeling.language.usecase.UseCase.Name");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_4='extends'
			{
				newLeafNode(otherlv_4, grammarAccess.getUseCaseAccess().getExtendsKeyword_3_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getUseCaseRule());
						}
					}
					{
						newCompositeNode(grammarAccess.getUseCaseAccess().getBaseUseCasesUseCaseCrossReference_3_1_0());
					}
					ruleName
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			otherlv_6=';'
			{
				newLeafNode(otherlv_6, grammarAccess.getUseCaseAccess().getSemicolonKeyword_4_0());
			}
			    |
			(
				otherlv_7='{'
				{
					newLeafNode(otherlv_7, grammarAccess.getUseCaseAccess().getLeftCurlyBracketKeyword_4_1_0());
				}
				(
					(
						(
							{
								newCompositeNode(grammarAccess.getUseCaseAccess().getExtensionPointsExtensionPointParserRuleCall_4_1_1_0_0());
							}
							lv_extensionPoints_8_0=ruleExtensionPoint
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getUseCaseRule());
								}
								add(
									$current,
									"extensionPoints",
									lv_extensionPoints_8_0,
									"de.cooperateproject.modeling.language.usecase.UseCase.ExtensionPoint");
								afterParserOrEnumRuleCall();
							}
						)
					)
					    |
					(
						(
							{
								newCompositeNode(grammarAccess.getUseCaseAccess().getExtensionsExtensionParserRuleCall_4_1_1_1_0());
							}
							lv_extensions_9_0=ruleExtension
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getUseCaseRule());
								}
								add(
									$current,
									"extensions",
									lv_extensions_9_0,
									"de.cooperateproject.modeling.language.usecase.UseCase.Extension");
								afterParserOrEnumRuleCall();
							}
						)
					)
					    |
					(
						(
							{
								newCompositeNode(grammarAccess.getUseCaseAccess().getIncludesIncludeParserRuleCall_4_1_1_2_0());
							}
							lv_includes_10_0=ruleInclude
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getUseCaseRule());
								}
								add(
									$current,
									"includes",
									lv_includes_10_0,
									"de.cooperateproject.modeling.language.usecase.UseCase.Include");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)*
				otherlv_11='}'
				{
					newLeafNode(otherlv_11, grammarAccess.getUseCaseAccess().getRightCurlyBracketKeyword_4_1_2());
				}
			)
		)
	)
;

// Entry rule entryRuleExtensionPoint
entryRuleExtensionPoint returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExtensionPointRule()); }
	iv_ruleExtensionPoint=ruleExtensionPoint
	{ $current=$iv_ruleExtensionPoint.current; }
	EOF;

// Rule ExtensionPoint
ruleExtensionPoint returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getExtensionPointAccess().getCommentsCommentParserRuleCall_0_0());
				}
				lv_comments_0_0=ruleComment
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExtensionPointRule());
					}
					add(
						$current,
						"comments",
						lv_comments_0_0,
						"de.cooperateproject.modeling.language.usecase.UseCase.Comment");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getExtensionPointAccess().getVisibilityVisibilityEnumRuleCall_1_0());
				}
				lv_visibility_1_0=ruleVisibility
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExtensionPointRule());
					}
					set(
						$current,
						"visibility",
						lv_visibility_1_0,
						"de.cooperateproject.modeling.language.usecase.UseCase.Visibility");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getExtensionPointAccess().getModifiersModifierEnumRuleCall_2_0());
				}
				lv_modifiers_2_0=ruleModifier
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExtensionPointRule());
					}
					add(
						$current,
						"modifiers",
						lv_modifiers_2_0,
						"de.cooperateproject.modeling.language.usecase.UseCase.Modifier");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_3='extensionpoint'
		{
			newLeafNode(otherlv_3, grammarAccess.getExtensionPointAccess().getExtensionpointKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getExtensionPointAccess().getNameNameParserRuleCall_4_0());
				}
				lv_name_4_0=ruleName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExtensionPointRule());
					}
					set(
						$current,
						"name",
						lv_name_4_0,
						"de.cooperateproject.modeling.language.usecase.UseCase.Name");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=';'
		{
			newLeafNode(otherlv_5, grammarAccess.getExtensionPointAccess().getSemicolonKeyword_5());
		}
	)
;

// Entry rule entryRuleExtension
entryRuleExtension returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExtensionRule()); }
	iv_ruleExtension=ruleExtension
	{ $current=$iv_ruleExtension.current; }
	EOF;

// Rule Extension
ruleExtension returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getExtensionAccess().getCommentsCommentParserRuleCall_0_0());
				}
				lv_comments_0_0=ruleComment
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExtensionRule());
					}
					add(
						$current,
						"comments",
						lv_comments_0_0,
						"de.cooperateproject.modeling.language.usecase.UseCase.Comment");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getExtensionAccess().getVisibilityVisibilityEnumRuleCall_1_0());
				}
				lv_visibility_1_0=ruleVisibility
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExtensionRule());
					}
					set(
						$current,
						"visibility",
						lv_visibility_1_0,
						"de.cooperateproject.modeling.language.usecase.UseCase.Visibility");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_2='extension'
		{
			newLeafNode(otherlv_2, grammarAccess.getExtensionAccess().getExtensionKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getExtensionAccess().getNameNameParserRuleCall_3_0());
				}
				lv_name_3_0=ruleName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExtensionRule());
					}
					set(
						$current,
						"name",
						lv_name_3_0,
						"de.cooperateproject.modeling.language.usecase.UseCase.Name");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_4='{'
		{
			newLeafNode(otherlv_4, grammarAccess.getExtensionAccess().getLeftCurlyBracketKeyword_4());
		}
		otherlv_5='location'
		{
			newLeafNode(otherlv_5, grammarAccess.getExtensionAccess().getLocationKeyword_5());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getExtensionRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getExtensionAccess().getLocationExtensionPointCrossReference_6_0());
				}
				ruleName
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_7='condition'
			{
				newLeafNode(otherlv_7, grammarAccess.getExtensionAccess().getConditionKeyword_7_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getExtensionAccess().getConditionConstraintParserRuleCall_7_1_0());
					}
					lv_condition_8_0=ruleConstraint
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExtensionRule());
						}
						set(
							$current,
							"condition",
							lv_condition_8_0,
							"de.cooperateproject.modeling.language.usecase.UseCase.Constraint");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_9=';'
			{
				newLeafNode(otherlv_9, grammarAccess.getExtensionAccess().getSemicolonKeyword_7_2());
			}
		)?
		otherlv_10='}'
		{
			newLeafNode(otherlv_10, grammarAccess.getExtensionAccess().getRightCurlyBracketKeyword_8());
		}
	)
;

// Entry rule entryRuleInclude
entryRuleInclude returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIncludeRule()); }
	iv_ruleInclude=ruleInclude
	{ $current=$iv_ruleInclude.current; }
	EOF;

// Rule Include
ruleInclude returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getIncludeAccess().getCommentsCommentParserRuleCall_0_0());
				}
				lv_comments_0_0=ruleComment
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIncludeRule());
					}
					add(
						$current,
						"comments",
						lv_comments_0_0,
						"de.cooperateproject.modeling.language.usecase.UseCase.Comment");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getIncludeAccess().getVisibilityVisibilityEnumRuleCall_1_0());
				}
				lv_visibility_1_0=ruleVisibility
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIncludeRule());
					}
					set(
						$current,
						"visibility",
						lv_visibility_1_0,
						"de.cooperateproject.modeling.language.usecase.UseCase.Visibility");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_2='include'
		{
			newLeafNode(otherlv_2, grammarAccess.getIncludeAccess().getIncludeKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIncludeAccess().getNameNameParserRuleCall_3_0());
				}
				lv_name_3_0=ruleName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIncludeRule());
					}
					set(
						$current,
						"name",
						lv_name_3_0,
						"de.cooperateproject.modeling.language.usecase.UseCase.Name");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getIncludeRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getIncludeAccess().getAdditionUseCaseCrossReference_4_0());
				}
				ruleName
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=';'
		{
			newLeafNode(otherlv_5, grammarAccess.getIncludeAccess().getSemicolonKeyword_5());
		}
	)
;

// Entry rule entryRuleConstraint
entryRuleConstraint returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConstraintRule()); }
	iv_ruleConstraint=ruleConstraint
	{ $current=$iv_ruleConstraint.current; }
	EOF;

// Rule Constraint
ruleConstraint returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getConstraintAccess().getLanguageExpressionTypeParserRuleCall_0_0());
				}
				lv_language_0_0=ruleExpressionType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConstraintRule());
					}
					set(
						$current,
						"language",
						lv_language_0_0,
						"de.cooperateproject.modeling.language.usecase.UseCase.ExpressionType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_expression_1_0=RULE_STRING
				{
					newLeafNode(lv_expression_1_0, grammarAccess.getConstraintAccess().getExpressionSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getConstraintRule());
					}
					setWithLastConsumed(
						$current,
						"expression",
						lv_expression_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleAssociation
entryRuleAssociation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAssociationRule()); }
	iv_ruleAssociation=ruleAssociation
	{ $current=$iv_ruleAssociation.current; }
	EOF;

// Rule Association
ruleAssociation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getAssociationAccess().getCommentsCommentParserRuleCall_0_0());
				}
				lv_comments_0_0=ruleComment
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAssociationRule());
					}
					add(
						$current,
						"comments",
						lv_comments_0_0,
						"de.cooperateproject.modeling.language.usecase.UseCase.Comment");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getAssociationAccess().getVisibilityVisibilityEnumRuleCall_1_0());
				}
				lv_visibility_1_0=ruleVisibility
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAssociationRule());
					}
					set(
						$current,
						"visibility",
						lv_visibility_1_0,
						"de.cooperateproject.modeling.language.usecase.UseCase.Visibility");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getAssociationAccess().getModifiersModifierEnumRuleCall_2_0());
				}
				lv_modifiers_2_0=ruleModifier
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAssociationRule());
					}
					add(
						$current,
						"modifiers",
						lv_modifiers_2_0,
						"de.cooperateproject.modeling.language.usecase.UseCase.Modifier");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_3='association'
		{
			newLeafNode(otherlv_3, grammarAccess.getAssociationAccess().getAssociationKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAssociationAccess().getNameNameParserRuleCall_4_0());
				}
				lv_name_4_0=ruleName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAssociationRule());
					}
					set(
						$current,
						"name",
						lv_name_4_0,
						"de.cooperateproject.modeling.language.usecase.UseCase.Name");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			otherlv_5='extends'
			{
				newLeafNode(otherlv_5, grammarAccess.getAssociationAccess().getExtendsKeyword_5_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAssociationRule());
						}
					}
					{
						newCompositeNode(grammarAccess.getAssociationAccess().getBaseAssociationsAssociationCrossReference_5_1_0());
					}
					ruleName
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_7='{'
		{
			newLeafNode(otherlv_7, grammarAccess.getAssociationAccess().getLeftCurlyBracketKeyword_6());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAssociationAccess().getActorMultiplicityMultiplicityParserRuleCall_7_0());
				}
				lv_actorMultiplicity_8_0=ruleMultiplicity
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAssociationRule());
					}
					set(
						$current,
						"actorMultiplicity",
						lv_actorMultiplicity_8_0,
						"de.cooperateproject.modeling.language.usecase.UseCase.Multiplicity");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAssociationRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getAssociationAccess().getActorActorCrossReference_8_0());
				}
				ruleName
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getAssociationAccess().getUsecaseMultiplicityMultiplicityParserRuleCall_9_0());
				}
				lv_usecaseMultiplicity_10_0=ruleMultiplicity
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAssociationRule());
					}
					set(
						$current,
						"usecaseMultiplicity",
						lv_usecaseMultiplicity_10_0,
						"de.cooperateproject.modeling.language.usecase.UseCase.Multiplicity");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAssociationRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getAssociationAccess().getUsecaseUseCaseCrossReference_10_0());
				}
				ruleName
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_12='rule'
			{
				newLeafNode(otherlv_12, grammarAccess.getAssociationAccess().getRuleKeyword_11_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAssociationAccess().getOwnedRulesConstraintParserRuleCall_11_1_0());
					}
					lv_ownedRules_13_0=ruleConstraint
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAssociationRule());
						}
						add(
							$current,
							"ownedRules",
							lv_ownedRules_13_0,
							"de.cooperateproject.modeling.language.usecase.UseCase.Constraint");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_14=';'
			{
				newLeafNode(otherlv_14, grammarAccess.getAssociationAccess().getSemicolonKeyword_11_2());
			}
		)*
		otherlv_15='}'
		{
			newLeafNode(otherlv_15, grammarAccess.getAssociationAccess().getRightCurlyBracketKeyword_12());
		}
	)
;

// Entry rule entryRuleMultiplicity
entryRuleMultiplicity returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMultiplicityRule()); }
	iv_ruleMultiplicity=ruleMultiplicity
	{ $current=$iv_ruleMultiplicity.current; }
	EOF;

// Rule Multiplicity
ruleMultiplicity returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getMultiplicityAccess().getLowerBoundMultiplicityElementParserRuleCall_0_0());
				}
				lv_lowerBound_0_0=ruleMultiplicityElement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMultiplicityRule());
					}
					set(
						$current,
						"lowerBound",
						lv_lowerBound_0_0,
						"de.cooperateproject.modeling.language.usecase.UseCase.MultiplicityElement");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1='..'
			{
				newLeafNode(otherlv_1, grammarAccess.getMultiplicityAccess().getFullStopFullStopKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getMultiplicityAccess().getUpperBoundMultiplicityElementParserRuleCall_1_1_0());
					}
					lv_upperBound_2_0=ruleMultiplicityElement
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMultiplicityRule());
						}
						set(
							$current,
							"upperBound",
							lv_upperBound_2_0,
							"de.cooperateproject.modeling.language.usecase.UseCase.MultiplicityElement");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleMultiplicityElement
entryRuleMultiplicityElement returns [String current=null]:
	{ newCompositeNode(grammarAccess.getMultiplicityElementRule()); }
	iv_ruleMultiplicityElement=ruleMultiplicityElement
	{ $current=$iv_ruleMultiplicityElement.current.getText(); }
	EOF;

// Rule MultiplicityElement
ruleMultiplicityElement returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_INT_0=RULE_INT
		{
			$current.merge(this_INT_0);
		}
		{
			newLeafNode(this_INT_0, grammarAccess.getMultiplicityElementAccess().getINTTerminalRuleCall_0());
		}
		    |
		kw='*'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getMultiplicityElementAccess().getAsteriskKeyword_1());
		}
	)
;

// Entry rule entryRuleExpressionType
entryRuleExpressionType returns [String current=null]:
	{ newCompositeNode(grammarAccess.getExpressionTypeRule()); }
	iv_ruleExpressionType=ruleExpressionType
	{ $current=$iv_ruleExpressionType.current.getText(); }
	EOF;

// Rule ExpressionType
ruleExpressionType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	this_STRING_0=RULE_STRING
	{
		$current.merge(this_STRING_0);
	}
	{
		newLeafNode(this_STRING_0, grammarAccess.getExpressionTypeAccess().getSTRINGTerminalRuleCall());
	}
;

// Entry rule entryRuleAnnotation
entryRuleAnnotation returns [String current=null]:
	{ newCompositeNode(grammarAccess.getAnnotationRule()); }
	iv_ruleAnnotation=ruleAnnotation
	{ $current=$iv_ruleAnnotation.current.getText(); }
	EOF;

// Rule Annotation
ruleAnnotation returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getAnnotationAccess().getAnnotationDefinedParserRuleCall());
	}
	this_AnnotationDefined_0=ruleAnnotationDefined
	{
		$current.merge(this_AnnotationDefined_0);
	}
	{
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleAnnotationDefined
entryRuleAnnotationDefined returns [String current=null]:
	{ newCompositeNode(grammarAccess.getAnnotationDefinedRule()); }
	iv_ruleAnnotationDefined=ruleAnnotationDefined
	{ $current=$iv_ruleAnnotationDefined.current.getText(); }
	EOF;

// Rule AnnotationDefined
ruleAnnotationDefined returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='defined'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getAnnotationDefinedAccess().getDefinedKeyword());
	}
;

// Entry rule entryRuleName
entryRuleName returns [String current=null]:
	{ newCompositeNode(grammarAccess.getNameRule()); }
	iv_ruleName=ruleName
	{ $current=$iv_ruleName.current.getText(); }
	EOF;

// Rule Name
ruleName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_ID_0=RULE_ID
		{
			$current.merge(this_ID_0);
		}
		{
			newLeafNode(this_ID_0, grammarAccess.getNameAccess().getIDTerminalRuleCall_0());
		}
		    |
		this_STRING_1=RULE_STRING
		{
			$current.merge(this_STRING_1);
		}
		{
			newLeafNode(this_STRING_1, grammarAccess.getNameAccess().getSTRINGTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleComment
entryRuleComment returns [String current=null]:
	{ newCompositeNode(grammarAccess.getCommentRule()); }
	iv_ruleComment=ruleComment
	{ $current=$iv_ruleComment.current.getText(); }
	EOF;

// Rule Comment
ruleComment returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_ML_COMMENT_0=RULE_ML_COMMENT
		{
			$current.merge(this_ML_COMMENT_0);
		}
		{
			newLeafNode(this_ML_COMMENT_0, grammarAccess.getCommentAccess().getML_COMMENTTerminalRuleCall_0());
		}
		    |
		this_SL_COMMENT_1=RULE_SL_COMMENT
		{
			$current.merge(this_SL_COMMENT_1);
		}
		{
			newLeafNode(this_SL_COMMENT_1, grammarAccess.getCommentAccess().getSL_COMMENTTerminalRuleCall_1());
		}
	)
;

// Rule Modifier
ruleModifier returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='final'
			{
				$current = grammarAccess.getModifierAccess().getFINALEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getModifierAccess().getFINALEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='abstract'
			{
				$current = grammarAccess.getModifierAccess().getABSTRACTEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getModifierAccess().getABSTRACTEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='leaf'
			{
				$current = grammarAccess.getModifierAccess().getLEAFEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getModifierAccess().getLEAFEnumLiteralDeclaration_2());
			}
		)
	)
;

// Rule Visibility
ruleVisibility returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='public'
			{
				$current = grammarAccess.getVisibilityAccess().getPUBLICEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getVisibilityAccess().getPUBLICEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='private'
			{
				$current = grammarAccess.getVisibilityAccess().getPRIVATEEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getVisibilityAccess().getPRIVATEEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='protected'
			{
				$current = grammarAccess.getVisibilityAccess().getPROTECTEDEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getVisibilityAccess().getPROTECTEDEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='package'
			{
				$current = grammarAccess.getVisibilityAccess().getPACKAGEEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getVisibilityAccess().getPACKAGEEnumLiteralDeclaration_3());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
