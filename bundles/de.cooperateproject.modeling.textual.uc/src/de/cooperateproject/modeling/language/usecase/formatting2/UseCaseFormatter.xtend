/*
 * generated by Xtext 2.9.0
 */
package de.cooperateproject.modeling.language.usecase.formatting2

import com.google.inject.Inject
import de.cooperateproject.modeling.language.usecase.services.UseCaseGrammarAccess
import de.cooperateproject.modeling.language.usecase.usecase.Actor
import de.cooperateproject.modeling.language.usecase.usecase.Diagram
import de.cooperateproject.modeling.language.usecase.usecase.Include
import de.cooperateproject.modeling.language.usecase.usecase.UseCase
import de.cooperateproject.modeling.language.usecase.usecase.UsecasePackage
import de.cooperateproject.modeling.language.usecase.usecase.util.UsecaseSwitch
import org.eclipse.emf.ecore.EObject
import org.eclipse.xtext.formatting2.AbstractFormatter2
import org.eclipse.xtext.formatting2.IFormattableDocument

class UseCaseFormatter extends AbstractFormatter2 {
	
	@Inject extension UseCaseGrammarAccess
	
	static class UseCaseFormatterSwitch extends UsecaseSwitch<Void> {
		
	}

	def dispatch void format(Diagram diagram, extension IFormattableDocument document) {
		val contentIterator = diagram.eAllContents
		while (contentIterator.hasNext) {
			if (doFormat(contentIterator.next, document)) {
				contentIterator.prune
			}
		}
	}
	
	def dispatch boolean doFormat(Actor actor, extension IFormattableDocument document) {
		actor.regionFor.keyword('actor').append[oneSpace]
		actor.regionFor.feature(UsecasePackage.Literals.COMMENTABLE__NAME).append[oneSpace]
		actor.regionFor.keyword(';').prepend[noSpace].append[newLine]
		return true;
	}

	def dispatch boolean doFormat(UseCase usecase, extension IFormattableDocument document) {
		return false;
	}
	
	def dispatch boolean doFormat(Include include, extension IFormattableDocument document) {
		include.regionFor.keyword('{').prepend[oneSpace].append[newLine]
		return true;
	}
	
	def dispatch boolean doFormat(EObject usecase, extension IFormattableDocument document) {
		return true;
	}
}
