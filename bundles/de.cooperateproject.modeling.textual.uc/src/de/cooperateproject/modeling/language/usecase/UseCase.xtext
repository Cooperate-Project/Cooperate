grammar de.cooperateproject.modeling.language.usecase.UseCase with org.eclipse.xtext.common.Terminals hidden(WS)

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.eclipse.org/uml2/5.0.0/UML" as uml

generate usecase "http://www.cooperate-project.de/modeling/language/usecase"

Diagram:
//(actors+=Actor | associations+=Association)* system=System | (actors+=Actor | associations+=Association)*;
	umlModel=UMLModelReference test=Test test2=Test2 actors+=Actor* system=System associations+=Association*;

UMLModelReference:
	'use' importURI=ImportURI ';'
;

ImportURI:
	STRING
;

Test:
	'test' actor=[Actor|Name] ';'
;

Test2:
	'test2' actor=[uml::Actor|FQN] ';'
;

FQN:
	ID ('.' ID)*
;

Commentable:
	Actor | System | UseCase | Association | ExtensionPoint | Extension | Include;

Actor:
	{Actor} comments+=Comment* visibility=Visibility? modifiers+=Modifier* 'actor' name=Name ('extends'
	baseActors+=[Actor|Name])? (('{' '}') | ';');

System:
	comments+=Comment* "system" name=Name '{' usecases+=UseCase* '}';

UseCase:
	comments+=Comment* ('usecase'|'UC') name=Name ('extends' baseUseCases+=[UseCase|Name])? (';' |
		('{' 
			(extensionPoints+=ExtensionPoint | extensions+=Extension | includes+=Include)*
		'}'
	));
	
ExtensionPoint:
	comments+=Comment* visibility=Visibility? modifiers+=Modifier* 'extensionpoint' name=Name ';'
;

Extension:
	comments+=Comment* visibility=Visibility? 'extension' name=Name? '{' 'location' location=[ExtensionPoint|Name] ('condition' condition=Constraint ';')? '}'
;

Include:
	comments+=Comment* visibility=Visibility? 'include' name=Name? addition=[UseCase|Name] ';'
;

Constraint:
	language=ExpressionType expression=STRING
;

Association:
	comments+=Comment* visibility=Visibility? modifiers+=Modifier* "association" name=Name? ('extends' baseAssociations+=[Association|Name])? '{' actorMultiplicity=Multiplicity? actor=[Actor|Name]
	usecaseMultiplicity=Multiplicity? usecase=[UseCase|Name] ('rule' ownedRules+=Constraint ';')* '}';

enum Modifier:
	FINAL='final' | ABSTRACT='abstract' | LEAF='leaf';

enum Visibility:
	PUBLIC='public' | PRIVATE='private' | PROTECTED='protected' | PACKAGE='package';

Multiplicity:
	lowerBound=MultiplicityElement ('..' upperBound=MultiplicityElement)?;

MultiplicityElement returns ecore::EIntegerObject:
	INT | '*';

ExpressionType:
	STRING
;

AnnotationDefinition:
	'@' Annotation
;

Annotation:
	AnnotationDefined		
;

AnnotationDefined:
	'defined'
;

Name:
	(ID | STRING);

Comment:
	ML_COMMENT | SL_COMMENT;

