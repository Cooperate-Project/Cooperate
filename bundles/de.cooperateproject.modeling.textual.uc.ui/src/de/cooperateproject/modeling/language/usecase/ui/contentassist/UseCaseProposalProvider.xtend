/*
 * generated by Xtext 2.9.0
 */
package de.cooperateproject.modeling.language.usecase.ui.contentassist

import com.google.inject.Inject
import de.cooperateproject.modeling.language.usecase.scoping.UseCaseImportUriGlobalScopeProvider
import java.util.ArrayList
import org.eclipse.emf.ecore.EObject
import org.eclipse.jface.text.contentassist.ICompletionProposal
import org.eclipse.xtext.Assignment
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor
import org.eclipse.xtext.ui.editor.contentassist.ConfigurableCompletionProposal
import org.eclipse.uml2.uml.UMLPackage

/**
 * See https://www.eclipse.org/Xtext/documentation/304_ide_concepts.html#content-assist
 * on how to customize the content assistant.
 */
class UseCaseProposalProvider extends AbstractUseCaseProposalProvider {
	
	static class ProposalAcceptor implements ICompletionProposalAcceptor {
		
		val proposals = new ArrayList<ICompletionProposal>()
		
		override accept(ICompletionProposal proposal) {
			proposals.add(proposal);
		}
		
		override canAcceptMoreProposals() {
			return true;
		}
		
	}
	
	@Inject
	private var UseCaseImportUriGlobalScopeProvider importUriScopeProvider;
	
	override completeTest_Actor(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		
		val dummyAcceptor = new ProposalAcceptor()
		super.completeTest_Actor(model, assignment, context, dummyAcceptor)
		
		val actors = importUriScopeProvider.findElements(model.eResource, UMLPackage.eINSTANCE.actor)
		
		acceptor.accept(new ConfigurableCompletionProposal("QQ123", context.offset, context.replaceContextLength, 5));
		
	}
	
//
//	override completeActor_BaseActors(EObject model, Assignment assignment, ContentAssistContext context,
//		ICompletionProposalAcceptor acceptor) {
//		super.completeActor_BaseActors(model, assignment, context, new StringProposalDelegate(acceptor, context))
//	}
//
//	static class StringProposalDelegate extends Delegate {
//
//		private val ContentAssistContext ctx;
//
//		new(ICompletionProposalAcceptor delegate, ContentAssistContext ctx) {
//			super(delegate)
//			this.ctx = ctx
//		}
//		
//        override accept(ICompletionProposal proposal) {
//            if (proposal instanceof ConfigurableCompletionProposal) {
//                val endPos = proposal.replacementOffset + proposal.replacementLength 
//                if (ctx.document != null && ctx.document.length > endPos) {
//                    // We are not at the end of the file
//                    if ("\"" == ctx.document.get(endPos, 1)) {
//                        proposal.replacementLength = proposal.replacementLength-1
//                        proposal.replacementString = proposal.replacementString.substring(0,proposal.replacementString.length-1)
//                    }
//                }
//            }
//            super.accept(proposal)
//        }
//
//	}

}
