/*
 * generated by Xtext 2.12.0
 */
package de.cooperateproject.modeling.textual.activity.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class ActGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ActivityDiagramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.activity.Act.ActivityDiagram");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cActivityDiagramAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cStartActdKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTitleAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTitleSTRINGTerminalRuleCall_2_0 = (RuleCall)cTitleAssignment_2.eContents().get(0);
		private final Assignment cRootPackageAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRootPackageRootPackageParserRuleCall_3_0 = (RuleCall)cRootPackageAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cActivityNameKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cActivityNameAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cActivityNameSTRINGTerminalRuleCall_4_1_0 = (RuleCall)cActivityNameAssignment_4_1.eContents().get(0);
		private final Keyword cEndActdKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ActivityDiagram:
		//	{ActivityDiagram}
		//	'@start-actd' title=STRING
		//	rootPackage=RootPackage ('activityName' activityName=STRING)?
		//	'@end-actd';
		@Override public ParserRule getRule() { return rule; }
		
		//{ActivityDiagram} '@start-actd' title=STRING rootPackage=RootPackage ('activityName' activityName=STRING)? '@end-actd'
		public Group getGroup() { return cGroup; }
		
		//{ActivityDiagram}
		public Action getActivityDiagramAction_0() { return cActivityDiagramAction_0; }
		
		//'@start-actd'
		public Keyword getStartActdKeyword_1() { return cStartActdKeyword_1; }
		
		//title=STRING
		public Assignment getTitleAssignment_2() { return cTitleAssignment_2; }
		
		//STRING
		public RuleCall getTitleSTRINGTerminalRuleCall_2_0() { return cTitleSTRINGTerminalRuleCall_2_0; }
		
		//rootPackage=RootPackage
		public Assignment getRootPackageAssignment_3() { return cRootPackageAssignment_3; }
		
		//RootPackage
		public RuleCall getRootPackageRootPackageParserRuleCall_3_0() { return cRootPackageRootPackageParserRuleCall_3_0; }
		
		//('activityName' activityName=STRING)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'activityName'
		public Keyword getActivityNameKeyword_4_0() { return cActivityNameKeyword_4_0; }
		
		//activityName=STRING
		public Assignment getActivityNameAssignment_4_1() { return cActivityNameAssignment_4_1; }
		
		//STRING
		public RuleCall getActivityNameSTRINGTerminalRuleCall_4_1_0() { return cActivityNameSTRINGTerminalRuleCall_4_1_0; }
		
		//'@end-actd'
		public Keyword getEndActdKeyword_5() { return cEndActdKeyword_5; }
	}
	public class RootPackageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.activity.Act.RootPackage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRootPackageAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cRootPackageKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameFQNParserRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Assignment cNodesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNodesNodeParserRuleCall_2_0 = (RuleCall)cNodesAssignment_2.eContents().get(0);
		
		//RootPackage:
		//	{RootPackage} ('rootPackage' name=FQN)?
		//	nodes+=Node*;
		@Override public ParserRule getRule() { return rule; }
		
		//{RootPackage} ('rootPackage' name=FQN)? nodes+=Node*
		public Group getGroup() { return cGroup; }
		
		//{RootPackage}
		public Action getRootPackageAction_0() { return cRootPackageAction_0; }
		
		//('rootPackage' name=FQN)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'rootPackage'
		public Keyword getRootPackageKeyword_1_0() { return cRootPackageKeyword_1_0; }
		
		//name=FQN
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }
		
		//FQN
		public RuleCall getNameFQNParserRuleCall_1_1_0() { return cNameFQNParserRuleCall_1_1_0; }
		
		//nodes+=Node*
		public Assignment getNodesAssignment_2() { return cNodesAssignment_2; }
		
		//Node
		public RuleCall getNodesNodeParserRuleCall_2_0() { return cNodesNodeParserRuleCall_2_0; }
	}
	public class NodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.activity.Act.Node");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeNodeTypeEnumRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Node:
		//	type=NodeType name=STRING?;
		@Override public ParserRule getRule() { return rule; }
		
		//type=NodeType name=STRING?
		public Group getGroup() { return cGroup; }
		
		//type=NodeType
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//NodeType
		public RuleCall getTypeNodeTypeEnumRuleCall_0_0() { return cTypeNodeTypeEnumRuleCall_0_0; }
		
		//name=STRING?
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }
	}
	public class FQNElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.activity.Act.FQN");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//FQN:
		//	ID ("." ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ("." ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	
	public class NodeTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.activity.Act.NodeType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cINITIALEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cINITIALIniKeyword_0_0 = (Keyword)cINITIALEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cFINALEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cFINALFinKeyword_1_0 = (Keyword)cFINALEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cFLOW_FINALEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cFLOW_FINALFfinKeyword_2_0 = (Keyword)cFLOW_FINALEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum NodeType:
		//	INITIAL='ini'
		//	| FINAL='fin'
		//	| FLOW_FINAL='ffin';
		public EnumRule getRule() { return rule; }
		
		//INITIAL='ini' | FINAL='fin' | FLOW_FINAL='ffin'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//INITIAL='ini'
		public EnumLiteralDeclaration getINITIALEnumLiteralDeclaration_0() { return cINITIALEnumLiteralDeclaration_0; }
		
		//'ini'
		public Keyword getINITIALIniKeyword_0_0() { return cINITIALIniKeyword_0_0; }
		
		//FINAL='fin'
		public EnumLiteralDeclaration getFINALEnumLiteralDeclaration_1() { return cFINALEnumLiteralDeclaration_1; }
		
		//'fin'
		public Keyword getFINALFinKeyword_1_0() { return cFINALFinKeyword_1_0; }
		
		//FLOW_FINAL='ffin'
		public EnumLiteralDeclaration getFLOW_FINALEnumLiteralDeclaration_2() { return cFLOW_FINALEnumLiteralDeclaration_2; }
		
		//'ffin'
		public Keyword getFLOW_FINALFfinKeyword_2_0() { return cFLOW_FINALFfinKeyword_2_0; }
	}
	
	private final ActivityDiagramElements pActivityDiagram;
	private final RootPackageElements pRootPackage;
	private final NodeElements pNode;
	private final NodeTypeElements eNodeType;
	private final FQNElements pFQN;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public ActGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pActivityDiagram = new ActivityDiagramElements();
		this.pRootPackage = new RootPackageElements();
		this.pNode = new NodeElements();
		this.eNodeType = new NodeTypeElements();
		this.pFQN = new FQNElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.cooperateproject.modeling.textual.activity.Act".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//ActivityDiagram:
	//	{ActivityDiagram}
	//	'@start-actd' title=STRING
	//	rootPackage=RootPackage ('activityName' activityName=STRING)?
	//	'@end-actd';
	public ActivityDiagramElements getActivityDiagramAccess() {
		return pActivityDiagram;
	}
	
	public ParserRule getActivityDiagramRule() {
		return getActivityDiagramAccess().getRule();
	}
	
	//RootPackage:
	//	{RootPackage} ('rootPackage' name=FQN)?
	//	nodes+=Node*;
	public RootPackageElements getRootPackageAccess() {
		return pRootPackage;
	}
	
	public ParserRule getRootPackageRule() {
		return getRootPackageAccess().getRule();
	}
	
	//Node:
	//	type=NodeType name=STRING?;
	public NodeElements getNodeAccess() {
		return pNode;
	}
	
	public ParserRule getNodeRule() {
		return getNodeAccess().getRule();
	}
	
	//enum NodeType:
	//	INITIAL='ini'
	//	| FINAL='fin'
	//	| FLOW_FINAL='ffin';
	public NodeTypeElements getNodeTypeAccess() {
		return eNodeType;
	}
	
	public EnumRule getNodeTypeRule() {
		return getNodeTypeAccess().getRule();
	}
	
	//FQN:
	//	ID ("." ID)*;
	public FQNElements getFQNAccess() {
		return pFQN;
	}
	
	public ParserRule getFQNRule() {
		return getFQNAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
