/*
 * generated by Xtext
 */
grammar InternalActivity;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package de.cooperateproject.modeling.textual.activity.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package de.cooperateproject.modeling.textual.activity.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import de.cooperateproject.modeling.textual.activity.services.ActivityGrammarAccess;

}

@parser::members {

 	private ActivityGrammarAccess grammarAccess;
 	
    public InternalActivityParser(TokenStream input, ActivityGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "ActivityDiagram";	
   	}
   	
   	@Override
   	protected ActivityGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleActivityDiagram
entryRuleActivityDiagram returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getActivityDiagramRule()); }
	 iv_ruleActivityDiagram=ruleActivityDiagram 
	 { $current=$iv_ruleActivityDiagram.current; } 
	 EOF 
;

// Rule ActivityDiagram
ruleActivityDiagram returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getActivityDiagramAccess().getActivityDiagramAction_0(),
            $current);
    }
)	otherlv_1='@startactivity' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getActivityDiagramAccess().getStartactivityKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getActivityDiagramAccess().getElementsActivityElementParserRuleCall_2_0()); 
	    }
		lv_elements_2_0=ruleActivityElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getActivityDiagramRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_2_0, 
        		"de.cooperateproject.modeling.textual.activity.Activity.ActivityElement");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_3='@endactivity' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getActivityDiagramAccess().getEndactivityKeyword_3());
    }
)
;





// Entry rule entryRuleActivityElement
entryRuleActivityElement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getActivityElementRule()); }
	 iv_ruleActivityElement=ruleActivityElement 
	 { $current=$iv_ruleActivityElement.current; } 
	 EOF 
;

// Rule ActivityElement
ruleActivityElement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getActivityElementAccess().getActionParserRuleCall_0()); 
    }
    this_Action_0=ruleAction
    { 
        $current = $this_Action_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getActivityElementAccess().getConditionParserRuleCall_1()); 
    }
    this_Condition_1=ruleCondition
    { 
        $current = $this_Condition_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getActivityElementAccess().getForkParserRuleCall_2()); 
    }
    this_Fork_2=ruleFork
    { 
        $current = $this_Fork_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getActivityElementAccess().getAssociationParserRuleCall_3()); 
    }
    this_Association_3=ruleAssociation
    { 
        $current = $this_Association_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleAction
entryRuleAction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getActionRule()); }
	 iv_ruleAction=ruleAction 
	 { $current=$iv_ruleAction.current; } 
	 EOF 
;

// Rule Action
ruleAction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='action' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getActionAccess().getActionKeyword_0());
    }
((
(
(
		lv_longName_1_1=RULE_STRING
		{
			newLeafNode(lv_longName_1_1, grammarAccess.getActionAccess().getLongNameSTRINGTerminalRuleCall_1_0_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getActionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"longName",
        		lv_longName_1_1, 
        		"org.eclipse.xtext.common.Terminals.STRING");
	    }

    |		lv_longName_1_2=RULE_ID
		{
			newLeafNode(lv_longName_1_2, grammarAccess.getActionAccess().getLongNameIDTerminalRuleCall_1_0_0_1()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getActionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"longName",
        		lv_longName_1_2, 
        		"org.eclipse.xtext.common.Terminals.ID");
	    }

)

)
)	otherlv_2='as' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getActionAccess().getAsKeyword_1_1());
    }
)?(
(
		lv_name_3_0=RULE_ID
		{
			newLeafNode(lv_name_3_0, grammarAccess.getActionAccess().getNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getActionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_3_0, 
        		"org.eclipse.xtext.common.Terminals.ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getActionAccess().getCommentCommentParserRuleCall_3_0()); 
	    }
		lv_comment_4_0=ruleComment		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getActionRule());
	        }
       		set(
       			$current, 
       			"comment",
        		lv_comment_4_0, 
        		"de.cooperateproject.modeling.textual.activity.Activity.Comment");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleCondition
entryRuleCondition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConditionRule()); }
	 iv_ruleCondition=ruleCondition 
	 { $current=$iv_ruleCondition.current; } 
	 EOF 
;

// Rule Condition
ruleCondition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='condition' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getConditionAccess().getConditionKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConditionAccess().getConditionStartConditionEndParserRuleCall_1_0()); 
	    }
		lv_conditionStart_1_0=ruleConditionEnd		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConditionRule());
	        }
       		set(
       			$current, 
       			"conditionStart",
        		lv_conditionStart_1_0, 
        		"de.cooperateproject.modeling.textual.activity.Activity.ConditionEnd");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getConditionAccess().getColonKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConditionAccess().getConditionEndConditionEndParserRuleCall_3_0()); 
	    }
		lv_conditionEnd_3_0=ruleConditionEnd		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConditionRule());
	        }
       		set(
       			$current, 
       			"conditionEnd",
        		lv_conditionEnd_3_0, 
        		"de.cooperateproject.modeling.textual.activity.Activity.ConditionEnd");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getConditionAccess().getCommentCommentParserRuleCall_4_0()); 
	    }
		lv_comment_4_0=ruleComment		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConditionRule());
	        }
       		set(
       			$current, 
       			"comment",
        		lv_comment_4_0, 
        		"de.cooperateproject.modeling.textual.activity.Activity.Comment");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleConditionEnd
entryRuleConditionEnd returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConditionEndRule()); }
	 iv_ruleConditionEnd=ruleConditionEnd 
	 { $current=$iv_ruleConditionEnd.current; } 
	 EOF 
;

// Rule ConditionEnd
ruleConditionEnd returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
(
		lv_longName_0_1=RULE_STRING
		{
			newLeafNode(lv_longName_0_1, grammarAccess.getConditionEndAccess().getLongNameSTRINGTerminalRuleCall_0_0_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getConditionEndRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"longName",
        		lv_longName_0_1, 
        		"org.eclipse.xtext.common.Terminals.STRING");
	    }

    |		lv_longName_0_2=RULE_ID
		{
			newLeafNode(lv_longName_0_2, grammarAccess.getConditionEndAccess().getLongNameIDTerminalRuleCall_0_0_0_1()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getConditionEndRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"longName",
        		lv_longName_0_2, 
        		"org.eclipse.xtext.common.Terminals.ID");
	    }

)

)
)	otherlv_1='as' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getConditionEndAccess().getAsKeyword_0_1());
    }
)?(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getConditionEndAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getConditionEndRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"org.eclipse.xtext.common.Terminals.ID");
	    }

)
))
;





// Entry rule entryRuleFork
entryRuleFork returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getForkRule()); }
	 iv_ruleFork=ruleFork 
	 { $current=$iv_ruleFork.current; } 
	 EOF 
;

// Rule Fork
ruleFork returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='fork' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getForkAccess().getForkKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForkAccess().getForkStartForkEndParserRuleCall_1_0()); 
	    }
		lv_forkStart_1_0=ruleForkEnd		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForkRule());
	        }
       		set(
       			$current, 
       			"forkStart",
        		lv_forkStart_1_0, 
        		"de.cooperateproject.modeling.textual.activity.Activity.ForkEnd");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getForkAccess().getColonKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForkAccess().getForkEndForkEndParserRuleCall_3_0()); 
	    }
		lv_forkEnd_3_0=ruleForkEnd		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForkRule());
	        }
       		set(
       			$current, 
       			"forkEnd",
        		lv_forkEnd_3_0, 
        		"de.cooperateproject.modeling.textual.activity.Activity.ForkEnd");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getForkAccess().getCommentCommentParserRuleCall_4_0()); 
	    }
		lv_comment_4_0=ruleComment		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForkRule());
	        }
       		set(
       			$current, 
       			"comment",
        		lv_comment_4_0, 
        		"de.cooperateproject.modeling.textual.activity.Activity.Comment");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleForkEnd
entryRuleForkEnd returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getForkEndRule()); }
	 iv_ruleForkEnd=ruleForkEnd 
	 { $current=$iv_ruleForkEnd.current; } 
	 EOF 
;

// Rule ForkEnd
ruleForkEnd returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
(
		lv_longName_0_1=RULE_STRING
		{
			newLeafNode(lv_longName_0_1, grammarAccess.getForkEndAccess().getLongNameSTRINGTerminalRuleCall_0_0_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getForkEndRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"longName",
        		lv_longName_0_1, 
        		"org.eclipse.xtext.common.Terminals.STRING");
	    }

    |		lv_longName_0_2=RULE_ID
		{
			newLeafNode(lv_longName_0_2, grammarAccess.getForkEndAccess().getLongNameIDTerminalRuleCall_0_0_0_1()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getForkEndRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"longName",
        		lv_longName_0_2, 
        		"org.eclipse.xtext.common.Terminals.ID");
	    }

)

)
)	otherlv_1='as' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getForkEndAccess().getAsKeyword_0_1());
    }
)?(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getForkEndAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getForkEndRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"org.eclipse.xtext.common.Terminals.ID");
	    }

)
))
;





// Entry rule entryRuleAssociation
entryRuleAssociation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAssociationRule()); }
	 iv_ruleAssociation=ruleAssociation 
	 { $current=$iv_ruleAssociation.current; } 
	 EOF 
;

// Rule Association
ruleAssociation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getAssociationAccess().getLeftReferenceParserRuleCall_0_0()); 
	    }
		lv_left_0_0=ruleReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssociationRule());
	        }
       		set(
       			$current, 
       			"left",
        		lv_left_0_0, 
        		"de.cooperateproject.modeling.textual.activity.Activity.Reference");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='-' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAssociationAccess().getHyphenMinusKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAssociationAccess().getRightReferenceParserRuleCall_2_0()); 
	    }
		lv_right_2_0=ruleReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssociationRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_2_0, 
        		"de.cooperateproject.modeling.textual.activity.Activity.Reference");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAssociationAccess().getCommentCommentParserRuleCall_3_0()); 
	    }
		lv_comment_3_0=ruleComment		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssociationRule());
	        }
       		set(
       			$current, 
       			"comment",
        		lv_comment_3_0, 
        		"de.cooperateproject.modeling.textual.activity.Activity.Comment");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleReference
entryRuleReference returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getReferenceRule()); }
	 iv_ruleReference=ruleReference 
	 { $current=$iv_ruleReference.current; } 
	 EOF 
;

// Rule Reference
ruleReference returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getReferenceAccess().getDefReferenceParserRuleCall_0()); 
    }
    this_DefReference_0=ruleDefReference
    { 
        $current = $this_DefReference_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getReferenceAccess().getStartAndEndParserRuleCall_1()); 
    }
    this_StartAndEnd_1=ruleStartAndEnd
    { 
        $current = $this_StartAndEnd_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleDefReference
entryRuleDefReference returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDefReferenceRule()); }
	 iv_ruleDefReference=ruleDefReference 
	 { $current=$iv_ruleDefReference.current; } 
	 EOF 
;

// Rule DefReference
ruleDefReference returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getDefReferenceRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getDefReferenceAccess().getTypeDefRefCrossReference_0()); 
	}

)
)
;







// Entry rule entryRuleStartAndEnd
entryRuleStartAndEnd returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStartAndEndRule()); }
	 iv_ruleStartAndEnd=ruleStartAndEnd 
	 { $current=$iv_ruleStartAndEnd.current; } 
	 EOF 
;

// Rule StartAndEnd
ruleStartAndEnd returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getStartAndEndAccess().getTypeStartAndEndEnumEnumRuleCall_0()); 
	    }
		lv_type_0_0=ruleStartAndEndEnum		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStartAndEndRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_0_0, 
        		"de.cooperateproject.modeling.textual.activity.Activity.StartAndEndEnum");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleComment
entryRuleComment returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCommentRule()); }
	 iv_ruleComment=ruleComment 
	 { $current=$iv_ruleComment.current; } 
	 EOF 
;

// Rule Comment
ruleComment returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='note[' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getCommentAccess().getNoteKeyword_0());
    }
(
(
		lv_description_1_0=RULE_STRING
		{
			newLeafNode(lv_description_1_0, grammarAccess.getCommentAccess().getDescriptionSTRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCommentRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"description",
        		lv_description_1_0, 
        		"org.eclipse.xtext.common.Terminals.STRING");
	    }

)
)	otherlv_2=']' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getCommentAccess().getRightSquareBracketKeyword_2());
    }
)
;





// Rule StartAndEndEnum
ruleStartAndEndEnum returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='start' 
	{
        $current = grammarAccess.getStartAndEndEnumAccess().getSTARTEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getStartAndEndEnumAccess().getSTARTEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='end' 
	{
        $current = grammarAccess.getStartAndEndEnumAccess().getENDEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getStartAndEndEnumAccess().getENDEnumLiteralDeclaration_1()); 
    }
));



RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


