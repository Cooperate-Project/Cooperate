/*
 * generated by Xtext 2.12.0
 */
package de.cooperateproject.modeling.textual.activity.serializer;

import com.google.inject.Inject;
import de.cooperateproject.modeling.textual.activity.act.ActPackage;
import de.cooperateproject.modeling.textual.activity.act.ActivityDiagram;
import de.cooperateproject.modeling.textual.activity.act.ActivityNode;
import de.cooperateproject.modeling.textual.activity.act.ControlNode;
import de.cooperateproject.modeling.textual.activity.act.RootPackage;
import de.cooperateproject.modeling.textual.activity.services.ActGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;

@SuppressWarnings("all")
public class ActSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private ActGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == ActPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case ActPackage.ACTIVITY_DIAGRAM:
				sequence_ActivityDiagram(context, (ActivityDiagram) semanticObject); 
				return; 
			case ActPackage.ACTIVITY_NODE:
				sequence_ActivityNode(context, (ActivityNode) semanticObject); 
				return; 
			case ActPackage.CONTROL_NODE:
				sequence_ControlNode(context, (ControlNode) semanticObject); 
				return; 
			case ActPackage.ROOT_PACKAGE:
				sequence_RootPackage(context, (RootPackage) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     ActivityDiagram returns ActivityDiagram
	 *
	 * Constraint:
	 *     (title=STRING rootPackage=RootPackage activityName=STRING?)
	 */
	protected void sequence_ActivityDiagram(ISerializationContext context, ActivityDiagram semanticObject) {
		genericSequencer.createSequence(context, (EObject) semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Node returns ActivityNode
	 *     ActivityNode returns ActivityNode
	 *
	 * Constraint:
	 *     (name=ID | (name=ID alias=STRING))
	 */
	protected void sequence_ActivityNode(ISerializationContext context, ActivityNode semanticObject) {
		genericSequencer.createSequence(context, (EObject) semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Node returns ControlNode
	 *     ControlNode returns ControlNode
	 *
	 * Constraint:
	 *     (type=NodeType name=STRING?)
	 */
	protected void sequence_ControlNode(ISerializationContext context, ControlNode semanticObject) {
		genericSequencer.createSequence(context, (EObject) semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RootPackage returns RootPackage
	 *
	 * Constraint:
	 *     (name=FQN? nodes+=Node*)
	 */
	protected void sequence_RootPackage(ISerializationContext context, RootPackage semanticObject) {
		genericSequencer.createSequence(context, (EObject) semanticObject);
	}
	
	
}
