/*
 * generated by Xtext 2.12.0
 */
package de.cooperateproject.modeling.textual.activity.serializer;

import com.google.inject.Inject;
import de.cooperateproject.modeling.textual.activity.act.ActPackage;
import de.cooperateproject.modeling.textual.activity.act.ActionNode;
import de.cooperateproject.modeling.textual.activity.act.ActivityDiagram;
import de.cooperateproject.modeling.textual.activity.act.DecisionNode;
import de.cooperateproject.modeling.textual.activity.act.FinalNode;
import de.cooperateproject.modeling.textual.activity.act.Flow;
import de.cooperateproject.modeling.textual.activity.act.FlowFinalNode;
import de.cooperateproject.modeling.textual.activity.act.ForkNode;
import de.cooperateproject.modeling.textual.activity.act.InitialNode;
import de.cooperateproject.modeling.textual.activity.act.JoinNode;
import de.cooperateproject.modeling.textual.activity.act.MergeNode;
import de.cooperateproject.modeling.textual.activity.act.RootPackage;
import de.cooperateproject.modeling.textual.activity.act.Swimlane;
import de.cooperateproject.modeling.textual.activity.services.ActGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import de.cooperateproject.modeling.textual.common.metamodel.textualCommons.TextualCommonsPackage;

@SuppressWarnings("all")
public class ActSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private ActGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == ActPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case ActPackage.ACTION_NODE:
				sequence_ActionNode(context, (ActionNode) semanticObject); 
				return; 
			case ActPackage.ACTIVITY_DIAGRAM:
				sequence_ActivityDiagram(context, (ActivityDiagram) semanticObject); 
				return; 
			case ActPackage.DECISION_NODE:
				sequence_DecisionNode(context, (DecisionNode) semanticObject); 
				return; 
			case ActPackage.FINAL_NODE:
				sequence_FinalNode(context, (FinalNode) semanticObject); 
				return; 
			case ActPackage.FLOW:
				sequence_Flow(context, (Flow) semanticObject); 
				return; 
			case ActPackage.FLOW_FINAL_NODE:
				sequence_FlowFinalNode(context, (FlowFinalNode) semanticObject); 
				return; 
			case ActPackage.FORK_NODE:
				sequence_ForkNode(context, (ForkNode) semanticObject); 
				return; 
			case ActPackage.INITIAL_NODE:
				sequence_InitialNode(context, (InitialNode) semanticObject); 
				return; 
			case ActPackage.JOIN_NODE:
				sequence_JoinNode(context, (JoinNode) semanticObject); 
				return; 
			case ActPackage.MERGE_NODE:
				sequence_MergeNode(context, (MergeNode) semanticObject); 
				return; 
			case ActPackage.ROOT_PACKAGE:
				sequence_RootPackage(context, (RootPackage) semanticObject); 
				return; 
			case ActPackage.SWIMLANE:
				sequence_Swimlane(context, (Swimlane) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Node returns ActionNode
	 *     ActionNode returns ActionNode
	 *
	 * Constraint:
	 *     (name=ID | (alias=ID name=STRING))
	 */
	protected void sequence_ActionNode(ISerializationContext context, ActionNode semanticObject) {
		genericSequencer.createSequence(context, (EObject) semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ActivityDiagram returns ActivityDiagram
	 *
	 * Constraint:
	 *     (title=STRING rootPackage=RootPackage)
	 */
	protected void sequence_ActivityDiagram(ISerializationContext context, ActivityDiagram semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient((EObject) semanticObject, ActPackage.Literals.ACTIVITY_DIAGRAM__TITLE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing((EObject) semanticObject, ActPackage.Literals.ACTIVITY_DIAGRAM__TITLE));
			if (transientValues.isValueTransient((EObject) semanticObject, ActPackage.Literals.ACTIVITY_DIAGRAM__ROOT_PACKAGE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing((EObject) semanticObject, ActPackage.Literals.ACTIVITY_DIAGRAM__ROOT_PACKAGE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, (EObject) semanticObject);
		feeder.accept(grammarAccess.getActivityDiagramAccess().getTitleSTRINGTerminalRuleCall_2_0(), semanticObject.getTitle());
		feeder.accept(grammarAccess.getActivityDiagramAccess().getRootPackageRootPackageParserRuleCall_3_0(), semanticObject.getRootPackage());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Node returns DecisionNode
	 *     ControlNode returns DecisionNode
	 *     DecisionNode returns DecisionNode
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_DecisionNode(ISerializationContext context, DecisionNode semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient((EObject) semanticObject, TextualCommonsPackage.Literals.NAMED_ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing((EObject) semanticObject, TextualCommonsPackage.Literals.NAMED_ELEMENT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, (EObject) semanticObject);
		feeder.accept(grammarAccess.getDecisionNodeAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Node returns FinalNode
	 *     ControlNode returns FinalNode
	 *     FinalNode returns FinalNode
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_FinalNode(ISerializationContext context, FinalNode semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient((EObject) semanticObject, TextualCommonsPackage.Literals.NAMED_ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing((EObject) semanticObject, TextualCommonsPackage.Literals.NAMED_ELEMENT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, (EObject) semanticObject);
		feeder.accept(grammarAccess.getFinalNodeAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Node returns FlowFinalNode
	 *     ControlNode returns FlowFinalNode
	 *     FlowFinalNode returns FlowFinalNode
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_FlowFinalNode(ISerializationContext context, FlowFinalNode semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient((EObject) semanticObject, TextualCommonsPackage.Literals.NAMED_ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing((EObject) semanticObject, TextualCommonsPackage.Literals.NAMED_ELEMENT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, (EObject) semanticObject);
		feeder.accept(grammarAccess.getFlowFinalNodeAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Flow returns Flow
	 *
	 * Constraint:
	 *     (relatedElements+=[Node|FQN] relatedElements+=[Node|FQN]+ condition=STRING?)
	 */
	protected void sequence_Flow(ISerializationContext context, Flow semanticObject) {
		genericSequencer.createSequence(context, (EObject) semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Node returns ForkNode
	 *     ControlNode returns ForkNode
	 *     ForkNode returns ForkNode
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_ForkNode(ISerializationContext context, ForkNode semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient((EObject) semanticObject, TextualCommonsPackage.Literals.NAMED_ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing((EObject) semanticObject, TextualCommonsPackage.Literals.NAMED_ELEMENT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, (EObject) semanticObject);
		feeder.accept(grammarAccess.getForkNodeAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Node returns InitialNode
	 *     ControlNode returns InitialNode
	 *     InitialNode returns InitialNode
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_InitialNode(ISerializationContext context, InitialNode semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient((EObject) semanticObject, TextualCommonsPackage.Literals.NAMED_ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing((EObject) semanticObject, TextualCommonsPackage.Literals.NAMED_ELEMENT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, (EObject) semanticObject);
		feeder.accept(grammarAccess.getInitialNodeAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Node returns JoinNode
	 *     ControlNode returns JoinNode
	 *     JoinNode returns JoinNode
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_JoinNode(ISerializationContext context, JoinNode semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient((EObject) semanticObject, TextualCommonsPackage.Literals.NAMED_ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing((EObject) semanticObject, TextualCommonsPackage.Literals.NAMED_ELEMENT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, (EObject) semanticObject);
		feeder.accept(grammarAccess.getJoinNodeAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Node returns MergeNode
	 *     ControlNode returns MergeNode
	 *     MergeNode returns MergeNode
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_MergeNode(ISerializationContext context, MergeNode semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient((EObject) semanticObject, TextualCommonsPackage.Literals.NAMED_ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing((EObject) semanticObject, TextualCommonsPackage.Literals.NAMED_ELEMENT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, (EObject) semanticObject);
		feeder.accept(grammarAccess.getMergeNodeAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     RootPackage returns RootPackage
	 *
	 * Constraint:
	 *     (name=FQN? activityName=STRING? children+=Swimlane* nodes+=Node* relations+=Flow*)
	 */
	protected void sequence_RootPackage(ISerializationContext context, RootPackage semanticObject) {
		genericSequencer.createSequence(context, (EObject) semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Swimlane returns Swimlane
	 *
	 * Constraint:
	 *     (name=ID nodes+=Node*)
	 */
	protected void sequence_Swimlane(ISerializationContext context, Swimlane semanticObject) {
		genericSequencer.createSequence(context, (EObject) semanticObject);
	}
	
	
}
