/*
 * generated by Xtext
 */
package de.cooperateproject.modeling.textual.activity.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class ActivityGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ActivityDiagramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.activity.Activity.ActivityDiagram");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cActivityDiagramAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cStartactivityKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cElementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementsActivityElementParserRuleCall_2_0 = (RuleCall)cElementsAssignment_2.eContents().get(0);
		private final Keyword cEndactivityKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ActivityDiagram:
		//	{ActivityDiagram}
		//	'@startactivity'
		//	elements+=ActivityElement*
		//	'@endactivity';
		@Override public ParserRule getRule() { return rule; }

		//{ActivityDiagram} '@startactivity' elements+=ActivityElement* '@endactivity'
		public Group getGroup() { return cGroup; }

		//{ActivityDiagram}
		public Action getActivityDiagramAction_0() { return cActivityDiagramAction_0; }

		//'@startactivity'
		public Keyword getStartactivityKeyword_1() { return cStartactivityKeyword_1; }

		//elements+=ActivityElement*
		public Assignment getElementsAssignment_2() { return cElementsAssignment_2; }

		//ActivityElement
		public RuleCall getElementsActivityElementParserRuleCall_2_0() { return cElementsActivityElementParserRuleCall_2_0; }

		//'@endactivity'
		public Keyword getEndactivityKeyword_3() { return cEndactivityKeyword_3; }
	}

	public class ActivityElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.activity.Activity.ActivityElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cActionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cConditionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cForkParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cAssociationParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//ActivityElement:
		//	Action
		//	| Condition
		//	| Fork
		//	| Association
		//	//| Comment
		//;
		@Override public ParserRule getRule() { return rule; }

		//Action | Condition | Fork | Association
		public Alternatives getAlternatives() { return cAlternatives; }

		//Action
		public RuleCall getActionParserRuleCall_0() { return cActionParserRuleCall_0; }

		//Condition
		public RuleCall getConditionParserRuleCall_1() { return cConditionParserRuleCall_1; }

		//Fork
		public RuleCall getForkParserRuleCall_2() { return cForkParserRuleCall_2; }

		//Association
		public RuleCall getAssociationParserRuleCall_3() { return cAssociationParserRuleCall_3; }
	}

	public class ActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.activity.Activity.Action");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cActionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cLongNameAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Alternatives cLongNameAlternatives_1_0_0 = (Alternatives)cLongNameAssignment_1_0.eContents().get(0);
		private final RuleCall cLongNameSTRINGTerminalRuleCall_1_0_0_0 = (RuleCall)cLongNameAlternatives_1_0_0.eContents().get(0);
		private final RuleCall cLongNameIDTerminalRuleCall_1_0_0_1 = (RuleCall)cLongNameAlternatives_1_0_0.eContents().get(1);
		private final Keyword cAsKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cCommentAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCommentCommentParserRuleCall_3_0 = (RuleCall)cCommentAssignment_3.eContents().get(0);
		
		//Action:
		//	'action' (longName=(STRING | ID) 'as')? name=ID comment=Comment?;
		@Override public ParserRule getRule() { return rule; }

		//'action' (longName=(STRING | ID) 'as')? name=ID comment=Comment?
		public Group getGroup() { return cGroup; }

		//'action'
		public Keyword getActionKeyword_0() { return cActionKeyword_0; }

		//(longName=(STRING | ID) 'as')?
		public Group getGroup_1() { return cGroup_1; }

		//longName=(STRING | ID)
		public Assignment getLongNameAssignment_1_0() { return cLongNameAssignment_1_0; }

		//(STRING | ID)
		public Alternatives getLongNameAlternatives_1_0_0() { return cLongNameAlternatives_1_0_0; }

		//STRING
		public RuleCall getLongNameSTRINGTerminalRuleCall_1_0_0_0() { return cLongNameSTRINGTerminalRuleCall_1_0_0_0; }

		//ID
		public RuleCall getLongNameIDTerminalRuleCall_1_0_0_1() { return cLongNameIDTerminalRuleCall_1_0_0_1; }

		//'as'
		public Keyword getAsKeyword_1_1() { return cAsKeyword_1_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//comment=Comment?
		public Assignment getCommentAssignment_3() { return cCommentAssignment_3; }

		//Comment
		public RuleCall getCommentCommentParserRuleCall_3_0() { return cCommentCommentParserRuleCall_3_0; }
	}

	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.activity.Activity.Condition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConditionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConditionStartAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionStartConditionEndParserRuleCall_1_0 = (RuleCall)cConditionStartAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cConditionEndAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cConditionEndConditionEndParserRuleCall_3_0 = (RuleCall)cConditionEndAssignment_3.eContents().get(0);
		private final Assignment cCommentAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cCommentCommentParserRuleCall_4_0 = (RuleCall)cCommentAssignment_4.eContents().get(0);
		
		//Condition:
		//	'condition' conditionStart=ConditionEnd ':' conditionEnd=ConditionEnd comment=Comment?;
		@Override public ParserRule getRule() { return rule; }

		//'condition' conditionStart=ConditionEnd ':' conditionEnd=ConditionEnd comment=Comment?
		public Group getGroup() { return cGroup; }

		//'condition'
		public Keyword getConditionKeyword_0() { return cConditionKeyword_0; }

		//conditionStart=ConditionEnd
		public Assignment getConditionStartAssignment_1() { return cConditionStartAssignment_1; }

		//ConditionEnd
		public RuleCall getConditionStartConditionEndParserRuleCall_1_0() { return cConditionStartConditionEndParserRuleCall_1_0; }

		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//conditionEnd=ConditionEnd
		public Assignment getConditionEndAssignment_3() { return cConditionEndAssignment_3; }

		//ConditionEnd
		public RuleCall getConditionEndConditionEndParserRuleCall_3_0() { return cConditionEndConditionEndParserRuleCall_3_0; }

		//comment=Comment?
		public Assignment getCommentAssignment_4() { return cCommentAssignment_4; }

		//Comment
		public RuleCall getCommentCommentParserRuleCall_4_0() { return cCommentCommentParserRuleCall_4_0; }
	}

	public class ConditionEndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.activity.Activity.ConditionEnd");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cLongNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Alternatives cLongNameAlternatives_0_0_0 = (Alternatives)cLongNameAssignment_0_0.eContents().get(0);
		private final RuleCall cLongNameSTRINGTerminalRuleCall_0_0_0_0 = (RuleCall)cLongNameAlternatives_0_0_0.eContents().get(0);
		private final RuleCall cLongNameIDTerminalRuleCall_0_0_0_1 = (RuleCall)cLongNameAlternatives_0_0_0.eContents().get(1);
		private final Keyword cAsKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//ConditionEnd:
		//	(longName=(STRING | ID) 'as')? name=ID;
		@Override public ParserRule getRule() { return rule; }

		//(longName=(STRING | ID) 'as')? name=ID
		public Group getGroup() { return cGroup; }

		//(longName=(STRING | ID) 'as')?
		public Group getGroup_0() { return cGroup_0; }

		//longName=(STRING | ID)
		public Assignment getLongNameAssignment_0_0() { return cLongNameAssignment_0_0; }

		//(STRING | ID)
		public Alternatives getLongNameAlternatives_0_0_0() { return cLongNameAlternatives_0_0_0; }

		//STRING
		public RuleCall getLongNameSTRINGTerminalRuleCall_0_0_0_0() { return cLongNameSTRINGTerminalRuleCall_0_0_0_0; }

		//ID
		public RuleCall getLongNameIDTerminalRuleCall_0_0_0_1() { return cLongNameIDTerminalRuleCall_0_0_0_1; }

		//'as'
		public Keyword getAsKeyword_0_1() { return cAsKeyword_0_1; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class ForkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.activity.Activity.Fork");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cForkStartAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cForkStartForkEndParserRuleCall_1_0 = (RuleCall)cForkStartAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cForkEndAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cForkEndForkEndParserRuleCall_3_0 = (RuleCall)cForkEndAssignment_3.eContents().get(0);
		private final Assignment cCommentAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cCommentCommentParserRuleCall_4_0 = (RuleCall)cCommentAssignment_4.eContents().get(0);
		
		//Fork:
		//	'fork' forkStart=ForkEnd ':' forkEnd=ForkEnd comment=Comment?;
		@Override public ParserRule getRule() { return rule; }

		//'fork' forkStart=ForkEnd ':' forkEnd=ForkEnd comment=Comment?
		public Group getGroup() { return cGroup; }

		//'fork'
		public Keyword getForkKeyword_0() { return cForkKeyword_0; }

		//forkStart=ForkEnd
		public Assignment getForkStartAssignment_1() { return cForkStartAssignment_1; }

		//ForkEnd
		public RuleCall getForkStartForkEndParserRuleCall_1_0() { return cForkStartForkEndParserRuleCall_1_0; }

		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//forkEnd=ForkEnd
		public Assignment getForkEndAssignment_3() { return cForkEndAssignment_3; }

		//ForkEnd
		public RuleCall getForkEndForkEndParserRuleCall_3_0() { return cForkEndForkEndParserRuleCall_3_0; }

		//comment=Comment?
		public Assignment getCommentAssignment_4() { return cCommentAssignment_4; }

		//Comment
		public RuleCall getCommentCommentParserRuleCall_4_0() { return cCommentCommentParserRuleCall_4_0; }
	}

	public class ForkEndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.activity.Activity.ForkEnd");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cLongNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Alternatives cLongNameAlternatives_0_0_0 = (Alternatives)cLongNameAssignment_0_0.eContents().get(0);
		private final RuleCall cLongNameSTRINGTerminalRuleCall_0_0_0_0 = (RuleCall)cLongNameAlternatives_0_0_0.eContents().get(0);
		private final RuleCall cLongNameIDTerminalRuleCall_0_0_0_1 = (RuleCall)cLongNameAlternatives_0_0_0.eContents().get(1);
		private final Keyword cAsKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//ForkEnd:
		//	(longName=(STRING | ID) 'as')? name=ID;
		@Override public ParserRule getRule() { return rule; }

		//(longName=(STRING | ID) 'as')? name=ID
		public Group getGroup() { return cGroup; }

		//(longName=(STRING | ID) 'as')?
		public Group getGroup_0() { return cGroup_0; }

		//longName=(STRING | ID)
		public Assignment getLongNameAssignment_0_0() { return cLongNameAssignment_0_0; }

		//(STRING | ID)
		public Alternatives getLongNameAlternatives_0_0_0() { return cLongNameAlternatives_0_0_0; }

		//STRING
		public RuleCall getLongNameSTRINGTerminalRuleCall_0_0_0_0() { return cLongNameSTRINGTerminalRuleCall_0_0_0_0; }

		//ID
		public RuleCall getLongNameIDTerminalRuleCall_0_0_0_1() { return cLongNameIDTerminalRuleCall_0_0_0_1; }

		//'as'
		public Keyword getAsKeyword_0_1() { return cAsKeyword_0_1; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class AssociationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.activity.Activity.Association");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftReferenceParserRuleCall_0_0 = (RuleCall)cLeftAssignment_0.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRightAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRightReferenceParserRuleCall_2_0 = (RuleCall)cRightAssignment_2.eContents().get(0);
		private final Assignment cCommentAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCommentCommentParserRuleCall_3_0 = (RuleCall)cCommentAssignment_3.eContents().get(0);
		
		//Association:
		//	left=Reference '-' right=Reference comment=Comment?;
		@Override public ParserRule getRule() { return rule; }

		//left=Reference '-' right=Reference comment=Comment?
		public Group getGroup() { return cGroup; }

		//left=Reference
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }

		//Reference
		public RuleCall getLeftReferenceParserRuleCall_0_0() { return cLeftReferenceParserRuleCall_0_0; }

		//'-'
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }

		//right=Reference
		public Assignment getRightAssignment_2() { return cRightAssignment_2; }

		//Reference
		public RuleCall getRightReferenceParserRuleCall_2_0() { return cRightReferenceParserRuleCall_2_0; }

		//comment=Comment?
		public Assignment getCommentAssignment_3() { return cCommentAssignment_3; }

		//Comment
		public RuleCall getCommentCommentParserRuleCall_3_0() { return cCommentCommentParserRuleCall_3_0; }
	}

	public class ReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.activity.Activity.Reference");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDefReferenceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStartAndEndParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Reference:
		//	DefReference
		//	| StartAndEnd;
		@Override public ParserRule getRule() { return rule; }

		//DefReference | StartAndEnd
		public Alternatives getAlternatives() { return cAlternatives; }

		//DefReference
		public RuleCall getDefReferenceParserRuleCall_0() { return cDefReferenceParserRuleCall_0; }

		//StartAndEnd
		public RuleCall getStartAndEndParserRuleCall_1() { return cStartAndEndParserRuleCall_1; }
	}

	public class DefReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.activity.Activity.DefReference");
		private final Assignment cTypeAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cTypeDefRefCrossReference_0 = (CrossReference)cTypeAssignment.eContents().get(0);
		private final RuleCall cTypeDefRefIDTerminalRuleCall_0_1 = (RuleCall)cTypeDefRefCrossReference_0.eContents().get(1);
		
		//DefReference:
		//	type=[DefRef];
		@Override public ParserRule getRule() { return rule; }

		//type=[DefRef]
		public Assignment getTypeAssignment() { return cTypeAssignment; }

		//[DefRef]
		public CrossReference getTypeDefRefCrossReference_0() { return cTypeDefRefCrossReference_0; }

		//ID
		public RuleCall getTypeDefRefIDTerminalRuleCall_0_1() { return cTypeDefRefIDTerminalRuleCall_0_1; }
	}

	public class DefRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.activity.Activity.DefRef");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cActionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cConditionEndParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cForkEndParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//DefRef:
		//	Action
		//	| ConditionEnd
		//	| ForkEnd;
		@Override public ParserRule getRule() { return rule; }

		//Action | ConditionEnd | ForkEnd
		public Alternatives getAlternatives() { return cAlternatives; }

		//Action
		public RuleCall getActionParserRuleCall_0() { return cActionParserRuleCall_0; }

		//ConditionEnd
		public RuleCall getConditionEndParserRuleCall_1() { return cConditionEndParserRuleCall_1; }

		//ForkEnd
		public RuleCall getForkEndParserRuleCall_2() { return cForkEndParserRuleCall_2; }
	}

	public class StartAndEndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.activity.Activity.StartAndEnd");
		private final Assignment cTypeAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cTypeStartAndEndEnumEnumRuleCall_0 = (RuleCall)cTypeAssignment.eContents().get(0);
		
		//StartAndEnd:
		//	type=StartAndEndEnum;
		@Override public ParserRule getRule() { return rule; }

		//type=StartAndEndEnum
		public Assignment getTypeAssignment() { return cTypeAssignment; }

		//StartAndEndEnum
		public RuleCall getTypeStartAndEndEnumEnumRuleCall_0() { return cTypeStartAndEndEnumEnumRuleCall_0; }
	}

	public class CommentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.activity.Activity.Comment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNoteKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDescriptionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_1_0 = (RuleCall)cDescriptionAssignment_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Comment:
		//	'note[' description=STRING ']';
		@Override public ParserRule getRule() { return rule; }

		//'note[' description=STRING ']'
		public Group getGroup() { return cGroup; }

		//'note['
		public Keyword getNoteKeyword_0() { return cNoteKeyword_0; }

		//description=STRING
		public Assignment getDescriptionAssignment_1() { return cDescriptionAssignment_1; }

		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_1_0() { return cDescriptionSTRINGTerminalRuleCall_1_0; }

		//']'
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
	}
	
	
	public class StartAndEndEnumElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.activity.Activity.StartAndEndEnum");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSTARTEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSTARTStartKeyword_0_0 = (Keyword)cSTARTEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cENDEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cENDEndKeyword_1_0 = (Keyword)cENDEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum StartAndEndEnum:
		//	START='start'
		//	| END='end';
		public EnumRule getRule() { return rule; }

		//START='start' | END='end'
		public Alternatives getAlternatives() { return cAlternatives; }

		//START='start'
		public EnumLiteralDeclaration getSTARTEnumLiteralDeclaration_0() { return cSTARTEnumLiteralDeclaration_0; }

		//'start'
		public Keyword getSTARTStartKeyword_0_0() { return cSTARTStartKeyword_0_0; }

		//END='end'
		public EnumLiteralDeclaration getENDEnumLiteralDeclaration_1() { return cENDEnumLiteralDeclaration_1; }

		//'end'
		public Keyword getENDEndKeyword_1_0() { return cENDEndKeyword_1_0; }
	}
	
	private final ActivityDiagramElements pActivityDiagram;
	private final ActivityElementElements pActivityElement;
	private final ActionElements pAction;
	private final ConditionElements pCondition;
	private final ConditionEndElements pConditionEnd;
	private final ForkElements pFork;
	private final ForkEndElements pForkEnd;
	private final AssociationElements pAssociation;
	private final ReferenceElements pReference;
	private final DefReferenceElements pDefReference;
	private final DefRefElements pDefRef;
	private final StartAndEndElements pStartAndEnd;
	private final CommentElements pComment;
	private final StartAndEndEnumElements eStartAndEndEnum;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public ActivityGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pActivityDiagram = new ActivityDiagramElements();
		this.pActivityElement = new ActivityElementElements();
		this.pAction = new ActionElements();
		this.pCondition = new ConditionElements();
		this.pConditionEnd = new ConditionEndElements();
		this.pFork = new ForkElements();
		this.pForkEnd = new ForkEndElements();
		this.pAssociation = new AssociationElements();
		this.pReference = new ReferenceElements();
		this.pDefReference = new DefReferenceElements();
		this.pDefRef = new DefRefElements();
		this.pStartAndEnd = new StartAndEndElements();
		this.pComment = new CommentElements();
		this.eStartAndEndEnum = new StartAndEndEnumElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.cooperateproject.modeling.textual.activity.Activity".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//ActivityDiagram:
	//	{ActivityDiagram}
	//	'@startactivity'
	//	elements+=ActivityElement*
	//	'@endactivity';
	public ActivityDiagramElements getActivityDiagramAccess() {
		return pActivityDiagram;
	}
	
	public ParserRule getActivityDiagramRule() {
		return getActivityDiagramAccess().getRule();
	}

	//ActivityElement:
	//	Action
	//	| Condition
	//	| Fork
	//	| Association
	//	//| Comment
	//;
	public ActivityElementElements getActivityElementAccess() {
		return pActivityElement;
	}
	
	public ParserRule getActivityElementRule() {
		return getActivityElementAccess().getRule();
	}

	//Action:
	//	'action' (longName=(STRING | ID) 'as')? name=ID comment=Comment?;
	public ActionElements getActionAccess() {
		return pAction;
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}

	//Condition:
	//	'condition' conditionStart=ConditionEnd ':' conditionEnd=ConditionEnd comment=Comment?;
	public ConditionElements getConditionAccess() {
		return pCondition;
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}

	//ConditionEnd:
	//	(longName=(STRING | ID) 'as')? name=ID;
	public ConditionEndElements getConditionEndAccess() {
		return pConditionEnd;
	}
	
	public ParserRule getConditionEndRule() {
		return getConditionEndAccess().getRule();
	}

	//Fork:
	//	'fork' forkStart=ForkEnd ':' forkEnd=ForkEnd comment=Comment?;
	public ForkElements getForkAccess() {
		return pFork;
	}
	
	public ParserRule getForkRule() {
		return getForkAccess().getRule();
	}

	//ForkEnd:
	//	(longName=(STRING | ID) 'as')? name=ID;
	public ForkEndElements getForkEndAccess() {
		return pForkEnd;
	}
	
	public ParserRule getForkEndRule() {
		return getForkEndAccess().getRule();
	}

	//Association:
	//	left=Reference '-' right=Reference comment=Comment?;
	public AssociationElements getAssociationAccess() {
		return pAssociation;
	}
	
	public ParserRule getAssociationRule() {
		return getAssociationAccess().getRule();
	}

	//Reference:
	//	DefReference
	//	| StartAndEnd;
	public ReferenceElements getReferenceAccess() {
		return pReference;
	}
	
	public ParserRule getReferenceRule() {
		return getReferenceAccess().getRule();
	}

	//DefReference:
	//	type=[DefRef];
	public DefReferenceElements getDefReferenceAccess() {
		return pDefReference;
	}
	
	public ParserRule getDefReferenceRule() {
		return getDefReferenceAccess().getRule();
	}

	//DefRef:
	//	Action
	//	| ConditionEnd
	//	| ForkEnd;
	public DefRefElements getDefRefAccess() {
		return pDefRef;
	}
	
	public ParserRule getDefRefRule() {
		return getDefRefAccess().getRule();
	}

	//StartAndEnd:
	//	type=StartAndEndEnum;
	public StartAndEndElements getStartAndEndAccess() {
		return pStartAndEnd;
	}
	
	public ParserRule getStartAndEndRule() {
		return getStartAndEndAccess().getRule();
	}

	//Comment:
	//	'note[' description=STRING ']';
	public CommentElements getCommentAccess() {
		return pComment;
	}
	
	public ParserRule getCommentRule() {
		return getCommentAccess().getRule();
	}

	//enum StartAndEndEnum:
	//	START='start'
	//	| END='end';
	public StartAndEndEnumElements getStartAndEndEnumAccess() {
		return eStartAndEndEnum;
	}
	
	public EnumRule getStartAndEndEnumRule() {
		return getStartAndEndEnumAccess().getRule();
	}

	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
