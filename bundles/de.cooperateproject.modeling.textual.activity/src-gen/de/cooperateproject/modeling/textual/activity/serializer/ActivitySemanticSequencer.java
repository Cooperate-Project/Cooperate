/*
 * generated by Xtext
 */
package de.cooperateproject.modeling.textual.activity.serializer;

import com.google.inject.Inject;
import de.cooperateproject.modeling.textual.activity.activity.ActivityDiagram;
import de.cooperateproject.modeling.textual.activity.activity.ActivityPackage;
import de.cooperateproject.modeling.textual.activity.activity.Association;
import de.cooperateproject.modeling.textual.activity.activity.Comment;
import de.cooperateproject.modeling.textual.activity.activity.Condition;
import de.cooperateproject.modeling.textual.activity.activity.ConditionEnd;
import de.cooperateproject.modeling.textual.activity.activity.DefReference;
import de.cooperateproject.modeling.textual.activity.activity.Fork;
import de.cooperateproject.modeling.textual.activity.activity.ForkEnd;
import de.cooperateproject.modeling.textual.activity.activity.StartAndEnd;
import de.cooperateproject.modeling.textual.activity.services.ActivityGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class ActivitySemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private ActivityGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == ActivityPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case ActivityPackage.ACTION:
				sequence_Action(context, (de.cooperateproject.modeling.textual.activity.activity.Action) semanticObject); 
				return; 
			case ActivityPackage.ACTIVITY_DIAGRAM:
				sequence_ActivityDiagram(context, (ActivityDiagram) semanticObject); 
				return; 
			case ActivityPackage.ASSOCIATION:
				sequence_Association(context, (Association) semanticObject); 
				return; 
			case ActivityPackage.COMMENT:
				sequence_Comment(context, (Comment) semanticObject); 
				return; 
			case ActivityPackage.CONDITION:
				sequence_Condition(context, (Condition) semanticObject); 
				return; 
			case ActivityPackage.CONDITION_END:
				sequence_ConditionEnd(context, (ConditionEnd) semanticObject); 
				return; 
			case ActivityPackage.DEF_REFERENCE:
				sequence_DefReference(context, (DefReference) semanticObject); 
				return; 
			case ActivityPackage.FORK:
				sequence_Fork(context, (Fork) semanticObject); 
				return; 
			case ActivityPackage.FORK_END:
				sequence_ForkEnd(context, (ForkEnd) semanticObject); 
				return; 
			case ActivityPackage.START_AND_END:
				sequence_StartAndEnd(context, (StartAndEnd) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     ActivityElement returns Action
	 *     Action returns Action
	 *     DefRef returns Action
	 *
	 * Constraint:
	 *     ((longName=STRING | longName=ID)? name=ID comment=Comment?)
	 */
	protected void sequence_Action(ISerializationContext context, de.cooperateproject.modeling.textual.activity.activity.Action semanticObject) {
		genericSequencer.createSequence(context, (EObject) semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ActivityDiagram returns ActivityDiagram
	 *
	 * Constraint:
	 *     elements+=ActivityElement*
	 */
	protected void sequence_ActivityDiagram(ISerializationContext context, ActivityDiagram semanticObject) {
		genericSequencer.createSequence(context, (EObject) semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ActivityElement returns Association
	 *     Association returns Association
	 *
	 * Constraint:
	 *     (left=Reference right=Reference comment=Comment?)
	 */
	protected void sequence_Association(ISerializationContext context, Association semanticObject) {
		genericSequencer.createSequence(context, (EObject) semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Comment returns Comment
	 *
	 * Constraint:
	 *     description=STRING
	 */
	protected void sequence_Comment(ISerializationContext context, Comment semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient((EObject) semanticObject, ActivityPackage.Literals.COMMENT__DESCRIPTION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing((EObject) semanticObject, ActivityPackage.Literals.COMMENT__DESCRIPTION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, (EObject) semanticObject);
		feeder.accept(grammarAccess.getCommentAccess().getDescriptionSTRINGTerminalRuleCall_1_0(), semanticObject.getDescription());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ConditionEnd returns ConditionEnd
	 *     DefRef returns ConditionEnd
	 *
	 * Constraint:
	 *     ((longName=STRING | longName=ID)? name=ID)
	 */
	protected void sequence_ConditionEnd(ISerializationContext context, ConditionEnd semanticObject) {
		genericSequencer.createSequence(context, (EObject) semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ActivityElement returns Condition
	 *     Condition returns Condition
	 *
	 * Constraint:
	 *     (conditionStart=ConditionEnd conditionEnd=ConditionEnd comment=Comment?)
	 */
	protected void sequence_Condition(ISerializationContext context, Condition semanticObject) {
		genericSequencer.createSequence(context, (EObject) semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Reference returns DefReference
	 *     DefReference returns DefReference
	 *
	 * Constraint:
	 *     type=[DefRef|ID]
	 */
	protected void sequence_DefReference(ISerializationContext context, DefReference semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient((EObject) semanticObject, ActivityPackage.Literals.DEF_REFERENCE__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing((EObject) semanticObject, ActivityPackage.Literals.DEF_REFERENCE__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, (EObject) semanticObject);
		feeder.accept(grammarAccess.getDefReferenceAccess().getTypeDefRefIDTerminalRuleCall_0_1(), semanticObject.getType());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ForkEnd returns ForkEnd
	 *     DefRef returns ForkEnd
	 *
	 * Constraint:
	 *     ((longName=STRING | longName=ID)? name=ID)
	 */
	protected void sequence_ForkEnd(ISerializationContext context, ForkEnd semanticObject) {
		genericSequencer.createSequence(context, (EObject) semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ActivityElement returns Fork
	 *     Fork returns Fork
	 *
	 * Constraint:
	 *     (forkStart=ForkEnd forkEnd=ForkEnd comment=Comment?)
	 */
	protected void sequence_Fork(ISerializationContext context, Fork semanticObject) {
		genericSequencer.createSequence(context, (EObject) semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Reference returns StartAndEnd
	 *     StartAndEnd returns StartAndEnd
	 *
	 * Constraint:
	 *     type=StartAndEndEnum
	 */
	protected void sequence_StartAndEnd(ISerializationContext context, StartAndEnd semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient((EObject) semanticObject, ActivityPackage.Literals.START_AND_END__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing((EObject) semanticObject, ActivityPackage.Literals.START_AND_END__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, (EObject) semanticObject);
		feeder.accept(grammarAccess.getStartAndEndAccess().getTypeStartAndEndEnumEnumRuleCall_0(), semanticObject.getType());
		feeder.finish();
	}
	
	
}
