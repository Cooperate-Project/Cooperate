/*
 * generated by Xtext 2.12.0
 */
grammar InternalAct;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package de.cooperateproject.modeling.textual.activity.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package de.cooperateproject.modeling.textual.activity.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import de.cooperateproject.modeling.textual.activity.services.ActGrammarAccess;

}

@parser::members {

 	private ActGrammarAccess grammarAccess;

    public InternalActParser(TokenStream input, ActGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "ActivityDiagram";
   	}

   	@Override
   	protected ActGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleActivityDiagram
entryRuleActivityDiagram returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getActivityDiagramRule()); }
	iv_ruleActivityDiagram=ruleActivityDiagram
	{ $current=$iv_ruleActivityDiagram.current; }
	EOF;

// Rule ActivityDiagram
ruleActivityDiagram returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getActivityDiagramAccess().getActivityDiagramAction_0(),
					$current);
			}
		)
		otherlv_1='@start-actd'
		{
			newLeafNode(otherlv_1, grammarAccess.getActivityDiagramAccess().getStartActdKeyword_1());
		}
		(
			(
				lv_title_2_0=RULE_STRING
				{
					newLeafNode(lv_title_2_0, grammarAccess.getActivityDiagramAccess().getTitleSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getActivityDiagramRule());
					}
					setWithLastConsumed(
						$current,
						"title",
						lv_title_2_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getActivityDiagramAccess().getRootPackageRootPackageParserRuleCall_3_0());
				}
				lv_rootPackage_3_0=ruleRootPackage
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getActivityDiagramRule());
					}
					set(
						$current,
						"rootPackage",
						lv_rootPackage_3_0,
						"de.cooperateproject.modeling.textual.activity.Act.RootPackage");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_4='activityName'
			{
				newLeafNode(otherlv_4, grammarAccess.getActivityDiagramAccess().getActivityNameKeyword_4_0());
			}
			(
				(
					lv_activityName_5_0=RULE_STRING
					{
						newLeafNode(lv_activityName_5_0, grammarAccess.getActivityDiagramAccess().getActivityNameSTRINGTerminalRuleCall_4_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getActivityDiagramRule());
						}
						setWithLastConsumed(
							$current,
							"activityName",
							lv_activityName_5_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
		)?
		otherlv_6='@end-actd'
		{
			newLeafNode(otherlv_6, grammarAccess.getActivityDiagramAccess().getEndActdKeyword_5());
		}
	)
;

// Entry rule entryRuleRootPackage
entryRuleRootPackage returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRootPackageRule()); }
	iv_ruleRootPackage=ruleRootPackage
	{ $current=$iv_ruleRootPackage.current; }
	EOF;

// Rule RootPackage
ruleRootPackage returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getRootPackageAccess().getRootPackageAction_0(),
					$current);
			}
		)
		(
			otherlv_1='rootPackage'
			{
				newLeafNode(otherlv_1, grammarAccess.getRootPackageAccess().getRootPackageKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getRootPackageAccess().getNameFQNParserRuleCall_1_1_0());
					}
					lv_name_2_0=ruleFQN
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRootPackageRule());
						}
						set(
							$current,
							"name",
							lv_name_2_0,
							"de.cooperateproject.modeling.textual.activity.Act.FQN");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getRootPackageAccess().getNodesNodeParserRuleCall_2_0());
				}
				lv_nodes_3_0=ruleNode
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRootPackageRule());
					}
					add(
						$current,
						"nodes",
						lv_nodes_3_0,
						"de.cooperateproject.modeling.textual.activity.Act.Node");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getRootPackageAccess().getRelationsFlowParserRuleCall_3_0());
				}
				lv_relations_4_0=ruleFlow
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRootPackageRule());
					}
					add(
						$current,
						"relations",
						lv_relations_4_0,
						"de.cooperateproject.modeling.textual.activity.Act.Flow");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleNode
entryRuleNode returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNodeRule()); }
	iv_ruleNode=ruleNode
	{ $current=$iv_ruleNode.current; }
	EOF;

// Rule Node
ruleNode returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getNodeAccess().getActivityNodeParserRuleCall_0());
		}
		this_ActivityNode_0=ruleActivityNode
		{
			$current = $this_ActivityNode_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getNodeAccess().getControlNodeParserRuleCall_1());
		}
		this_ControlNode_1=ruleControlNode
		{
			$current = $this_ControlNode_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleActivityNode
entryRuleActivityNode returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getActivityNodeRule()); }
	iv_ruleActivityNode=ruleActivityNode
	{ $current=$iv_ruleActivityNode.current; }
	EOF;

// Rule ActivityNode
ruleActivityNode returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='actn'
		{
			newLeafNode(otherlv_0, grammarAccess.getActivityNodeAccess().getActnKeyword_0());
		}
		(
			(
				(
					lv_name_1_0=RULE_ID
					{
						newLeafNode(lv_name_1_0, grammarAccess.getActivityNodeAccess().getNameIDTerminalRuleCall_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getActivityNodeRule());
						}
						setWithLastConsumed(
							$current,
							"name",
							lv_name_1_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
			    |
			(
				(
					(
						lv_name_2_0=RULE_ID
						{
							newLeafNode(lv_name_2_0, grammarAccess.getActivityNodeAccess().getNameIDTerminalRuleCall_1_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getActivityNodeRule());
							}
							setWithLastConsumed(
								$current,
								"name",
								lv_name_2_0,
								"org.eclipse.xtext.common.Terminals.ID");
						}
					)
				)
				otherlv_3='as'
				{
					newLeafNode(otherlv_3, grammarAccess.getActivityNodeAccess().getAsKeyword_1_1_1());
				}
				(
					(
						lv_alias_4_0=RULE_STRING
						{
							newLeafNode(lv_alias_4_0, grammarAccess.getActivityNodeAccess().getAliasSTRINGTerminalRuleCall_1_1_2_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getActivityNodeRule());
							}
							setWithLastConsumed(
								$current,
								"alias",
								lv_alias_4_0,
								"org.eclipse.xtext.common.Terminals.STRING");
						}
					)
				)
			)
		)
	)
;

// Entry rule entryRuleControlNode
entryRuleControlNode returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getControlNodeRule()); }
	iv_ruleControlNode=ruleControlNode
	{ $current=$iv_ruleControlNode.current; }
	EOF;

// Rule ControlNode
ruleControlNode returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getControlNodeAccess().getTypeNodeTypeEnumRuleCall_0_0());
				}
				lv_type_0_0=ruleNodeType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getControlNodeRule());
					}
					set(
						$current,
						"type",
						lv_type_0_0,
						"de.cooperateproject.modeling.textual.activity.Act.NodeType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getControlNodeAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getControlNodeRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)?
	)
;

// Entry rule entryRuleFlow
entryRuleFlow returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFlowRule()); }
	iv_ruleFlow=ruleFlow
	{ $current=$iv_ruleFlow.current; }
	EOF;

// Rule Flow
ruleFlow returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='flw'
		{
			newLeafNode(otherlv_0, grammarAccess.getFlowAccess().getFlwKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getFlowAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFlowRule());
					}
				}
				otherlv_2=RULE_ID
				{
					newLeafNode(otherlv_2, grammarAccess.getFlowAccess().getRelatedElementsNodeCrossReference_2_0());
				}
			)
		)
		otherlv_3=','
		{
			newLeafNode(otherlv_3, grammarAccess.getFlowAccess().getCommaKeyword_3());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFlowRule());
					}
				}
				otherlv_4=RULE_ID
				{
					newLeafNode(otherlv_4, grammarAccess.getFlowAccess().getRelatedElementsNodeCrossReference_4_0());
				}
			)
		)
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getFlowAccess().getRightParenthesisKeyword_5());
		}
		(
			otherlv_6='['
			{
				newLeafNode(otherlv_6, grammarAccess.getFlowAccess().getLeftSquareBracketKeyword_6_0());
			}
			(
				(
					lv_condition_7_0=RULE_STRING
					{
						newLeafNode(lv_condition_7_0, grammarAccess.getFlowAccess().getConditionSTRINGTerminalRuleCall_6_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getFlowRule());
						}
						setWithLastConsumed(
							$current,
							"condition",
							lv_condition_7_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
			otherlv_8=']'
			{
				newLeafNode(otherlv_8, grammarAccess.getFlowAccess().getRightSquareBracketKeyword_6_2());
			}
		)?
	)
;

// Entry rule entryRuleFQN
entryRuleFQN returns [String current=null]:
	{ newCompositeNode(grammarAccess.getFQNRule()); }
	iv_ruleFQN=ruleFQN
	{ $current=$iv_ruleFQN.current.getText(); }
	EOF;

// Rule FQN
ruleFQN returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_ID_0=RULE_ID
		{
			$current.merge(this_ID_0);
		}
		{
			newLeafNode(this_ID_0, grammarAccess.getFQNAccess().getIDTerminalRuleCall_0());
		}
		(
			kw='.'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getFQNAccess().getFullStopKeyword_1_0());
			}
			this_ID_2=RULE_ID
			{
				$current.merge(this_ID_2);
			}
			{
				newLeafNode(this_ID_2, grammarAccess.getFQNAccess().getIDTerminalRuleCall_1_1());
			}
		)*
	)
;

// Rule NodeType
ruleNodeType returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='ini'
			{
				$current = grammarAccess.getNodeTypeAccess().getINITIALEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getNodeTypeAccess().getINITIALEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='fin'
			{
				$current = grammarAccess.getNodeTypeAccess().getFINALEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getNodeTypeAccess().getFINALEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='ffin'
			{
				$current = grammarAccess.getNodeTypeAccess().getFLOW_FINALEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getNodeTypeAccess().getFLOW_FINALEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='decn'
			{
				$current = grammarAccess.getNodeTypeAccess().getDECISIONEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getNodeTypeAccess().getDECISIONEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='mrgn'
			{
				$current = grammarAccess.getNodeTypeAccess().getMERGEEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getNodeTypeAccess().getMERGEEnumLiteralDeclaration_4());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
