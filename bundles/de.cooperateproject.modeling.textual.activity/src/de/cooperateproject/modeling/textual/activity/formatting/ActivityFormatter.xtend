/*
 * generated by Xtext
 */
package de.cooperateproject.modeling.textual.activity.formatting

import org.eclipse.xtext.formatting.impl.AbstractDeclarativeFormatter
import org.eclipse.xtext.formatting.impl.FormattingConfig
import javax.inject.Inject
import de.cooperateproject.modeling.textual.activity.services.ActivityGrammarAccess

// import com.google.inject.Inject;
// import de.cooperateproject.modeling.textual.activity.services.ActivityGrammarAccess

/**
 * This class contains custom formatting declarations.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#formatting
 * on how and when to use it.
 * 
 * Also see {@link org.eclipse.xtext.xtext.XtextFormattingTokenSerializer} as an example
 */
class ActivityFormatter extends AbstractDeclarativeFormatter {

	@Inject extension ActivityGrammarAccess grammar
	override protected void configureFormatting(FormattingConfig c) {
		c.setLinewrap.after(grammar.findKeywords("@startactivity").get(0))
		c.setLinewrap.before(grammar.findKeywords("@endactivity").get(0))
		
		c.setLinewrap.after(grammar.actionRule);
		c.setLinewrap.after(grammar.conditionRule);
		c.setLinewrap.after(grammar.forkRule);
		c.setLinewrap.after(grammar.associationRule);
	}
}
