import TransformationUtils_Activity;

transformation Textual_to_Graphical_for_Activity(in textual : TXT, inout graphical : NOTATION, in umlmodel : UML, in umlprimitives : UML);

modeltype NOTATION uses notation('http://www.eclipse.org/gmf/runtime/1.0.2/notation');
modeltype UML uses uml('http://www.eclipse.org/uml2/5.0.0/UML');
modeltype TXT uses act('http://www.cooperateproject.de/modeling/textual/activity/Activity');
modeltype TXTCMN uses textualCommons('http://www.cooperateproject.de/modeling/textual/commons');
modeltype ECORE uses ecore('http://www.eclipse.org/emf/2002/Ecore');
modeltype STYLE uses style('http://www.eclipse.org/papyrus/infra/gmfdiag/style');

main() {
    var diagrams := textual.rootObjects()[act::ActivityDiagram];
    assert fatal (diagrams->size() = 1) with log ("Expected one diagram but got other number.", diagrams->size());
    diagrams->map diagramToDiagram();
}

mapping act::ActivityDiagram::diagramToDiagram() : notation::Diagram {
    type := "PapyrusUMLActivityDiagram";
    name := self.title;
    measurementUnit := notation::MeasurementUnit::Pixel;
    
    var umlRootElement := self.rootPackage.referencedElement.oclAsType(uml::Package);
   
    var activity = self.rootPackage.activity;
    assert fatal (activity != null) with log("Expected one activity.");
    
    children := activity.map activityToActivityShape();
 	
    styles := self.map stringValueStyle();
    styles += self.map diagramStyle();
    styles += self.map papyrusViewStyle(umlRootElement);
    
    element := self.rootPackage.referencedElement.oclAsType(uml::Model).toEObject();
    
    edges := activity.flows.map flowToEdge();
}

mapping act::ActivityDiagram::papyrusViewStyle(rootElement : uml::Package) : style::PapyrusDiagramStyle {
    owner := rootElement.toEObject();
    diagramKindId := "org.eclipse.papyrus.uml.diagram.activity";
}

mapping act::ActivityDiagram::stringValueStyle() : notation::StringValueStyle {
    name := "diagram_compatibility_version";
    stringValue := "1.3.0"; 
}

mapping act::ActivityDiagram::diagramStyle() : notation::DiagramStyle {   
}

// actuall mapping

mapping act::Activity::activityToActivityShape(): notation::Shape {
	type := PAPYRUS_NOTATION_SHAPE_ACTIVITY;
	
	children := self.map activityToNameLabel();
	children += self.map activityToKeywordLabel();
	
	children += self.map activityToParameterCompartment();
	children += self.map activityToPreconditionCompartment();
	children += self.map activityToPostconditionCompartment();
	children += self.map activityToActivityNodeCompartment();
	
	element := self.referencedElement.toEObject();
	layoutConstraint := result.toEObject().map notationBounds();
}

// Compartments

mapping act::Activity::activityToParameterCompartment() : notation::BasicCompartment {
	type := PAPYRUS_NOTATION_COMPARTMENT_ACTIVITY_PARAMETER;
	styles += result.toEObject().map sortingStyle();
	styles += result.toEObject().map filteringStyle();
	layoutConstraint := result.toEObject().map notationBounds();
}

mapping act::Activity::activityToPreconditionCompartment() : notation::BasicCompartment {
	type := PAPYRUS_NOTATION_COMPARTMENT_ACTIVITY_PRECONDITION;
	styles += result.toEObject().map sortingStyle();
	styles += result.toEObject().map filteringStyle();
	layoutConstraint := result.toEObject().map notationBounds();
}

mapping act::Activity::activityToPostconditionCompartment() : notation::BasicCompartment {
	type := PAPYRUS_NOTATION_COMPARTMENT_ACTIVITY_POSTCONDITION;
	styles += result.toEObject().map sortingStyle();
	styles += result.toEObject().map filteringStyle();
	layoutConstraint := result.toEObject().map notationBounds();
}

mapping act::Activity::activityToActivityNodeCompartment() : notation::BasicCompartment {
	type := PAPYRUS_NOTATION_COMPARTMENT_ACTIVITY_ACTIVITYNODE;
	
	// Swimlanes
	children := self.children->selectByType(act::Swimlane).map activitySwimlaneToActivityShape();
	
	// Actual nodes
	children += self.nodes.map activityNodeToActivityShape();
	
	layoutConstraint := result.toEObject().map notationBounds();
}

mapping act::Node::activityNodeToActivityShape() : notation::Shape
disjuncts act::InitialNode::initialNodeToActivityShape, 
act::FinalNode::finalNodeToActivityShape,
act::ActionNode::actionNodeToActivityShape,
act::DecisionNode::decisionNodeToActivityShape,
act::MergeNode::mergeNodeToActivityShape,
act::ForkNode::forkNodeToActivityShape,
act::JoinNode::joinNodeToActivityShape,
act::FlowFinalNode::flowFinalNodeToActivityShape;

// Nodes to shapes

mapping act::InitialNode::initialNodeToActivityShape() : notation::Shape {
	type := PAPYRUS_NOTATION_SHAPE_ACTIVITY_INITAL;
	
	children := self.map initalNodeToFloatingNameLabel();
	children += self.map initialNodeToStereotypeLabel();
	styles := result.toEObject().map hintedDiagramLinkStyle();
	element := self.referencedElement.toEObject();
	layoutConstraint := result.toEObject().map notationBounds();
}

mapping act::FinalNode::finalNodeToActivityShape() : notation::Shape {
	type := PAPYRUS_NOTATION_SHAPE_ACTIVITY_FINAL;
	
	children := self.map finalNodeToFloatingNameLabel();
	children += self.map finalNodeToStereotypeLabel();
	styles := result.toEObject().map hintedDiagramLinkStyle();
	element := self.referencedElement.toEObject();
	layoutConstraint := result.toEObject().map notationBounds();
}

mapping act::ActionNode::actionNodeToActivityShape(): notation::Shape {
	type := PAPYRUS_NOTATION_SHAPE_ACTIVITY_ACTION;
	
	children := self.map actionNodeToNameLabel();
	children += self.map actionNodeToFloatingNameLabel();
	styles := result.toEObject().map hintedDiagramLinkStyle();
	element := self.referencedElement.toEObject();
	layoutConstraint := result.toEObject().map notationBounds();
}

mapping act::DecisionNode::decisionNodeToActivityShape(): notation::Shape {
	type := PAPYRUS_NOTATION_SHAPE_ACTIVITY_DECISION;
	
	children := self.map decisionNodeToFloatingNameLabel();
	children += self.map decisionNodeToInputLabel();
	children += self.map decisionNodeToStereotypeLabel();
	styles := result.toEObject().map hintedDiagramLinkStyle();
	element := self.referencedElement.toEObject();
	layoutConstraint := result.toEObject().map notationBounds();
}

mapping act::MergeNode::mergeNodeToActivityShape(): notation::Shape {
	type := PAPYRUS_NOTATION_SHAPE_ACTIVITY_MERGE;
	
	children := self.map mergeNodeToFloatingNameLabel();
	children += self.map mergeNodeToStereotypeLabel();
	styles := result.toEObject().map hintedDiagramLinkStyle();
	element := self.referencedElement.toEObject();
	layoutConstraint := result.toEObject().map notationBounds();
}

mapping act::ForkNode::forkNodeToActivityShape(): notation::Shape {
	type := PAPYRUS_NOTATION_SHAPE_ACTIVITY_FORK;
	
	children := self.map forkNodeToFloatingNameLabel();
	children += self.map forkNodeToStereotypeLabel();
	styles := result.toEObject().map hintedDiagramLinkStyle();
	element := self.referencedElement.toEObject();
	layoutConstraint := result.toEObject().map notationBounds();
}

mapping act::JoinNode::joinNodeToActivityShape(): notation::Shape {
	type := PAPYRUS_NOTATION_SHAPE_ACTIVITY_JOIN;
	
	children := self.map joinNodeToFloatingNameLabel();
	children += self.map joinNodeToJoinSpecLabel();
	children += self.map joinNodeToStereotypeLabel();
	styles := result.toEObject().map hintedDiagramLinkStyle();
	element := self.referencedElement.toEObject();
	layoutConstraint := result.toEObject().map notationBounds();
}

mapping act::FlowFinalNode::flowFinalNodeToActivityShape(): notation::Shape {
	type := PAPYRUS_NOTATION_SHAPE_ACTIVITY_FLOW_FINAL;
	
	children := self.map flowFinalNodeToFloatingNameLabel();
	children += self.map flowFinalNodeToStereotypeLabel();
	styles := result.toEObject().map hintedDiagramLinkStyle();
	element := self.referencedElement.toEObject();
	layoutConstraint := result.toEObject().map notationBounds();
}

// Swimlane support
mapping act::Swimlane::activitySwimlaneToActivityShape() : notation::Shape {
	type := PAPYRUS_NOTATION_SHAPE_ACTIVITY_PARTITION;
	
	children := self.map partitionToNameLabel();
	children += self.map partitionToFloatingNameLabel();
	children += self.map partitionToActiveNodeCompartment();
	styles := result.toEObject().map hintedDiagramLinkStyle();
	element := self.referencedElement.toEObject();
	layoutConstraint := result.toEObject().map notationBounds();
}

mapping act::Swimlane::partitionToActiveNodeCompartment(): notation::BasicCompartment {
	type := PAPYRUS_NOTATION_COMPARTMENT_ACTIVITY_PARTITION_ACTIVITYNODE;
	
	children += self.nodes.map activityNodeToActivityShape();
	layoutConstraint := result.toEObject().map notationBounds();
}

// Flows to edges

mapping act::Flow::flowToEdge() : notation::Connector {
	type := PAPYRUS_NOTATION_EDGE_ACTIVITY;
	
	source := resolveoneIn(act::Node::activityNodeToActivityShape,
				s: notation::Shape | s.element = self.referencedElement.oclAsType(uml::ControlFlow).source.toEObject()
			);
			
	target := resolveoneIn(act::Node::activityNodeToActivityShape,
				s: notation::Shape | s.element = self.referencedElement.oclAsType(uml::ControlFlow).target.toEObject()
			);
	
	children := self.map flowToControlFlowNameLabel();
	children += self.map flowToControlFlowWeightLabel();
	children += self.map flowToControlFlowGuardLabel();
	children += self.map flowToControlFlowStereotypeLabel();
	
	styles += result.toEObject().map fontStyle();
	element := self.referencedElement.toEObject();
	bendpoints := result.map connectorToBendpoint();

}

// Name labels

mapping act::Activity::activityToNameLabel(): notation::DecorationNode {
	type := PAPYRUS_NOTATION_NODE_ACTIVTY_NAME;
}

mapping act::Activity::activityToKeywordLabel(): notation::DecorationNode {
	type := PAPYRUS_NOTATION_NODE_ACTIVTY_KEYWORD;
}

mapping act::InitialNode::initalNodeToFloatingNameLabel(): notation::DecorationNode {
	type := PAPYRUS_NOTATION_NODE_ACTIVITY_INITIAL_FLOATING_NAME;
	layoutConstraint := result.toEObject().map locationConstraint();
}

mapping act::InitialNode::initialNodeToStereotypeLabel(): notation::DecorationNode {
	type := PAPYRUS_NOTATION_NODE_ACTIVITY_INITIAL_STEREOTYPE;
	layoutConstraint := result.toEObject().map locationConstraint();
}

mapping act::FinalNode::finalNodeToFloatingNameLabel(): notation::DecorationNode {
	type := PAPYRUS_NOTATION_NODE_ACTIVITY_FINAL_FLOATING_NAME;
	layoutConstraint := result.toEObject().map locationConstraint();
}

mapping act::FinalNode::finalNodeToStereotypeLabel(): notation::DecorationNode {
	type := PAPYRUS_NOTATION_NODE_ACTIVITY_FINAL_STEREOTYPE;
	layoutConstraint := result.toEObject().map locationConstraint();
}

mapping act::ActionNode::actionNodeToNameLabel(): notation::DecorationNode {
	type := PAPYRUS_NOTATION_NODE_ACTIVITY_ACTION_NAME;
}

mapping act::ActionNode::actionNodeToFloatingNameLabel(): notation::DecorationNode {
	type := PAPYRUS_NOTATION_NODE_ACTIVITY_ACTION_FLOATING_NAME;
	layoutConstraint := result.toEObject().map locationConstraint();
}

mapping act::Flow::flowToControlFlowNameLabel(): notation::DecorationNode {
	type := PAPYRUS_NOTATION_EDGE_ACTIVITY_NAME;
	layoutConstraint := result.toEObject().map locationConstraint();
}

mapping act::Flow::flowToControlFlowWeightLabel(): notation::DecorationNode {
	type := PAPYRUS_NOTATION_EDGE_ACTIVITY_WEIGHT;
	layoutConstraint := result.toEObject().map locationConstraint();
}

mapping act::Flow::flowToControlFlowGuardLabel(): notation::DecorationNode {
	type := PAPYRUS_NOTATION_EDGE_ACTIVITY_GUARD;
	layoutConstraint := result.toEObject().map locationConstraint();
}

mapping act::Flow::flowToControlFlowStereotypeLabel(): notation::DecorationNode {
	type := PAPYRUS_NOTATION_EDGE_ACTIVITY_STEREOTYPE;
	layoutConstraint := result.toEObject().map locationConstraint();
}

mapping act::DecisionNode::decisionNodeToFloatingNameLabel(): notation::DecorationNode {
	type := PAPYRUS_NOTATION_NODE_ACTIVITY_DECISION_FLOATING_NAME;
	layoutConstraint := result.toEObject().map locationConstraint();
}

mapping act::DecisionNode::decisionNodeToInputLabel(): notation::DecorationNode {
	type := PAPYRUS_NOTATION_NODE_ACTIVITY_DECISION_INPUT;
	layoutConstraint := result.toEObject().map locationConstraint();
}

mapping act::DecisionNode::decisionNodeToStereotypeLabel(): notation::DecorationNode {
	type := PAPYRUS_NOTATION_NODE_ACTIVITY_DECISION_STEREOTYPE;
	layoutConstraint := result.toEObject().map locationConstraint();
}

mapping act::MergeNode::mergeNodeToFloatingNameLabel(): notation::DecorationNode {
	type := PAPYRUS_NOTATION_NODE_ACTIVITY_MERGE_FLOATING_NAME;
	layoutConstraint := result.toEObject().map locationConstraint();
}

mapping act::MergeNode::mergeNodeToStereotypeLabel(): notation::DecorationNode {
	type := PAPYRUS_NOTATION_NODE_ACTIVITY_MERGE_STEREOTYPE;
	layoutConstraint := result.toEObject().map locationConstraint();
}

mapping act::ForkNode::forkNodeToFloatingNameLabel(): notation::DecorationNode {
	type := PAPYRUS_NOTATION_NODE_ACTIVITY_FORK_FLOATING_NAME;
	layoutConstraint := result.toEObject().map locationConstraint();
}

mapping act::ForkNode::forkNodeToStereotypeLabel(): notation::DecorationNode {
	type := PAPYRUS_NOTATION_NODE_ACTIVITY_FORK_STEREOTYPE;
	layoutConstraint := result.toEObject().map locationConstraint();
}

mapping act::JoinNode::joinNodeToFloatingNameLabel(): notation::DecorationNode {
	type := PAPYRUS_NOTATION_NODE_ACTIVITY_JOIN_FLOATING_NAME;
	layoutConstraint := result.toEObject().map locationConstraint();
}

mapping act::JoinNode::joinNodeToStereotypeLabel(): notation::DecorationNode {
	type := PAPYRUS_NOTATION_NODE_ACTIVITY_JOIN_STEREOTYPE;
	layoutConstraint := result.toEObject().map locationConstraint();
}

mapping act::JoinNode::joinNodeToJoinSpecLabel(): notation::DecorationNode {
	type := PAPYRUS_NOTATION_NODE_ACTIVITY_JOIN_SPEC;
	layoutConstraint := result.toEObject().map locationConstraint();
}

mapping act::FlowFinalNode::flowFinalNodeToFloatingNameLabel(): notation::DecorationNode {
	type := PAPYRUS_NOTATION_NODE_ACTIVITY_FLOW_FINAL_FLOATING_NAME;
	layoutConstraint := result.toEObject().map locationConstraint();
}

mapping act::FlowFinalNode::flowFinalNodeToStereotypeLabel(): notation::DecorationNode {
	type := PAPYRUS_NOTATION_NODE_ACTIVITY_FLOW_FINAL_STEREOTYPE;
	layoutConstraint := result.toEObject().map locationConstraint();
}

mapping act::Swimlane::partitionToNameLabel(): notation::DecorationNode {
	type := PAPYRUS_NOTATION_NODE_ACTIVITY_PARTITION_NAME;
}

mapping act::Swimlane::partitionToFloatingNameLabel(): notation::DecorationNode {
	type := PAPYRUS_NOTATION_NODE_ACTIVITY_PARTITION_FLOATING_NAME;
	layoutConstraint := result.toEObject().map locationConstraint();
}

// Misc

mapping ecore::EObject::hintedDiagramLinkStyle() : notation::HintedDiagramLinkStyle {
}