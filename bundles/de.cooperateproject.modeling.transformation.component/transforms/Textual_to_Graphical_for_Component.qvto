import TransformationUtils_Component;
import de.cooperateproject.qvtoutils.CooperateLibrary;

transformation Textual_to_Graphical_for_Component(in textual : TXT, inout graphical : NOTATION, in umlmodel : UML, in umlprimitives : UML);

modeltype NOTATION uses notation('http://www.eclipse.org/gmf/runtime/1.0.2/notation');
modeltype UML uses uml('http://www.eclipse.org/uml2/5.0.0/UML');
modeltype TXT uses component('http://www.cooperateproject.de/modeling/textual/component/Component');
modeltype TXTCMN uses textualCommons('http://www.cooperateproject.de/modeling/textual/commons');
modeltype ECORE uses ecore('http://www.eclipse.org/emf/2002/Ecore');
modeltype STYLE uses style('http://www.eclipse.org/papyrus/infra/gmfdiag/style');

main() {
	var diagrams := textual.rootObjects()[component::ComponentDiagram];
	assert fatal (diagrams->size() = 1);
	diagrams->map diagramToDiagram();
}

mapping component::ComponentDiagram::diagramToDiagram() : notation::Diagram {
	var rootPackage := self.rootpackage.referencedElement.oclAsType(uml::Package);
	var interfaceRelation = self.rootpackage.findAllInterfaceRelations();
	
	type := "PapyrusUMLComponentDiagram";
	name := self.title;
	measurementUnit := notation::MeasurementUnit::Pixel;

  	element := rootPackage.toEObject();
  	children += self.rootpackage.classifiers.map commentableToShape();
  	
    children += self.rootpackage.findAllClassifierComments().map commentToShape();
    children += self.rootpackage.relations->selectByKind(component::Generalization)->select(isCommented()).comments->map commentToShape();
	children += interfaceRelation->selectByKind(component::Provide)->select(isCommented()).comments->map commentToShape();
	children += interfaceRelation->selectByKind(component::Require)->select(isCommented()).comments->map commentToShape();

	children += self.rootpackage.classifiers.map classifiersToShape();
	edges += self.rootpackage.relations.map classifierRelationsToEdge();
	
	//also create connectors that are nested
	var allConnectors := self.rootpackage.getAllContentsOfType(component::Connector.oclAsType(ecore::EClass), true);
	edges += allConnectors->oclAsType(component::Connector).map connectorToEdge();
	edges += interfaceRelation.map interfaceRelationToEdge();
	
	edges += self.rootpackage.findAllClassifierComments().map commentToEdge(); 
	edges += self.rootpackage.relations->selectByKind(component::Generalization)->select(isCommented()).comments->map commentToEdge();
	edges += interfaceRelation->selectByKind(component::Provide)->select(isCommented()).comments->map commentToEdge();
	edges += interfaceRelation->selectByKind(component::Require)->select(isCommented()).comments->map commentToEdge();
	
	styles := self.map diagramToStringValueStyle();
	styles += self.map diagramToDiagramStyle();
	styles += self.map diagramToDiagramStylePapyrus();
	log("exit");
}

mapping component::ComponentDiagram::diagramToStringValueStyle() : notation::StringValueStyle {
	name := "diagram_compatibility_version";
	stringValue := "1.3.0";
}

mapping component::ComponentDiagram::diagramToDiagramStyle() : notation::DiagramStyle {
	
}


mapping component::ComponentDiagram::diagramToDiagramStylePapyrus() : style::PapyrusDiagramStyle {
	diagramKindId := "org.eclipse.papyrus.uml.diagram.component.root.package";
	owner := self.rootpackage.referencedElement.toEObject();
}

//acutal mapping

mapping component::Classifier::classifiersToShape() : notation::Shape
disjuncts component::Component::componentToShape, component::Interface::interfaceToShape, component::Class::classToShape;

mapping component::InterfaceRelation::interfaceRelationToEdge() : notation::Connector
disjuncts component::Require::requireToEdge, component::Provide::provideToEdge;


mapping component::Component::componentToShape() : notation::Shape
when {self.oclIsKindOf(component::Component)}
{
	type := self.getNestedName(PAPYRUS_NOTATION_SHAPE_COMPONENT_REGULAR);
	element := self.referencedElement.toEObject();
	children := self.map componentToNameLabel();
	children += self.map componentFloatingNameLabel();
	children += self.map componentToCompartment();
	if(self.port->first()!=null) {
		children += self.map portToShapeDisplay();
	};
	children += self.port.map portToShape();
	element := self.referencedElement.oclAsType(ecore::EObject);
	layoutConstraint := result.toEObject().map notationBounds();

}

mapping component::Port::portToShape() : notation::Shape
when { self.oclIsKindOf(component::Port) }
{
	type := PAPYRUS_NOTATION_SHAPE_PORT_REGULAR;	
	element := self.referencedElement.toEObject();
	children += self.map portToNameLabel();
	children += self.map portToStereotypeLabel();
	element := self.referencedElement.toEObject();
	layoutConstraint := result.toEObject().map notationBounds();
}

mapping uml::Port::attributePortToShape() : notation::Shape
{
	type := PAPYRUS_NOTATION_SHAPE_PORT_REGULAR;	
	element := self.toEObject();
	children += self.map attributePortToNameLabel();
	children += self.map attributePortToStereotypeLabel();
	
	layoutConstraint := result.toEObject().map notationBounds();
}

mapping textualCommons::Comment::commentToShape() : notation::Shape
{
    type := PAPYRUS_NOTATION_SHAPE_COMMENT_REGULAR;
    element := self.referencedElement.toEObject();
    children += self.map commentLabelBodyHintDecoration();
    layoutConstraint := result.toEObject().map notationBounds();
}

mapping component::Provide::provideToEdge() : notation::Connector
when { self.oclIsKindOf(component::Provide) }
{
	type := PAPYRUS_NOTATION_EDGE_IMPLEMENTATION;	
	source := late resolveoneIn(
		component::Classifier::classifiersToShape,
		s : notation::Shape | s.element = self.referencedElement.oclAsType(uml::InterfaceRealization).implementingClassifier.toEObject()
	);
		target := late resolveoneIn(
		component::Interface::interfaceToShape,
		s : notation::Shape | s.element = self.referencedElement.oclAsType(uml::InterfaceRealization).contract.toEObject()
	);	
	element := self.referencedElement.toEObject();
	children += self.map stereotypeInterfaceDecorationNameLabel();
	children += self.map stereotypeInterfaceDecorationProvide();
	bendpoints := result.map connectorToBendpoint();
	styles += result.toEObject().map fontStyle();
}




mapping component::Require::requireToEdge() : notation::Connector
when { self.oclIsKindOf(component::Require) }
{
	type := PAPYRUS_NOTATION_EDGE_USAGE;	
	source := late resolveoneIn(
		component::Classifier::classifiersToShape,
		s : notation::Shape | s.element = self.referencedElement.oclAsType(uml::Usage).source->any(true).toEObject()
	);

	target := late resolveoneIn(
		component::Interface::interfaceToShape,
		s : notation::Shape | s.element = self.referencedElement.oclAsType(uml::Usage).target->asOrderedSet()->first().toEObject()
	);	
	element := self.referencedElement.toEObject();
	children += self.map stereotypeInterfaceDecorationNameLabel();
	children += self.map stereotypeInterfaceDecorationRequire();
	bendpoints := result.map connectorToBendpoint();
	styles += result.toEObject().map fontStyle();
}


mapping textualCommons::Comment::commentToEdge() : notation::Connector
{
    type := PAPYRUS_NOTATION_EDGE_COMMENTLINK;
    
    var commentShape := self.resolveoneIn(textualCommons::Comment::commentToShape);
    var realCommentedElement := self.commentedElement.oclAsType(textualCommons::Commentable);

    source := commentShape;
    target := realCommentedElement.typeToView();
    result.toEObject().eUnset(notation::View.oclAsType(ecore::EClass).eStructuralFeatures->any(name = "element"));
    
    bendpoints := result.map connectorToBendpoint();
    styles += result.toEObject().map fontStyle();
}


mapping component::Interface::interfaceToShape() : notation::Shape
when {self.oclIsKindOf(component::Interface)}
{
	type := PAPYRUS_NOTATION_SHAPE_INTERFACE_REGULAR;
	children += self.map interfaceToNameLabel();
	children += self.map interfaceFloatingNameLabel();
	children += self.map interfaceToAttributeCompartment();

	children += self.map interfaceToOperationCompartment();
	element := self.referencedElement.toEObject();
	layoutConstraint := result.toEObject().map notationBounds();
}

mapping component::Attribute::interfaceAttributeToShape() : notation::Shape
{
	type := PAPYRUS_NOTATION_SHAPE_INTERFACE_ATTRIBUTE;
	element := self.referencedElement.toEObject();
	layoutConstraint := result.toEObject().map locationConstraint();
}


mapping component::Class::classToShape() : notation::Shape
when {self.oclIsKindOf(component::Class)}
{
	type := PAPYRUS_NOTATION_SHAPE_NAMED_ELEMENT_DEFAULT;
	children += self.map namedElementToNameLabel();
	element := self.referencedElement.toEObject();
	layoutConstraint := result.toEObject().map notationBounds();
}

mapping component::Attribute::attributeToShape() : notation::Shape
when {self.oclIsKindOf(component::Attribute)}
{
	type := PAPYRUS_NOTATION_SHAPE_COMPONENT_PROPERTY;
	children += self.map attributeToNameLabel();
	children += self.map attributeToShapeDisplay();
	
	var umlProperty := self.referencedElement.oclAsType(uml::Property);
	if(umlProperty.type.oclIsKindOf(uml::Component)) {
		var umlComponent := umlProperty.type.oclAsType(uml::Component);
			children += umlComponent.ownedPort.map attributePortToShape();
	};
	
	element := self.referencedElement.oclAsType(uml::Property).toEObject();
	layoutConstraint := result.toEObject().map notationBounds();
}


mapping component::ClassifierRelation::classifierRelationsToEdge() : notation::Edge
disjuncts component::Generalization::generalizationToEdge
{
}


mapping component::Connector::connectorToEdge() : notation::Connector
when{self.oclIsKindOf(component::Connector)}
{
	type:= PAPYRUS_NOTATION_EDGE_CONNECTOR;
	
	var umlConnector := self.referencedElement.oclAsType(uml::Connector);
	var sourcePartSet := not umlConnector._end->at(1).partWithPort.oclIsUndefined();
	if(sourcePartSet) {
		source := late resolveoneIn(
			uml::Port::attributePortToShape,
			s : notation::Shape | s.element = umlConnector._end->at(1).role.toEObject()
		);
	} else {
		source := late resolveoneIn(
			component::Port::portToShape,
			s : notation::Shape | s.element = umlConnector._end->at(1).role.toEObject()
		);
	
	};
	
	
	var targetPartSet := not umlConnector._end->at(2).partWithPort.oclIsUndefined();
	if(targetPartSet) {
		target := late resolveoneIn(
			uml::Port::attributePortToShape,
			s : notation::Shape | s.element = umlConnector._end->at(2).role.toEObject()
		);
	} else {
		target := late resolveoneIn(
		component::Port::portToShape,
		s : notation::Shape | s.element = umlConnector._end->at(2).role.toEObject()
	);
	};

	children += self.map stereotypeConnectorDecoration();	
	children += self.map connectorDecorationNameLabel();
	styles += result.toEObject().map fontStyle();
	bendpoints := result.map connectorToBendpoint();
	element := self.referencedElement.toEObject();	
	styles += result.toEObject().map fontStyle();
	bendpoints := result.map connectorToBendpoint();	
}



mapping component::Generalization::generalizationToEdge() : notation::Connector
when{self.oclIsKindOf(component::Generalization)}
{
	type:= PAPYRUS_NOTATION_EDGE_GENERALIZATION;
	source := late resolveoneIn(
		component::Classifier::classifiersToShape,
		s : notation::Shape | s.element = self.referencedElement.oclAsType(uml::Generalization).source->any(true).toEObject()
	);
	target := late resolveoneIn(
		component::Classifier::classifiersToShape,
		s : notation::Shape | s.element = self.referencedElement.oclAsType(uml::Generalization).target->any(true).toEObject()
	);	

	element := self.referencedElement.toEObject();		
	children += self.map stereotypeGeneralizationDecoration();
	styles += result.toEObject().map fontStyle();
	bendpoints := result.map connectorToBendpoint();		
}

mapping textualCommons::Commentable::commentableToShape() : notation::Shape
disjuncts component::Classifier::classifiersToShape;

mapping component::Component::componentToCompartment() : notation::BasicCompartment
{	
	type := self.getNestedName(PAPYRUS_NOTATION_SHAPE_COMPONENT_COMPARTMENT_REGULAR);
	children := self.attributes.map attributeToShape();
	
	children += self.packagedElements->selectByType(component::Interface).map classifiersToShape();
	styles += result.toEObject().map titleStyle();
	children += self.packagedElements->selectByType(component::Component).map classifiersToShape();
	children += self.packagedElements->selectByType(component::Class).map classifiersToShape();
	children += self.packagedElements->selectByType(component::Interface).map commentableToShape();
	children += self.packagedElements->selectByType(component::Component).map commentableToShape();
	children += self.packagedElements->selectByType(component::Class).map commentableToShape();
	layoutConstraint := result.toEObject().map notationBounds();
	
}

mapping component::Interface::interfaceToAttributeCompartment() : notation::BasicCompartment
{
	type := PAPYRUS_NOTATION_COMPARTMENT_INTERFACE_PROPERTIES_REGULAR;
	children := self.members->select(oclIsKindOf(component::Attribute))->oclAsType(component::Attribute)->map interfaceAttributeToShape();
	
	styles += result.toEObject().map titleStyle();
	styles += result.toEObject().map sortingStyle();
	styles += result.toEObject().map filteringStyle();
	layoutConstraint := result.toEObject().map notationBounds();
}
mapping component::Interface::interfaceToOperationCompartment() : notation::BasicCompartment
{
	type := PAPYRUS_NOTATION_COMPARTMENT_INTERFACE_OPERATIONS_REGULAR;
	children := self.members->select(oclIsKindOf(component::Method))->oclAsType(component::Method)->map interfaceMethodToShape();
	styles += result.toEObject().map titleStyle();
	styles += result.toEObject().map sortingStyle();
	styles += result.toEObject().map filteringStyle();
	layoutConstraint := result.toEObject().map notationBounds();
	
}

mapping component::Method::interfaceMethodToShape() : notation::Shape
{
		type := PAPYRUS_NOTATION_SHAPE_INTERFACE_OPERATION;
		element := self.referencedElement.toEObject();
		layoutConstraint := result.toEObject().map locationConstraint();
}

mapping component::Component::portToShapeDisplay() : notation::BasicCompartment
{
	type := PAPYRUS_NOTATION_COMPARTMENT_PORT_SHAPE_DISPLAY;
	styles += self.toEObject().map titleStyle();
	layoutConstraint := result.toEObject().map notationBounds();
}

mapping component::Attribute::attributeToShapeDisplay() : notation::BasicCompartment
{
	type := PAPYRUS_NOTATION_COMPARTMENT_PORT_SHAPE_DISPLAY;
	styles += self.toEObject().map titleStyle();
	layoutConstraint := result.toEObject().map notationBounds();
}


// Labels /Decorations /...

mapping textualCommons::Comment::commentLabelBodyHintDecoration() : notation::DecorationNode
{
    type := PAPYRUS_NOTATION_NODE_COMMENT_BODY_REGULAR;
}

mapping component::Component::componentToNameLabel() : notation::DecorationNode
{
	type := self.getNestedName(PAPYRUS_NOTATION_NODE_COMPONENT_NAME_REGULAR);
}

mapping component::Port::portToNameLabel() : notation::DecorationNode
{
	type := PAPYRUS_NOTATION_NODE_PORT_FLOATINGNAME_REGULAR;
	layoutConstraint := result.toEObject().map locationConstraint();
}

mapping component::Port::portToStereotypeLabel() : notation::DecorationNode
{
	type := PAPYRUS_NOTATION_NODE_PORT_FLOATINGNAME_STEREOTYPE;
	layoutConstraint := result.toEObject().map locationConstraint();
}

mapping uml::Port::attributePortToNameLabel() : notation::DecorationNode
{
	type := PAPYRUS_NOTATION_NODE_PORT_FLOATINGNAME_REGULAR;
	layoutConstraint := result.toEObject().map locationConstraint();
}

mapping uml::Port::attributePortToStereotypeLabel() : notation::DecorationNode
{
	type := PAPYRUS_NOTATION_NODE_PORT_FLOATINGNAME_STEREOTYPE;
	layoutConstraint := result.toEObject().map locationConstraint();
}

mapping component::Component::componentFloatingNameLabel() : notation::DecorationNode
{
	type := self.getNestedName(PAPYRUS_NOTATION_NODE_COMPONENT_FLOATINGNAME_REGULAR);
	layoutConstraint := result.toEObject().map locationConstraint();
}

mapping component::Interface::interfaceToNameLabel() : notation::DecorationNode
{
	type := PAPYRUS_NOTATION_NODE_INTERFACE_NAME_REGULAR;
}

mapping component::Attribute::attributeToNameLabel() : notation::DecorationNode
{
	type := PAPYRUS_NOTATION_SHAPE_COMPONENT_PROPERTY_NAME_REGULAR
}


mapping textualCommons::NamedElement::namedElementToNameLabel() : notation::DecorationNode
{
	type := PAPYRUS_NOTATION_NODE_NAMED_ELEMENT_NAME_REGULAR
}

mapping component::Interface::interfaceFloatingNameLabel() : notation::DecorationNode
{
	type := PAPYRUS_NOTATION_NODE_INTERFACE_FLOATINGNAME_REGULAR;
	layoutConstraint := result.toEObject().map locationConstraint();
}

mapping component::Provide::stereotypeInterfaceDecorationProvide() : notation::DecorationNode
{
	type := PAPYRUS_NOTATION_NODE_INTERFACE_REALIZATION_STEREOTYPE;
	layoutConstraint := result.toEObject().map locationConstraint();
}

mapping component::Require::stereotypeInterfaceDecorationRequire() : notation::DecorationNode
{
	type := PAPYRUS_NOTATION_NODE_INTERFACE_REQUIRE_STEREOTYPE;
	layoutConstraint := result.toEObject().map locationConstraint();
}

mapping component::Generalization::stereotypeGeneralizationDecoration() : notation::DecorationNode
{
	type := PAPYRUS_NOTATION_EDGE_GENERALIZATION_STEREOTYPE;
	layoutConstraint := result.toEObject().map locationConstraint();
}

mapping component::Generalization::generalizationDecorationNameLabel() : notation::DecorationNode
{
	type := PAPYRUS_NOTATION_EDGE_GENERALIZATION_NAME_REGULAR;
	layoutConstraint := result.toEObject().map locationConstraint();
}

mapping component::Connector::stereotypeConnectorDecoration() : notation::DecorationNode
{
	type := PAPYRUS_NOTATION_EDGE_CONNECTOR_STEREOTYPE;
	layoutConstraint := result.toEObject().map locationConstraint();
}

mapping component::Connector::connectorDecorationNameLabel() : notation::DecorationNode
{
	type := PAPYRUS_NOTATION_EDGE_CONNECTOR_NAME_REGULAR;
	layoutConstraint := result.toEObject().map locationConstraint();
}

mapping component::Provide::stereotypeInterfaceDecorationNameLabel() : notation::DecorationNode
{
	type := PAPYRUS_NOTATION_NODE_INTERFACE_REALIZATION_NAME_REGULAR;
	layoutConstraint := result.toEObject().map locationConstraint();
}

mapping component::Require::stereotypeInterfaceDecorationNameLabel() : notation::DecorationNode
{
	type := PAPYRUS_NOTATION_NODE_USAGE_NAME_REGULAR;
	layoutConstraint := result.toEObject().map locationConstraint();
}


//Style
mapping component::ComponentDiagram::stringValueStyle() : notation::StringValueStyle
{
	name := "diagram_compatibility_version";
	stringValue := "1.3.0";	
}

mapping component::ComponentDiagram::diagramStyle() : notation::DiagramStyle
{	
}

mapping component::ComponentDiagram::papyrusViewStyle(rootElement : uml::Package) : style::PapyrusDiagramStyle
{
	owner := rootElement.toEObject();
	diagramKindId := "org.eclipse.papyrus.uml.diagram.component";
}

query textualCommons::Element::isCommentable() : Boolean
{
    return self.oclIsKindOf(textualCommons::Commentable);
}

query textualCommons::Element::isCommented() : Boolean
{
    return self.isCommentable() and not self.oclAsType(textualCommons::Commentable).comments->isEmpty();
}

query textualCommons::Commentable::typeToView() : notation::View
{
    return if self.oclIsKindOf(component::Generalization) or self.oclIsTypeOf(component::Require) or self.oclIsTypeOf(component::Provide) then self.typeToEdge() 
    else self.typeToShape() endif;
}

query textualCommons::Commentable::typeToEdge() : notation::View
{
    return if self.oclIsKindOf(component::Generalization) then self.resolveoneIn(component::ClassifierRelation::classifierRelationsToEdge)
    else self.resolveoneIn(component::InterfaceRelation::interfaceRelationToEdge) endif;
}

query textualCommons::Commentable::typeToShape() : notation::View
{
    return self.resolveoneIn(component::Classifier::classifiersToShape);
}


query component::Component::isNestedCmp() : Boolean
{	
	return self.container().oclIsTypeOf(component::Component);
}
query component::Component::getNestedName(type : String) : String
{
	return type.getNestedCmpName(self.isNestedCmp());
}

query String::getNestedCmpName(isNested : Boolean) : String
{
	return if isNested then self + "_CCN" else self endif;
}


query component::RootPackage::findAllInterfaceRelations() : Sequence(component::InterfaceRelation) {
	var components = self.getAllContentsOfType(component::Component.oclAsType(ecore::EClass), true);
	var classes = self.getAllContentsOfType(component::Class.oclAsType(ecore::EClass), true);
	var interfaceRelation := components->oclAsType(component::Component).interfaceRelation->flatten();
	interfaceRelation += classes->oclAsType(component::Class).interfaceRelation->flatten();

	return interfaceRelation;
}

query component::RootPackage::findAllClassifierComments() : Sequence(textualCommons::Comment) {
    var classifierComments := self.classifiers.comments->flatten();
    return classifierComments;
}

