/*
 * generated by Xtext 2.10.0
 */
package de.cooperateproject.modeling.textual.usecase.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class UsecaseGrammarAccess extends AbstractGrammarElementFinder {
	
	public class UseCaseDiagramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.usecase.Usecase.UseCaseDiagram");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStartUcKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTitleAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTitleSTRINGTerminalRuleCall_1_0 = (RuleCall)cTitleAssignment_1.eContents().get(0);
		private final Assignment cRootPackageAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRootPackageRootPackageParserRuleCall_2_0 = (RuleCall)cRootPackageAssignment_2.eContents().get(0);
		private final Keyword cEndUcKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//UseCaseDiagram:
		//	'@start-uc' title=STRING rootPackage=RootPackage '@end-uc';
		@Override public ParserRule getRule() { return rule; }
		
		//'@start-uc' title=STRING rootPackage=RootPackage '@end-uc'
		public Group getGroup() { return cGroup; }
		
		//'@start-uc'
		public Keyword getStartUcKeyword_0() { return cStartUcKeyword_0; }
		
		//title=STRING
		public Assignment getTitleAssignment_1() { return cTitleAssignment_1; }
		
		//STRING
		public RuleCall getTitleSTRINGTerminalRuleCall_1_0() { return cTitleSTRINGTerminalRuleCall_1_0; }
		
		//rootPackage=RootPackage
		public Assignment getRootPackageAssignment_2() { return cRootPackageAssignment_2; }
		
		//RootPackage
		public RuleCall getRootPackageRootPackageParserRuleCall_2_0() { return cRootPackageRootPackageParserRuleCall_2_0; }
		
		//'@end-uc'
		public Keyword getEndUcKeyword_3() { return cEndUcKeyword_3; }
	}
	public class RootPackageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.usecase.Usecase.RootPackage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRootElementKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameFQNParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cActorsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cActorsActorParserRuleCall_2_0 = (RuleCall)cActorsAssignment_2.eContents().get(0);
		private final Assignment cSystemsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSystemsSystemParserRuleCall_3_0 = (RuleCall)cSystemsAssignment_3.eContents().get(0);
		private final Assignment cRelationshipsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRelationshipsRelationshipParserRuleCall_4_0 = (RuleCall)cRelationshipsAssignment_4.eContents().get(0);
		
		//RootPackage:
		//	'rootElement' name=FQN
		//	actors+=Actor*
		//	systems+=System*
		//	relationships+=Relationship*;
		@Override public ParserRule getRule() { return rule; }
		
		//'rootElement' name=FQN actors+=Actor* systems+=System* relationships+=Relationship*
		public Group getGroup() { return cGroup; }
		
		//'rootElement'
		public Keyword getRootElementKeyword_0() { return cRootElementKeyword_0; }
		
		//name=FQN
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//FQN
		public RuleCall getNameFQNParserRuleCall_1_0() { return cNameFQNParserRuleCall_1_0; }
		
		//actors+=Actor*
		public Assignment getActorsAssignment_2() { return cActorsAssignment_2; }
		
		//Actor
		public RuleCall getActorsActorParserRuleCall_2_0() { return cActorsActorParserRuleCall_2_0; }
		
		//systems+=System*
		public Assignment getSystemsAssignment_3() { return cSystemsAssignment_3; }
		
		//System
		public RuleCall getSystemsSystemParserRuleCall_3_0() { return cSystemsSystemParserRuleCall_3_0; }
		
		//relationships+=Relationship*
		public Assignment getRelationshipsAssignment_4() { return cRelationshipsAssignment_4; }
		
		//Relationship
		public RuleCall getRelationshipsRelationshipParserRuleCall_4_0() { return cRelationshipsRelationshipParserRuleCall_4_0; }
	}
	public class ActorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.usecase.Usecase.Actor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVisibilityAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVisibilityVisibilityEnumRuleCall_0_0 = (RuleCall)cVisibilityAssignment_0.eContents().get(0);
		private final Assignment cAbstractAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cAbstractAbstractKeyword_1_0 = (Keyword)cAbstractAssignment_1.eContents().get(0);
		private final Keyword cActorKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cNameAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_3_0_0 = (RuleCall)cNameAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final Assignment cNameAssignment_3_1_0 = (Assignment)cGroup_3_1.eContents().get(0);
		private final RuleCall cNameSTRINGTerminalRuleCall_3_1_0_0 = (RuleCall)cNameAssignment_3_1_0.eContents().get(0);
		private final Keyword cAsKeyword_3_1_1 = (Keyword)cGroup_3_1.eContents().get(1);
		private final Assignment cAliasAssignment_3_1_2 = (Assignment)cGroup_3_1.eContents().get(2);
		private final RuleCall cAliasIDTerminalRuleCall_3_1_2_0 = (RuleCall)cAliasAssignment_3_1_2.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftSquareBracketKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cTypeAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cTypeActorTypeEnumRuleCall_4_1_0 = (RuleCall)cTypeAssignment_4_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		
		//Actor:
		//	visibility=Visibility? abstract?='abstract'? 'actor' (name=ID | name=STRING 'as' alias=ID) ('[' type=ActorType ']')?;
		@Override public ParserRule getRule() { return rule; }
		
		//visibility=Visibility? abstract?='abstract'? 'actor' (name=ID | name=STRING 'as' alias=ID) ('[' type=ActorType ']')?
		public Group getGroup() { return cGroup; }
		
		//visibility=Visibility?
		public Assignment getVisibilityAssignment_0() { return cVisibilityAssignment_0; }
		
		//Visibility
		public RuleCall getVisibilityVisibilityEnumRuleCall_0_0() { return cVisibilityVisibilityEnumRuleCall_0_0; }
		
		//abstract?='abstract'?
		public Assignment getAbstractAssignment_1() { return cAbstractAssignment_1; }
		
		//'abstract'
		public Keyword getAbstractAbstractKeyword_1_0() { return cAbstractAbstractKeyword_1_0; }
		
		//'actor'
		public Keyword getActorKeyword_2() { return cActorKeyword_2; }
		
		//(name=ID | name=STRING 'as' alias=ID)
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//name=ID
		public Assignment getNameAssignment_3_0() { return cNameAssignment_3_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0_0() { return cNameIDTerminalRuleCall_3_0_0; }
		
		//name=STRING 'as' alias=ID
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//name=STRING
		public Assignment getNameAssignment_3_1_0() { return cNameAssignment_3_1_0; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_3_1_0_0() { return cNameSTRINGTerminalRuleCall_3_1_0_0; }
		
		//'as'
		public Keyword getAsKeyword_3_1_1() { return cAsKeyword_3_1_1; }
		
		//alias=ID
		public Assignment getAliasAssignment_3_1_2() { return cAliasAssignment_3_1_2; }
		
		//ID
		public RuleCall getAliasIDTerminalRuleCall_3_1_2_0() { return cAliasIDTerminalRuleCall_3_1_2_0; }
		
		//('[' type=ActorType ']')?
		public Group getGroup_4() { return cGroup_4; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_4_0() { return cLeftSquareBracketKeyword_4_0; }
		
		//type=ActorType
		public Assignment getTypeAssignment_4_1() { return cTypeAssignment_4_1; }
		
		//ActorType
		public RuleCall getTypeActorTypeEnumRuleCall_4_1_0() { return cTypeActorTypeEnumRuleCall_4_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_4_2() { return cRightSquareBracketKeyword_4_2; }
	}
	public class SystemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.usecase.Usecase.System");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSystemKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameFQNParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cUsecasesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cUsecasesUseCaseParserRuleCall_3_0 = (RuleCall)cUsecasesAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//System:
		//	'system' name=FQN '{' usecases+=UseCase* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'system' name=FQN '{' usecases+=UseCase* '}'
		public Group getGroup() { return cGroup; }
		
		//'system'
		public Keyword getSystemKeyword_0() { return cSystemKeyword_0; }
		
		//name=FQN
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//FQN
		public RuleCall getNameFQNParserRuleCall_1_0() { return cNameFQNParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//usecases+=UseCase*
		public Assignment getUsecasesAssignment_3() { return cUsecasesAssignment_3; }
		
		//UseCase
		public RuleCall getUsecasesUseCaseParserRuleCall_3_0() { return cUsecasesUseCaseParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class UseCaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.usecase.Usecase.UseCase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVisibilityAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVisibilityVisibilityEnumRuleCall_0_0 = (RuleCall)cVisibilityAssignment_0.eContents().get(0);
		private final Assignment cAbstractAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cAbstractAbstractKeyword_1_0 = (Keyword)cAbstractAssignment_1.eContents().get(0);
		private final Keyword cUsecaseKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cNameAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_3_0_0 = (RuleCall)cNameAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final Assignment cNameAssignment_3_1_0 = (Assignment)cGroup_3_1.eContents().get(0);
		private final RuleCall cNameSTRINGTerminalRuleCall_3_1_0_0 = (RuleCall)cNameAssignment_3_1_0.eContents().get(0);
		private final Keyword cAsKeyword_3_1_1 = (Keyword)cGroup_3_1.eContents().get(1);
		private final Assignment cAliasAssignment_3_1_2 = (Assignment)cGroup_3_1.eContents().get(2);
		private final RuleCall cAliasIDTerminalRuleCall_3_1_2_0 = (RuleCall)cAliasAssignment_3_1_2.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cExtensionPointsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cExtensionPointsExtensionPointParserRuleCall_4_1_0 = (RuleCall)cExtensionPointsAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		
		//UseCase:
		//	visibility=Visibility? abstract?='abstract'? 'usecase' (name=ID | name=STRING 'as' alias=ID) ('{'
		//	extensionPoints+=ExtensionPoint* '}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//visibility=Visibility? abstract?='abstract'? 'usecase' (name=ID | name=STRING 'as' alias=ID) ('{'
		//extensionPoints+=ExtensionPoint* '}')?
		public Group getGroup() { return cGroup; }
		
		//visibility=Visibility?
		public Assignment getVisibilityAssignment_0() { return cVisibilityAssignment_0; }
		
		//Visibility
		public RuleCall getVisibilityVisibilityEnumRuleCall_0_0() { return cVisibilityVisibilityEnumRuleCall_0_0; }
		
		//abstract?='abstract'?
		public Assignment getAbstractAssignment_1() { return cAbstractAssignment_1; }
		
		//'abstract'
		public Keyword getAbstractAbstractKeyword_1_0() { return cAbstractAbstractKeyword_1_0; }
		
		//'usecase'
		public Keyword getUsecaseKeyword_2() { return cUsecaseKeyword_2; }
		
		//(name=ID | name=STRING 'as' alias=ID)
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//name=ID
		public Assignment getNameAssignment_3_0() { return cNameAssignment_3_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0_0() { return cNameIDTerminalRuleCall_3_0_0; }
		
		//name=STRING 'as' alias=ID
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//name=STRING
		public Assignment getNameAssignment_3_1_0() { return cNameAssignment_3_1_0; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_3_1_0_0() { return cNameSTRINGTerminalRuleCall_3_1_0_0; }
		
		//'as'
		public Keyword getAsKeyword_3_1_1() { return cAsKeyword_3_1_1; }
		
		//alias=ID
		public Assignment getAliasAssignment_3_1_2() { return cAliasAssignment_3_1_2; }
		
		//ID
		public RuleCall getAliasIDTerminalRuleCall_3_1_2_0() { return cAliasIDTerminalRuleCall_3_1_2_0; }
		
		//('{' extensionPoints+=ExtensionPoint* '}')?
		public Group getGroup_4() { return cGroup_4; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4_0() { return cLeftCurlyBracketKeyword_4_0; }
		
		//extensionPoints+=ExtensionPoint*
		public Assignment getExtensionPointsAssignment_4_1() { return cExtensionPointsAssignment_4_1; }
		
		//ExtensionPoint
		public RuleCall getExtensionPointsExtensionPointParserRuleCall_4_1_0() { return cExtensionPointsExtensionPointParserRuleCall_4_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4_2() { return cRightCurlyBracketKeyword_4_2; }
	}
	public class ExtensionPointElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.usecase.Usecase.ExtensionPoint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExtensionpointKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_1_0_0 = (RuleCall)cNameAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Assignment cNameAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_1_0_0 = (RuleCall)cNameAssignment_1_1_0.eContents().get(0);
		private final Keyword cAsKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cAliasAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cAliasIDTerminalRuleCall_1_1_2_0 = (RuleCall)cAliasAssignment_1_1_2.eContents().get(0);
		
		//ExtensionPoint:
		//	'extensionpoint' (name=ID | name=STRING 'as' alias=ID);
		@Override public ParserRule getRule() { return rule; }
		
		//'extensionpoint' (name=ID | name=STRING 'as' alias=ID)
		public Group getGroup() { return cGroup; }
		
		//'extensionpoint'
		public Keyword getExtensionpointKeyword_0() { return cExtensionpointKeyword_0; }
		
		//(name=ID | name=STRING 'as' alias=ID)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//name=ID
		public Assignment getNameAssignment_1_0() { return cNameAssignment_1_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0_0() { return cNameIDTerminalRuleCall_1_0_0; }
		
		//name=STRING 'as' alias=ID
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//name=STRING
		public Assignment getNameAssignment_1_1_0() { return cNameAssignment_1_1_0; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_1_0_0() { return cNameSTRINGTerminalRuleCall_1_1_0_0; }
		
		//'as'
		public Keyword getAsKeyword_1_1_1() { return cAsKeyword_1_1_1; }
		
		//alias=ID
		public Assignment getAliasAssignment_1_1_2() { return cAliasAssignment_1_1_2; }
		
		//ID
		public RuleCall getAliasIDTerminalRuleCall_1_1_2_0() { return cAliasIDTerminalRuleCall_1_1_2_0; }
	}
	public class RelationshipElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.usecase.Usecase.Relationship");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAssociationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cGeneralizationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cIncludeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cExtendParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cCommentParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Relationship:
		//	Association | Generalization | Include | Extend | Comment;
		@Override public ParserRule getRule() { return rule; }
		
		//Association | Generalization | Include | Extend | Comment
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Association
		public RuleCall getAssociationParserRuleCall_0() { return cAssociationParserRuleCall_0; }
		
		//Generalization
		public RuleCall getGeneralizationParserRuleCall_1() { return cGeneralizationParserRuleCall_1; }
		
		//Include
		public RuleCall getIncludeParserRuleCall_2() { return cIncludeParserRuleCall_2; }
		
		//Extend
		public RuleCall getExtendParserRuleCall_3() { return cExtendParserRuleCall_3; }
		
		//Comment
		public RuleCall getCommentParserRuleCall_4() { return cCommentParserRuleCall_4; }
	}
	public class AssociationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.usecase.Usecase.Association");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cActorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cActorActorCrossReference_0_0 = (CrossReference)cActorAssignment_0.eContents().get(0);
		private final RuleCall cActorActorFQNParserRuleCall_0_0_1 = (RuleCall)cActorActorCrossReference_0_0.eContents().get(1);
		private final Keyword cIacKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cUsecaseAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cUsecaseUseCaseCrossReference_2_0 = (CrossReference)cUsecaseAssignment_2.eContents().get(0);
		private final RuleCall cUsecaseUseCaseFQNParserRuleCall_2_0_1 = (RuleCall)cUsecaseUseCaseCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftSquareBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cLeftCardinalityAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cLeftCardinalityCardinalityParserRuleCall_3_1_0 = (RuleCall)cLeftCardinalityAssignment_3_1.eContents().get(0);
		private final Keyword cVerticalLineKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cRightCardinalityAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final RuleCall cRightCardinalityCardinalityParserRuleCall_3_3_0 = (RuleCall)cRightCardinalityAssignment_3_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		
		//Association:
		//	actor=[Actor|FQN] 'iac' usecase=[UseCase|FQN] ('[' leftCardinality=Cardinality '|' rightCardinality=Cardinality
		//	']')?;
		@Override public ParserRule getRule() { return rule; }
		
		//actor=[Actor|FQN] 'iac' usecase=[UseCase|FQN] ('[' leftCardinality=Cardinality '|' rightCardinality=Cardinality ']')?
		public Group getGroup() { return cGroup; }
		
		//actor=[Actor|FQN]
		public Assignment getActorAssignment_0() { return cActorAssignment_0; }
		
		//[Actor|FQN]
		public CrossReference getActorActorCrossReference_0_0() { return cActorActorCrossReference_0_0; }
		
		//FQN
		public RuleCall getActorActorFQNParserRuleCall_0_0_1() { return cActorActorFQNParserRuleCall_0_0_1; }
		
		//'iac'
		public Keyword getIacKeyword_1() { return cIacKeyword_1; }
		
		//usecase=[UseCase|FQN]
		public Assignment getUsecaseAssignment_2() { return cUsecaseAssignment_2; }
		
		//[UseCase|FQN]
		public CrossReference getUsecaseUseCaseCrossReference_2_0() { return cUsecaseUseCaseCrossReference_2_0; }
		
		//FQN
		public RuleCall getUsecaseUseCaseFQNParserRuleCall_2_0_1() { return cUsecaseUseCaseFQNParserRuleCall_2_0_1; }
		
		//('[' leftCardinality=Cardinality '|' rightCardinality=Cardinality ']')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_3_0() { return cLeftSquareBracketKeyword_3_0; }
		
		//leftCardinality=Cardinality
		public Assignment getLeftCardinalityAssignment_3_1() { return cLeftCardinalityAssignment_3_1; }
		
		//Cardinality
		public RuleCall getLeftCardinalityCardinalityParserRuleCall_3_1_0() { return cLeftCardinalityCardinalityParserRuleCall_3_1_0; }
		
		//'|'
		public Keyword getVerticalLineKeyword_3_2() { return cVerticalLineKeyword_3_2; }
		
		//rightCardinality=Cardinality
		public Assignment getRightCardinalityAssignment_3_3() { return cRightCardinalityAssignment_3_3; }
		
		//Cardinality
		public RuleCall getRightCardinalityCardinalityParserRuleCall_3_3_0() { return cRightCardinalityCardinalityParserRuleCall_3_3_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3_4() { return cRightSquareBracketKeyword_3_4; }
	}
	public class GeneralizationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.usecase.Usecase.Generalization");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cClientAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cClientBehavioredClassifierCrossReference_0_0 = (CrossReference)cClientAssignment_0.eContents().get(0);
		private final RuleCall cClientBehavioredClassifierFQNParserRuleCall_0_0_1 = (RuleCall)cClientBehavioredClassifierCrossReference_0_0.eContents().get(1);
		private final Keyword cIsAKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSupplierAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cSupplierBehavioredClassifierCrossReference_2_0 = (CrossReference)cSupplierAssignment_2.eContents().get(0);
		private final RuleCall cSupplierBehavioredClassifierFQNParserRuleCall_2_0_1 = (RuleCall)cSupplierBehavioredClassifierCrossReference_2_0.eContents().get(1);
		
		//Generalization:
		//	client=[BehavioredClassifier|FQN] 'isA' supplier=[BehavioredClassifier|FQN];
		@Override public ParserRule getRule() { return rule; }
		
		//client=[BehavioredClassifier|FQN] 'isA' supplier=[BehavioredClassifier|FQN]
		public Group getGroup() { return cGroup; }
		
		//client=[BehavioredClassifier|FQN]
		public Assignment getClientAssignment_0() { return cClientAssignment_0; }
		
		//[BehavioredClassifier|FQN]
		public CrossReference getClientBehavioredClassifierCrossReference_0_0() { return cClientBehavioredClassifierCrossReference_0_0; }
		
		//FQN
		public RuleCall getClientBehavioredClassifierFQNParserRuleCall_0_0_1() { return cClientBehavioredClassifierFQNParserRuleCall_0_0_1; }
		
		//'isA'
		public Keyword getIsAKeyword_1() { return cIsAKeyword_1; }
		
		//supplier=[BehavioredClassifier|FQN]
		public Assignment getSupplierAssignment_2() { return cSupplierAssignment_2; }
		
		//[BehavioredClassifier|FQN]
		public CrossReference getSupplierBehavioredClassifierCrossReference_2_0() { return cSupplierBehavioredClassifierCrossReference_2_0; }
		
		//FQN
		public RuleCall getSupplierBehavioredClassifierFQNParserRuleCall_2_0_1() { return cSupplierBehavioredClassifierFQNParserRuleCall_2_0_1; }
	}
	public class IncludeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.usecase.Usecase.Include");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cClientAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cClientUseCaseCrossReference_0_0 = (CrossReference)cClientAssignment_0.eContents().get(0);
		private final RuleCall cClientUseCaseFQNParserRuleCall_0_0_1 = (RuleCall)cClientUseCaseCrossReference_0_0.eContents().get(1);
		private final Keyword cIncKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSupplierAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cSupplierUseCaseCrossReference_2_0 = (CrossReference)cSupplierAssignment_2.eContents().get(0);
		private final RuleCall cSupplierUseCaseFQNParserRuleCall_2_0_1 = (RuleCall)cSupplierUseCaseCrossReference_2_0.eContents().get(1);
		
		//Include:
		//	client=[UseCase|FQN] 'inc' supplier=[UseCase|FQN];
		@Override public ParserRule getRule() { return rule; }
		
		//client=[UseCase|FQN] 'inc' supplier=[UseCase|FQN]
		public Group getGroup() { return cGroup; }
		
		//client=[UseCase|FQN]
		public Assignment getClientAssignment_0() { return cClientAssignment_0; }
		
		//[UseCase|FQN]
		public CrossReference getClientUseCaseCrossReference_0_0() { return cClientUseCaseCrossReference_0_0; }
		
		//FQN
		public RuleCall getClientUseCaseFQNParserRuleCall_0_0_1() { return cClientUseCaseFQNParserRuleCall_0_0_1; }
		
		//'inc'
		public Keyword getIncKeyword_1() { return cIncKeyword_1; }
		
		//supplier=[UseCase|FQN]
		public Assignment getSupplierAssignment_2() { return cSupplierAssignment_2; }
		
		//[UseCase|FQN]
		public CrossReference getSupplierUseCaseCrossReference_2_0() { return cSupplierUseCaseCrossReference_2_0; }
		
		//FQN
		public RuleCall getSupplierUseCaseFQNParserRuleCall_2_0_1() { return cSupplierUseCaseFQNParserRuleCall_2_0_1; }
	}
	public class ExtendElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.usecase.Usecase.Extend");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cClientAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cClientUseCaseCrossReference_0_0 = (CrossReference)cClientAssignment_0.eContents().get(0);
		private final RuleCall cClientUseCaseFQNParserRuleCall_0_0_1 = (RuleCall)cClientUseCaseCrossReference_0_0.eContents().get(1);
		private final Keyword cExtKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSupplierAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cSupplierUseCaseCrossReference_2_0 = (CrossReference)cSupplierAssignment_2.eContents().get(0);
		private final RuleCall cSupplierUseCaseFQNParserRuleCall_2_0_1 = (RuleCall)cSupplierUseCaseCrossReference_2_0.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cExtensionPointAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cExtensionPointExtensionPointCrossReference_4_0 = (CrossReference)cExtensionPointAssignment_4.eContents().get(0);
		private final RuleCall cExtensionPointExtensionPointIDTerminalRuleCall_4_0_1 = (RuleCall)cExtensionPointExtensionPointCrossReference_4_0.eContents().get(1);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cVerticalLineKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cConditionAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cConditionSTRINGTerminalRuleCall_5_1_0 = (RuleCall)cConditionAssignment_5_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Extend:
		//	client=[UseCase|FQN] 'ext' supplier=[UseCase|FQN] '[' extensionPoint=[ExtensionPoint] ('|' condition=STRING)? ']';
		@Override public ParserRule getRule() { return rule; }
		
		//client=[UseCase|FQN] 'ext' supplier=[UseCase|FQN] '[' extensionPoint=[ExtensionPoint] ('|' condition=STRING)? ']'
		public Group getGroup() { return cGroup; }
		
		//client=[UseCase|FQN]
		public Assignment getClientAssignment_0() { return cClientAssignment_0; }
		
		//[UseCase|FQN]
		public CrossReference getClientUseCaseCrossReference_0_0() { return cClientUseCaseCrossReference_0_0; }
		
		//FQN
		public RuleCall getClientUseCaseFQNParserRuleCall_0_0_1() { return cClientUseCaseFQNParserRuleCall_0_0_1; }
		
		//'ext'
		public Keyword getExtKeyword_1() { return cExtKeyword_1; }
		
		//supplier=[UseCase|FQN]
		public Assignment getSupplierAssignment_2() { return cSupplierAssignment_2; }
		
		//[UseCase|FQN]
		public CrossReference getSupplierUseCaseCrossReference_2_0() { return cSupplierUseCaseCrossReference_2_0; }
		
		//FQN
		public RuleCall getSupplierUseCaseFQNParserRuleCall_2_0_1() { return cSupplierUseCaseFQNParserRuleCall_2_0_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_3() { return cLeftSquareBracketKeyword_3; }
		
		//extensionPoint=[ExtensionPoint]
		public Assignment getExtensionPointAssignment_4() { return cExtensionPointAssignment_4; }
		
		//[ExtensionPoint]
		public CrossReference getExtensionPointExtensionPointCrossReference_4_0() { return cExtensionPointExtensionPointCrossReference_4_0; }
		
		//ID
		public RuleCall getExtensionPointExtensionPointIDTerminalRuleCall_4_0_1() { return cExtensionPointExtensionPointIDTerminalRuleCall_4_0_1; }
		
		//('|' condition=STRING)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'|'
		public Keyword getVerticalLineKeyword_5_0() { return cVerticalLineKeyword_5_0; }
		
		//condition=STRING
		public Assignment getConditionAssignment_5_1() { return cConditionAssignment_5_1; }
		
		//STRING
		public RuleCall getConditionSTRINGTerminalRuleCall_5_1_0() { return cConditionSTRINGTerminalRuleCall_5_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_6() { return cRightSquareBracketKeyword_6; }
	}
	public class CommentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.usecase.Usecase.Comment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCommentedElementAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cCommentedElementCommentableCrossReference_0_0 = (CrossReference)cCommentedElementAssignment_0.eContents().get(0);
		private final RuleCall cCommentedElementCommentableFQNParserRuleCall_0_0_1 = (RuleCall)cCommentedElementCommentableCrossReference_0_0.eContents().get(1);
		private final Keyword cNoteKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCommentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCommentSTRINGTerminalRuleCall_2_0 = (RuleCall)cCommentAssignment_2.eContents().get(0);
		
		//Comment:
		//	commentedElement=[Commentable|FQN] 'note' comment=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//commentedElement=[Commentable|FQN] 'note' comment=STRING
		public Group getGroup() { return cGroup; }
		
		//commentedElement=[Commentable|FQN]
		public Assignment getCommentedElementAssignment_0() { return cCommentedElementAssignment_0; }
		
		//[Commentable|FQN]
		public CrossReference getCommentedElementCommentableCrossReference_0_0() { return cCommentedElementCommentableCrossReference_0_0; }
		
		//FQN
		public RuleCall getCommentedElementCommentableFQNParserRuleCall_0_0_1() { return cCommentedElementCommentableFQNParserRuleCall_0_0_1; }
		
		//'note'
		public Keyword getNoteKeyword_1() { return cNoteKeyword_1; }
		
		//comment=STRING
		public Assignment getCommentAssignment_2() { return cCommentAssignment_2; }
		
		//STRING
		public RuleCall getCommentSTRINGTerminalRuleCall_2_0() { return cCommentSTRINGTerminalRuleCall_2_0; }
	}
	public class CardinalityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.usecase.Usecase.Cardinality");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLowerBoundAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLowerBoundCardinalityBoundParserRuleCall_0_0 = (RuleCall)cLowerBoundAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cUpperBoundAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cUpperBoundCardinalityBoundParserRuleCall_1_1_0 = (RuleCall)cUpperBoundAssignment_1_1.eContents().get(0);
		
		//Cardinality:
		//	lowerBound=CardinalityBound ('..' upperBound=CardinalityBound)?;
		@Override public ParserRule getRule() { return rule; }
		
		//lowerBound=CardinalityBound ('..' upperBound=CardinalityBound)?
		public Group getGroup() { return cGroup; }
		
		//lowerBound=CardinalityBound
		public Assignment getLowerBoundAssignment_0() { return cLowerBoundAssignment_0; }
		
		//CardinalityBound
		public RuleCall getLowerBoundCardinalityBoundParserRuleCall_0_0() { return cLowerBoundCardinalityBoundParserRuleCall_0_0; }
		
		//('..' upperBound=CardinalityBound)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'..'
		public Keyword getFullStopFullStopKeyword_1_0() { return cFullStopFullStopKeyword_1_0; }
		
		//upperBound=CardinalityBound
		public Assignment getUpperBoundAssignment_1_1() { return cUpperBoundAssignment_1_1; }
		
		//CardinalityBound
		public RuleCall getUpperBoundCardinalityBoundParserRuleCall_1_1_0() { return cUpperBoundCardinalityBoundParserRuleCall_1_1_0; }
	}
	public class CardinalityBoundElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.usecase.Usecase.CardinalityBound");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAsteriskKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//CardinalityBound ecore::EInt:
		//	'*' | INT
		@Override public ParserRule getRule() { return rule; }
		
		//'*' | INT
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'*'
		public Keyword getAsteriskKeyword_0() { return cAsteriskKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	public class FQNElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.usecase.Usecase.FQN");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//FQN:
		//	ID ('.' ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	
	public class VisibilityElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.usecase.Usecase.Visibility");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPUBLICEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPUBLICPlusSignKeyword_0_0 = (Keyword)cPUBLICEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cPUBLICEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cPUBLICPublicKeyword_1_0 = (Keyword)cPUBLICEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cPRIVATEEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cPRIVATEHyphenMinusKeyword_2_0 = (Keyword)cPRIVATEEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cPRIVATEEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cPRIVATEPrivateKeyword_3_0 = (Keyword)cPRIVATEEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cPROTECTEDEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cPROTECTEDNumberSignKeyword_4_0 = (Keyword)cPROTECTEDEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cPROTECTEDEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cPROTECTEDProtectedKeyword_5_0 = (Keyword)cPROTECTEDEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cPACKAGEEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cPACKAGETildeKeyword_6_0 = (Keyword)cPACKAGEEnumLiteralDeclaration_6.eContents().get(0);
		
		//enum Visibility:
		//	PUBLIC='+'
		//	| PUBLIC='public'
		//	| PRIVATE='-'
		//	| PRIVATE='private'
		//	| PROTECTED='#'
		//	| PROTECTED='protected'
		//	| PACKAGE='~';
		public EnumRule getRule() { return rule; }
		
		//PUBLIC='+' | PUBLIC='public' | PRIVATE='-' | PRIVATE='private' | PROTECTED='#' | PROTECTED='protected' | PACKAGE='~'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PUBLIC='+'
		public EnumLiteralDeclaration getPUBLICEnumLiteralDeclaration_0() { return cPUBLICEnumLiteralDeclaration_0; }
		
		//'+'
		public Keyword getPUBLICPlusSignKeyword_0_0() { return cPUBLICPlusSignKeyword_0_0; }
		
		//PUBLIC='public'
		public EnumLiteralDeclaration getPUBLICEnumLiteralDeclaration_1() { return cPUBLICEnumLiteralDeclaration_1; }
		
		//'public'
		public Keyword getPUBLICPublicKeyword_1_0() { return cPUBLICPublicKeyword_1_0; }
		
		//PRIVATE='-'
		public EnumLiteralDeclaration getPRIVATEEnumLiteralDeclaration_2() { return cPRIVATEEnumLiteralDeclaration_2; }
		
		//'-'
		public Keyword getPRIVATEHyphenMinusKeyword_2_0() { return cPRIVATEHyphenMinusKeyword_2_0; }
		
		//PRIVATE='private'
		public EnumLiteralDeclaration getPRIVATEEnumLiteralDeclaration_3() { return cPRIVATEEnumLiteralDeclaration_3; }
		
		//'private'
		public Keyword getPRIVATEPrivateKeyword_3_0() { return cPRIVATEPrivateKeyword_3_0; }
		
		//PROTECTED='#'
		public EnumLiteralDeclaration getPROTECTEDEnumLiteralDeclaration_4() { return cPROTECTEDEnumLiteralDeclaration_4; }
		
		//'#'
		public Keyword getPROTECTEDNumberSignKeyword_4_0() { return cPROTECTEDNumberSignKeyword_4_0; }
		
		//PROTECTED='protected'
		public EnumLiteralDeclaration getPROTECTEDEnumLiteralDeclaration_5() { return cPROTECTEDEnumLiteralDeclaration_5; }
		
		//'protected'
		public Keyword getPROTECTEDProtectedKeyword_5_0() { return cPROTECTEDProtectedKeyword_5_0; }
		
		//PACKAGE='~'
		public EnumLiteralDeclaration getPACKAGEEnumLiteralDeclaration_6() { return cPACKAGEEnumLiteralDeclaration_6; }
		
		//'~'
		public Keyword getPACKAGETildeKeyword_6_0() { return cPACKAGETildeKeyword_6_0; }
	}
	public class ActorTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.usecase.Usecase.ActorType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cHUMANEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cHUMANHumanKeyword_0_0 = (Keyword)cHUMANEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMACHINEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMACHINEMachineKeyword_1_0 = (Keyword)cMACHINEEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum ActorType:
		//	HUMAN='human'
		//	| MACHINE='machine';
		public EnumRule getRule() { return rule; }
		
		//HUMAN='human' | MACHINE='machine'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//HUMAN='human'
		public EnumLiteralDeclaration getHUMANEnumLiteralDeclaration_0() { return cHUMANEnumLiteralDeclaration_0; }
		
		//'human'
		public Keyword getHUMANHumanKeyword_0_0() { return cHUMANHumanKeyword_0_0; }
		
		//MACHINE='machine'
		public EnumLiteralDeclaration getMACHINEEnumLiteralDeclaration_1() { return cMACHINEEnumLiteralDeclaration_1; }
		
		//'machine'
		public Keyword getMACHINEMachineKeyword_1_0() { return cMACHINEMachineKeyword_1_0; }
	}
	
	private final UseCaseDiagramElements pUseCaseDiagram;
	private final RootPackageElements pRootPackage;
	private final ActorElements pActor;
	private final SystemElements pSystem;
	private final UseCaseElements pUseCase;
	private final ExtensionPointElements pExtensionPoint;
	private final RelationshipElements pRelationship;
	private final AssociationElements pAssociation;
	private final GeneralizationElements pGeneralization;
	private final IncludeElements pInclude;
	private final ExtendElements pExtend;
	private final CommentElements pComment;
	private final CardinalityElements pCardinality;
	private final CardinalityBoundElements pCardinalityBound;
	private final FQNElements pFQN;
	private final VisibilityElements eVisibility;
	private final ActorTypeElements eActorType;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public UsecaseGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pUseCaseDiagram = new UseCaseDiagramElements();
		this.pRootPackage = new RootPackageElements();
		this.pActor = new ActorElements();
		this.pSystem = new SystemElements();
		this.pUseCase = new UseCaseElements();
		this.pExtensionPoint = new ExtensionPointElements();
		this.pRelationship = new RelationshipElements();
		this.pAssociation = new AssociationElements();
		this.pGeneralization = new GeneralizationElements();
		this.pInclude = new IncludeElements();
		this.pExtend = new ExtendElements();
		this.pComment = new CommentElements();
		this.pCardinality = new CardinalityElements();
		this.pCardinalityBound = new CardinalityBoundElements();
		this.pFQN = new FQNElements();
		this.eVisibility = new VisibilityElements();
		this.eActorType = new ActorTypeElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.cooperateproject.modeling.textual.usecase.Usecase".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//UseCaseDiagram:
	//	'@start-uc' title=STRING rootPackage=RootPackage '@end-uc';
	public UseCaseDiagramElements getUseCaseDiagramAccess() {
		return pUseCaseDiagram;
	}
	
	public ParserRule getUseCaseDiagramRule() {
		return getUseCaseDiagramAccess().getRule();
	}
	
	//RootPackage:
	//	'rootElement' name=FQN
	//	actors+=Actor*
	//	systems+=System*
	//	relationships+=Relationship*;
	public RootPackageElements getRootPackageAccess() {
		return pRootPackage;
	}
	
	public ParserRule getRootPackageRule() {
		return getRootPackageAccess().getRule();
	}
	
	//Actor:
	//	visibility=Visibility? abstract?='abstract'? 'actor' (name=ID | name=STRING 'as' alias=ID) ('[' type=ActorType ']')?;
	public ActorElements getActorAccess() {
		return pActor;
	}
	
	public ParserRule getActorRule() {
		return getActorAccess().getRule();
	}
	
	//System:
	//	'system' name=FQN '{' usecases+=UseCase* '}';
	public SystemElements getSystemAccess() {
		return pSystem;
	}
	
	public ParserRule getSystemRule() {
		return getSystemAccess().getRule();
	}
	
	//UseCase:
	//	visibility=Visibility? abstract?='abstract'? 'usecase' (name=ID | name=STRING 'as' alias=ID) ('{'
	//	extensionPoints+=ExtensionPoint* '}')?;
	public UseCaseElements getUseCaseAccess() {
		return pUseCase;
	}
	
	public ParserRule getUseCaseRule() {
		return getUseCaseAccess().getRule();
	}
	
	//ExtensionPoint:
	//	'extensionpoint' (name=ID | name=STRING 'as' alias=ID);
	public ExtensionPointElements getExtensionPointAccess() {
		return pExtensionPoint;
	}
	
	public ParserRule getExtensionPointRule() {
		return getExtensionPointAccess().getRule();
	}
	
	//Relationship:
	//	Association | Generalization | Include | Extend | Comment;
	public RelationshipElements getRelationshipAccess() {
		return pRelationship;
	}
	
	public ParserRule getRelationshipRule() {
		return getRelationshipAccess().getRule();
	}
	
	//Association:
	//	actor=[Actor|FQN] 'iac' usecase=[UseCase|FQN] ('[' leftCardinality=Cardinality '|' rightCardinality=Cardinality
	//	']')?;
	public AssociationElements getAssociationAccess() {
		return pAssociation;
	}
	
	public ParserRule getAssociationRule() {
		return getAssociationAccess().getRule();
	}
	
	//Generalization:
	//	client=[BehavioredClassifier|FQN] 'isA' supplier=[BehavioredClassifier|FQN];
	public GeneralizationElements getGeneralizationAccess() {
		return pGeneralization;
	}
	
	public ParserRule getGeneralizationRule() {
		return getGeneralizationAccess().getRule();
	}
	
	//Include:
	//	client=[UseCase|FQN] 'inc' supplier=[UseCase|FQN];
	public IncludeElements getIncludeAccess() {
		return pInclude;
	}
	
	public ParserRule getIncludeRule() {
		return getIncludeAccess().getRule();
	}
	
	//Extend:
	//	client=[UseCase|FQN] 'ext' supplier=[UseCase|FQN] '[' extensionPoint=[ExtensionPoint] ('|' condition=STRING)? ']';
	public ExtendElements getExtendAccess() {
		return pExtend;
	}
	
	public ParserRule getExtendRule() {
		return getExtendAccess().getRule();
	}
	
	//Comment:
	//	commentedElement=[Commentable|FQN] 'note' comment=STRING;
	public CommentElements getCommentAccess() {
		return pComment;
	}
	
	public ParserRule getCommentRule() {
		return getCommentAccess().getRule();
	}
	
	//Cardinality:
	//	lowerBound=CardinalityBound ('..' upperBound=CardinalityBound)?;
	public CardinalityElements getCardinalityAccess() {
		return pCardinality;
	}
	
	public ParserRule getCardinalityRule() {
		return getCardinalityAccess().getRule();
	}
	
	//CardinalityBound ecore::EInt:
	//	'*' | INT
	public CardinalityBoundElements getCardinalityBoundAccess() {
		return pCardinalityBound;
	}
	
	public ParserRule getCardinalityBoundRule() {
		return getCardinalityBoundAccess().getRule();
	}
	
	//FQN:
	//	ID ('.' ID)*;
	public FQNElements getFQNAccess() {
		return pFQN;
	}
	
	public ParserRule getFQNRule() {
		return getFQNAccess().getRule();
	}
	
	//enum Visibility:
	//	PUBLIC='+'
	//	| PUBLIC='public'
	//	| PRIVATE='-'
	//	| PRIVATE='private'
	//	| PROTECTED='#'
	//	| PROTECTED='protected'
	//	| PACKAGE='~';
	public VisibilityElements getVisibilityAccess() {
		return eVisibility;
	}
	
	public EnumRule getVisibilityRule() {
		return getVisibilityAccess().getRule();
	}
	
	//enum ActorType:
	//	HUMAN='human'
	//	| MACHINE='machine';
	public ActorTypeElements getActorTypeAccess() {
		return eActorType;
	}
	
	public EnumRule getActorTypeRule() {
		return getActorTypeAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
