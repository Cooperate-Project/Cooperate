/*
 * generated by Xtext 2.11.0
 */
package de.cooperateproject.modeling.textual.usecase.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class UsecaseGrammarAccess extends AbstractGrammarElementFinder {
	
	public class UseCaseDiagramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.usecase.Usecase.UseCaseDiagram");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cUseCaseDiagramAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cStartUcdKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTitleAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTitleSTRINGTerminalRuleCall_2_0 = (RuleCall)cTitleAssignment_2.eContents().get(0);
		private final Assignment cRootPackageAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRootPackageRootPackageParserRuleCall_3_0 = (RuleCall)cRootPackageAssignment_3.eContents().get(0);
		private final Keyword cEndUcdKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//UseCaseDiagram:
		//	{UseCaseDiagram}
		//	'@start-ucd'
		//	title=STRING rootPackage=RootPackage
		//	'@end-ucd';
		@Override public ParserRule getRule() { return rule; }
		
		//{UseCaseDiagram} '@start-ucd' title=STRING rootPackage=RootPackage '@end-ucd'
		public Group getGroup() { return cGroup; }
		
		//{UseCaseDiagram}
		public Action getUseCaseDiagramAction_0() { return cUseCaseDiagramAction_0; }
		
		//'@start-ucd'
		public Keyword getStartUcdKeyword_1() { return cStartUcdKeyword_1; }
		
		//title=STRING
		public Assignment getTitleAssignment_2() { return cTitleAssignment_2; }
		
		//STRING
		public RuleCall getTitleSTRINGTerminalRuleCall_2_0() { return cTitleSTRINGTerminalRuleCall_2_0; }
		
		//rootPackage=RootPackage
		public Assignment getRootPackageAssignment_3() { return cRootPackageAssignment_3; }
		
		//RootPackage
		public RuleCall getRootPackageRootPackageParserRuleCall_3_0() { return cRootPackageRootPackageParserRuleCall_3_0; }
		
		//'@end-ucd'
		public Keyword getEndUcdKeyword_4() { return cEndUcdKeyword_4; }
	}
	public class RootPackageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.usecase.Usecase.RootPackage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRootElementKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameFQNParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cActorsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cActorsActorParserRuleCall_2_0 = (RuleCall)cActorsAssignment_2.eContents().get(0);
		private final Assignment cSystemsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSystemsSystemParserRuleCall_3_0 = (RuleCall)cSystemsAssignment_3.eContents().get(0);
		private final Assignment cRelationshipsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRelationshipsRelationshipParserRuleCall_4_0 = (RuleCall)cRelationshipsAssignment_4.eContents().get(0);
		
		//RootPackage:
		//	'rootElement' name=FQN
		//	actors+=Actor*
		//	systems+=System*
		//	relationships+=Relationship*;
		@Override public ParserRule getRule() { return rule; }
		
		//'rootElement' name=FQN actors+=Actor* systems+=System* relationships+=Relationship*
		public Group getGroup() { return cGroup; }
		
		//'rootElement'
		public Keyword getRootElementKeyword_0() { return cRootElementKeyword_0; }
		
		//name=FQN
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//FQN
		public RuleCall getNameFQNParserRuleCall_1_0() { return cNameFQNParserRuleCall_1_0; }
		
		//actors+=Actor*
		public Assignment getActorsAssignment_2() { return cActorsAssignment_2; }
		
		//Actor
		public RuleCall getActorsActorParserRuleCall_2_0() { return cActorsActorParserRuleCall_2_0; }
		
		//systems+=System*
		public Assignment getSystemsAssignment_3() { return cSystemsAssignment_3; }
		
		//System
		public RuleCall getSystemsSystemParserRuleCall_3_0() { return cSystemsSystemParserRuleCall_3_0; }
		
		//relationships+=Relationship*
		public Assignment getRelationshipsAssignment_4() { return cRelationshipsAssignment_4; }
		
		//Relationship
		public RuleCall getRelationshipsRelationshipParserRuleCall_4_0() { return cRelationshipsRelationshipParserRuleCall_4_0; }
	}
	public class ActorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.usecase.Usecase.Actor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVisibilityAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVisibilityVisibilityEnumRuleCall_0_0 = (RuleCall)cVisibilityAssignment_0.eContents().get(0);
		private final Assignment cAbstractAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cAbstractAbstractKeyword_1_0 = (Keyword)cAbstractAssignment_1.eContents().get(0);
		private final Keyword cActorKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftSquareBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cTypeAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cTypeActorTypeEnumRuleCall_3_1_0 = (RuleCall)cTypeAssignment_3_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cNameAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_4_0_0 = (RuleCall)cNameAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cAlternatives_4.eContents().get(1);
		private final Assignment cNameAssignment_4_1_0 = (Assignment)cGroup_4_1.eContents().get(0);
		private final RuleCall cNameSTRINGTerminalRuleCall_4_1_0_0 = (RuleCall)cNameAssignment_4_1_0.eContents().get(0);
		private final Keyword cAsKeyword_4_1_1 = (Keyword)cGroup_4_1.eContents().get(1);
		private final Assignment cAliasAssignment_4_1_2 = (Assignment)cGroup_4_1.eContents().get(2);
		private final RuleCall cAliasIDTerminalRuleCall_4_1_2_0 = (RuleCall)cAliasAssignment_4_1_2.eContents().get(0);
		private final Assignment cCommentsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cCommentsCommentParserRuleCall_5_0 = (RuleCall)cCommentsAssignment_5.eContents().get(0);
		
		//Actor:
		//	visibility=Visibility? abstract?='abstract'? 'actor' ('[' type=ActorType ']')? (name=ID | name=STRING 'as' alias=ID)
		//	comments+=Comment?;
		@Override public ParserRule getRule() { return rule; }
		
		//visibility=Visibility? abstract?='abstract'? 'actor' ('[' type=ActorType ']')? (name=ID | name=STRING 'as' alias=ID)
		//comments+=Comment?
		public Group getGroup() { return cGroup; }
		
		//visibility=Visibility?
		public Assignment getVisibilityAssignment_0() { return cVisibilityAssignment_0; }
		
		//Visibility
		public RuleCall getVisibilityVisibilityEnumRuleCall_0_0() { return cVisibilityVisibilityEnumRuleCall_0_0; }
		
		//abstract?='abstract'?
		public Assignment getAbstractAssignment_1() { return cAbstractAssignment_1; }
		
		//'abstract'
		public Keyword getAbstractAbstractKeyword_1_0() { return cAbstractAbstractKeyword_1_0; }
		
		//'actor'
		public Keyword getActorKeyword_2() { return cActorKeyword_2; }
		
		//('[' type=ActorType ']')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_3_0() { return cLeftSquareBracketKeyword_3_0; }
		
		//type=ActorType
		public Assignment getTypeAssignment_3_1() { return cTypeAssignment_3_1; }
		
		//ActorType
		public RuleCall getTypeActorTypeEnumRuleCall_3_1_0() { return cTypeActorTypeEnumRuleCall_3_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3_2() { return cRightSquareBracketKeyword_3_2; }
		
		//name=ID | name=STRING 'as' alias=ID
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//name=ID
		public Assignment getNameAssignment_4_0() { return cNameAssignment_4_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_4_0_0() { return cNameIDTerminalRuleCall_4_0_0; }
		
		//name=STRING 'as' alias=ID
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//name=STRING
		public Assignment getNameAssignment_4_1_0() { return cNameAssignment_4_1_0; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_4_1_0_0() { return cNameSTRINGTerminalRuleCall_4_1_0_0; }
		
		//'as'
		public Keyword getAsKeyword_4_1_1() { return cAsKeyword_4_1_1; }
		
		//alias=ID
		public Assignment getAliasAssignment_4_1_2() { return cAliasAssignment_4_1_2; }
		
		//ID
		public RuleCall getAliasIDTerminalRuleCall_4_1_2_0() { return cAliasIDTerminalRuleCall_4_1_2_0; }
		
		//comments+=Comment?
		public Assignment getCommentsAssignment_5() { return cCommentsAssignment_5; }
		
		//Comment
		public RuleCall getCommentsCommentParserRuleCall_5_0() { return cCommentsCommentParserRuleCall_5_0; }
	}
	public class SystemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.usecase.Usecase.System");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSysKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameFQNParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cCommentsAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cCommentsCommentParserRuleCall_2_0_0 = (RuleCall)cCommentsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cCommentsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cCommentsCommentParserRuleCall_2_1_1_0 = (RuleCall)cCommentsAssignment_2_1_1.eContents().get(0);
		private final Assignment cUsecasesAssignment_2_1_2 = (Assignment)cGroup_2_1.eContents().get(2);
		private final RuleCall cUsecasesUseCaseParserRuleCall_2_1_2_0 = (RuleCall)cUsecasesAssignment_2_1_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_1_3 = (Keyword)cGroup_2_1.eContents().get(3);
		
		//System:
		//	'sys' name=FQN (comments+=Comment? | '{' comments+=Comment? usecases+=UseCase* '}');
		@Override public ParserRule getRule() { return rule; }
		
		//'sys' name=FQN (comments+=Comment? | '{' comments+=Comment? usecases+=UseCase* '}')
		public Group getGroup() { return cGroup; }
		
		//'sys'
		public Keyword getSysKeyword_0() { return cSysKeyword_0; }
		
		//name=FQN
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//FQN
		public RuleCall getNameFQNParserRuleCall_1_0() { return cNameFQNParserRuleCall_1_0; }
		
		//comments+=Comment? | '{' comments+=Comment? usecases+=UseCase* '}'
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//comments+=Comment?
		public Assignment getCommentsAssignment_2_0() { return cCommentsAssignment_2_0; }
		
		//Comment
		public RuleCall getCommentsCommentParserRuleCall_2_0_0() { return cCommentsCommentParserRuleCall_2_0_0; }
		
		//'{' comments+=Comment? usecases+=UseCase* '}'
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_1_0() { return cLeftCurlyBracketKeyword_2_1_0; }
		
		//comments+=Comment?
		public Assignment getCommentsAssignment_2_1_1() { return cCommentsAssignment_2_1_1; }
		
		//Comment
		public RuleCall getCommentsCommentParserRuleCall_2_1_1_0() { return cCommentsCommentParserRuleCall_2_1_1_0; }
		
		//usecases+=UseCase*
		public Assignment getUsecasesAssignment_2_1_2() { return cUsecasesAssignment_2_1_2; }
		
		//UseCase
		public RuleCall getUsecasesUseCaseParserRuleCall_2_1_2_0() { return cUsecasesUseCaseParserRuleCall_2_1_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_1_3() { return cRightCurlyBracketKeyword_2_1_3; }
	}
	public class UseCaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.usecase.Usecase.UseCase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVisibilityAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVisibilityVisibilityEnumRuleCall_0_0 = (RuleCall)cVisibilityAssignment_0.eContents().get(0);
		private final Assignment cAbstractAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cAbstractAbstractKeyword_1_0 = (Keyword)cAbstractAssignment_1.eContents().get(0);
		private final Keyword cUcKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cNameAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_3_0_0 = (RuleCall)cNameAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final Assignment cNameAssignment_3_1_0 = (Assignment)cGroup_3_1.eContents().get(0);
		private final RuleCall cNameSTRINGTerminalRuleCall_3_1_0_0 = (RuleCall)cNameAssignment_3_1_0.eContents().get(0);
		private final Keyword cAsKeyword_3_1_1 = (Keyword)cGroup_3_1.eContents().get(1);
		private final Assignment cAliasAssignment_3_1_2 = (Assignment)cGroup_3_1.eContents().get(2);
		private final RuleCall cAliasIDTerminalRuleCall_3_1_2_0 = (RuleCall)cAliasAssignment_3_1_2.eContents().get(0);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cCommentsAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final RuleCall cCommentsCommentParserRuleCall_4_0_0 = (RuleCall)cCommentsAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cAlternatives_4.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cCommentsAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cCommentsCommentParserRuleCall_4_1_1_0 = (RuleCall)cCommentsAssignment_4_1_1.eContents().get(0);
		private final Assignment cExtensionPointsAssignment_4_1_2 = (Assignment)cGroup_4_1.eContents().get(2);
		private final RuleCall cExtensionPointsExtensionPointParserRuleCall_4_1_2_0 = (RuleCall)cExtensionPointsAssignment_4_1_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_1_3 = (Keyword)cGroup_4_1.eContents().get(3);
		
		//UseCase:
		//	visibility=Visibility? abstract?='abstract'? 'uc' (name=ID | name=STRING 'as' alias=ID) (comments+=Comment? | '{'
		//	comments+=Comment? extensionPoints+=ExtensionPoint* '}');
		@Override public ParserRule getRule() { return rule; }
		
		//visibility=Visibility? abstract?='abstract'? 'uc' (name=ID | name=STRING 'as' alias=ID) (comments+=Comment? | '{'
		//comments+=Comment? extensionPoints+=ExtensionPoint* '}')
		public Group getGroup() { return cGroup; }
		
		//visibility=Visibility?
		public Assignment getVisibilityAssignment_0() { return cVisibilityAssignment_0; }
		
		//Visibility
		public RuleCall getVisibilityVisibilityEnumRuleCall_0_0() { return cVisibilityVisibilityEnumRuleCall_0_0; }
		
		//abstract?='abstract'?
		public Assignment getAbstractAssignment_1() { return cAbstractAssignment_1; }
		
		//'abstract'
		public Keyword getAbstractAbstractKeyword_1_0() { return cAbstractAbstractKeyword_1_0; }
		
		//'uc'
		public Keyword getUcKeyword_2() { return cUcKeyword_2; }
		
		//name=ID | name=STRING 'as' alias=ID
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//name=ID
		public Assignment getNameAssignment_3_0() { return cNameAssignment_3_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0_0() { return cNameIDTerminalRuleCall_3_0_0; }
		
		//name=STRING 'as' alias=ID
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//name=STRING
		public Assignment getNameAssignment_3_1_0() { return cNameAssignment_3_1_0; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_3_1_0_0() { return cNameSTRINGTerminalRuleCall_3_1_0_0; }
		
		//'as'
		public Keyword getAsKeyword_3_1_1() { return cAsKeyword_3_1_1; }
		
		//alias=ID
		public Assignment getAliasAssignment_3_1_2() { return cAliasAssignment_3_1_2; }
		
		//ID
		public RuleCall getAliasIDTerminalRuleCall_3_1_2_0() { return cAliasIDTerminalRuleCall_3_1_2_0; }
		
		//comments+=Comment? | '{' comments+=Comment? extensionPoints+=ExtensionPoint* '}'
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//comments+=Comment?
		public Assignment getCommentsAssignment_4_0() { return cCommentsAssignment_4_0; }
		
		//Comment
		public RuleCall getCommentsCommentParserRuleCall_4_0_0() { return cCommentsCommentParserRuleCall_4_0_0; }
		
		//'{' comments+=Comment? extensionPoints+=ExtensionPoint* '}'
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4_1_0() { return cLeftCurlyBracketKeyword_4_1_0; }
		
		//comments+=Comment?
		public Assignment getCommentsAssignment_4_1_1() { return cCommentsAssignment_4_1_1; }
		
		//Comment
		public RuleCall getCommentsCommentParserRuleCall_4_1_1_0() { return cCommentsCommentParserRuleCall_4_1_1_0; }
		
		//extensionPoints+=ExtensionPoint*
		public Assignment getExtensionPointsAssignment_4_1_2() { return cExtensionPointsAssignment_4_1_2; }
		
		//ExtensionPoint
		public RuleCall getExtensionPointsExtensionPointParserRuleCall_4_1_2_0() { return cExtensionPointsExtensionPointParserRuleCall_4_1_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4_1_3() { return cRightCurlyBracketKeyword_4_1_3; }
	}
	public class ExtensionPointElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.usecase.Usecase.ExtensionPoint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEpKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_1_0_0 = (RuleCall)cNameAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Assignment cNameAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_1_0_0 = (RuleCall)cNameAssignment_1_1_0.eContents().get(0);
		private final Keyword cAsKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cAliasAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cAliasIDTerminalRuleCall_1_1_2_0 = (RuleCall)cAliasAssignment_1_1_2.eContents().get(0);
		
		//ExtensionPoint:
		//	'ep' (name=ID | name=STRING 'as' alias=ID);
		@Override public ParserRule getRule() { return rule; }
		
		//'ep' (name=ID | name=STRING 'as' alias=ID)
		public Group getGroup() { return cGroup; }
		
		//'ep'
		public Keyword getEpKeyword_0() { return cEpKeyword_0; }
		
		//name=ID | name=STRING 'as' alias=ID
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//name=ID
		public Assignment getNameAssignment_1_0() { return cNameAssignment_1_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0_0() { return cNameIDTerminalRuleCall_1_0_0; }
		
		//name=STRING 'as' alias=ID
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//name=STRING
		public Assignment getNameAssignment_1_1_0() { return cNameAssignment_1_1_0; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_1_0_0() { return cNameSTRINGTerminalRuleCall_1_1_0_0; }
		
		//'as'
		public Keyword getAsKeyword_1_1_1() { return cAsKeyword_1_1_1; }
		
		//alias=ID
		public Assignment getAliasAssignment_1_1_2() { return cAliasAssignment_1_1_2; }
		
		//ID
		public RuleCall getAliasIDTerminalRuleCall_1_1_2_0() { return cAliasIDTerminalRuleCall_1_1_2_0; }
	}
	public class RelationshipElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.usecase.Usecase.Relationship");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAssociationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cGeneralizationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cIncludeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cExtendParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Relationship:
		//	Association | Generalization | Include | Extend;
		@Override public ParserRule getRule() { return rule; }
		
		//Association | Generalization | Include | Extend
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Association
		public RuleCall getAssociationParserRuleCall_0() { return cAssociationParserRuleCall_0; }
		
		//Generalization
		public RuleCall getGeneralizationParserRuleCall_1() { return cGeneralizationParserRuleCall_1; }
		
		//Include
		public RuleCall getIncludeParserRuleCall_2() { return cIncludeParserRuleCall_2; }
		
		//Extend
		public RuleCall getExtendParserRuleCall_3() { return cExtendParserRuleCall_3; }
	}
	public class AssociationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.usecase.Usecase.Association");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIacKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cActorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cActorActorCrossReference_2_0 = (CrossReference)cActorAssignment_2.eContents().get(0);
		private final RuleCall cActorActorFQNParserRuleCall_2_0_1 = (RuleCall)cActorActorCrossReference_2_0.eContents().get(1);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cUsecaseAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cUsecaseUseCaseCrossReference_4_0 = (CrossReference)cUsecaseAssignment_4.eContents().get(0);
		private final RuleCall cUsecaseUseCaseFQNParserRuleCall_4_0_1 = (RuleCall)cUsecaseUseCaseCrossReference_4_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cCardKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cActorCardinalityAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cActorCardinalityCardinalityParserRuleCall_6_2_0 = (RuleCall)cActorCardinalityAssignment_6_2.eContents().get(0);
		private final Group cGroup_6_3 = (Group)cGroup_6.eContents().get(3);
		private final Keyword cVerticalLineKeyword_6_3_0 = (Keyword)cGroup_6_3.eContents().get(0);
		private final Assignment cUseCaseCardinalityAssignment_6_3_1 = (Assignment)cGroup_6_3.eContents().get(1);
		private final RuleCall cUseCaseCardinalityCardinalityParserRuleCall_6_3_1_0 = (RuleCall)cUseCaseCardinalityAssignment_6_3_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_6_4 = (Keyword)cGroup_6.eContents().get(4);
		
		//Association:
		//	'iac' '(' actor=[Actor|FQN] ',' usecase=[UseCase|FQN] ')' ('card' '[' actorCardinality=Cardinality ('|'
		//	useCaseCardinality=Cardinality)? ']')?;
		@Override public ParserRule getRule() { return rule; }
		
		//'iac' '(' actor=[Actor|FQN] ',' usecase=[UseCase|FQN] ')' ('card' '[' actorCardinality=Cardinality ('|'
		//useCaseCardinality=Cardinality)? ']')?
		public Group getGroup() { return cGroup; }
		
		//'iac'
		public Keyword getIacKeyword_0() { return cIacKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//actor=[Actor|FQN]
		public Assignment getActorAssignment_2() { return cActorAssignment_2; }
		
		//[Actor|FQN]
		public CrossReference getActorActorCrossReference_2_0() { return cActorActorCrossReference_2_0; }
		
		//FQN
		public RuleCall getActorActorFQNParserRuleCall_2_0_1() { return cActorActorFQNParserRuleCall_2_0_1; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//usecase=[UseCase|FQN]
		public Assignment getUsecaseAssignment_4() { return cUsecaseAssignment_4; }
		
		//[UseCase|FQN]
		public CrossReference getUsecaseUseCaseCrossReference_4_0() { return cUsecaseUseCaseCrossReference_4_0; }
		
		//FQN
		public RuleCall getUsecaseUseCaseFQNParserRuleCall_4_0_1() { return cUsecaseUseCaseFQNParserRuleCall_4_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//('card' '[' actorCardinality=Cardinality ('|' useCaseCardinality=Cardinality)? ']')?
		public Group getGroup_6() { return cGroup_6; }
		
		//'card'
		public Keyword getCardKeyword_6_0() { return cCardKeyword_6_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_6_1() { return cLeftSquareBracketKeyword_6_1; }
		
		//actorCardinality=Cardinality
		public Assignment getActorCardinalityAssignment_6_2() { return cActorCardinalityAssignment_6_2; }
		
		//Cardinality
		public RuleCall getActorCardinalityCardinalityParserRuleCall_6_2_0() { return cActorCardinalityCardinalityParserRuleCall_6_2_0; }
		
		//('|' useCaseCardinality=Cardinality)?
		public Group getGroup_6_3() { return cGroup_6_3; }
		
		//'|'
		public Keyword getVerticalLineKeyword_6_3_0() { return cVerticalLineKeyword_6_3_0; }
		
		//useCaseCardinality=Cardinality
		public Assignment getUseCaseCardinalityAssignment_6_3_1() { return cUseCaseCardinalityAssignment_6_3_1; }
		
		//Cardinality
		public RuleCall getUseCaseCardinalityCardinalityParserRuleCall_6_3_1_0() { return cUseCaseCardinalityCardinalityParserRuleCall_6_3_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_6_4() { return cRightSquareBracketKeyword_6_4; }
	}
	public class GeneralizationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.usecase.Usecase.Generalization");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIsaKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSpecificAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cSpecificBehavioredClassifierCrossReference_2_0 = (CrossReference)cSpecificAssignment_2.eContents().get(0);
		private final RuleCall cSpecificBehavioredClassifierFQNParserRuleCall_2_0_1 = (RuleCall)cSpecificBehavioredClassifierCrossReference_2_0.eContents().get(1);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cGeneralAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cGeneralBehavioredClassifierCrossReference_4_0 = (CrossReference)cGeneralAssignment_4.eContents().get(0);
		private final RuleCall cGeneralBehavioredClassifierFQNParserRuleCall_4_0_1 = (RuleCall)cGeneralBehavioredClassifierCrossReference_4_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Generalization:
		//	'isa' '(' specific=[BehavioredClassifier|FQN] ',' general=[BehavioredClassifier|FQN] ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'isa' '(' specific=[BehavioredClassifier|FQN] ',' general=[BehavioredClassifier|FQN] ')'
		public Group getGroup() { return cGroup; }
		
		//'isa'
		public Keyword getIsaKeyword_0() { return cIsaKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//specific=[BehavioredClassifier|FQN]
		public Assignment getSpecificAssignment_2() { return cSpecificAssignment_2; }
		
		//[BehavioredClassifier|FQN]
		public CrossReference getSpecificBehavioredClassifierCrossReference_2_0() { return cSpecificBehavioredClassifierCrossReference_2_0; }
		
		//FQN
		public RuleCall getSpecificBehavioredClassifierFQNParserRuleCall_2_0_1() { return cSpecificBehavioredClassifierFQNParserRuleCall_2_0_1; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//general=[BehavioredClassifier|FQN]
		public Assignment getGeneralAssignment_4() { return cGeneralAssignment_4; }
		
		//[BehavioredClassifier|FQN]
		public CrossReference getGeneralBehavioredClassifierCrossReference_4_0() { return cGeneralBehavioredClassifierCrossReference_4_0; }
		
		//FQN
		public RuleCall getGeneralBehavioredClassifierFQNParserRuleCall_4_0_1() { return cGeneralBehavioredClassifierFQNParserRuleCall_4_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class IncludeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.usecase.Usecase.Include");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIncKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIncludingCaseAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cIncludingCaseUseCaseCrossReference_2_0 = (CrossReference)cIncludingCaseAssignment_2.eContents().get(0);
		private final RuleCall cIncludingCaseUseCaseFQNParserRuleCall_2_0_1 = (RuleCall)cIncludingCaseUseCaseCrossReference_2_0.eContents().get(1);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cAdditionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cAdditionUseCaseCrossReference_4_0 = (CrossReference)cAdditionAssignment_4.eContents().get(0);
		private final RuleCall cAdditionUseCaseFQNParserRuleCall_4_0_1 = (RuleCall)cAdditionUseCaseCrossReference_4_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Include:
		//	'inc' '(' includingCase=[UseCase|FQN] ',' addition=[UseCase|FQN] ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'inc' '(' includingCase=[UseCase|FQN] ',' addition=[UseCase|FQN] ')'
		public Group getGroup() { return cGroup; }
		
		//'inc'
		public Keyword getIncKeyword_0() { return cIncKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//includingCase=[UseCase|FQN]
		public Assignment getIncludingCaseAssignment_2() { return cIncludingCaseAssignment_2; }
		
		//[UseCase|FQN]
		public CrossReference getIncludingCaseUseCaseCrossReference_2_0() { return cIncludingCaseUseCaseCrossReference_2_0; }
		
		//FQN
		public RuleCall getIncludingCaseUseCaseFQNParserRuleCall_2_0_1() { return cIncludingCaseUseCaseFQNParserRuleCall_2_0_1; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//addition=[UseCase|FQN]
		public Assignment getAdditionAssignment_4() { return cAdditionAssignment_4; }
		
		//[UseCase|FQN]
		public CrossReference getAdditionUseCaseCrossReference_4_0() { return cAdditionUseCaseCrossReference_4_0; }
		
		//FQN
		public RuleCall getAdditionUseCaseFQNParserRuleCall_4_0_1() { return cAdditionUseCaseFQNParserRuleCall_4_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class ExtendElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.usecase.Usecase.Extend");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExtKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExtensionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cExtensionUseCaseCrossReference_2_0 = (CrossReference)cExtensionAssignment_2.eContents().get(0);
		private final RuleCall cExtensionUseCaseFQNParserRuleCall_2_0_1 = (RuleCall)cExtensionUseCaseCrossReference_2_0.eContents().get(1);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cExtendedCaseAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cExtendedCaseUseCaseCrossReference_4_0 = (CrossReference)cExtendedCaseAssignment_4.eContents().get(0);
		private final RuleCall cExtendedCaseUseCaseFQNParserRuleCall_4_0_1 = (RuleCall)cExtendedCaseUseCaseCrossReference_4_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cEpKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cLeftSquareBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cExtensionLocationAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final CrossReference cExtensionLocationExtensionPointCrossReference_8_0 = (CrossReference)cExtensionLocationAssignment_8.eContents().get(0);
		private final RuleCall cExtensionLocationExtensionPointIDTerminalRuleCall_8_0_1 = (RuleCall)cExtensionLocationExtensionPointCrossReference_8_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Keyword cCondKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_10_1 = (Keyword)cGroup_10.eContents().get(1);
		private final Assignment cConditionAssignment_10_2 = (Assignment)cGroup_10.eContents().get(2);
		private final RuleCall cConditionSTRINGTerminalRuleCall_10_2_0 = (RuleCall)cConditionAssignment_10_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_10_3 = (Keyword)cGroup_10.eContents().get(3);
		
		//Extend:
		//	'ext' '(' extension=[UseCase|FQN] ',' extendedCase=[UseCase|FQN] ')' 'ep' '[' extensionLocation=[ExtensionPoint] ']'
		//	('cond' '[' condition=STRING ']')?;
		@Override public ParserRule getRule() { return rule; }
		
		//'ext' '(' extension=[UseCase|FQN] ',' extendedCase=[UseCase|FQN] ')' 'ep' '[' extensionLocation=[ExtensionPoint] ']'
		//('cond' '[' condition=STRING ']')?
		public Group getGroup() { return cGroup; }
		
		//'ext'
		public Keyword getExtKeyword_0() { return cExtKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//extension=[UseCase|FQN]
		public Assignment getExtensionAssignment_2() { return cExtensionAssignment_2; }
		
		//[UseCase|FQN]
		public CrossReference getExtensionUseCaseCrossReference_2_0() { return cExtensionUseCaseCrossReference_2_0; }
		
		//FQN
		public RuleCall getExtensionUseCaseFQNParserRuleCall_2_0_1() { return cExtensionUseCaseFQNParserRuleCall_2_0_1; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//extendedCase=[UseCase|FQN]
		public Assignment getExtendedCaseAssignment_4() { return cExtendedCaseAssignment_4; }
		
		//[UseCase|FQN]
		public CrossReference getExtendedCaseUseCaseCrossReference_4_0() { return cExtendedCaseUseCaseCrossReference_4_0; }
		
		//FQN
		public RuleCall getExtendedCaseUseCaseFQNParserRuleCall_4_0_1() { return cExtendedCaseUseCaseFQNParserRuleCall_4_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//'ep'
		public Keyword getEpKeyword_6() { return cEpKeyword_6; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_7() { return cLeftSquareBracketKeyword_7; }
		
		//extensionLocation=[ExtensionPoint]
		public Assignment getExtensionLocationAssignment_8() { return cExtensionLocationAssignment_8; }
		
		//[ExtensionPoint]
		public CrossReference getExtensionLocationExtensionPointCrossReference_8_0() { return cExtensionLocationExtensionPointCrossReference_8_0; }
		
		//ID
		public RuleCall getExtensionLocationExtensionPointIDTerminalRuleCall_8_0_1() { return cExtensionLocationExtensionPointIDTerminalRuleCall_8_0_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_9() { return cRightSquareBracketKeyword_9; }
		
		//('cond' '[' condition=STRING ']')?
		public Group getGroup_10() { return cGroup_10; }
		
		//'cond'
		public Keyword getCondKeyword_10_0() { return cCondKeyword_10_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_10_1() { return cLeftSquareBracketKeyword_10_1; }
		
		//condition=STRING
		public Assignment getConditionAssignment_10_2() { return cConditionAssignment_10_2; }
		
		//STRING
		public RuleCall getConditionSTRINGTerminalRuleCall_10_2_0() { return cConditionSTRINGTerminalRuleCall_10_2_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_10_3() { return cRightSquareBracketKeyword_10_3; }
	}
	public class CommentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.usecase.Usecase.Comment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNoteKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cBodyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBodyCommentBodyParserRuleCall_2_0 = (RuleCall)cBodyAssignment_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Comment commons::Comment:
		//	'note' '[' body=CommentBody ']';
		@Override public ParserRule getRule() { return rule; }
		
		//'note' '[' body=CommentBody ']'
		public Group getGroup() { return cGroup; }
		
		//'note'
		public Keyword getNoteKeyword_0() { return cNoteKeyword_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//body=CommentBody
		public Assignment getBodyAssignment_2() { return cBodyAssignment_2; }
		
		//CommentBody
		public RuleCall getBodyCommentBodyParserRuleCall_2_0() { return cBodyCommentBodyParserRuleCall_2_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}
	public class CommentBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.usecase.Usecase.CommentBody");
		private final RuleCall cSTRINGTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//CommentBody:
		//	STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall() { return cSTRINGTerminalRuleCall; }
	}
	public class CardinalityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.usecase.Usecase.Cardinality");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLowerBoundAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLowerBoundCardinalityBoundParserRuleCall_0_0 = (RuleCall)cLowerBoundAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cUpperBoundAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cUpperBoundCardinalityBoundParserRuleCall_1_1_0 = (RuleCall)cUpperBoundAssignment_1_1.eContents().get(0);
		
		//Cardinality commons::Cardinality:
		//	lowerBound=CardinalityBound ('..' upperBound=CardinalityBound)?;
		@Override public ParserRule getRule() { return rule; }
		
		//lowerBound=CardinalityBound ('..' upperBound=CardinalityBound)?
		public Group getGroup() { return cGroup; }
		
		//lowerBound=CardinalityBound
		public Assignment getLowerBoundAssignment_0() { return cLowerBoundAssignment_0; }
		
		//CardinalityBound
		public RuleCall getLowerBoundCardinalityBoundParserRuleCall_0_0() { return cLowerBoundCardinalityBoundParserRuleCall_0_0; }
		
		//('..' upperBound=CardinalityBound)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'..'
		public Keyword getFullStopFullStopKeyword_1_0() { return cFullStopFullStopKeyword_1_0; }
		
		//upperBound=CardinalityBound
		public Assignment getUpperBoundAssignment_1_1() { return cUpperBoundAssignment_1_1; }
		
		//CardinalityBound
		public RuleCall getUpperBoundCardinalityBoundParserRuleCall_1_1_0() { return cUpperBoundCardinalityBoundParserRuleCall_1_1_0; }
	}
	public class CardinalityBoundElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.usecase.Usecase.CardinalityBound");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAsteriskKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//CardinalityBound ecore::EInt:
		//	'*' | INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'*' | INT
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'*'
		public Keyword getAsteriskKeyword_0() { return cAsteriskKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	public class FQNElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.usecase.Usecase.FQN");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//FQN:
		//	ID ('.' ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	
	public class VisibilityElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.usecase.Usecase.Visibility");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPublicEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPublicPlusSignKeyword_0_0 = (Keyword)cPublicEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cPublicEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cPublicPublicKeyword_1_0 = (Keyword)cPublicEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cPrivateEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cPrivateHyphenMinusKeyword_2_0 = (Keyword)cPrivateEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cPrivateEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cPrivatePrivateKeyword_3_0 = (Keyword)cPrivateEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cProtectedEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cProtectedNumberSignKeyword_4_0 = (Keyword)cProtectedEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cProtectedEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cProtectedProtectedKeyword_5_0 = (Keyword)cProtectedEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cPackageEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cPackageTildeKeyword_6_0 = (Keyword)cPackageEnumLiteralDeclaration_6.eContents().get(0);
		
		//enum Visibility returns uml::VisibilityKind:
		//	public='+'
		//	| public | private='-'
		//	| private | protected='#'
		//	| protected | package='~';
		public EnumRule getRule() { return rule; }
		
		//public='+' | public | private='-' | private | protected='#' | protected | package='~'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//public='+'
		public EnumLiteralDeclaration getPublicEnumLiteralDeclaration_0() { return cPublicEnumLiteralDeclaration_0; }
		
		//'+'
		public Keyword getPublicPlusSignKeyword_0_0() { return cPublicPlusSignKeyword_0_0; }
		
		//public
		public EnumLiteralDeclaration getPublicEnumLiteralDeclaration_1() { return cPublicEnumLiteralDeclaration_1; }
		
		//'public'
		public Keyword getPublicPublicKeyword_1_0() { return cPublicPublicKeyword_1_0; }
		
		//private='-'
		public EnumLiteralDeclaration getPrivateEnumLiteralDeclaration_2() { return cPrivateEnumLiteralDeclaration_2; }
		
		//'-'
		public Keyword getPrivateHyphenMinusKeyword_2_0() { return cPrivateHyphenMinusKeyword_2_0; }
		
		//private
		public EnumLiteralDeclaration getPrivateEnumLiteralDeclaration_3() { return cPrivateEnumLiteralDeclaration_3; }
		
		//'private'
		public Keyword getPrivatePrivateKeyword_3_0() { return cPrivatePrivateKeyword_3_0; }
		
		//protected='#'
		public EnumLiteralDeclaration getProtectedEnumLiteralDeclaration_4() { return cProtectedEnumLiteralDeclaration_4; }
		
		//'#'
		public Keyword getProtectedNumberSignKeyword_4_0() { return cProtectedNumberSignKeyword_4_0; }
		
		//protected
		public EnumLiteralDeclaration getProtectedEnumLiteralDeclaration_5() { return cProtectedEnumLiteralDeclaration_5; }
		
		//'protected'
		public Keyword getProtectedProtectedKeyword_5_0() { return cProtectedProtectedKeyword_5_0; }
		
		//package='~'
		public EnumLiteralDeclaration getPackageEnumLiteralDeclaration_6() { return cPackageEnumLiteralDeclaration_6; }
		
		//'~'
		public Keyword getPackageTildeKeyword_6_0() { return cPackageTildeKeyword_6_0; }
	}
	public class ActorTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.usecase.Usecase.ActorType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cHUMANEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cHUMANHumanKeyword_0_0 = (Keyword)cHUMANEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMACHINEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMACHINEMachineKeyword_1_0 = (Keyword)cMACHINEEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum ActorType:
		//	HUMAN='human'
		//	| MACHINE='machine';
		public EnumRule getRule() { return rule; }
		
		//HUMAN='human' | MACHINE='machine'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//HUMAN='human'
		public EnumLiteralDeclaration getHUMANEnumLiteralDeclaration_0() { return cHUMANEnumLiteralDeclaration_0; }
		
		//'human'
		public Keyword getHUMANHumanKeyword_0_0() { return cHUMANHumanKeyword_0_0; }
		
		//MACHINE='machine'
		public EnumLiteralDeclaration getMACHINEEnumLiteralDeclaration_1() { return cMACHINEEnumLiteralDeclaration_1; }
		
		//'machine'
		public Keyword getMACHINEMachineKeyword_1_0() { return cMACHINEMachineKeyword_1_0; }
	}
	
	private final UseCaseDiagramElements pUseCaseDiagram;
	private final RootPackageElements pRootPackage;
	private final ActorElements pActor;
	private final SystemElements pSystem;
	private final UseCaseElements pUseCase;
	private final ExtensionPointElements pExtensionPoint;
	private final RelationshipElements pRelationship;
	private final AssociationElements pAssociation;
	private final GeneralizationElements pGeneralization;
	private final IncludeElements pInclude;
	private final ExtendElements pExtend;
	private final CommentElements pComment;
	private final CommentBodyElements pCommentBody;
	private final CardinalityElements pCardinality;
	private final CardinalityBoundElements pCardinalityBound;
	private final FQNElements pFQN;
	private final VisibilityElements eVisibility;
	private final ActorTypeElements eActorType;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public UsecaseGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pUseCaseDiagram = new UseCaseDiagramElements();
		this.pRootPackage = new RootPackageElements();
		this.pActor = new ActorElements();
		this.pSystem = new SystemElements();
		this.pUseCase = new UseCaseElements();
		this.pExtensionPoint = new ExtensionPointElements();
		this.pRelationship = new RelationshipElements();
		this.pAssociation = new AssociationElements();
		this.pGeneralization = new GeneralizationElements();
		this.pInclude = new IncludeElements();
		this.pExtend = new ExtendElements();
		this.pComment = new CommentElements();
		this.pCommentBody = new CommentBodyElements();
		this.pCardinality = new CardinalityElements();
		this.pCardinalityBound = new CardinalityBoundElements();
		this.pFQN = new FQNElements();
		this.eVisibility = new VisibilityElements();
		this.eActorType = new ActorTypeElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.cooperateproject.modeling.textual.usecase.Usecase".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//UseCaseDiagram:
	//	{UseCaseDiagram}
	//	'@start-ucd'
	//	title=STRING rootPackage=RootPackage
	//	'@end-ucd';
	public UseCaseDiagramElements getUseCaseDiagramAccess() {
		return pUseCaseDiagram;
	}
	
	public ParserRule getUseCaseDiagramRule() {
		return getUseCaseDiagramAccess().getRule();
	}
	
	//RootPackage:
	//	'rootElement' name=FQN
	//	actors+=Actor*
	//	systems+=System*
	//	relationships+=Relationship*;
	public RootPackageElements getRootPackageAccess() {
		return pRootPackage;
	}
	
	public ParserRule getRootPackageRule() {
		return getRootPackageAccess().getRule();
	}
	
	//Actor:
	//	visibility=Visibility? abstract?='abstract'? 'actor' ('[' type=ActorType ']')? (name=ID | name=STRING 'as' alias=ID)
	//	comments+=Comment?;
	public ActorElements getActorAccess() {
		return pActor;
	}
	
	public ParserRule getActorRule() {
		return getActorAccess().getRule();
	}
	
	//System:
	//	'sys' name=FQN (comments+=Comment? | '{' comments+=Comment? usecases+=UseCase* '}');
	public SystemElements getSystemAccess() {
		return pSystem;
	}
	
	public ParserRule getSystemRule() {
		return getSystemAccess().getRule();
	}
	
	//UseCase:
	//	visibility=Visibility? abstract?='abstract'? 'uc' (name=ID | name=STRING 'as' alias=ID) (comments+=Comment? | '{'
	//	comments+=Comment? extensionPoints+=ExtensionPoint* '}');
	public UseCaseElements getUseCaseAccess() {
		return pUseCase;
	}
	
	public ParserRule getUseCaseRule() {
		return getUseCaseAccess().getRule();
	}
	
	//ExtensionPoint:
	//	'ep' (name=ID | name=STRING 'as' alias=ID);
	public ExtensionPointElements getExtensionPointAccess() {
		return pExtensionPoint;
	}
	
	public ParserRule getExtensionPointRule() {
		return getExtensionPointAccess().getRule();
	}
	
	//Relationship:
	//	Association | Generalization | Include | Extend;
	public RelationshipElements getRelationshipAccess() {
		return pRelationship;
	}
	
	public ParserRule getRelationshipRule() {
		return getRelationshipAccess().getRule();
	}
	
	//Association:
	//	'iac' '(' actor=[Actor|FQN] ',' usecase=[UseCase|FQN] ')' ('card' '[' actorCardinality=Cardinality ('|'
	//	useCaseCardinality=Cardinality)? ']')?;
	public AssociationElements getAssociationAccess() {
		return pAssociation;
	}
	
	public ParserRule getAssociationRule() {
		return getAssociationAccess().getRule();
	}
	
	//Generalization:
	//	'isa' '(' specific=[BehavioredClassifier|FQN] ',' general=[BehavioredClassifier|FQN] ')';
	public GeneralizationElements getGeneralizationAccess() {
		return pGeneralization;
	}
	
	public ParserRule getGeneralizationRule() {
		return getGeneralizationAccess().getRule();
	}
	
	//Include:
	//	'inc' '(' includingCase=[UseCase|FQN] ',' addition=[UseCase|FQN] ')';
	public IncludeElements getIncludeAccess() {
		return pInclude;
	}
	
	public ParserRule getIncludeRule() {
		return getIncludeAccess().getRule();
	}
	
	//Extend:
	//	'ext' '(' extension=[UseCase|FQN] ',' extendedCase=[UseCase|FQN] ')' 'ep' '[' extensionLocation=[ExtensionPoint] ']'
	//	('cond' '[' condition=STRING ']')?;
	public ExtendElements getExtendAccess() {
		return pExtend;
	}
	
	public ParserRule getExtendRule() {
		return getExtendAccess().getRule();
	}
	
	//Comment commons::Comment:
	//	'note' '[' body=CommentBody ']';
	public CommentElements getCommentAccess() {
		return pComment;
	}
	
	public ParserRule getCommentRule() {
		return getCommentAccess().getRule();
	}
	
	//CommentBody:
	//	STRING;
	public CommentBodyElements getCommentBodyAccess() {
		return pCommentBody;
	}
	
	public ParserRule getCommentBodyRule() {
		return getCommentBodyAccess().getRule();
	}
	
	//Cardinality commons::Cardinality:
	//	lowerBound=CardinalityBound ('..' upperBound=CardinalityBound)?;
	public CardinalityElements getCardinalityAccess() {
		return pCardinality;
	}
	
	public ParserRule getCardinalityRule() {
		return getCardinalityAccess().getRule();
	}
	
	//CardinalityBound ecore::EInt:
	//	'*' | INT;
	public CardinalityBoundElements getCardinalityBoundAccess() {
		return pCardinalityBound;
	}
	
	public ParserRule getCardinalityBoundRule() {
		return getCardinalityBoundAccess().getRule();
	}
	
	//FQN:
	//	ID ('.' ID)*;
	public FQNElements getFQNAccess() {
		return pFQN;
	}
	
	public ParserRule getFQNRule() {
		return getFQNAccess().getRule();
	}
	
	//enum Visibility returns uml::VisibilityKind:
	//	public='+'
	//	| public | private='-'
	//	| private | protected='#'
	//	| protected | package='~';
	public VisibilityElements getVisibilityAccess() {
		return eVisibility;
	}
	
	public EnumRule getVisibilityRule() {
		return getVisibilityAccess().getRule();
	}
	
	//enum ActorType:
	//	HUMAN='human'
	//	| MACHINE='machine';
	public ActorTypeElements getActorTypeAccess() {
		return eActorType;
	}
	
	public EnumRule getActorTypeRule() {
		return getActorTypeAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
