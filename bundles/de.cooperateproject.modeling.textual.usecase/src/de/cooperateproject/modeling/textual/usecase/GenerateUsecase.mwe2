module de.cooperateproject.modeling.textual.usecase.GenerateUsecase

import org.eclipse.xtext.xtext.generator.*
import org.eclipse.xtext.xtext.generator.model.project.*
import de.cooperateproject.modeling.textual.xtext.generator.*
import net.winklerweb.cdoxtext.generator.*

var rootPath = ".."
var basename = "de.cooperateproject.modeling.textual.usecase"

Workflow {

//	bean = org.eclipse.emf.mwe.utils.StandaloneSetup {
//		projectMapping = {
//			projectName = "${basename}.metamodel"
//			path = "${basename}.metamodel"
//		}
//
//	}
    
	component = XtextGenerator {
		configuration = {
			project = StandardProjectConfig {
				baseName = "${basename}"
				rootPath = rootPath
				runtimeTest = {
					enabled = true
					root = "../../tests/${basename}.tests"
				}
				eclipsePlugin = {
					enabled = true
				}
				eclipsePluginTest = {
					enabled = true
					root = "../../tests/${basename}.ui.tests"
				}
				createEclipseMetaData = true
			}
			code = {
				encoding = "UTF-8"
				fileHeader = "/*\n * generated by Xtext \${version}\n */"
			}
		}
		
		language = StandardLanguage {
			name = "${basename}.Usecase"
			fileExtensions = "uc"
			
			referencedResource = "platform:/resource/${basename}.metamodel/model/usecase.genmodel"
			
			fragment = ecore2xtext.Ecore2XtextValueConverterServiceFragment2 auto-inject {}

			fragment = org.eclipse.xtext.generator.adapter.FragmentAdapter {
				fragment = org.eclipse.xtext.generator.ecore2xtext.FormatterFragment {}
			}
			
			fragment = scoping.ImportNamespacesScopingFragment2 auto-inject {}
			fragment = exporting.QualifiedNamesFragment2 auto-inject {}

			serializer = {
				generateStub = false
			}
			validator = {
				// composedCheck = "org.eclipse.xtext.validation.NamesAreUniqueValidator"
			}
			
			fragment = AddCDOXtextBindingsFragment2 auto-inject {}
			fragment = resources.CooperateResourceHandlingBindingsFragment2 auto-inject {}
			fragment = naming.CooperateNamingBindingsFragment2 auto-inject {}
		}
	}
}
