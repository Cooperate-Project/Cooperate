/*
 * generated by Xtext 2.10.0
 */
package de.cooperateproject.modeling.textual.usecase.scoping

import com.google.common.collect.Iterables
import de.cooperateproject.modeling.textual.usecase.usecase.Extend
import de.cooperateproject.modeling.textual.usecase.usecase.ExtensionPoint
import de.cooperateproject.modeling.textual.usecase.usecase.UseCase
import de.cooperateproject.modeling.textual.usecase.usecase.UsecasePackage
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import org.eclipse.xtext.naming.QualifiedName
import org.eclipse.xtext.resource.IEObjectDescription
import org.eclipse.xtext.resource.impl.AliasedEObjectDescription
import org.eclipse.xtext.scoping.IScope
import org.eclipse.xtext.scoping.impl.SimpleScope

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class UsecaseScopeProvider extends AbstractUsecaseScopeProvider {

	override IScope getScope(EObject context, EReference reference) {
		val defaultScope = super.getScope(context, reference)
		val newScope = doGetScope(context, reference, defaultScope)
		return newScope ?: defaultScope
	}

	def dispatch doGetScope(Extend extend, EReference reference, IScope parentScope) {
		if (reference == UsecasePackage.Literals.EXTEND__EXTENSION_POINT) {
			val supplier = extend.eGet(UsecasePackage.Literals.EXTEND__SUPPLIER, false) as UseCase
			if (supplier == null) {
				return null
			}
			val descriptions = parentScope.allElements.filter[EObjectOrProxy instanceof ExtensionPoint].filter[(EObjectOrProxy as ExtensionPoint).useCase == supplier];
			val unqualifiedDescriptions = descriptions.unqualified
			return new SimpleScope(parentScope, Iterables.concat(descriptions, unqualifiedDescriptions));
		}
	}
	
	def dispatch doGetScope(EObject obj, EReference reference, IScope parentScope) {
		return null
	}
	
	private static def unqualified(Iterable<IEObjectDescription> descriptions) {
		descriptions.map[unqualified]
	}
	
	private static def IEObjectDescription unqualified(IEObjectDescription description) {
		return new AliasedEObjectDescription(QualifiedName.create(description.name.lastSegment), description)
	}
	
}
