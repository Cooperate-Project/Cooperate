// automatically generated by Xtext
grammar de.cooperateproject.modeling.textual.usecase.Usecase with org.eclipse.xtext.common.Terminals

import "http://www.cooperateproject.de/modeling/textual/usecase/Usecase"
import "platform:/resource/de.cooperateproject.modeling.textual.common.metamodel/model/textualCommons.ecore" as commons
import "platform:/plugin/org.eclipse.uml2.uml/model/UML.ecore" as uml
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

UseCaseDiagram:
	{UseCaseDiagram}
	'@start-uscd' title = STRING
	rootPackage=RootPackage
	'@end-uscd'
;

RootPackage:
	{RootPackage}
	('rootPackage' name = FQN)?
	actors += Actor*
	systems += System*
	relationships += Relationship*
;

Actor:
	visibility=Visibility? (abstract?='abstract')? 'act' (name = ID | alias = ID 'as' name = STRING) ('role' '['type=ActorType']')? comments+=Comment? 
;

System:
	'sys' name = FQN 
		((comments+=Comment?) |
		('{' comments+=Comment? usecases += UseCase* '}'))
;

UseCase:
	visibility=Visibility? abstract?='abstract'? 'uc' (name = ID | alias = ID 'as' name = STRING) (
		comments+=Comment? |  
		('{' comments+=Comment? extensionPoints += ExtensionPoint* '}')
	)
;

ExtensionPoint:
	'ep' (name = ID | alias = ID 'as' name = STRING)
;

Relationship:
	Association | Generalization | Include | Extend 
;

Association:
	'iac' '('actor = [Actor|FQN] ',' usecase = [UseCase|FQN] ')' ('card''[' actorCardinality=Cardinality (':' useCaseCardinality=Cardinality)? ']')?
;

Generalization:
	'isa''('specific = [BehavioredClassifier|FQN]',' general = [BehavioredClassifier|FQN]')'
;

Include:
	'inc''('includingCase = [UseCase|FQN]','addition = [UseCase|FQN]')'
;

Extend:
	'ext''('extension = [UseCase|FQN]',' extendedCase = [UseCase|FQN]')' 'ep''[' extensionLocation = [ExtensionPoint]']' ('cond''['condition=STRING']')?
;

Comment returns commons::Comment:
	'note' body = CommentBody
;

CommentBody returns ecore::EString:
	STRING
;

Cardinality returns commons::Cardinality: 
	lowerBound=CardinalityBound ('..' upperBound=CardinalityBound)?
;

CardinalityBound returns ecore::EInt:
	('*') | INT
;

FQN:
	ID ('.' ID)*
;

enum Visibility returns uml::VisibilityKind:
	public = '+' 
	| public = 'public'
	| private = '-' 
	| private = 'private'
	| protected = '#' 
	| protected = 'protected'
	| package = '~'
;

enum ActorType:
	HUMAN = 'human'
	| MACHINE = 'machine'
;