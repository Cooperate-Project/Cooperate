/*
 * generated by Xtext 2.10.0
 */
package de.cooperateproject.modeling.textual.usecase

import com.google.inject.Binder
import com.google.inject.name.Names
import de.cooperateproject.modeling.textual.common.naming.CommonQualifiedNameProvider
import de.cooperateproject.modeling.textual.common.services.BasicCooperateTransientValueService
import de.cooperateproject.modeling.textual.usecase.derivedstate.calculator.UseCaseDerivedStateElementComparator
import de.cooperateproject.modeling.textual.usecase.scoping.UseCaseImportedNamespaceAwareLocalScopeProvider
import de.cooperateproject.modeling.textual.usecase.services.UsecaseValueConverter
import de.cooperateproject.modeling.textual.xtext.runtime.derivedstate.initializer.DerivedStateModuleMixin
import de.cooperateproject.modeling.textual.xtext.runtime.derivedstate.initializer.IDerivedStateComputerSorter
import de.cooperateproject.modeling.textual.xtext.runtime.derivedstate.initializer.InitializingStateAwareResource
import de.cooperateproject.modeling.textual.xtext.runtime.scoping.CooperateGlobalScopeProvider
import de.cooperateproject.modeling.textual.xtext.runtime.scoping.IGlobalScopeTypeQueryProvider
import de.cooperateproject.modeling.textual.xtext.runtime.service.transientstatus.TransientStatusProviderModuleMixin
import org.eclipse.xtext.naming.IQualifiedNameProvider
import org.eclipse.xtext.resource.DerivedStateAwareResourceDescriptionManager
import org.eclipse.xtext.resource.IResourceDescription
import org.eclipse.xtext.resource.XtextResource
import org.eclipse.xtext.scoping.IScopeProvider
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider
import org.eclipse.xtext.serializer.sequencer.ITransientValueService

/**
 * Use this class to register components to be used at runtime / without the Equinox extension registry.
 */
class UsecaseRuntimeModule extends AbstractUsecaseRuntimeModule implements DerivedStateModuleMixin, TransientStatusProviderModuleMixin {

	override void configureIScopeProviderDelegate(Binder binder) {
		binder.bind(IScopeProvider).annotatedWith(Names.named(AbstractDeclarativeScopeProvider.NAMED_DELEGATE)).to(
			UseCaseImportedNamespaceAwareLocalScopeProvider)
	}

	override Class<? extends IQualifiedNameProvider> bindIQualifiedNameProvider() {
		return CommonQualifiedNameProvider;
	}
	
	
	override bindITransientValueService() {
		BasicCooperateTransientValueService
	}
	
	def configureITransientValueService(Binder binder) {
		binder.bind(ITransientValueService).to(BasicCooperateTransientValueService)
	}

	override Class<? extends XtextResource> bindXtextResource() {
		return InitializingStateAwareResource;
	}

	def Class<? extends IResourceDescription.Manager> bindIResourceDescriptionManager() {
		return DerivedStateAwareResourceDescriptionManager;
	}
	
	def Class<? extends IGlobalScopeTypeQueryProvider> bindIGlobalScopeTypeQueryProvider() {
		return CooperateGlobalScopeProvider
	}
	
	 override bindIValueConverterService() {
        return UsecaseValueConverter
    }
    
    def Class<? extends IDerivedStateComputerSorter> bindIDerivedStateComputerSorter() {
        return UseCaseDerivedStateElementComparator
    }

}
