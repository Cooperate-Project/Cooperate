/*
 * generated by Xtext 
 */
package de.cooperateproject.modeling.textual.cls.ui.contentassist

import com.google.inject.Inject
import de.cooperateproject.modeling.textual.cls.ui.labeling.UMLImage
import de.cooperateproject.modeling.textual.common.metamodel.textualCommons.TextualCommonsPackage
import org.eclipse.emf.ecore.EObject
import org.eclipse.uml2.uml.Interface
import org.eclipse.xtext.Assignment
import org.eclipse.xtext.scoping.IScopeProvider
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor

/**
 * This class provides content assist in our editor. It offeres suggestions for code completion.
 */
class ClsProposalProvider extends AbstractClsProposalProvider {
	@Inject IScopeProvider scope

	override completeImplementation_Right(EObject model, Assignment assignment, ContentAssistContext context,
		ICompletionProposalAcceptor acceptor) {

		var interfaces = filterInterfaces(model)
		createProposals(interfaces, acceptor, context)
	}

	private def void createProposals(Iterable<Interface> interfaces, ICompletionProposalAcceptor acceptor,
		ContentAssistContext context) {
			
		for (i : interfaces) {
			acceptor.accept(createCompletionProposal(i.name, i.name, UMLImage.INTERFACE.image, context))
		}
	}

	private def Iterable<Interface> filterInterfaces(EObject model) {
		var scope = scope.getScope(model, TextualCommonsPackage.eINSTANCE.UMLReferencingElement_ReferencedElement);
		return scope.allElements.map[x|x.EObjectOrProxy].filter(Interface)
	}
}
