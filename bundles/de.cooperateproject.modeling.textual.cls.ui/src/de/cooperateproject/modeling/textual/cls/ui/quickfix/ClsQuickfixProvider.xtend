/*
 * generated by Xtext 
 */
package de.cooperateproject.modeling.textual.cls.ui.quickfix

import com.google.inject.Inject
import org.eclipse.xtext.scoping.IScopeProvider
import org.eclipse.xtext.ui.editor.quickfix.Fix
import de.cooperateproject.modeling.textual.cls.validation.ClsValidator
import org.eclipse.xtext.validation.Issue
import org.eclipse.xtext.ui.editor.quickfix.IssueResolutionAcceptor
import de.cooperateproject.modeling.textual.cls.cls.Class
import de.cooperateproject.modeling.textual.cls.cls.Method
import de.cooperateproject.modeling.textual.cls.cls.Attribute
import de.cooperateproject.modeling.textual.cls.cls.ClsPackage
import org.eclipse.emf.ecore.util.EcoreUtil
import org.eclipse.uml2.uml.Model
import com.google.common.collect.Iterables
import org.eclipse.xtext.ui.editor.model.edit.IModificationContext
import org.eclipse.emf.ecore.EObject

class ClsQuickfixProvider extends org.eclipse.xtext.ui.editor.quickfix.DefaultQuickfixProvider {

	@Inject IScopeProvider scope

	/**
	 * Quickfix for missing Class in the UML-diagram.
	 */
	@Fix(ClsValidator::NO_CLASS_REFERENCE)
	def createMissingUMLClass(Issue issue, IssueResolutionAcceptor acceptor) {
		acceptor.accept(issue, 'Create Class', 'Create the Class into the UML Diagram', null) [ element, context |
			createMissingClassifier(new CreateClass(), context, issue, element)
		]
	}

	/**
	 * Quickfix for missing Interface in the UML-diagram.
	 */
	@Fix(ClsValidator::NO_INTERFACE_REFERENCE)
	def createMissingUMLInterface(Issue issue, IssueResolutionAcceptor acceptor) {
		acceptor.accept(issue, 'Create Interface', 'Create the Interface into the UML Diagram', null) [ element, context |
			createMissingClassifier(new CreateInterface(), context, issue, element)
		]
	}

	/**
	 * Creates a missing classifier into the UML-diagram.
	 */
	private def createMissingClassifier(CreateClassifier createClassifier, IModificationContext context, Issue issue,
		EObject element) {
		var name = context.xtextDocument.get(issue.offset, issue.length)

		var scope = scope.getScope(element, ClsPackage.Literals.UML_REFERENCING_ELEMENT__REFERENCED_ELEMENT);
		var first = Iterables.getFirst(scope.allElements, null)

		if (first != null) {
			var umlModel = EcoreUtil.getRootContainer(first.EObjectOrProxy)

			if (umlModel instanceof Model) {
				createClassifier.createClassifier(name, umlModel, false)
				context.xtextDocument.replace(issue.offset, issue.length, name)
			}
		}
	}

	/**
	 * Quickfix for missing Property in the UML-diagram.
	 */
	@Fix(ClsValidator::NO_PROPERTY_REFERENCE)
	def createMissingUMLProperty(Issue issue, IssueResolutionAcceptor acceptor) {
		acceptor.accept(issue, 'Create Property', 'Create the Property into the UML Diagram', null) [ element, context |
			if (element instanceof Attribute) {
				createMissingMember(new CreateProperty(), context, issue, element)
			}
		]
	}

	/**
	 * Quickfix for missing Operation in the UML-diagram.
	 */
	@Fix(ClsValidator::NO_OPERATION_REFERENCE)
	def createMissingUMLOperation(Issue issue, IssueResolutionAcceptor acceptor) {
		acceptor.accept(issue, 'Create Operation', 'Create the Operation into the UML Diagram', null) [ element, context |
			if (element instanceof Method) {
				createMissingMember(new CreateOperation(), context, issue, element)
			}
		]
	}

	/**
	 * Creates a missing member into the UML-diagram.
	 */
	private def createMissingMember(CreateMember createMember, IModificationContext context, Issue issue,
		EObject element) {
		val name = context.xtextDocument.get(issue.offset, issue.length)
		val class = element.eContainer

		if (class instanceof Class) {

			var scope = scope.getScope(class, ClsPackage.Literals.UML_REFERENCING_ELEMENT__REFERENCED_ELEMENT);
			var umlClass = scope.allElements.map[x|x.EObjectOrProxy].filter(org.eclipse.uml2.uml.Class).findFirst [ x |
				x.name.equals(class.name)
			]

			if (umlClass != null) {
				var umlModel = EcoreUtil.getRootContainer(umlClass)

				if (umlModel instanceof Model) {
					createMember.createMember(name, umlClass)
					context.xtextDocument.replace(issue.offset, issue.length, name)
				}
			}
		}
	}

	/**
	 * Interface using the command pattern to create a member.
	 */
	private interface CreateMember {
		def void createMember(String name, org.eclipse.uml2.uml.Class umlClass)
	}

	/**
	 * Implementation of the CreateMember interface that creates a Property into the UML-diagram.
	 */
	private static class CreateProperty implements CreateMember {
		override createMember(String name, org.eclipse.uml2.uml.Class umlClass) {
			umlClass.createOwnedAttribute(name, null)
		}
	}

	/**
	 * Implementation of the CreateMember interface that creates a Operation into the UML-diagram.
	 */
	private static class CreateOperation implements CreateMember {
		override createMember(String name, org.eclipse.uml2.uml.Class umlClass) {
			umlClass.createOwnedOperation(name, null, null)
		}
	}

	/**
	 * Interface using the command pattern to create a classifier.
	 */
	private interface CreateClassifier {
		def void createClassifier(String name, Model model, boolean isAbstract)
	}

	/**
	 * Implementation of the CreateMember interface that creates a Class into the UML-diagram.
	 */
	private static class CreateClass implements CreateClassifier {
		override createClassifier(String name, Model model, boolean isAbstract) {
			model.createOwnedClass(name, isAbstract)
		}
	}

	/**
	 * Implementation of the CreateMember interface that creates a Interface into the UML-diagram.
	 */
	private static class CreateInterface implements CreateClassifier {
		override createClassifier(String name, Model model, boolean isAbstract) {
			model.createOwnedInterface(name)
		}
	}

}
