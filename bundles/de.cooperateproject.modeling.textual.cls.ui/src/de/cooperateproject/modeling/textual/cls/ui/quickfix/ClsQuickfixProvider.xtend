/*
 * generated by Xtext 
 */
package de.cooperateproject.modeling.textual.cls.ui.quickfix

import de.cooperateproject.modeling.textual.cls.cls.AssociationMemberEnd
import de.cooperateproject.modeling.textual.cls.cls.Attribute
import de.cooperateproject.modeling.textual.cls.cls.Class
import de.cooperateproject.modeling.textual.cls.cls.ClsPackage
import de.cooperateproject.modeling.textual.cls.cls.Method
import de.cooperateproject.modeling.textual.cls.issues.ClsCardinalityCheckFactory
import de.cooperateproject.modeling.textual.cls.issues.ClsPropertyAbstractQualifierFactory
import de.cooperateproject.modeling.textual.xtext.runtime.ui.issues.CooperateQuickfixProvider
import org.eclipse.emf.ecore.EObject
import org.eclipse.xtext.ui.editor.model.edit.IModificationContext
import org.eclipse.xtext.ui.editor.quickfix.Fix
import org.eclipse.xtext.ui.editor.quickfix.IssueResolutionAcceptor
import org.eclipse.xtext.validation.Issue
import de.cooperateproject.modeling.textual.common.metamodel.textualCommons.TextualCommonsPackage
import de.cooperateproject.modeling.textual.cls.issues.ClsMemberStaticQualifierFactory
import org.slf4j.LoggerFactory

class ClsQuickfixProvider extends CooperateQuickfixProvider {

	static val LOGGER = LoggerFactory.getLogger(ClsQuickfixProvider)
	
	new() {
		super(#[ClsPackage.eINSTANCE, TextualCommonsPackage.eINSTANCE])
	}
	
	
	/**
	 * Quickfix for wrong static qualifier in the Cls-model.
	 */
	@Fix(ClsMemberStaticQualifierFactory.ISSUE_CODE)
	def wrongStaticQualifier(Issue issue, IssueResolutionAcceptor acceptor) {
		acceptor.accept(issue, 'Change Static Qualifier', 'Change the static qualifier into the right one', null) [ element, context |
			element.fixWrongStaticQualifier
		]
	}

	/**
	 * Quickfix for wrong abstract qualifier in the Cls-model.
	 */
	@Fix(ClsPropertyAbstractQualifierFactory.ISSUE_CODE)
	def wrongAbstractQualifier(Issue issue, IssueResolutionAcceptor acceptor) {
		acceptor.accept(issue, 'Change Abstract Qualifier', 'Change the abstract qualifier into the right one', null) [ element, context |
			element.fixWrongAbstractQualifier
		]
	}
	
	/**
	 * Quickfix for wrong cardinalities in the Cls-model.
	 */
	@Fix(ClsCardinalityCheckFactory.ISSUE_CODE)
	def wrongCardinality(Issue issue, IssueResolutionAcceptor acceptor) {
		acceptor.accept(issue, 'Change Cardinality', 'Change the cardinality into the right one', null) [ element, context |
			if (element instanceof AssociationMemberEnd) {
				element.fixWrongCardinality(issue, context)
			}
		]
	}
	
	private def void fixWrongCardinality(AssociationMemberEnd property, Issue issue, IModificationContext context) {
		val umlElement = property.referencedElement
		if (umlElement === null) {
			return
		}
		
		//TODO: java.lang.IllegalStateException: Cannot replace an obj that has no associated node
		val card = property.cardinality
		val umlLower = umlElement.lower
		val umlUpper = umlElement.upper
		card.lowerBound = umlLower
		card.upperBound = umlUpper
	}
	
	private static dispatch def void fixWrongStaticQualifier(Method property) {
		val umlElement = property.referencedElement
		if (umlElement === null) {
			return
		}
		property.static = umlElement.isStatic
	}
	
	private static dispatch def void fixWrongStaticQualifier(Attribute property) {
		val umlElement = property.referencedElement
		if (umlElement === null) {
			return
		}
		property.static = umlElement.isStatic
	}
	
	private static dispatch def void fixWrongStaticQualifier(EObject property) {
		LOGGER.warn("Object does not have static qualifier.")
	}

	private static dispatch def void fixWrongAbstractQualifier(EObject property) {
		LOGGER.warn("Object does not have abstract qualifier.")
	}

	private static dispatch def void fixWrongAbstractQualifier(Class property) {
		val umlElement = property?.referencedElement
		if (umlElement === null) {
			return
		}
		property.abstract = umlElement.abstract
	}
	
	private static dispatch def void fixWrongAbstractQualifier(Method property) {
		val umlElement = property?.referencedElement
		if (umlElement === null) {
			return
		}
		property.abstract = umlElement.abstract
	}
	
}
