/*
 * generated by Xtext 2.10.0
 */
package de.cooperateproject.modeling.textual.usecase.ui.outline

import de.cooperateproject.modeling.textual.common.metamodel.textualCommons.Commentable
import de.cooperateproject.modeling.textual.common.metamodel.textualCommons.Element
import de.cooperateproject.modeling.textual.common.outline.CooperateOutlineTreeProvider
import de.cooperateproject.modeling.textual.common.outline.UMLImage
import de.cooperateproject.modeling.textual.usecase.usecase.RootPackage
import de.cooperateproject.modeling.textual.usecase.usecase.System
import de.cooperateproject.modeling.textual.usecase.usecase.UseCase
import de.cooperateproject.modeling.textual.usecase.usecase.UseCaseDiagram
import de.cooperateproject.modeling.textual.usecase.usecase.UsecasePackage
import org.eclipse.xtext.ui.editor.outline.IOutlineNode
import de.cooperateproject.modeling.textual.usecase.usecase.Relationship

/**
 * Customization of the default outline structure.
 *
 * See https://www.eclipse.org/Xtext/documentation/304_ide_concepts.html#outline
 */
class UsecaseOutlineTreeProvider extends CooperateOutlineTreeProvider {
    
	dispatch def createChildren(IOutlineNode parentNode, UseCaseDiagram root) {
        if (root.rootPackage === null) {
            return
        }
        
        val pkg = root.rootPackage
        
        createFeatureNode(parentNode, pkg, UsecasePackage.Literals.ROOT_PACKAGE__ACTORS, UMLImage.ACTOR.image,
            getStyledString("Actors", pkg.actors.size), false)
        createFeatureNode(parentNode, pkg, UsecasePackage.Literals.ROOT_PACKAGE__SYSTEMS, UMLImage.COMPONENT.image,
            getStyledString("Systems", pkg.systems.size), false)
        val size = pkg.relationships.size
        createFeatureNode(parentNode, pkg, UsecasePackage.Literals.ROOT_PACKAGE__RELATIONSHIPS, UMLImage.ASSOCIATION.image,
            getStyledString("Relationships", size), false)
    }
    
	protected def dispatch createNode(IOutlineNode parentNode, RootPackage element) {
	    if (element.owningPackage === null) {
	       createEObjectNode(parentNode, element.referencedElement)
	    } else {
	       createEObjectNode(parentNode, element)
	    }
	}
   
    dispatch def createChildren(IOutlineNode parentNode, System system) {
        system.usecases.forEach[x|createEObjectNode(parentNode, x)]
        system.relationships.forEach[x|createEObjectNode(parentNode, x)]
        _createChildren(parentNode, system as Commentable<?>)
    }
        
    dispatch def createChildren(IOutlineNode parentNode, UseCase uc) {
        uc.extensionPoints.forEach[x|createEObjectNode(parentNode, x)]
        _createChildren(parentNode, uc as Commentable<?>)
    }
				
	dispatch def createChildren(IOutlineNode parentNode, Element object) {
       createEObjectNode(parentNode, object)
    }
    dispatch def createChildren(IOutlineNode parentNode, Relationship relationship) {
       //Fall back for Relationships
    }
    dispatch def createChildren(IOutlineNode parentNode, Void object) {
       //Do nothing for a null object
    }
	
}
