/**
 * generated by Xtext 2.11.0
 */
package de.cooperateproject.modeling.textual.sequence.sequence.impl;

import de.cooperateproject.modeling.textual.common.metamodel.textualCommons.TextualCommonsPackage;

import de.cooperateproject.modeling.textual.sequence.sequence.Actor;
import de.cooperateproject.modeling.textual.sequence.sequence.ActorClassifierMapping;
import de.cooperateproject.modeling.textual.sequence.sequence.ActorType;
import de.cooperateproject.modeling.textual.sequence.sequence.Alternative;
import de.cooperateproject.modeling.textual.sequence.sequence.BiPointInTimeTimeIntervalSelector;
import de.cooperateproject.modeling.textual.sequence.sequence.CoRegion;
import de.cooperateproject.modeling.textual.sequence.sequence.CombinedFragment;
import de.cooperateproject.modeling.textual.sequence.sequence.Condition;
import de.cooperateproject.modeling.textual.sequence.sequence.Constraint;
import de.cooperateproject.modeling.textual.sequence.sequence.CreateMessage;
import de.cooperateproject.modeling.textual.sequence.sequence.Critical;
import de.cooperateproject.modeling.textual.sequence.sequence.DestructionMessage;
import de.cooperateproject.modeling.textual.sequence.sequence.DestructionOccurenceSpecification;
import de.cooperateproject.modeling.textual.sequence.sequence.DurationConstraint;
import de.cooperateproject.modeling.textual.sequence.sequence.DurationObservation;
import de.cooperateproject.modeling.textual.sequence.sequence.ExplicitArrivalOccurenceReference;
import de.cooperateproject.modeling.textual.sequence.sequence.ExplicitArrivalOccurenceSpecification;
import de.cooperateproject.modeling.textual.sequence.sequence.Fragment;
import de.cooperateproject.modeling.textual.sequence.sequence.FragmentSequence;
import de.cooperateproject.modeling.textual.sequence.sequence.FragmentTimeIntervalSelector;
import de.cooperateproject.modeling.textual.sequence.sequence.ImplicitMessageOccurenceSpecification;
import de.cooperateproject.modeling.textual.sequence.sequence.Loop;
import de.cooperateproject.modeling.textual.sequence.sequence.Message;
import de.cooperateproject.modeling.textual.sequence.sequence.MessageType;
import de.cooperateproject.modeling.textual.sequence.sequence.MultipleRegionContainer;
import de.cooperateproject.modeling.textual.sequence.sequence.NonInstantaneousFragment;
import de.cooperateproject.modeling.textual.sequence.sequence.Observation;
import de.cooperateproject.modeling.textual.sequence.sequence.OccurenceReference;
import de.cooperateproject.modeling.textual.sequence.sequence.OccurenceSpecification;
import de.cooperateproject.modeling.textual.sequence.sequence.Option;
import de.cooperateproject.modeling.textual.sequence.sequence.OrderedFragmentContainer;
import de.cooperateproject.modeling.textual.sequence.sequence.Parallel;
import de.cooperateproject.modeling.textual.sequence.sequence.PointInTime;
import de.cooperateproject.modeling.textual.sequence.sequence.PointInTimeSelector;
import de.cooperateproject.modeling.textual.sequence.sequence.Reference;
import de.cooperateproject.modeling.textual.sequence.sequence.ResponseMessage;
import de.cooperateproject.modeling.textual.sequence.sequence.RootPackage;
import de.cooperateproject.modeling.textual.sequence.sequence.SequenceDiagram;
import de.cooperateproject.modeling.textual.sequence.sequence.SequenceFactory;
import de.cooperateproject.modeling.textual.sequence.sequence.SequencePackage;
import de.cooperateproject.modeling.textual.sequence.sequence.SingleRegionContainer;
import de.cooperateproject.modeling.textual.sequence.sequence.StandardMessage;
import de.cooperateproject.modeling.textual.sequence.sequence.TimeConstraint;
import de.cooperateproject.modeling.textual.sequence.sequence.TimeIntervalSelector;
import de.cooperateproject.modeling.textual.sequence.sequence.TimeObservation;

import de.cooperateproject.modeling.textual.sequence.sequence.util.SequenceValidator;
import org.eclipse.emf.ecore.EAttribute;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EEnum;
import org.eclipse.emf.ecore.EGenericType;
import org.eclipse.emf.ecore.EOperation;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.emf.ecore.ETypeParameter;
import org.eclipse.emf.ecore.EValidator;
import org.eclipse.emf.ecore.impl.EPackageImpl;
import org.eclipse.uml2.uml.UMLPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Package</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class SequencePackageImpl extends EPackageImpl implements SequencePackage {
    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    private EClass sequenceDiagramEClass = null;

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    private EClass rootPackageEClass = null;

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    private EClass actorEClass = null;

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    private EClass actorClassifierMappingEClass = null;

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    private EClass fragmentEClass = null;

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    private EClass fragmentSequenceEClass = null;

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    private EClass messageEClass = null;

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    private EClass standardMessageEClass = null;

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    private EClass responseMessageEClass = null;

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    private EClass createMessageEClass = null;

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    private EClass destructionMessageEClass = null;

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    private EClass occurenceSpecificationEClass = null;

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    private EClass destructionOccurenceSpecificationEClass = null;

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    private EClass combinedFragmentEClass = null;

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    private EClass orderedFragmentContainerEClass = null;

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    private EClass singleRegionContainerEClass = null;

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    private EClass multipleRegionContainerEClass = null;

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    private EClass alternativeEClass = null;

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    private EClass optionEClass = null;

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    private EClass coRegionEClass = null;

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    private EClass parallelEClass = null;

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    private EClass criticalEClass = null;

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    private EClass loopEClass = null;

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    private EClass conditionEClass = null;

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    private EClass observationEClass = null;

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    private EClass timeObservationEClass = null;

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    private EClass durationObservationEClass = null;

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    private EClass constraintEClass = null;

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    private EClass timeConstraintEClass = null;

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    private EClass durationConstraintEClass = null;

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    private EClass occurenceReferenceEClass = null;

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    private EClass explicitArrivalOccurenceReferenceEClass = null;

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    private EClass implicitMessageOccurenceSpecificationEClass = null;

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    private EClass explicitArrivalOccurenceSpecificationEClass = null;

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    private EClass pointInTimeEClass = null;

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    private EClass pointInTimeSelectorEClass = null;

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    private EClass timeIntervalSelectorEClass = null;

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    private EClass biPointInTimeTimeIntervalSelectorEClass = null;

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    private EClass fragmentTimeIntervalSelectorEClass = null;

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    private EClass referenceEClass = null;

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    private EClass nonInstantaneousFragmentEClass = null;

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    private EEnum messageTypeEEnum = null;

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    private EEnum actorTypeEEnum = null;

    /**
     * Creates an instance of the model <b>Package</b>, registered with
     * {@link org.eclipse.emf.ecore.EPackage.Registry EPackage.Registry} by the package
     * package URI value.
     * <p>Note: the correct way to create the package is via the static
     * factory method {@link #init init()}, which also performs
     * initialization of the package, or returns the registered package,
     * if one already exists.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.eclipse.emf.ecore.EPackage.Registry
     * @see de.cooperateproject.modeling.textual.sequence.sequence.SequencePackage#eNS_URI
     * @see #init()
     * @generated
     */
    private SequencePackageImpl() {
        super(eNS_URI, SequenceFactory.eINSTANCE);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    private static boolean isInited = false;

    /**
     * Creates, registers, and initializes the <b>Package</b> for this model, and for any others upon which it depends.
     * 
     * <p>This method is used to initialize {@link SequencePackage#eINSTANCE} when that field is accessed.
     * Clients should not invoke it directly. Instead, they should simply access that field to obtain the package.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see #eNS_URI
     * @see #createPackageContents()
     * @see #initializePackageContents()
     * @generated
     */
    public static SequencePackage init() {
        if (isInited) return (SequencePackage)EPackage.Registry.INSTANCE.getEPackage(SequencePackage.eNS_URI);

        // Obtain or create and register package
        SequencePackageImpl theSequencePackage = (SequencePackageImpl)(EPackage.Registry.INSTANCE.get(eNS_URI) instanceof SequencePackageImpl ? EPackage.Registry.INSTANCE.get(eNS_URI) : new SequencePackageImpl());

        isInited = true;

        // Initialize simple dependencies
        TextualCommonsPackage.eINSTANCE.eClass();

        // Create package meta-data objects
        theSequencePackage.createPackageContents();

        // Initialize created meta-data
        theSequencePackage.initializePackageContents();

        // Register package validator
        EValidator.Registry.INSTANCE.put
            (theSequencePackage, 
             new EValidator.Descriptor() {
                 public EValidator getEValidator() {
                     return SequenceValidator.INSTANCE;
                 }
             });

        // Mark meta-data to indicate it can't be changed
        theSequencePackage.freeze();

  
        // Update the registry and return the package
        EPackage.Registry.INSTANCE.put(SequencePackage.eNS_URI, theSequencePackage);
        return theSequencePackage;
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public EClass getSequenceDiagram() {
        return sequenceDiagramEClass;
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public EAttribute getSequenceDiagram_Title() {
        return (EAttribute)sequenceDiagramEClass.getEStructuralFeatures().get(0);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public EReference getSequenceDiagram_RootPackage() {
        return (EReference)sequenceDiagramEClass.getEStructuralFeatures().get(1);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public EReference getSequenceDiagram_Actors() {
        return (EReference)sequenceDiagramEClass.getEStructuralFeatures().get(2);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public EClass getRootPackage() {
        return rootPackageEClass;
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public EClass getActor() {
        return actorEClass;
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public EAttribute getActor_Deferred() {
        return (EAttribute)actorEClass.getEStructuralFeatures().get(0);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public EReference getActor_TypeMapping() {
        return (EReference)actorEClass.getEStructuralFeatures().get(1);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public EAttribute getActor_ActorType() {
        return (EAttribute)actorEClass.getEStructuralFeatures().get(2);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public EClass getActorClassifierMapping() {
        return actorClassifierMappingEClass;
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public EReference getActorClassifierMapping_Classifier() {
        return (EReference)actorClassifierMappingEClass.getEStructuralFeatures().get(0);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public EReference getActorClassifierMapping_Actor() {
        return (EReference)actorClassifierMappingEClass.getEStructuralFeatures().get(1);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public EAttribute getActorClassifierMapping_ClassifierName() {
        return (EAttribute)actorClassifierMappingEClass.getEStructuralFeatures().get(2);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public EClass getFragment() {
        return fragmentEClass;
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public EOperation getFragment__GetContainingSequence() {
        return fragmentEClass.getEOperations().get(0);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public EClass getFragmentSequence() {
        return fragmentSequenceEClass;
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public EReference getFragmentSequence_Fragments() {
        return (EReference)fragmentSequenceEClass.getEStructuralFeatures().get(0);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public EOperation getFragmentSequence__GetUMLFragmentSequence() {
        return fragmentSequenceEClass.getEOperations().get(0);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public EClass getMessage() {
        return messageEClass;
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public EReference getMessage_ArrivalEvent() {
        return (EReference)messageEClass.getEStructuralFeatures().get(0);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public EReference getMessage_SendEvent() {
        return (EReference)messageEClass.getEStructuralFeatures().get(1);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public EReference getMessage_Left() {
        return (EReference)messageEClass.getEStructuralFeatures().get(2);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public EReference getMessage_Right() {
        return (EReference)messageEClass.getEStructuralFeatures().get(3);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public EClass getStandardMessage() {
        return standardMessageEClass;
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public EAttribute getStandardMessage_Type() {
        return (EAttribute)standardMessageEClass.getEStructuralFeatures().get(0);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public EClass getResponseMessage() {
        return responseMessageEClass;
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public EOperation getResponseMessage__GetCorrespondingRequest() {
        return responseMessageEClass.getEOperations().get(0);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public EOperation getResponseMessage__MustHaveCorrespondingMessage__DiagnosticChain_Map_1() {
        return responseMessageEClass.getEOperations().get(1);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public EClass getCreateMessage() {
        return createMessageEClass;
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public EClass getDestructionMessage() {
        return destructionMessageEClass;
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public EClass getOccurenceSpecification() {
        return occurenceSpecificationEClass;
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public EOperation getOccurenceSpecification__GetOccurenceReference() {
        return occurenceSpecificationEClass.getEOperations().get(0);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public EClass getDestructionOccurenceSpecification() {
        return destructionOccurenceSpecificationEClass;
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public EReference getDestructionOccurenceSpecification_Target() {
        return (EReference)destructionOccurenceSpecificationEClass.getEStructuralFeatures().get(0);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public EClass getCombinedFragment() {
        return combinedFragmentEClass;
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public EOperation getCombinedFragment__GetInteractionOperatorKind() {
        return combinedFragmentEClass.getEOperations().get(0);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public EClass getOrderedFragmentContainer() {
        return orderedFragmentContainerEClass;
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public EReference getOrderedFragmentContainer_Condition() {
        return (EReference)orderedFragmentContainerEClass.getEStructuralFeatures().get(0);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public EClass getSingleRegionContainer() {
        return singleRegionContainerEClass;
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public EReference getSingleRegionContainer_Region() {
        return (EReference)singleRegionContainerEClass.getEStructuralFeatures().get(0);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public EClass getMultipleRegionContainer() {
        return multipleRegionContainerEClass;
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public EReference getMultipleRegionContainer_Regions() {
        return (EReference)multipleRegionContainerEClass.getEStructuralFeatures().get(0);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public EClass getAlternative() {
        return alternativeEClass;
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public EClass getOption() {
        return optionEClass;
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public EClass getCoRegion() {
        return coRegionEClass;
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public EClass getParallel() {
        return parallelEClass;
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public EClass getCritical() {
        return criticalEClass;
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public EClass getLoop() {
        return loopEClass;
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public EClass getCondition() {
        return conditionEClass;
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public EAttribute getCondition_Condition() {
        return (EAttribute)conditionEClass.getEStructuralFeatures().get(0);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public EClass getObservation() {
        return observationEClass;
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public EClass getTimeObservation() {
        return timeObservationEClass;
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public EAttribute getTimeObservation_Time() {
        return (EAttribute)timeObservationEClass.getEStructuralFeatures().get(0);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public EReference getTimeObservation_Event() {
        return (EReference)timeObservationEClass.getEStructuralFeatures().get(1);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public EClass getDurationObservation() {
        return durationObservationEClass;
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public EAttribute getDurationObservation_Duration() {
        return (EAttribute)durationObservationEClass.getEStructuralFeatures().get(0);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public EReference getDurationObservation_Interval() {
        return (EReference)durationObservationEClass.getEStructuralFeatures().get(1);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public EClass getConstraint() {
        return constraintEClass;
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public EClass getTimeConstraint() {
        return timeConstraintEClass;
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public EAttribute getTimeConstraint_Time() {
        return (EAttribute)timeConstraintEClass.getEStructuralFeatures().get(0);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public EReference getTimeConstraint_Event() {
        return (EReference)timeConstraintEClass.getEStructuralFeatures().get(1);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public EClass getDurationConstraint() {
        return durationConstraintEClass;
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public EAttribute getDurationConstraint_Duration() {
        return (EAttribute)durationConstraintEClass.getEStructuralFeatures().get(0);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public EReference getDurationConstraint_Interval() {
        return (EReference)durationConstraintEClass.getEStructuralFeatures().get(1);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public EClass getOccurenceReference() {
        return occurenceReferenceEClass;
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public EOperation getOccurenceReference__GetOccurenceSpecification() {
        return occurenceReferenceEClass.getEOperations().get(0);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public EClass getExplicitArrivalOccurenceReference() {
        return explicitArrivalOccurenceReferenceEClass;
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public EReference getExplicitArrivalOccurenceReference_ExplicitOccurenceSpecification() {
        return (EReference)explicitArrivalOccurenceReferenceEClass.getEStructuralFeatures().get(0);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public EOperation getExplicitArrivalOccurenceReference__GetOccurenceSpecification() {
        return explicitArrivalOccurenceReferenceEClass.getEOperations().get(0);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public EClass getImplicitMessageOccurenceSpecification() {
        return implicitMessageOccurenceSpecificationEClass;
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public EOperation getImplicitMessageOccurenceSpecification__GetOccurenceReference() {
        return implicitMessageOccurenceSpecificationEClass.getEOperations().get(0);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public EOperation getImplicitMessageOccurenceSpecification__GetOccurenceSpecification() {
        return implicitMessageOccurenceSpecificationEClass.getEOperations().get(1);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public EOperation getImplicitMessageOccurenceSpecification__IsArrival() {
        return implicitMessageOccurenceSpecificationEClass.getEOperations().get(2);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public EOperation getImplicitMessageOccurenceSpecification__IsSend() {
        return implicitMessageOccurenceSpecificationEClass.getEOperations().get(3);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public EClass getExplicitArrivalOccurenceSpecification() {
        return explicitArrivalOccurenceSpecificationEClass;
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public EReference getExplicitArrivalOccurenceSpecification_ExplicitOccurenceReference() {
        return (EReference)explicitArrivalOccurenceSpecificationEClass.getEStructuralFeatures().get(0);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public EOperation getExplicitArrivalOccurenceSpecification__GetOccurenceReference() {
        return explicitArrivalOccurenceSpecificationEClass.getEOperations().get(0);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public EClass getPointInTime() {
        return pointInTimeEClass;
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public EClass getPointInTimeSelector() {
        return pointInTimeSelectorEClass;
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public EReference getPointInTimeSelector_PointInTime() {
        return (EReference)pointInTimeSelectorEClass.getEStructuralFeatures().get(0);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public EClass getTimeIntervalSelector() {
        return timeIntervalSelectorEClass;
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public EOperation getTimeIntervalSelector__GetIntervalStart() {
        return timeIntervalSelectorEClass.getEOperations().get(0);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public EOperation getTimeIntervalSelector__GetIntervalEnd() {
        return timeIntervalSelectorEClass.getEOperations().get(1);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public EClass getBiPointInTimeTimeIntervalSelector() {
        return biPointInTimeTimeIntervalSelectorEClass;
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public EReference getBiPointInTimeTimeIntervalSelector_Start() {
        return (EReference)biPointInTimeTimeIntervalSelectorEClass.getEStructuralFeatures().get(0);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public EReference getBiPointInTimeTimeIntervalSelector_End() {
        return (EReference)biPointInTimeTimeIntervalSelectorEClass.getEStructuralFeatures().get(1);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public EOperation getBiPointInTimeTimeIntervalSelector__GetIntervalStart() {
        return biPointInTimeTimeIntervalSelectorEClass.getEOperations().get(0);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public EOperation getBiPointInTimeTimeIntervalSelector__GetIntervalEnd() {
        return biPointInTimeTimeIntervalSelectorEClass.getEOperations().get(1);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public EClass getFragmentTimeIntervalSelector() {
        return fragmentTimeIntervalSelectorEClass;
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public EReference getFragmentTimeIntervalSelector_NonInstantaneousFragment() {
        return (EReference)fragmentTimeIntervalSelectorEClass.getEStructuralFeatures().get(0);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public EOperation getFragmentTimeIntervalSelector__GetIntervalStart() {
        return fragmentTimeIntervalSelectorEClass.getEOperations().get(0);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public EOperation getFragmentTimeIntervalSelector__GetIntervalEnd() {
        return fragmentTimeIntervalSelectorEClass.getEOperations().get(1);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public EClass getReference() {
        return referenceEClass;
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public EReference getReference_Reference() {
        return (EReference)referenceEClass.getEStructuralFeatures().get(0);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public EClass getNonInstantaneousFragment() {
        return nonInstantaneousFragmentEClass;
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public EEnum getMessageType() {
        return messageTypeEEnum;
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public EEnum getActorType() {
        return actorTypeEEnum;
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public SequenceFactory getSequenceFactory() {
        return (SequenceFactory)getEFactoryInstance();
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    private boolean isCreated = false;

    /**
     * Creates the meta-model objects for the package.  This method is
     * guarded to have no affect on any invocation but its first.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void createPackageContents() {
        if (isCreated) return;
        isCreated = true;

        // Create classes and their features
        sequenceDiagramEClass = createEClass(SEQUENCE_DIAGRAM);
        createEAttribute(sequenceDiagramEClass, SEQUENCE_DIAGRAM__TITLE);
        createEReference(sequenceDiagramEClass, SEQUENCE_DIAGRAM__ROOT_PACKAGE);
        createEReference(sequenceDiagramEClass, SEQUENCE_DIAGRAM__ACTORS);

        rootPackageEClass = createEClass(ROOT_PACKAGE);

        actorEClass = createEClass(ACTOR);
        createEAttribute(actorEClass, ACTOR__DEFERRED);
        createEReference(actorEClass, ACTOR__TYPE_MAPPING);
        createEAttribute(actorEClass, ACTOR__ACTOR_TYPE);

        actorClassifierMappingEClass = createEClass(ACTOR_CLASSIFIER_MAPPING);
        createEReference(actorClassifierMappingEClass, ACTOR_CLASSIFIER_MAPPING__CLASSIFIER);
        createEReference(actorClassifierMappingEClass, ACTOR_CLASSIFIER_MAPPING__ACTOR);
        createEAttribute(actorClassifierMappingEClass, ACTOR_CLASSIFIER_MAPPING__CLASSIFIER_NAME);

        fragmentEClass = createEClass(FRAGMENT);
        createEOperation(fragmentEClass, FRAGMENT___GET_CONTAINING_SEQUENCE);

        fragmentSequenceEClass = createEClass(FRAGMENT_SEQUENCE);
        createEReference(fragmentSequenceEClass, FRAGMENT_SEQUENCE__FRAGMENTS);
        createEOperation(fragmentSequenceEClass, FRAGMENT_SEQUENCE___GET_UML_FRAGMENT_SEQUENCE);

        messageEClass = createEClass(MESSAGE);
        createEReference(messageEClass, MESSAGE__ARRIVAL_EVENT);
        createEReference(messageEClass, MESSAGE__SEND_EVENT);
        createEReference(messageEClass, MESSAGE__LEFT);
        createEReference(messageEClass, MESSAGE__RIGHT);

        standardMessageEClass = createEClass(STANDARD_MESSAGE);
        createEAttribute(standardMessageEClass, STANDARD_MESSAGE__TYPE);

        responseMessageEClass = createEClass(RESPONSE_MESSAGE);
        createEOperation(responseMessageEClass, RESPONSE_MESSAGE___GET_CORRESPONDING_REQUEST);
        createEOperation(responseMessageEClass, RESPONSE_MESSAGE___MUST_HAVE_CORRESPONDING_MESSAGE__DIAGNOSTICCHAIN_MAP_1);

        createMessageEClass = createEClass(CREATE_MESSAGE);

        destructionMessageEClass = createEClass(DESTRUCTION_MESSAGE);

        occurenceSpecificationEClass = createEClass(OCCURENCE_SPECIFICATION);
        createEOperation(occurenceSpecificationEClass, OCCURENCE_SPECIFICATION___GET_OCCURENCE_REFERENCE);

        destructionOccurenceSpecificationEClass = createEClass(DESTRUCTION_OCCURENCE_SPECIFICATION);
        createEReference(destructionOccurenceSpecificationEClass, DESTRUCTION_OCCURENCE_SPECIFICATION__TARGET);

        combinedFragmentEClass = createEClass(COMBINED_FRAGMENT);
        createEOperation(combinedFragmentEClass, COMBINED_FRAGMENT___GET_INTERACTION_OPERATOR_KIND);

        orderedFragmentContainerEClass = createEClass(ORDERED_FRAGMENT_CONTAINER);
        createEReference(orderedFragmentContainerEClass, ORDERED_FRAGMENT_CONTAINER__CONDITION);

        singleRegionContainerEClass = createEClass(SINGLE_REGION_CONTAINER);
        createEReference(singleRegionContainerEClass, SINGLE_REGION_CONTAINER__REGION);

        multipleRegionContainerEClass = createEClass(MULTIPLE_REGION_CONTAINER);
        createEReference(multipleRegionContainerEClass, MULTIPLE_REGION_CONTAINER__REGIONS);

        alternativeEClass = createEClass(ALTERNATIVE);

        optionEClass = createEClass(OPTION);

        coRegionEClass = createEClass(CO_REGION);

        parallelEClass = createEClass(PARALLEL);

        criticalEClass = createEClass(CRITICAL);

        loopEClass = createEClass(LOOP);

        conditionEClass = createEClass(CONDITION);
        createEAttribute(conditionEClass, CONDITION__CONDITION);

        observationEClass = createEClass(OBSERVATION);

        timeObservationEClass = createEClass(TIME_OBSERVATION);
        createEAttribute(timeObservationEClass, TIME_OBSERVATION__TIME);
        createEReference(timeObservationEClass, TIME_OBSERVATION__EVENT);

        durationObservationEClass = createEClass(DURATION_OBSERVATION);
        createEAttribute(durationObservationEClass, DURATION_OBSERVATION__DURATION);
        createEReference(durationObservationEClass, DURATION_OBSERVATION__INTERVAL);

        constraintEClass = createEClass(CONSTRAINT);

        timeConstraintEClass = createEClass(TIME_CONSTRAINT);
        createEAttribute(timeConstraintEClass, TIME_CONSTRAINT__TIME);
        createEReference(timeConstraintEClass, TIME_CONSTRAINT__EVENT);

        durationConstraintEClass = createEClass(DURATION_CONSTRAINT);
        createEAttribute(durationConstraintEClass, DURATION_CONSTRAINT__DURATION);
        createEReference(durationConstraintEClass, DURATION_CONSTRAINT__INTERVAL);

        occurenceReferenceEClass = createEClass(OCCURENCE_REFERENCE);
        createEOperation(occurenceReferenceEClass, OCCURENCE_REFERENCE___GET_OCCURENCE_SPECIFICATION);

        explicitArrivalOccurenceReferenceEClass = createEClass(EXPLICIT_ARRIVAL_OCCURENCE_REFERENCE);
        createEReference(explicitArrivalOccurenceReferenceEClass, EXPLICIT_ARRIVAL_OCCURENCE_REFERENCE__EXPLICIT_OCCURENCE_SPECIFICATION);
        createEOperation(explicitArrivalOccurenceReferenceEClass, EXPLICIT_ARRIVAL_OCCURENCE_REFERENCE___GET_OCCURENCE_SPECIFICATION);

        implicitMessageOccurenceSpecificationEClass = createEClass(IMPLICIT_MESSAGE_OCCURENCE_SPECIFICATION);
        createEOperation(implicitMessageOccurenceSpecificationEClass, IMPLICIT_MESSAGE_OCCURENCE_SPECIFICATION___GET_OCCURENCE_REFERENCE);
        createEOperation(implicitMessageOccurenceSpecificationEClass, IMPLICIT_MESSAGE_OCCURENCE_SPECIFICATION___GET_OCCURENCE_SPECIFICATION);
        createEOperation(implicitMessageOccurenceSpecificationEClass, IMPLICIT_MESSAGE_OCCURENCE_SPECIFICATION___IS_ARRIVAL);
        createEOperation(implicitMessageOccurenceSpecificationEClass, IMPLICIT_MESSAGE_OCCURENCE_SPECIFICATION___IS_SEND);

        explicitArrivalOccurenceSpecificationEClass = createEClass(EXPLICIT_ARRIVAL_OCCURENCE_SPECIFICATION);
        createEReference(explicitArrivalOccurenceSpecificationEClass, EXPLICIT_ARRIVAL_OCCURENCE_SPECIFICATION__EXPLICIT_OCCURENCE_REFERENCE);
        createEOperation(explicitArrivalOccurenceSpecificationEClass, EXPLICIT_ARRIVAL_OCCURENCE_SPECIFICATION___GET_OCCURENCE_REFERENCE);

        pointInTimeEClass = createEClass(POINT_IN_TIME);

        pointInTimeSelectorEClass = createEClass(POINT_IN_TIME_SELECTOR);
        createEReference(pointInTimeSelectorEClass, POINT_IN_TIME_SELECTOR__POINT_IN_TIME);

        timeIntervalSelectorEClass = createEClass(TIME_INTERVAL_SELECTOR);
        createEOperation(timeIntervalSelectorEClass, TIME_INTERVAL_SELECTOR___GET_INTERVAL_START);
        createEOperation(timeIntervalSelectorEClass, TIME_INTERVAL_SELECTOR___GET_INTERVAL_END);

        biPointInTimeTimeIntervalSelectorEClass = createEClass(BI_POINT_IN_TIME_TIME_INTERVAL_SELECTOR);
        createEReference(biPointInTimeTimeIntervalSelectorEClass, BI_POINT_IN_TIME_TIME_INTERVAL_SELECTOR__START);
        createEReference(biPointInTimeTimeIntervalSelectorEClass, BI_POINT_IN_TIME_TIME_INTERVAL_SELECTOR__END);
        createEOperation(biPointInTimeTimeIntervalSelectorEClass, BI_POINT_IN_TIME_TIME_INTERVAL_SELECTOR___GET_INTERVAL_START);
        createEOperation(biPointInTimeTimeIntervalSelectorEClass, BI_POINT_IN_TIME_TIME_INTERVAL_SELECTOR___GET_INTERVAL_END);

        fragmentTimeIntervalSelectorEClass = createEClass(FRAGMENT_TIME_INTERVAL_SELECTOR);
        createEReference(fragmentTimeIntervalSelectorEClass, FRAGMENT_TIME_INTERVAL_SELECTOR__NON_INSTANTANEOUS_FRAGMENT);
        createEOperation(fragmentTimeIntervalSelectorEClass, FRAGMENT_TIME_INTERVAL_SELECTOR___GET_INTERVAL_START);
        createEOperation(fragmentTimeIntervalSelectorEClass, FRAGMENT_TIME_INTERVAL_SELECTOR___GET_INTERVAL_END);

        referenceEClass = createEClass(REFERENCE);
        createEReference(referenceEClass, REFERENCE__REFERENCE);

        nonInstantaneousFragmentEClass = createEClass(NON_INSTANTANEOUS_FRAGMENT);

        // Create enums
        messageTypeEEnum = createEEnum(MESSAGE_TYPE);
        actorTypeEEnum = createEEnum(ACTOR_TYPE);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    private boolean isInitialized = false;

    /**
     * Complete the initialization of the package and its meta-model.  This
     * method is guarded to have no affect on any invocation but its first.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void initializePackageContents() {
        if (isInitialized) return;
        isInitialized = true;

        // Initialize package
        setName(eNAME);
        setNsPrefix(eNS_PREFIX);
        setNsURI(eNS_URI);

        // Obtain other dependent packages
        TextualCommonsPackage theTextualCommonsPackage = (TextualCommonsPackage)EPackage.Registry.INSTANCE.getEPackage(TextualCommonsPackage.eNS_URI);
        UMLPackage theUMLPackage = (UMLPackage)EPackage.Registry.INSTANCE.getEPackage(UMLPackage.eNS_URI);

        // Create type parameters
        ETypeParameter occurenceSpecificationEClass_UMLOccurenceType = addETypeParameter(occurenceSpecificationEClass, "UMLOccurenceType");
        ETypeParameter occurenceReferenceEClass_OccurenceType = addETypeParameter(occurenceReferenceEClass, "OccurenceType");
        ETypeParameter pointInTimeEClass_UMLPointInTimeType = addETypeParameter(pointInTimeEClass, "UMLPointInTimeType");
        ETypeParameter nonInstantaneousFragmentEClass_UMLType = addETypeParameter(nonInstantaneousFragmentEClass, "UMLType");

        // Set bounds for type parameters
        EGenericType g1 = createEGenericType(theUMLPackage.getOccurrenceSpecification());
        occurenceSpecificationEClass_UMLOccurenceType.getEBounds().add(g1);
        g1 = createEGenericType(this.getOccurenceSpecification());
        EGenericType g2 = createEGenericType();
        g1.getETypeArguments().add(g2);
        occurenceReferenceEClass_OccurenceType.getEBounds().add(g1);
        g1 = createEGenericType(theUMLPackage.getNamedElement());
        pointInTimeEClass_UMLPointInTimeType.getEBounds().add(g1);
        g1 = createEGenericType(theUMLPackage.getInteractionFragment());
        nonInstantaneousFragmentEClass_UMLType.getEBounds().add(g1);

        // Add supertypes to classes
        g1 = createEGenericType(theTextualCommonsPackage.getUMLReferencingElement());
        g2 = createEGenericType(theUMLPackage.getInteraction());
        g1.getETypeArguments().add(g2);
        sequenceDiagramEClass.getEGenericSuperTypes().add(g1);
        g1 = createEGenericType(this.getFragmentSequence());
        sequenceDiagramEClass.getEGenericSuperTypes().add(g1);
        g1 = createEGenericType(theTextualCommonsPackage.getUMLReferencingElement());
        g2 = createEGenericType(theUMLPackage.getPackage());
        g1.getETypeArguments().add(g2);
        rootPackageEClass.getEGenericSuperTypes().add(g1);
        g1 = createEGenericType(theTextualCommonsPackage.getNamedElement());
        rootPackageEClass.getEGenericSuperTypes().add(g1);
        g1 = createEGenericType(theTextualCommonsPackage.getUMLReferencingElement());
        g2 = createEGenericType(theUMLPackage.getLifeline());
        g1.getETypeArguments().add(g2);
        actorEClass.getEGenericSuperTypes().add(g1);
        g1 = createEGenericType(theTextualCommonsPackage.getAliasedElement());
        actorEClass.getEGenericSuperTypes().add(g1);
        g1 = createEGenericType(theTextualCommonsPackage.getCommentable());
        g2 = createEGenericType(theUMLPackage.getLifeline());
        g1.getETypeArguments().add(g2);
        actorEClass.getEGenericSuperTypes().add(g1);
        g1 = createEGenericType(theTextualCommonsPackage.getUMLReferencingElement());
        g2 = createEGenericType(theUMLPackage.getProperty());
        g1.getETypeArguments().add(g2);
        actorClassifierMappingEClass.getEGenericSuperTypes().add(g1);
        g1 = createEGenericType(theTextualCommonsPackage.getUMLReferencingElement());
        g2 = createEGenericType(theUMLPackage.getMessage());
        g1.getETypeArguments().add(g2);
        messageEClass.getEGenericSuperTypes().add(g1);
        g1 = createEGenericType(this.getFragment());
        messageEClass.getEGenericSuperTypes().add(g1);
        g1 = createEGenericType(theTextualCommonsPackage.getCommentable());
        g2 = createEGenericType(theUMLPackage.getMessage());
        g1.getETypeArguments().add(g2);
        messageEClass.getEGenericSuperTypes().add(g1);
        g1 = createEGenericType(theTextualCommonsPackage.getAliasedElement());
        messageEClass.getEGenericSuperTypes().add(g1);
        standardMessageEClass.getESuperTypes().add(this.getMessage());
        responseMessageEClass.getESuperTypes().add(this.getMessage());
        createMessageEClass.getESuperTypes().add(this.getMessage());
        destructionMessageEClass.getESuperTypes().add(this.getMessage());
        g1 = createEGenericType(this.getFragment());
        occurenceSpecificationEClass.getEGenericSuperTypes().add(g1);
        g1 = createEGenericType(theTextualCommonsPackage.getUMLReferencingElement());
        g2 = createEGenericType(occurenceSpecificationEClass_UMLOccurenceType);
        g1.getETypeArguments().add(g2);
        occurenceSpecificationEClass.getEGenericSuperTypes().add(g1);
        g1 = createEGenericType(this.getPointInTime());
        g2 = createEGenericType(occurenceSpecificationEClass_UMLOccurenceType);
        g1.getETypeArguments().add(g2);
        occurenceSpecificationEClass.getEGenericSuperTypes().add(g1);
        g1 = createEGenericType(theTextualCommonsPackage.getCommentable());
        g2 = createEGenericType(occurenceSpecificationEClass_UMLOccurenceType);
        g1.getETypeArguments().add(g2);
        occurenceSpecificationEClass.getEGenericSuperTypes().add(g1);
        g1 = createEGenericType(this.getOccurenceSpecification());
        g2 = createEGenericType(theUMLPackage.getDestructionOccurrenceSpecification());
        g1.getETypeArguments().add(g2);
        destructionOccurenceSpecificationEClass.getEGenericSuperTypes().add(g1);
        g1 = createEGenericType(this.getNonInstantaneousFragment());
        g2 = createEGenericType(theUMLPackage.getCombinedFragment());
        g1.getETypeArguments().add(g2);
        combinedFragmentEClass.getEGenericSuperTypes().add(g1);
        g1 = createEGenericType(theTextualCommonsPackage.getUMLReferencingElement());
        g2 = createEGenericType(theUMLPackage.getCombinedFragment());
        g1.getETypeArguments().add(g2);
        combinedFragmentEClass.getEGenericSuperTypes().add(g1);
        g1 = createEGenericType(theTextualCommonsPackage.getCommentable());
        g2 = createEGenericType(theUMLPackage.getCombinedFragment());
        g1.getETypeArguments().add(g2);
        combinedFragmentEClass.getEGenericSuperTypes().add(g1);
        g1 = createEGenericType(theTextualCommonsPackage.getUMLReferencingElement());
        g2 = createEGenericType(theUMLPackage.getInteractionOperand());
        g1.getETypeArguments().add(g2);
        orderedFragmentContainerEClass.getEGenericSuperTypes().add(g1);
        g1 = createEGenericType(this.getFragmentSequence());
        orderedFragmentContainerEClass.getEGenericSuperTypes().add(g1);
        g1 = createEGenericType(theTextualCommonsPackage.getCommentable());
        g2 = createEGenericType(theUMLPackage.getInteractionOperand());
        g1.getETypeArguments().add(g2);
        orderedFragmentContainerEClass.getEGenericSuperTypes().add(g1);
        singleRegionContainerEClass.getESuperTypes().add(this.getCombinedFragment());
        multipleRegionContainerEClass.getESuperTypes().add(this.getCombinedFragment());
        alternativeEClass.getESuperTypes().add(this.getMultipleRegionContainer());
        optionEClass.getESuperTypes().add(this.getSingleRegionContainer());
        coRegionEClass.getESuperTypes().add(this.getMultipleRegionContainer());
        parallelEClass.getESuperTypes().add(this.getMultipleRegionContainer());
        criticalEClass.getESuperTypes().add(this.getSingleRegionContainer());
        loopEClass.getESuperTypes().add(this.getSingleRegionContainer());
        g1 = createEGenericType(theTextualCommonsPackage.getUMLReferencingElement());
        g2 = createEGenericType(theUMLPackage.getInteractionConstraint());
        g1.getETypeArguments().add(g2);
        conditionEClass.getEGenericSuperTypes().add(g1);
        observationEClass.getESuperTypes().add(this.getFragment());
        timeObservationEClass.getESuperTypes().add(this.getObservation());
        durationObservationEClass.getESuperTypes().add(this.getObservation());
        constraintEClass.getESuperTypes().add(this.getFragment());
        timeConstraintEClass.getESuperTypes().add(this.getConstraint());
        durationConstraintEClass.getESuperTypes().add(this.getConstraint());
        g1 = createEGenericType(this.getOccurenceReference());
        g2 = createEGenericType(this.getOccurenceSpecification());
        g1.getETypeArguments().add(g2);
        EGenericType g3 = createEGenericType(theUMLPackage.getMessageOccurrenceSpecification());
        g2.getETypeArguments().add(g3);
        explicitArrivalOccurenceReferenceEClass.getEGenericSuperTypes().add(g1);
        g1 = createEGenericType(this.getOccurenceSpecification());
        g2 = createEGenericType(theUMLPackage.getMessageOccurrenceSpecification());
        g1.getETypeArguments().add(g2);
        implicitMessageOccurenceSpecificationEClass.getEGenericSuperTypes().add(g1);
        g1 = createEGenericType(this.getOccurenceReference());
        g2 = createEGenericType(this.getOccurenceSpecification());
        g1.getETypeArguments().add(g2);
        g3 = createEGenericType(theUMLPackage.getMessageOccurrenceSpecification());
        g2.getETypeArguments().add(g3);
        implicitMessageOccurenceSpecificationEClass.getEGenericSuperTypes().add(g1);
        g1 = createEGenericType(this.getOccurenceSpecification());
        g2 = createEGenericType(theUMLPackage.getMessageOccurrenceSpecification());
        g1.getETypeArguments().add(g2);
        explicitArrivalOccurenceSpecificationEClass.getEGenericSuperTypes().add(g1);
        g1 = createEGenericType(theTextualCommonsPackage.getAliasedElement());
        explicitArrivalOccurenceSpecificationEClass.getEGenericSuperTypes().add(g1);
        g1 = createEGenericType(theTextualCommonsPackage.getUMLReferencingElement());
        g2 = createEGenericType(pointInTimeEClass_UMLPointInTimeType);
        g1.getETypeArguments().add(g2);
        pointInTimeEClass.getEGenericSuperTypes().add(g1);
        biPointInTimeTimeIntervalSelectorEClass.getESuperTypes().add(this.getTimeIntervalSelector());
        fragmentTimeIntervalSelectorEClass.getESuperTypes().add(this.getTimeIntervalSelector());
        g1 = createEGenericType(theTextualCommonsPackage.getUMLReferencingElement());
        g2 = createEGenericType(theUMLPackage.getInteractionUse());
        g1.getETypeArguments().add(g2);
        referenceEClass.getEGenericSuperTypes().add(g1);
        g1 = createEGenericType(this.getNonInstantaneousFragment());
        g2 = createEGenericType(theUMLPackage.getInteractionUse());
        g1.getETypeArguments().add(g2);
        referenceEClass.getEGenericSuperTypes().add(g1);
        g1 = createEGenericType(this.getFragment());
        nonInstantaneousFragmentEClass.getEGenericSuperTypes().add(g1);
        g1 = createEGenericType(this.getPointInTime());
        g2 = createEGenericType(nonInstantaneousFragmentEClass_UMLType);
        g1.getETypeArguments().add(g2);
        nonInstantaneousFragmentEClass.getEGenericSuperTypes().add(g1);
        g1 = createEGenericType(theTextualCommonsPackage.getAliasedElement());
        nonInstantaneousFragmentEClass.getEGenericSuperTypes().add(g1);

        // Initialize classes, features, and operations; add parameters
        initEClass(sequenceDiagramEClass, SequenceDiagram.class, "SequenceDiagram", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
        initEAttribute(getSequenceDiagram_Title(), ecorePackage.getEString(), "title", null, 1, 1, SequenceDiagram.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
        initEReference(getSequenceDiagram_RootPackage(), this.getRootPackage(), null, "rootPackage", null, 1, 1, SequenceDiagram.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
        initEReference(getSequenceDiagram_Actors(), this.getActor(), null, "actors", null, 0, -1, SequenceDiagram.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

        initEClass(rootPackageEClass, RootPackage.class, "RootPackage", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

        initEClass(actorEClass, Actor.class, "Actor", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
        initEAttribute(getActor_Deferred(), ecorePackage.getEBoolean(), "deferred", null, 0, 1, Actor.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
        initEReference(getActor_TypeMapping(), this.getActorClassifierMapping(), this.getActorClassifierMapping_Actor(), "typeMapping", null, 0, 1, Actor.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
        initEAttribute(getActor_ActorType(), this.getActorType(), "actorType", null, 0, 1, Actor.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

        initEClass(actorClassifierMappingEClass, ActorClassifierMapping.class, "ActorClassifierMapping", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
        initEReference(getActorClassifierMapping_Classifier(), theUMLPackage.getClassifier(), null, "classifier", null, 0, 1, ActorClassifierMapping.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
        initEReference(getActorClassifierMapping_Actor(), this.getActor(), this.getActor_TypeMapping(), "actor", null, 0, 1, ActorClassifierMapping.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
        initEAttribute(getActorClassifierMapping_ClassifierName(), ecorePackage.getEString(), "classifierName", null, 0, 1, ActorClassifierMapping.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

        initEClass(fragmentEClass, Fragment.class, "Fragment", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

        initEOperation(getFragment__GetContainingSequence(), this.getFragmentSequence(), "getContainingSequence", 0, 1, IS_UNIQUE, IS_ORDERED);

        initEClass(fragmentSequenceEClass, FragmentSequence.class, "FragmentSequence", IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
        initEReference(getFragmentSequence_Fragments(), this.getFragment(), null, "fragments", null, 0, -1, FragmentSequence.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

        EOperation op = initEOperation(getFragmentSequence__GetUMLFragmentSequence(), null, "getUMLFragmentSequence", 0, 1, IS_UNIQUE, IS_ORDERED);
        g1 = createEGenericType(ecorePackage.getEEList());
        g2 = createEGenericType(theUMLPackage.getInteractionFragment());
        g1.getETypeArguments().add(g2);
        initEOperation(op, g1);

        initEClass(messageEClass, Message.class, "Message", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
        g1 = createEGenericType(this.getOccurenceReference());
        g2 = createEGenericType(this.getOccurenceSpecification());
        g1.getETypeArguments().add(g2);
        g3 = createEGenericType(theUMLPackage.getMessageOccurrenceSpecification());
        g2.getETypeArguments().add(g3);
        initEReference(getMessage_ArrivalEvent(), g1, null, "arrivalEvent", null, 0, 1, Message.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
        g1 = createEGenericType(this.getOccurenceReference());
        g2 = createEGenericType(this.getOccurenceSpecification());
        g1.getETypeArguments().add(g2);
        g3 = createEGenericType(theUMLPackage.getMessageOccurrenceSpecification());
        g2.getETypeArguments().add(g3);
        initEReference(getMessage_SendEvent(), g1, null, "sendEvent", null, 0, 1, Message.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
        initEReference(getMessage_Left(), this.getActor(), null, "left", null, 0, 1, Message.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
        initEReference(getMessage_Right(), this.getActor(), null, "right", null, 0, 1, Message.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

        initEClass(standardMessageEClass, StandardMessage.class, "StandardMessage", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
        initEAttribute(getStandardMessage_Type(), this.getMessageType(), "type", null, 0, 1, StandardMessage.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

        initEClass(responseMessageEClass, ResponseMessage.class, "ResponseMessage", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

        initEOperation(getResponseMessage__GetCorrespondingRequest(), this.getStandardMessage(), "getCorrespondingRequest", 0, 1, IS_UNIQUE, IS_ORDERED);

        op = initEOperation(getResponseMessage__MustHaveCorrespondingMessage__DiagnosticChain_Map_1(), ecorePackage.getEBoolean(), "mustHaveCorrespondingMessage", 0, 1, IS_UNIQUE, IS_ORDERED);
        addEParameter(op, ecorePackage.getEDiagnosticChain(), "diagnostics", 0, 1, IS_UNIQUE, IS_ORDERED);
        g1 = createEGenericType(ecorePackage.getEMap());
        g2 = createEGenericType(ecorePackage.getEJavaObject());
        g1.getETypeArguments().add(g2);
        g2 = createEGenericType(ecorePackage.getEJavaObject());
        g1.getETypeArguments().add(g2);
        addEParameter(op, g1, "context", 0, 1, IS_UNIQUE, IS_ORDERED);

        initEClass(createMessageEClass, CreateMessage.class, "CreateMessage", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

        initEClass(destructionMessageEClass, DestructionMessage.class, "DestructionMessage", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

        initEClass(occurenceSpecificationEClass, OccurenceSpecification.class, "OccurenceSpecification", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

        op = initEOperation(getOccurenceSpecification__GetOccurenceReference(), null, "getOccurenceReference", 0, 1, IS_UNIQUE, IS_ORDERED);
        g1 = createEGenericType(this.getOccurenceReference());
        g2 = createEGenericType(this.getOccurenceSpecification());
        g1.getETypeArguments().add(g2);
        g3 = createEGenericType(occurenceSpecificationEClass_UMLOccurenceType);
        g2.getETypeArguments().add(g3);
        initEOperation(op, g1);

        initEClass(destructionOccurenceSpecificationEClass, DestructionOccurenceSpecification.class, "DestructionOccurenceSpecification", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
        initEReference(getDestructionOccurenceSpecification_Target(), this.getActor(), null, "target", null, 0, 1, DestructionOccurenceSpecification.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

        initEClass(combinedFragmentEClass, CombinedFragment.class, "CombinedFragment", IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

        initEOperation(getCombinedFragment__GetInteractionOperatorKind(), theUMLPackage.getInteractionOperatorKind(), "getInteractionOperatorKind", 0, 1, IS_UNIQUE, IS_ORDERED);

        initEClass(orderedFragmentContainerEClass, OrderedFragmentContainer.class, "OrderedFragmentContainer", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
        initEReference(getOrderedFragmentContainer_Condition(), this.getCondition(), null, "condition", null, 0, 1, OrderedFragmentContainer.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

        initEClass(singleRegionContainerEClass, SingleRegionContainer.class, "SingleRegionContainer", IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
        initEReference(getSingleRegionContainer_Region(), this.getOrderedFragmentContainer(), null, "region", null, 1, 1, SingleRegionContainer.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

        initEClass(multipleRegionContainerEClass, MultipleRegionContainer.class, "MultipleRegionContainer", IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
        initEReference(getMultipleRegionContainer_Regions(), this.getOrderedFragmentContainer(), null, "regions", null, 0, -1, MultipleRegionContainer.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

        initEClass(alternativeEClass, Alternative.class, "Alternative", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

        initEClass(optionEClass, Option.class, "Option", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

        initEClass(coRegionEClass, CoRegion.class, "CoRegion", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

        initEClass(parallelEClass, Parallel.class, "Parallel", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

        initEClass(criticalEClass, Critical.class, "Critical", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

        initEClass(loopEClass, Loop.class, "Loop", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

        initEClass(conditionEClass, Condition.class, "Condition", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
        initEAttribute(getCondition_Condition(), ecorePackage.getEString(), "condition", null, 0, 1, Condition.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

        initEClass(observationEClass, Observation.class, "Observation", IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

        initEClass(timeObservationEClass, TimeObservation.class, "TimeObservation", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
        initEAttribute(getTimeObservation_Time(), ecorePackage.getEString(), "time", null, 0, 1, TimeObservation.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
        initEReference(getTimeObservation_Event(), this.getPointInTimeSelector(), null, "event", null, 0, 1, TimeObservation.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

        initEClass(durationObservationEClass, DurationObservation.class, "DurationObservation", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
        initEAttribute(getDurationObservation_Duration(), ecorePackage.getEString(), "duration", null, 0, 1, DurationObservation.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
        initEReference(getDurationObservation_Interval(), this.getTimeIntervalSelector(), null, "interval", null, 0, 1, DurationObservation.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

        initEClass(constraintEClass, Constraint.class, "Constraint", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

        initEClass(timeConstraintEClass, TimeConstraint.class, "TimeConstraint", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
        initEAttribute(getTimeConstraint_Time(), ecorePackage.getEString(), "time", null, 0, 1, TimeConstraint.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
        initEReference(getTimeConstraint_Event(), this.getPointInTimeSelector(), null, "event", null, 0, 1, TimeConstraint.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

        initEClass(durationConstraintEClass, DurationConstraint.class, "DurationConstraint", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
        initEAttribute(getDurationConstraint_Duration(), ecorePackage.getEString(), "duration", null, 0, 1, DurationConstraint.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
        initEReference(getDurationConstraint_Interval(), this.getTimeIntervalSelector(), null, "interval", null, 0, 1, DurationConstraint.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

        initEClass(occurenceReferenceEClass, OccurenceReference.class, "OccurenceReference", IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

        op = initEOperation(getOccurenceReference__GetOccurenceSpecification(), null, "getOccurenceSpecification", 0, 1, IS_UNIQUE, IS_ORDERED);
        g1 = createEGenericType(occurenceReferenceEClass_OccurenceType);
        initEOperation(op, g1);

        initEClass(explicitArrivalOccurenceReferenceEClass, ExplicitArrivalOccurenceReference.class, "ExplicitArrivalOccurenceReference", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
        initEReference(getExplicitArrivalOccurenceReference_ExplicitOccurenceSpecification(), this.getExplicitArrivalOccurenceSpecification(), this.getExplicitArrivalOccurenceSpecification_ExplicitOccurenceReference(), "explicitOccurenceSpecification", null, 0, 1, ExplicitArrivalOccurenceReference.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

        op = initEOperation(getExplicitArrivalOccurenceReference__GetOccurenceSpecification(), null, "getOccurenceSpecification", 0, 1, IS_UNIQUE, IS_ORDERED);
        g1 = createEGenericType(this.getOccurenceSpecification());
        g2 = createEGenericType(theUMLPackage.getMessageOccurrenceSpecification());
        g1.getETypeArguments().add(g2);
        initEOperation(op, g1);

        initEClass(implicitMessageOccurenceSpecificationEClass, ImplicitMessageOccurenceSpecification.class, "ImplicitMessageOccurenceSpecification", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

        op = initEOperation(getImplicitMessageOccurenceSpecification__GetOccurenceReference(), null, "getOccurenceReference", 0, 1, IS_UNIQUE, IS_ORDERED);
        g1 = createEGenericType(this.getOccurenceReference());
        g2 = createEGenericType(this.getOccurenceSpecification());
        g1.getETypeArguments().add(g2);
        g3 = createEGenericType(theUMLPackage.getMessageOccurrenceSpecification());
        g2.getETypeArguments().add(g3);
        initEOperation(op, g1);

        op = initEOperation(getImplicitMessageOccurenceSpecification__GetOccurenceSpecification(), null, "getOccurenceSpecification", 0, 1, IS_UNIQUE, IS_ORDERED);
        g1 = createEGenericType(this.getOccurenceSpecification());
        g2 = createEGenericType(theUMLPackage.getMessageOccurrenceSpecification());
        g1.getETypeArguments().add(g2);
        initEOperation(op, g1);

        initEOperation(getImplicitMessageOccurenceSpecification__IsArrival(), ecorePackage.getEBoolean(), "isArrival", 0, 1, IS_UNIQUE, IS_ORDERED);

        initEOperation(getImplicitMessageOccurenceSpecification__IsSend(), ecorePackage.getEBoolean(), "isSend", 0, 1, IS_UNIQUE, IS_ORDERED);

        initEClass(explicitArrivalOccurenceSpecificationEClass, ExplicitArrivalOccurenceSpecification.class, "ExplicitArrivalOccurenceSpecification", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
        initEReference(getExplicitArrivalOccurenceSpecification_ExplicitOccurenceReference(), this.getExplicitArrivalOccurenceReference(), this.getExplicitArrivalOccurenceReference_ExplicitOccurenceSpecification(), "explicitOccurenceReference", null, 0, 1, ExplicitArrivalOccurenceSpecification.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

        op = initEOperation(getExplicitArrivalOccurenceSpecification__GetOccurenceReference(), null, "getOccurenceReference", 0, 1, IS_UNIQUE, IS_ORDERED);
        g1 = createEGenericType(this.getOccurenceReference());
        g2 = createEGenericType(this.getOccurenceSpecification());
        g1.getETypeArguments().add(g2);
        g3 = createEGenericType(theUMLPackage.getMessageOccurrenceSpecification());
        g2.getETypeArguments().add(g3);
        initEOperation(op, g1);

        initEClass(pointInTimeEClass, PointInTime.class, "PointInTime", IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

        initEClass(pointInTimeSelectorEClass, PointInTimeSelector.class, "PointInTimeSelector", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
        g1 = createEGenericType(this.getPointInTime());
        g2 = createEGenericType();
        g1.getETypeArguments().add(g2);
        initEReference(getPointInTimeSelector_PointInTime(), g1, null, "pointInTime", null, 0, 1, PointInTimeSelector.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

        initEClass(timeIntervalSelectorEClass, TimeIntervalSelector.class, "TimeIntervalSelector", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

        op = initEOperation(getTimeIntervalSelector__GetIntervalStart(), null, "getIntervalStart", 0, 1, IS_UNIQUE, IS_ORDERED);
        g1 = createEGenericType(this.getPointInTime());
        g2 = createEGenericType();
        g1.getETypeArguments().add(g2);
        initEOperation(op, g1);

        op = initEOperation(getTimeIntervalSelector__GetIntervalEnd(), null, "getIntervalEnd", 0, 1, IS_UNIQUE, IS_ORDERED);
        g1 = createEGenericType(this.getPointInTime());
        g2 = createEGenericType();
        g1.getETypeArguments().add(g2);
        initEOperation(op, g1);

        initEClass(biPointInTimeTimeIntervalSelectorEClass, BiPointInTimeTimeIntervalSelector.class, "BiPointInTimeTimeIntervalSelector", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
        initEReference(getBiPointInTimeTimeIntervalSelector_Start(), this.getPointInTimeSelector(), null, "start", null, 0, 1, BiPointInTimeTimeIntervalSelector.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
        initEReference(getBiPointInTimeTimeIntervalSelector_End(), this.getPointInTimeSelector(), null, "end", null, 0, 1, BiPointInTimeTimeIntervalSelector.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

        op = initEOperation(getBiPointInTimeTimeIntervalSelector__GetIntervalStart(), null, "getIntervalStart", 0, 1, IS_UNIQUE, IS_ORDERED);
        g1 = createEGenericType(this.getPointInTime());
        g2 = createEGenericType();
        g1.getETypeArguments().add(g2);
        initEOperation(op, g1);

        op = initEOperation(getBiPointInTimeTimeIntervalSelector__GetIntervalEnd(), null, "getIntervalEnd", 0, 1, IS_UNIQUE, IS_ORDERED);
        g1 = createEGenericType(this.getPointInTime());
        g2 = createEGenericType();
        g1.getETypeArguments().add(g2);
        initEOperation(op, g1);

        initEClass(fragmentTimeIntervalSelectorEClass, FragmentTimeIntervalSelector.class, "FragmentTimeIntervalSelector", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
        g1 = createEGenericType(this.getNonInstantaneousFragment());
        g2 = createEGenericType();
        g1.getETypeArguments().add(g2);
        initEReference(getFragmentTimeIntervalSelector_NonInstantaneousFragment(), g1, null, "nonInstantaneousFragment", null, 0, 1, FragmentTimeIntervalSelector.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

        op = initEOperation(getFragmentTimeIntervalSelector__GetIntervalStart(), null, "getIntervalStart", 0, 1, IS_UNIQUE, IS_ORDERED);
        g1 = createEGenericType(this.getPointInTime());
        g2 = createEGenericType();
        g1.getETypeArguments().add(g2);
        initEOperation(op, g1);

        op = initEOperation(getFragmentTimeIntervalSelector__GetIntervalEnd(), null, "getIntervalEnd", 0, 1, IS_UNIQUE, IS_ORDERED);
        g1 = createEGenericType(this.getPointInTime());
        g2 = createEGenericType();
        g1.getETypeArguments().add(g2);
        initEOperation(op, g1);

        initEClass(referenceEClass, Reference.class, "Reference", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
        initEReference(getReference_Reference(), theUMLPackage.getInteraction(), null, "reference", null, 0, 1, Reference.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

        initEClass(nonInstantaneousFragmentEClass, NonInstantaneousFragment.class, "NonInstantaneousFragment", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

        // Initialize enums and add enum literals
        initEEnum(messageTypeEEnum, MessageType.class, "MessageType");
        addEEnumLiteral(messageTypeEEnum, MessageType.SYNC);
        addEEnumLiteral(messageTypeEEnum, MessageType.ASYNC);

        initEEnum(actorTypeEEnum, ActorType.class, "ActorType");
        addEEnumLiteral(actorTypeEEnum, ActorType.HUMAN);
        addEEnumLiteral(actorTypeEEnum, ActorType.MACHINE);

        // Create resource
        createResource(eNS_URI);

        // Create annotations
        // http://www.eclipse.org/OCL/Import
        createImportAnnotations();
        // http://www.eclipse.org/emf/2002/Ecore
        createEcoreAnnotations();
        // http://www.eclipse.org/emf/2002/GenModel
        createGenModelAnnotations();
    }

    /**
     * Initializes the annotations for <b>http://www.eclipse.org/OCL/Import</b>.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected void createImportAnnotations() {
        String source = "http://www.eclipse.org/OCL/Import";	
        addAnnotation
          (this, 
           source, 
           new String[] {
             "ecore", "http://www.eclipse.org/emf/2002/Ecore",
             "txtCmn", "../../de.cooperateproject.modeling.textual.common.metamodel/model/textualCommons.ecore#/",
             "uml", "../../../plugin/org.eclipse.uml2.uml/model/UML.ecore#/"
           });
    }

    /**
     * Initializes the annotations for <b>http://www.eclipse.org/emf/2002/Ecore</b>.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected void createEcoreAnnotations() {
        String source = "http://www.eclipse.org/emf/2002/Ecore";	
        addAnnotation
          (this, 
           source, 
           new String[] {
           });	
        addAnnotation
          (responseMessageEClass, 
           source, 
           new String[] {
             "constraints", "mustHaveCorrespondingMessage"
           });
    }

    /**
     * Initializes the annotations for <b>http://www.eclipse.org/emf/2002/GenModel</b>.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected void createGenModelAnnotations() {
        String source = "http://www.eclipse.org/emf/2002/GenModel";	
        addAnnotation
          (getSequenceDiagram_Title(), 
           source, 
           new String[] {
             "get", "throw new UnsupportedOperationException();  // FIXME Unimplemented http://www.cooperateproject.de/modeling/textual/sequence/Sequence!SequenceDiagram!title"
           });	
        addAnnotation
          (getSequenceDiagram_RootPackage(), 
           source, 
           new String[] {
             "get", "throw new UnsupportedOperationException();  // FIXME Unimplemented http://www.cooperateproject.de/modeling/textual/sequence/Sequence!SequenceDiagram!rootPackage"
           });	
        addAnnotation
          (getSequenceDiagram_Actors(), 
           source, 
           new String[] {
             "get", "throw new UnsupportedOperationException();  // FIXME Unimplemented http://www.cooperateproject.de/modeling/textual/sequence/Sequence!SequenceDiagram!actors"
           });	
        addAnnotation
          (getActor_Deferred(), 
           source, 
           new String[] {
             "get", "throw new UnsupportedOperationException();  // FIXME Unimplemented http://www.cooperateproject.de/modeling/textual/sequence/Sequence!Actor!deferred"
           });	
        addAnnotation
          (getActor_TypeMapping(), 
           source, 
           new String[] {
             "get", "throw new UnsupportedOperationException();  // FIXME Unimplemented http://www.cooperateproject.de/modeling/textual/sequence/Sequence!Actor!typeMapping"
           });	
        addAnnotation
          (getActor_ActorType(), 
           source, 
           new String[] {
             "get", "throw new UnsupportedOperationException();  // FIXME Unimplemented http://www.cooperateproject.de/modeling/textual/sequence/Sequence!Actor!actorType"
           });	
        addAnnotation
          (getActorClassifierMapping_Classifier(), 
           source, 
           new String[] {
             "get", "throw new UnsupportedOperationException();  // FIXME Unimplemented http://www.cooperateproject.de/modeling/textual/sequence/Sequence!ActorClassifierMapping!classifier"
           });	
        addAnnotation
          (getActorClassifierMapping_Actor(), 
           source, 
           new String[] {
             "get", "throw new UnsupportedOperationException();  // FIXME Unimplemented http://www.cooperateproject.de/modeling/textual/sequence/Sequence!ActorClassifierMapping!actor"
           });	
        addAnnotation
          (getActorClassifierMapping_ClassifierName(), 
           source, 
           new String[] {
             "get", "throw new UnsupportedOperationException();  // FIXME Unimplemented http://www.cooperateproject.de/modeling/textual/sequence/Sequence!ActorClassifierMapping!classifierName"
           });	
        addAnnotation
          (getFragment__GetContainingSequence(), 
           source, 
           new String[] {
             "body", "return de.cooperateproject.modeling.textual.sequence.sequence.util.SequenceUtils.determineClosestContainingFragmentSequence(this);"
           });	
        addAnnotation
          (getFragmentSequence__GetUMLFragmentSequence(), 
           source, 
           new String[] {
             "body", "return de.cooperateproject.modeling.textual.sequence.sequence.util.SequenceUtils.getUMLFragmentSequence(this);"
           });	
        addAnnotation
          (getFragmentSequence_Fragments(), 
           source, 
           new String[] {
             "get", "throw new UnsupportedOperationException();  // FIXME Unimplemented http://www.cooperateproject.de/modeling/textual/sequence/Sequence!FragmentSequence!fragments"
           });	
        addAnnotation
          (getMessage_ArrivalEvent(), 
           source, 
           new String[] {
             "get", "throw new UnsupportedOperationException();  // FIXME Unimplemented http://www.cooperateproject.de/modeling/textual/sequence/Sequence!Message!arrivalEvent"
           });	
        addAnnotation
          (getMessage_SendEvent(), 
           source, 
           new String[] {
             "get", "throw new UnsupportedOperationException();  // FIXME Unimplemented http://www.cooperateproject.de/modeling/textual/sequence/Sequence!Message!sendEvent"
           });	
        addAnnotation
          (getMessage_Left(), 
           source, 
           new String[] {
             "get", "throw new UnsupportedOperationException();  // FIXME Unimplemented http://www.cooperateproject.de/modeling/textual/sequence/Sequence!Message!left"
           });	
        addAnnotation
          (getMessage_Right(), 
           source, 
           new String[] {
             "get", "throw new UnsupportedOperationException();  // FIXME Unimplemented http://www.cooperateproject.de/modeling/textual/sequence/Sequence!Message!right"
           });	
        addAnnotation
          (getStandardMessage_Type(), 
           source, 
           new String[] {
             "get", "throw new UnsupportedOperationException();  // FIXME Unimplemented http://www.cooperateproject.de/modeling/textual/sequence/Sequence!StandardMessage!type"
           });	
        addAnnotation
          (getResponseMessage__GetCorrespondingRequest(), 
           source, 
           new String[] {
             "body", "return de.cooperateproject.modeling.textual.sequence.sequence.util.SequenceUtils.getSynchronousMessageCorrespondingToResponse(this);"
           });	
        addAnnotation
          (getResponseMessage__MustHaveCorrespondingMessage__DiagnosticChain_Map_1(), 
           source, 
           new String[] {
             "body", "/**\n * \n * inv mustHaveCorrespondingMessage:\n *   let\n *     severity : Integer[1] = \'ResponseMessage::mustHaveCorrespondingMessage\'.getSeverity()\n *   in\n *     if severity <= 0\n *     then true\n *     else\n *       let\n *         status : OclAny[?] = not self.getCorrespondingRequest()\n *         .oclIsUndefined()\n *       in\n *         \'ResponseMessage::mustHaveCorrespondingMessage\'.logDiagnostic(self, null, diagnostics, context, null, severity, status, 0)\n *     endif\n */\nfinal /*@NonInvalid*/ <%org.eclipse.ocl.pivot.evaluation.Executor%> executor = <%org.eclipse.ocl.pivot.internal.utilities.PivotUtilInternal%>.getExecutor(this);\nfinal /*@NonInvalid*/ <%org.eclipse.ocl.pivot.values.IntegerValue%> severity_0 = <%org.eclipse.ocl.pivot.library.string.CGStringGetSeverityOperation%>.INSTANCE.evaluate(executor, <%de.cooperateproject.modeling.textual.sequence.sequence.SequenceTables%>.STR_ResponseMessage_c_c_mustHaveCorrespondingMessage);\nfinal /*@NonInvalid*/ boolean le = <%org.eclipse.ocl.pivot.library.oclany.OclComparableLessThanEqualOperation%>.INSTANCE.evaluate(executor, severity_0, <%de.cooperateproject.modeling.textual.sequence.sequence.SequenceTables%>.INT_0).booleanValue();\n/*@NonInvalid*/ boolean symbol_1;\nif (le) {\n    symbol_1 = <%org.eclipse.ocl.pivot.utilities.ValueUtil%>.TRUE_VALUE;\n}\nelse {\n    /*@Caught*/ /*@NonNull*/ <%java.lang.Object%> CAUGHT_getCorrespondingRequest;\n    try {\n        final /*@Thrown*/ <%de.cooperateproject.modeling.textual.sequence.sequence.StandardMessage%> getCorrespondingRequest = this.getCorrespondingRequest();\n        CAUGHT_getCorrespondingRequest = getCorrespondingRequest;\n    }\n    catch (<%java.lang.Exception%> e) {\n        CAUGHT_getCorrespondingRequest = <%org.eclipse.ocl.pivot.utilities.ValueUtil%>.createInvalidValue(e);\n    }\n    final /*@NonInvalid*/ boolean symbol_0 = CAUGHT_getCorrespondingRequest instanceof <%org.eclipse.ocl.pivot.values.InvalidValueException%>;\n    final /*@NonInvalid*/ <%java.lang.Boolean%> status = <%org.eclipse.ocl.pivot.library.logical.BooleanNotOperation%>.INSTANCE.evaluate(symbol_0);\n    final /*@NonInvalid*/ boolean logDiagnostic = <%org.eclipse.ocl.pivot.library.string.CGStringLogDiagnosticOperation%>.INSTANCE.evaluate(executor, <%org.eclipse.ocl.pivot.ids.TypeId%>.BOOLEAN, <%de.cooperateproject.modeling.textual.sequence.sequence.SequenceTables%>.STR_ResponseMessage_c_c_mustHaveCorrespondingMessage, this, null, diagnostics, context, null, severity_0, status, <%de.cooperateproject.modeling.textual.sequence.sequence.SequenceTables%>.INT_0).booleanValue();\n    symbol_1 = logDiagnostic;\n}\nreturn Boolean.TRUE == symbol_1;"
           });	
        addAnnotation
          (getOccurenceSpecification__GetOccurenceReference(), 
           source, 
           new String[] {
             "body", "return null;"
           });	
        addAnnotation
          (getDestructionOccurenceSpecification_Target(), 
           source, 
           new String[] {
             "get", "throw new UnsupportedOperationException();  // FIXME Unimplemented http://www.cooperateproject.de/modeling/textual/sequence/Sequence!DestructionOccurenceSpecification!target"
           });	
        addAnnotation
          (getCombinedFragment__GetInteractionOperatorKind(), 
           source, 
           new String[] {
             "body", "return de.cooperateproject.modeling.textual.sequence.sequence.util.SequenceUtils.getInteractionOperatorKindOfCombinedFragment(this);"
           });	
        addAnnotation
          (getOrderedFragmentContainer_Condition(), 
           source, 
           new String[] {
             "get", "throw new UnsupportedOperationException();  // FIXME Unimplemented http://www.cooperateproject.de/modeling/textual/sequence/Sequence!OrderedFragmentContainer!condition"
           });	
        addAnnotation
          (getSingleRegionContainer_Region(), 
           source, 
           new String[] {
             "get", "throw new UnsupportedOperationException();  // FIXME Unimplemented http://www.cooperateproject.de/modeling/textual/sequence/Sequence!SingleRegionContainer!region"
           });	
        addAnnotation
          (getMultipleRegionContainer_Regions(), 
           source, 
           new String[] {
             "get", "throw new UnsupportedOperationException();  // FIXME Unimplemented http://www.cooperateproject.de/modeling/textual/sequence/Sequence!MultipleRegionContainer!regions"
           });	
        addAnnotation
          (getCondition_Condition(), 
           source, 
           new String[] {
             "get", "throw new UnsupportedOperationException();  // FIXME Unimplemented http://www.cooperateproject.de/modeling/textual/sequence/Sequence!Condition!condition"
           });	
        addAnnotation
          (getTimeObservation_Time(), 
           source, 
           new String[] {
             "get", "throw new UnsupportedOperationException();  // FIXME Unimplemented http://www.cooperateproject.de/modeling/textual/sequence/Sequence!TimeObservation!time"
           });	
        addAnnotation
          (getTimeObservation_Event(), 
           source, 
           new String[] {
             "get", "throw new UnsupportedOperationException();  // FIXME Unimplemented http://www.cooperateproject.de/modeling/textual/sequence/Sequence!TimeObservation!event"
           });	
        addAnnotation
          (getDurationObservation_Duration(), 
           source, 
           new String[] {
             "get", "throw new UnsupportedOperationException();  // FIXME Unimplemented http://www.cooperateproject.de/modeling/textual/sequence/Sequence!DurationObservation!duration"
           });	
        addAnnotation
          (getDurationObservation_Interval(), 
           source, 
           new String[] {
             "get", "throw new UnsupportedOperationException();  // FIXME Unimplemented http://www.cooperateproject.de/modeling/textual/sequence/Sequence!DurationObservation!interval"
           });	
        addAnnotation
          (getTimeConstraint_Time(), 
           source, 
           new String[] {
             "get", "throw new UnsupportedOperationException();  // FIXME Unimplemented http://www.cooperateproject.de/modeling/textual/sequence/Sequence!TimeConstraint!time"
           });	
        addAnnotation
          (getTimeConstraint_Event(), 
           source, 
           new String[] {
             "get", "throw new UnsupportedOperationException();  // FIXME Unimplemented http://www.cooperateproject.de/modeling/textual/sequence/Sequence!TimeConstraint!event"
           });	
        addAnnotation
          (getDurationConstraint_Duration(), 
           source, 
           new String[] {
             "get", "throw new UnsupportedOperationException();  // FIXME Unimplemented http://www.cooperateproject.de/modeling/textual/sequence/Sequence!DurationConstraint!duration"
           });	
        addAnnotation
          (getDurationConstraint_Interval(), 
           source, 
           new String[] {
             "get", "throw new UnsupportedOperationException();  // FIXME Unimplemented http://www.cooperateproject.de/modeling/textual/sequence/Sequence!DurationConstraint!interval"
           });	
        addAnnotation
          (getOccurenceReference__GetOccurenceSpecification(), 
           source, 
           new String[] {
             "body", "throw new RuntimeException(\"This method should have been overidden\");"
           });	
        addAnnotation
          (getExplicitArrivalOccurenceReference__GetOccurenceSpecification(), 
           source, 
           new String[] {
             "body", "return this.getExplicitOccurenceSpecification();"
           });	
        addAnnotation
          (getExplicitArrivalOccurenceReference_ExplicitOccurenceSpecification(), 
           source, 
           new String[] {
             "get", "throw new UnsupportedOperationException();  // FIXME Unimplemented http://www.cooperateproject.de/modeling/textual/sequence/Sequence!ExplicitArrivalOccurenceReference!explicitOccurenceSpecification"
           });	
        addAnnotation
          (getImplicitMessageOccurenceSpecification__GetOccurenceReference(), 
           source, 
           new String[] {
             "body", "return this;"
           });	
        addAnnotation
          (getImplicitMessageOccurenceSpecification__GetOccurenceSpecification(), 
           source, 
           new String[] {
             "body", "return this;"
           });	
        addAnnotation
          (getImplicitMessageOccurenceSpecification__IsArrival(), 
           source, 
           new String[] {
             "body", "return de.cooperateproject.modeling.textual.sequence.sequence.util.SequenceUtils.isArrivalOccurrence(this);"
           });	
        addAnnotation
          (getImplicitMessageOccurenceSpecification__IsSend(), 
           source, 
           new String[] {
             "body", "return de.cooperateproject.modeling.textual.sequence.sequence.util.SequenceUtils.isSendOccurrence(this);"
           });	
        addAnnotation
          (getExplicitArrivalOccurenceSpecification__GetOccurenceReference(), 
           source, 
           new String[] {
             "body", "return this.getExplicitOccurenceReference();"
           });	
        addAnnotation
          (getExplicitArrivalOccurenceSpecification_ExplicitOccurenceReference(), 
           source, 
           new String[] {
             "get", "throw new UnsupportedOperationException();  // FIXME Unimplemented http://www.cooperateproject.de/modeling/textual/sequence/Sequence!ExplicitArrivalOccurenceSpecification!explicitOccurenceReference"
           });	
        addAnnotation
          (getPointInTimeSelector_PointInTime(), 
           source, 
           new String[] {
             "get", "throw new UnsupportedOperationException();  // FIXME Unimplemented http://www.cooperateproject.de/modeling/textual/sequence/Sequence!PointInTimeSelector!pointInTime"
           });	
        addAnnotation
          (getTimeIntervalSelector__GetIntervalStart(), 
           source, 
           new String[] {
             "body", "throw new RuntimeException(\"This method should have been overidden\");"
           });	
        addAnnotation
          (getTimeIntervalSelector__GetIntervalEnd(), 
           source, 
           new String[] {
             "body", "throw new RuntimeException(\"This method should have been overidden\");"
           });	
        addAnnotation
          (getBiPointInTimeTimeIntervalSelector__GetIntervalStart(), 
           source, 
           new String[] {
             "body", "return this.getStart().getPointInTime();"
           });	
        addAnnotation
          (getBiPointInTimeTimeIntervalSelector__GetIntervalEnd(), 
           source, 
           new String[] {
             "body", "return this.getEnd().getPointInTime();"
           });	
        addAnnotation
          (getBiPointInTimeTimeIntervalSelector_Start(), 
           source, 
           new String[] {
             "get", "throw new UnsupportedOperationException();  // FIXME Unimplemented http://www.cooperateproject.de/modeling/textual/sequence/Sequence!BiPointInTimeTimeIntervalSelector!start"
           });	
        addAnnotation
          (getBiPointInTimeTimeIntervalSelector_End(), 
           source, 
           new String[] {
             "get", "throw new UnsupportedOperationException();  // FIXME Unimplemented http://www.cooperateproject.de/modeling/textual/sequence/Sequence!BiPointInTimeTimeIntervalSelector!end"
           });	
        addAnnotation
          (getFragmentTimeIntervalSelector__GetIntervalStart(), 
           source, 
           new String[] {
             "body", "return this.getNonInstantaneousFragment();"
           });	
        addAnnotation
          (getFragmentTimeIntervalSelector__GetIntervalEnd(), 
           source, 
           new String[] {
             "body", "return this.getNonInstantaneousFragment();"
           });	
        addAnnotation
          (getFragmentTimeIntervalSelector_NonInstantaneousFragment(), 
           source, 
           new String[] {
             "get", "throw new UnsupportedOperationException();  // FIXME Unimplemented http://www.cooperateproject.de/modeling/textual/sequence/Sequence!FragmentTimeIntervalSelector!nonInstantaneousFragment"
           });	
        addAnnotation
          (getReference_Reference(), 
           source, 
           new String[] {
             "get", "throw new UnsupportedOperationException();  // FIXME Unimplemented http://www.cooperateproject.de/modeling/textual/sequence/Sequence!Reference!reference"
           });
    }

} //SequencePackageImpl
