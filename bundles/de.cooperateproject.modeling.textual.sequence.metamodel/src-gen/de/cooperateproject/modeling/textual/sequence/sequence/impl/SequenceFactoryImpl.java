/**
 * generated by Xtext 2.11.0
 */
package de.cooperateproject.modeling.textual.sequence.sequence.impl;

import de.cooperateproject.modeling.textual.sequence.sequence.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class SequenceFactoryImpl extends EFactoryImpl implements SequenceFactory {
    /**
     * Creates the default factory implementation.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public static SequenceFactory init() {
        try {
            SequenceFactory theSequenceFactory = (SequenceFactory)EPackage.Registry.INSTANCE.getEFactory(SequencePackage.eNS_URI);
            if (theSequenceFactory != null) {
                return theSequenceFactory;
            }
        }
        catch (Exception exception) {
            EcorePlugin.INSTANCE.log(exception);
        }
        return new SequenceFactoryImpl();
    }

    /**
     * Creates an instance of the factory.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public SequenceFactoryImpl() {
        super();
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public EObject create(EClass eClass) {
        switch (eClass.getClassifierID()) {
            case SequencePackage.SEQUENCE_DIAGRAM: return (EObject)createSequenceDiagram();
            case SequencePackage.ROOT_PACKAGE: return (EObject)createRootPackage();
            case SequencePackage.ACTOR: return (EObject)createActor();
            case SequencePackage.ACTOR_CLASSIFIER_MAPPING: return (EObject)createActorClassifierMapping();
            case SequencePackage.MESSAGE: return (EObject)createMessage();
            case SequencePackage.STANDARD_MESSAGE: return (EObject)createStandardMessage();
            case SequencePackage.RESPONSE_MESSAGE: return (EObject)createResponseMessage();
            case SequencePackage.CREATE_MESSAGE: return (EObject)createCreateMessage();
            case SequencePackage.DESTRUCTION_MESSAGE: return (EObject)createDestructionMessage();
            case SequencePackage.DESTRUCTION_OCCURENCE_SPECIFICATION: return (EObject)createDestructionOccurenceSpecification();
            case SequencePackage.ORDERED_FRAGMENT_CONTAINER: return (EObject)createOrderedFragmentContainer();
            case SequencePackage.ALTERNATIVE: return (EObject)createAlternative();
            case SequencePackage.OPTION: return (EObject)createOption();
            case SequencePackage.CO_REGION: return (EObject)createCoRegion();
            case SequencePackage.PARALLEL: return (EObject)createParallel();
            case SequencePackage.CRITICAL: return (EObject)createCritical();
            case SequencePackage.LOOP: return (EObject)createLoop();
            case SequencePackage.CONDITION: return (EObject)createCondition();
            case SequencePackage.TIME_OBSERVATION: return (EObject)createTimeObservation();
            case SequencePackage.DURATION_OBSERVATION: return (EObject)createDurationObservation();
            case SequencePackage.TIME_CONSTRAINT: return (EObject)createTimeConstraint();
            case SequencePackage.DURATION_CONSTRAINT: return (EObject)createDurationConstraint();
            case SequencePackage.EXPLICIT_ARRIVAL_OCCURENCE_REFERENCE: return (EObject)createExplicitArrivalOccurenceReference();
            case SequencePackage.IMPLICIT_MESSAGE_OCCURENCE_SPECIFICATION: return (EObject)createImplicitMessageOccurenceSpecification();
            case SequencePackage.EXPLICIT_ARRIVAL_OCCURENCE_SPECIFICATION: return (EObject)createExplicitArrivalOccurenceSpecification();
            case SequencePackage.POINT_IN_TIME_SELECTOR: return (EObject)createPointInTimeSelector();
            case SequencePackage.TIME_INTERVAL_SELECTOR: return (EObject)createTimeIntervalSelector();
            case SequencePackage.BI_POINT_IN_TIME_TIME_INTERVAL_SELECTOR: return (EObject)createBiPointInTimeTimeIntervalSelector();
            case SequencePackage.FRAGMENT_TIME_INTERVAL_SELECTOR: return (EObject)createFragmentTimeIntervalSelector();
            case SequencePackage.REFERENCE: return (EObject)createReference();
            default:
                throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
        }
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Object createFromString(EDataType eDataType, String initialValue) {
        switch (eDataType.getClassifierID()) {
            case SequencePackage.MESSAGE_TYPE:
                return createMessageTypeFromString(eDataType, initialValue);
            case SequencePackage.ACTOR_TYPE:
                return createActorTypeFromString(eDataType, initialValue);
            default:
                throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
        }
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public String convertToString(EDataType eDataType, Object instanceValue) {
        switch (eDataType.getClassifierID()) {
            case SequencePackage.MESSAGE_TYPE:
                return convertMessageTypeToString(eDataType, instanceValue);
            case SequencePackage.ACTOR_TYPE:
                return convertActorTypeToString(eDataType, instanceValue);
            default:
                throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
        }
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public SequenceDiagram createSequenceDiagram() {
        SequenceDiagramImpl sequenceDiagram = new SequenceDiagramImpl();
        return sequenceDiagram;
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public RootPackage createRootPackage() {
        RootPackageImpl rootPackage = new RootPackageImpl();
        return rootPackage;
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public Actor createActor() {
        ActorImpl actor = new ActorImpl();
        return actor;
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public ActorClassifierMapping createActorClassifierMapping() {
        ActorClassifierMappingImpl actorClassifierMapping = new ActorClassifierMappingImpl();
        return actorClassifierMapping;
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public Message createMessage() {
        MessageImpl message = new MessageImpl();
        return message;
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public StandardMessage createStandardMessage() {
        StandardMessageImpl standardMessage = new StandardMessageImpl();
        return standardMessage;
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public ResponseMessage createResponseMessage() {
        ResponseMessageImpl responseMessage = new ResponseMessageImpl();
        return responseMessage;
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public CreateMessage createCreateMessage() {
        CreateMessageImpl createMessage = new CreateMessageImpl();
        return createMessage;
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public DestructionMessage createDestructionMessage() {
        DestructionMessageImpl destructionMessage = new DestructionMessageImpl();
        return destructionMessage;
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public DestructionOccurenceSpecification createDestructionOccurenceSpecification() {
        DestructionOccurenceSpecificationImpl destructionOccurenceSpecification = new DestructionOccurenceSpecificationImpl();
        return destructionOccurenceSpecification;
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public OrderedFragmentContainer createOrderedFragmentContainer() {
        OrderedFragmentContainerImpl orderedFragmentContainer = new OrderedFragmentContainerImpl();
        return orderedFragmentContainer;
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public Alternative createAlternative() {
        AlternativeImpl alternative = new AlternativeImpl();
        return alternative;
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public Option createOption() {
        OptionImpl option = new OptionImpl();
        return option;
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public CoRegion createCoRegion() {
        CoRegionImpl coRegion = new CoRegionImpl();
        return coRegion;
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public Parallel createParallel() {
        ParallelImpl parallel = new ParallelImpl();
        return parallel;
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public Critical createCritical() {
        CriticalImpl critical = new CriticalImpl();
        return critical;
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public Loop createLoop() {
        LoopImpl loop = new LoopImpl();
        return loop;
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public Condition createCondition() {
        ConditionImpl condition = new ConditionImpl();
        return condition;
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public TimeObservation createTimeObservation() {
        TimeObservationImpl timeObservation = new TimeObservationImpl();
        return timeObservation;
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public DurationObservation createDurationObservation() {
        DurationObservationImpl durationObservation = new DurationObservationImpl();
        return durationObservation;
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public TimeConstraint createTimeConstraint() {
        TimeConstraintImpl timeConstraint = new TimeConstraintImpl();
        return timeConstraint;
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public DurationConstraint createDurationConstraint() {
        DurationConstraintImpl durationConstraint = new DurationConstraintImpl();
        return durationConstraint;
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public ExplicitArrivalOccurenceReference createExplicitArrivalOccurenceReference() {
        ExplicitArrivalOccurenceReferenceImpl explicitArrivalOccurenceReference = new ExplicitArrivalOccurenceReferenceImpl();
        return explicitArrivalOccurenceReference;
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public ImplicitMessageOccurenceSpecification createImplicitMessageOccurenceSpecification() {
        ImplicitMessageOccurenceSpecificationImpl implicitMessageOccurenceSpecification = new ImplicitMessageOccurenceSpecificationImpl();
        return implicitMessageOccurenceSpecification;
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public ExplicitArrivalOccurenceSpecification createExplicitArrivalOccurenceSpecification() {
        ExplicitArrivalOccurenceSpecificationImpl explicitArrivalOccurenceSpecification = new ExplicitArrivalOccurenceSpecificationImpl();
        return explicitArrivalOccurenceSpecification;
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public PointInTimeSelector createPointInTimeSelector() {
        PointInTimeSelectorImpl pointInTimeSelector = new PointInTimeSelectorImpl();
        return pointInTimeSelector;
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public TimeIntervalSelector createTimeIntervalSelector() {
        TimeIntervalSelectorImpl timeIntervalSelector = new TimeIntervalSelectorImpl();
        return timeIntervalSelector;
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public BiPointInTimeTimeIntervalSelector createBiPointInTimeTimeIntervalSelector() {
        BiPointInTimeTimeIntervalSelectorImpl biPointInTimeTimeIntervalSelector = new BiPointInTimeTimeIntervalSelectorImpl();
        return biPointInTimeTimeIntervalSelector;
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public FragmentTimeIntervalSelector createFragmentTimeIntervalSelector() {
        FragmentTimeIntervalSelectorImpl fragmentTimeIntervalSelector = new FragmentTimeIntervalSelectorImpl();
        return fragmentTimeIntervalSelector;
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public Reference createReference() {
        ReferenceImpl reference = new ReferenceImpl();
        return reference;
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public MessageType createMessageTypeFromString(EDataType eDataType, String initialValue) {
        MessageType result = MessageType.get(initialValue);
        if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
        return result;
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public String convertMessageTypeToString(EDataType eDataType, Object instanceValue) {
        return instanceValue == null ? null : instanceValue.toString();
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public ActorType createActorTypeFromString(EDataType eDataType, String initialValue) {
        ActorType result = ActorType.get(initialValue);
        if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
        return result;
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public String convertActorTypeToString(EDataType eDataType, Object instanceValue) {
        return instanceValue == null ? null : instanceValue.toString();
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public SequencePackage getSequencePackage() {
        return (SequencePackage)getEPackage();
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @deprecated
     * @generated
     */
    @Deprecated
    public static SequencePackage getPackage() {
        return SequencePackage.eINSTANCE;
    }

} //SequenceFactoryImpl
