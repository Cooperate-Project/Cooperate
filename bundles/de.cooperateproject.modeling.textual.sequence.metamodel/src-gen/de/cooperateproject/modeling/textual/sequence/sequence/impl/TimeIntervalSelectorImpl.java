/**
 * generated by Xtext 2.11.0
 */
package de.cooperateproject.modeling.textual.sequence.sequence.impl;

import de.cooperateproject.modeling.textual.sequence.sequence.AliasedPointInTime;
import de.cooperateproject.modeling.textual.sequence.sequence.SequencePackage;
import de.cooperateproject.modeling.textual.sequence.sequence.TimeIntervalSelector;

import java.lang.reflect.InvocationTargetException;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.internal.cdo.CDOObjectImpl;

import org.eclipse.uml2.uml.NamedElement;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Time Interval Selector</b></em>'.
 * <!-- end-user-doc -->
 *
 * @generated
 */
public class TimeIntervalSelectorImpl extends CDOObjectImpl implements TimeIntervalSelector {
    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected TimeIntervalSelectorImpl() {
        super();
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    protected EClass eStaticClass() {
        return SequencePackage.Literals.TIME_INTERVAL_SELECTOR;
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    protected int eStaticFeatureCount() {
        return 0;
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public AliasedPointInTime<? extends NamedElement> getIntervalStart() {
        throw new RuntimeException("This method should have been overidden");
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public AliasedPointInTime<? extends NamedElement> getIntervalEnd() {
        throw new RuntimeException("This method should have been overidden");
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Object eInvoke(int operationID, EList<?> arguments) throws InvocationTargetException {
        switch (operationID) {
            case SequencePackage.TIME_INTERVAL_SELECTOR___GET_INTERVAL_START:
                return getIntervalStart();
            case SequencePackage.TIME_INTERVAL_SELECTOR___GET_INTERVAL_END:
                return getIntervalEnd();
        }
        return super.eInvoke(operationID, arguments);
    }

} //TimeIntervalSelectorImpl
