/**
 * generated by Xtext 2.11.0
 */
package de.cooperateproject.modeling.textual.sequence.sequence.impl;

import de.cooperateproject.modeling.textual.sequence.sequence.FragmentTimeIntervalSelector;
import de.cooperateproject.modeling.textual.sequence.sequence.NonInstantaneousFragment;
import de.cooperateproject.modeling.textual.sequence.sequence.PointInTime;
import de.cooperateproject.modeling.textual.sequence.sequence.SequencePackage;
import de.cooperateproject.modeling.textual.sequence.sequence.TimeIntervalSelector;

import java.lang.reflect.InvocationTargetException;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.uml2.uml.InteractionFragment;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Fragment Time Interval Selector</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link de.cooperateproject.modeling.textual.sequence.sequence.impl.FragmentTimeIntervalSelectorImpl#getNonInstantaneousFragment <em>Non Instantaneous Fragment</em>}</li>
 * </ul>
 *
 * @generated
 */
public class FragmentTimeIntervalSelectorImpl extends TimeIntervalSelectorImpl implements FragmentTimeIntervalSelector {
    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected FragmentTimeIntervalSelectorImpl() {
        super();
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    protected EClass eStaticClass() {
        return SequencePackage.Literals.FRAGMENT_TIME_INTERVAL_SELECTOR;
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public NonInstantaneousFragment<?> getNonInstantaneousFragment() {
        return (NonInstantaneousFragment<?>)eDynamicGet(SequencePackage.FRAGMENT_TIME_INTERVAL_SELECTOR__NON_INSTANTANEOUS_FRAGMENT, SequencePackage.Literals.FRAGMENT_TIME_INTERVAL_SELECTOR__NON_INSTANTANEOUS_FRAGMENT, true, true);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public NonInstantaneousFragment<?> basicGetNonInstantaneousFragment() {
        return (NonInstantaneousFragment<?>)eDynamicGet(SequencePackage.FRAGMENT_TIME_INTERVAL_SELECTOR__NON_INSTANTANEOUS_FRAGMENT, SequencePackage.Literals.FRAGMENT_TIME_INTERVAL_SELECTOR__NON_INSTANTANEOUS_FRAGMENT, false, true);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void setNonInstantaneousFragment(NonInstantaneousFragment<?> newNonInstantaneousFragment) {
        eDynamicSet(SequencePackage.FRAGMENT_TIME_INTERVAL_SELECTOR__NON_INSTANTANEOUS_FRAGMENT, SequencePackage.Literals.FRAGMENT_TIME_INTERVAL_SELECTOR__NON_INSTANTANEOUS_FRAGMENT, newNonInstantaneousFragment);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public PointInTime<? extends InteractionFragment> getIntervalStart() {
        return this.getNonInstantaneousFragment();
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public PointInTime<? extends InteractionFragment> getIntervalEnd() {
        return this.getNonInstantaneousFragment();
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Object eGet(int featureID, boolean resolve, boolean coreType) {
        switch (featureID) {
            case SequencePackage.FRAGMENT_TIME_INTERVAL_SELECTOR__NON_INSTANTANEOUS_FRAGMENT:
                if (resolve) return getNonInstantaneousFragment();
                return basicGetNonInstantaneousFragment();
        }
        return super.eGet(featureID, resolve, coreType);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public void eSet(int featureID, Object newValue) {
        switch (featureID) {
            case SequencePackage.FRAGMENT_TIME_INTERVAL_SELECTOR__NON_INSTANTANEOUS_FRAGMENT:
                setNonInstantaneousFragment((NonInstantaneousFragment<?>)newValue);
                return;
        }
        super.eSet(featureID, newValue);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public void eUnset(int featureID) {
        switch (featureID) {
            case SequencePackage.FRAGMENT_TIME_INTERVAL_SELECTOR__NON_INSTANTANEOUS_FRAGMENT:
                setNonInstantaneousFragment((NonInstantaneousFragment<?>)null);
                return;
        }
        super.eUnset(featureID);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public boolean eIsSet(int featureID) {
        switch (featureID) {
            case SequencePackage.FRAGMENT_TIME_INTERVAL_SELECTOR__NON_INSTANTANEOUS_FRAGMENT:
                return basicGetNonInstantaneousFragment() != null;
        }
        return super.eIsSet(featureID);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public int eDerivedOperationID(int baseOperationID, Class<?> baseClass) {
        if (baseClass == TimeIntervalSelector.class) {
            switch (baseOperationID) {
                case SequencePackage.TIME_INTERVAL_SELECTOR___GET_INTERVAL_START: return SequencePackage.FRAGMENT_TIME_INTERVAL_SELECTOR___GET_INTERVAL_START;
                case SequencePackage.TIME_INTERVAL_SELECTOR___GET_INTERVAL_END: return SequencePackage.FRAGMENT_TIME_INTERVAL_SELECTOR___GET_INTERVAL_END;
                default: return super.eDerivedOperationID(baseOperationID, baseClass);
            }
        }
        return super.eDerivedOperationID(baseOperationID, baseClass);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Object eInvoke(int operationID, EList<?> arguments) throws InvocationTargetException {
        switch (operationID) {
            case SequencePackage.FRAGMENT_TIME_INTERVAL_SELECTOR___GET_INTERVAL_START:
                return getIntervalStart();
            case SequencePackage.FRAGMENT_TIME_INTERVAL_SELECTOR___GET_INTERVAL_END:
                return getIntervalEnd();
        }
        return super.eInvoke(operationID, arguments);
    }

} //FragmentTimeIntervalSelectorImpl
