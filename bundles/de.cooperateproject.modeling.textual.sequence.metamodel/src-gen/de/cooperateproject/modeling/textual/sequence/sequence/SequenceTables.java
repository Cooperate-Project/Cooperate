/*******************************************************************************
 * generated by Xtext 2.11.0
 *************************************************************************
 * This code is 100% auto-generated
 * from:
 *   /de.cooperateproject.modeling.textual.sequence.metamodel/model/Sequence.ecore
 * using:
 *   /de.cooperateproject.modeling.textual.sequence.metamodel/model/Sequence.genmodel
 *   org.eclipse.ocl.examples.codegen.oclinecore.OCLinEcoreTables
 *
 * Do not edit it.
 *******************************************************************************/
package de.cooperateproject.modeling.textual.sequence.sequence;

import de.cooperateproject.modeling.textual.common.metamodel.textualCommons.TextualCommonsTables;
import de.cooperateproject.modeling.textual.sequence.sequence.SequenceTables;
import org.eclipse.ocl.pivot.TemplateParameters;
import org.eclipse.ocl.pivot.ids.TypeId;
import org.eclipse.ocl.pivot.internal.library.ecore.EcoreExecutorEnumeration;
import org.eclipse.ocl.pivot.internal.library.ecore.EcoreExecutorEnumerationLiteral;
import org.eclipse.ocl.pivot.internal.library.ecore.EcoreExecutorPackage;
import org.eclipse.ocl.pivot.internal.library.ecore.EcoreExecutorProperty;
import org.eclipse.ocl.pivot.internal.library.ecore.EcoreExecutorType;
import org.eclipse.ocl.pivot.internal.library.ecore.EcoreLibraryOppositeProperty;
import org.eclipse.ocl.pivot.internal.library.executor.ExecutorFragment;
import org.eclipse.ocl.pivot.internal.library.executor.ExecutorOperation;
import org.eclipse.ocl.pivot.internal.library.executor.ExecutorProperty;
import org.eclipse.ocl.pivot.internal.library.executor.ExecutorPropertyWithImplementation;
import org.eclipse.ocl.pivot.internal.library.executor.ExecutorStandardLibrary;
import org.eclipse.ocl.pivot.internal.library.executor.ExecutorType;
import org.eclipse.ocl.pivot.internal.library.executor.ExecutorTypeParameter;
import org.eclipse.ocl.pivot.oclstdlib.OCLstdlibTables;
import org.eclipse.ocl.pivot.utilities.TypeUtil;

/**
 * SequenceTables provides the dispatch tables for the sequence for use by the OCL dispatcher.
 *
 * In order to ensure correct static initialization, a top level class element must be accessed
 * before any nested class element. Therefore an access to PACKAGE.getClass() is recommended.
 */
@SuppressWarnings("nls")
public class SequenceTables
{
	static {
		Init.initStart();
	}

	/**
	 *	The package descriptor for the package.
	 */
	public static final /*@NonNull*/ EcoreExecutorPackage PACKAGE = new EcoreExecutorPackage(SequencePackage.eINSTANCE);

	/**
	 *	The library of all packages and types.
	 */
	public static final /*@NonNull*/ ExecutorStandardLibrary LIBRARY = OCLstdlibTables.LIBRARY;

	/**
	 *	Constants used by auto-generated code.
	 */
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.NsURIPackageId PACKid_http_c_s_s_www_cooperateproject_de_s_modeling_s_textual_s_sequence_s_Sequence = org.eclipse.ocl.pivot.ids.IdManager.getNsURIPackageId("http://www.cooperateproject.de/modeling/textual/sequence/Sequence", null, de.cooperateproject.modeling.textual.sequence.sequence.SequencePackage.eINSTANCE);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.NsURIPackageId PACKid_http_c_s_s_www_eclipse_org_s_ocl_s_2015_s_Orphanage = org.eclipse.ocl.pivot.ids.IdManager.getNsURIPackageId("http://www.eclipse.org/ocl/2015/Orphanage", "orphanage", null);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.NsURIPackageId PACKid_http_c_s_s_www_eclipse_org_s_uml2_s_5_0_0_s_UML = org.eclipse.ocl.pivot.ids.IdManager.getNsURIPackageId("http://www.eclipse.org/uml2/5.0.0/UML", null, org.eclipse.uml2.uml.UMLPackage.eINSTANCE);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.ClassId CLSSid_Actor = de.cooperateproject.modeling.textual.sequence.sequence.SequenceTables.PACKid_http_c_s_s_www_cooperateproject_de_s_modeling_s_textual_s_sequence_s_Sequence.getClassId("Actor", 0);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.ClassId CLSSid_ActorClassifierMapping = de.cooperateproject.modeling.textual.sequence.sequence.SequenceTables.PACKid_http_c_s_s_www_cooperateproject_de_s_modeling_s_textual_s_sequence_s_Sequence.getClassId("ActorClassifierMapping", 0);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.ClassId CLSSid_BiPointInTimeTimeIntervalSelector = de.cooperateproject.modeling.textual.sequence.sequence.SequenceTables.PACKid_http_c_s_s_www_cooperateproject_de_s_modeling_s_textual_s_sequence_s_Sequence.getClassId("BiPointInTimeTimeIntervalSelector", 0);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.ClassId CLSSid_Classifier = de.cooperateproject.modeling.textual.sequence.sequence.SequenceTables.PACKid_http_c_s_s_www_eclipse_org_s_uml2_s_5_0_0_s_UML.getClassId("Classifier", 0);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.ClassId CLSSid_Condition = de.cooperateproject.modeling.textual.sequence.sequence.SequenceTables.PACKid_http_c_s_s_www_cooperateproject_de_s_modeling_s_textual_s_sequence_s_Sequence.getClassId("Condition", 0);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.ClassId CLSSid_DestructionOccurenceSpecification = de.cooperateproject.modeling.textual.sequence.sequence.SequenceTables.PACKid_http_c_s_s_www_cooperateproject_de_s_modeling_s_textual_s_sequence_s_Sequence.getClassId("DestructionOccurenceSpecification", 0);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.ClassId CLSSid_DurationConstraint = de.cooperateproject.modeling.textual.sequence.sequence.SequenceTables.PACKid_http_c_s_s_www_cooperateproject_de_s_modeling_s_textual_s_sequence_s_Sequence.getClassId("DurationConstraint", 0);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.ClassId CLSSid_DurationObservation = de.cooperateproject.modeling.textual.sequence.sequence.SequenceTables.PACKid_http_c_s_s_www_cooperateproject_de_s_modeling_s_textual_s_sequence_s_Sequence.getClassId("DurationObservation", 0);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.ClassId CLSSid_ExecutionSpecification = de.cooperateproject.modeling.textual.sequence.sequence.SequenceTables.PACKid_http_c_s_s_www_eclipse_org_s_uml2_s_5_0_0_s_UML.getClassId("ExecutionSpecification", 0);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.ClassId CLSSid_ExplicitArrivalOccurenceReference = de.cooperateproject.modeling.textual.sequence.sequence.SequenceTables.PACKid_http_c_s_s_www_cooperateproject_de_s_modeling_s_textual_s_sequence_s_Sequence.getClassId("ExplicitArrivalOccurenceReference", 0);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.ClassId CLSSid_ExplicitArrivalOccurenceSpecification = de.cooperateproject.modeling.textual.sequence.sequence.SequenceTables.PACKid_http_c_s_s_www_cooperateproject_de_s_modeling_s_textual_s_sequence_s_Sequence.getClassId("ExplicitArrivalOccurenceSpecification", 0);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.ClassId CLSSid_Fragment = de.cooperateproject.modeling.textual.sequence.sequence.SequenceTables.PACKid_http_c_s_s_www_cooperateproject_de_s_modeling_s_textual_s_sequence_s_Sequence.getClassId("Fragment", 0);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.ClassId CLSSid_FragmentSequence = de.cooperateproject.modeling.textual.sequence.sequence.SequenceTables.PACKid_http_c_s_s_www_cooperateproject_de_s_modeling_s_textual_s_sequence_s_Sequence.getClassId("FragmentSequence", 0);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.ClassId CLSSid_Interaction = de.cooperateproject.modeling.textual.sequence.sequence.SequenceTables.PACKid_http_c_s_s_www_eclipse_org_s_uml2_s_5_0_0_s_UML.getClassId("Interaction", 0);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.ClassId CLSSid_Message = de.cooperateproject.modeling.textual.sequence.sequence.SequenceTables.PACKid_http_c_s_s_www_cooperateproject_de_s_modeling_s_textual_s_sequence_s_Sequence.getClassId("Message", 0);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.ClassId CLSSid_MultipleRegionContainer = de.cooperateproject.modeling.textual.sequence.sequence.SequenceTables.PACKid_http_c_s_s_www_cooperateproject_de_s_modeling_s_textual_s_sequence_s_Sequence.getClassId("MultipleRegionContainer", 0);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.ClassId CLSSid_NonInstantaneousFragment = de.cooperateproject.modeling.textual.sequence.sequence.SequenceTables.PACKid_http_c_s_s_www_eclipse_org_s_ocl_s_2015_s_Orphanage.getClassId("NonInstantaneousFragment", 0);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.ClassId CLSSid_OccurenceReference = de.cooperateproject.modeling.textual.sequence.sequence.SequenceTables.PACKid_http_c_s_s_www_eclipse_org_s_ocl_s_2015_s_Orphanage.getClassId("OccurenceReference", 0);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.ClassId CLSSid_OccurenceSpecification = de.cooperateproject.modeling.textual.sequence.sequence.SequenceTables.PACKid_http_c_s_s_www_eclipse_org_s_ocl_s_2015_s_Orphanage.getClassId("OccurenceSpecification", 0);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.ClassId CLSSid_OrderedFragmentContainer = de.cooperateproject.modeling.textual.sequence.sequence.SequenceTables.PACKid_http_c_s_s_www_cooperateproject_de_s_modeling_s_textual_s_sequence_s_Sequence.getClassId("OrderedFragmentContainer", 0);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.ClassId CLSSid_PointInTime = de.cooperateproject.modeling.textual.sequence.sequence.SequenceTables.PACKid_http_c_s_s_www_eclipse_org_s_ocl_s_2015_s_Orphanage.getClassId("PointInTime", 0);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.ClassId CLSSid_PointInTimeSelector = de.cooperateproject.modeling.textual.sequence.sequence.SequenceTables.PACKid_http_c_s_s_www_cooperateproject_de_s_modeling_s_textual_s_sequence_s_Sequence.getClassId("PointInTimeSelector", 0);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.ClassId CLSSid_ResponseMessage = de.cooperateproject.modeling.textual.sequence.sequence.SequenceTables.PACKid_http_c_s_s_www_cooperateproject_de_s_modeling_s_textual_s_sequence_s_Sequence.getClassId("ResponseMessage", 0);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.ClassId CLSSid_RootPackage = de.cooperateproject.modeling.textual.sequence.sequence.SequenceTables.PACKid_http_c_s_s_www_cooperateproject_de_s_modeling_s_textual_s_sequence_s_Sequence.getClassId("RootPackage", 0);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.ClassId CLSSid_SequenceDiagram = de.cooperateproject.modeling.textual.sequence.sequence.SequenceTables.PACKid_http_c_s_s_www_cooperateproject_de_s_modeling_s_textual_s_sequence_s_Sequence.getClassId("SequenceDiagram", 0);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.ClassId CLSSid_SingleRegionContainer = de.cooperateproject.modeling.textual.sequence.sequence.SequenceTables.PACKid_http_c_s_s_www_cooperateproject_de_s_modeling_s_textual_s_sequence_s_Sequence.getClassId("SingleRegionContainer", 0);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.ClassId CLSSid_StandardMessage = de.cooperateproject.modeling.textual.sequence.sequence.SequenceTables.PACKid_http_c_s_s_www_cooperateproject_de_s_modeling_s_textual_s_sequence_s_Sequence.getClassId("StandardMessage", 0);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.ClassId CLSSid_TimeConstraint = de.cooperateproject.modeling.textual.sequence.sequence.SequenceTables.PACKid_http_c_s_s_www_cooperateproject_de_s_modeling_s_textual_s_sequence_s_Sequence.getClassId("TimeConstraint", 0);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.ClassId CLSSid_TimeIntervalSelector = de.cooperateproject.modeling.textual.sequence.sequence.SequenceTables.PACKid_http_c_s_s_www_cooperateproject_de_s_modeling_s_textual_s_sequence_s_Sequence.getClassId("TimeIntervalSelector", 0);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.ClassId CLSSid_TimeObservation = de.cooperateproject.modeling.textual.sequence.sequence.SequenceTables.PACKid_http_c_s_s_www_cooperateproject_de_s_modeling_s_textual_s_sequence_s_Sequence.getClassId("TimeObservation", 0);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.DataTypeId DATAid_EEList = de.cooperateproject.modeling.textual.sequence.sequence.SequenceTables.PACKid_http_c_s_s_www_eclipse_org_s_ocl_s_2015_s_Orphanage.getDataTypeId("EEList", 0);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.EnumerationId ENUMid_ActorType = de.cooperateproject.modeling.textual.sequence.sequence.SequenceTables.PACKid_http_c_s_s_www_cooperateproject_de_s_modeling_s_textual_s_sequence_s_Sequence.getEnumerationId("ActorType");
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.EnumerationId ENUMid_InteractionOperatorKind = de.cooperateproject.modeling.textual.sequence.sequence.SequenceTables.PACKid_http_c_s_s_www_eclipse_org_s_uml2_s_5_0_0_s_UML.getEnumerationId("InteractionOperatorKind");
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.EnumerationId ENUMid_MessageType = de.cooperateproject.modeling.textual.sequence.sequence.SequenceTables.PACKid_http_c_s_s_www_cooperateproject_de_s_modeling_s_textual_s_sequence_s_Sequence.getEnumerationId("MessageType");
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.values.IntegerValue INT_0 = org.eclipse.ocl.pivot.utilities.ValueUtil.integerValueOf("0");
	public static final /*@NonInvalid*/ java.lang.String STR_ResponseMessage_c_c_mustHaveCorrespondingMessage = "ResponseMessage::mustHaveCorrespondingMessage";
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.CollectionTypeId BAG_CLSSid_DestructionOccurenceSpecification = org.eclipse.ocl.pivot.ids.TypeId.BAG.getSpecializedId(de.cooperateproject.modeling.textual.sequence.sequence.SequenceTables.CLSSid_DestructionOccurenceSpecification);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.CollectionTypeId BAG_CLSSid_Message = org.eclipse.ocl.pivot.ids.TypeId.BAG.getSpecializedId(de.cooperateproject.modeling.textual.sequence.sequence.SequenceTables.CLSSid_Message);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.CollectionTypeId ORD_CLSSid_Actor = org.eclipse.ocl.pivot.ids.TypeId.ORDERED_SET.getSpecializedId(de.cooperateproject.modeling.textual.sequence.sequence.SequenceTables.CLSSid_Actor);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.CollectionTypeId ORD_CLSSid_Fragment = org.eclipse.ocl.pivot.ids.TypeId.ORDERED_SET.getSpecializedId(de.cooperateproject.modeling.textual.sequence.sequence.SequenceTables.CLSSid_Fragment);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.CollectionTypeId ORD_CLSSid_OrderedFragmentContainer = org.eclipse.ocl.pivot.ids.TypeId.ORDERED_SET.getSpecializedId(de.cooperateproject.modeling.textual.sequence.sequence.SequenceTables.CLSSid_OrderedFragmentContainer);
	public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.CollectionTypeId SET_CLSSid_StandardMessage = org.eclipse.ocl.pivot.ids.TypeId.SET.getSpecializedId(de.cooperateproject.modeling.textual.sequence.sequence.SequenceTables.CLSSid_StandardMessage);

	/**
	 *	The type parameters for templated types and operations.
	 */
	public static class TypeParameters {
		static {
			Init.initStart();
			SequenceTables.init();
		}

		public static final /*@NonNull*/ ExecutorTypeParameter _NonInstantaneousFragment_UMLType = new ExecutorTypeParameter(TypeId.T_1, "UMLType");

		public static final /*@NonNull*/ ExecutorTypeParameter _OccurenceReference_OccurenceType = new ExecutorTypeParameter(TypeId.T_1, "OccurenceType");

		public static final /*@NonNull*/ ExecutorTypeParameter _OccurenceSpecification_UMLOccurenceType = new ExecutorTypeParameter(TypeId.T_1, "UMLOccurenceType");

		public static final /*@NonNull*/ ExecutorTypeParameter _PointInTime_UMLPointInTimeType = new ExecutorTypeParameter(TypeId.T_1, "UMLPointInTimeType");

		static {
			Init.initEnd();
		}

		/**
		 * Force initialization of the fields of SequenceTables::TypeParameters and all preceding sub-packages.
		 */
		public static void init() {}
	}

	/**
	 *	The type descriptors for each type.
	 */
	public static class Types {
		static {
			Init.initStart();
			TypeParameters.init();
		}

		public static final /*@NonNull*/ EcoreExecutorType _Actor = new EcoreExecutorType(SequencePackage.Literals.ACTOR, PACKAGE, 0);
		public static final /*@NonNull*/ EcoreExecutorType _ActorClassifierMapping = new EcoreExecutorType(SequencePackage.Literals.ACTOR_CLASSIFIER_MAPPING, PACKAGE, 0);
		public static final /*@NonNull*/ EcoreExecutorEnumeration _ActorType = new EcoreExecutorEnumeration(SequencePackage.Literals.ACTOR_TYPE, PACKAGE, 0);
		public static final /*@NonNull*/ EcoreExecutorType _Alternative = new EcoreExecutorType(SequencePackage.Literals.ALTERNATIVE, PACKAGE, 0);
		public static final /*@NonNull*/ EcoreExecutorType _BiPointInTimeTimeIntervalSelector = new EcoreExecutorType(SequencePackage.Literals.BI_POINT_IN_TIME_TIME_INTERVAL_SELECTOR, PACKAGE, 0);
		public static final /*@NonNull*/ EcoreExecutorType _CoRegion = new EcoreExecutorType(SequencePackage.Literals.CO_REGION, PACKAGE, 0);
		public static final /*@NonNull*/ EcoreExecutorType _CombinedFragment = new EcoreExecutorType(SequencePackage.Literals.COMBINED_FRAGMENT, PACKAGE, 0 | ExecutorType.ABSTRACT);
		public static final /*@NonNull*/ EcoreExecutorType _Condition = new EcoreExecutorType(SequencePackage.Literals.CONDITION, PACKAGE, 0);
		public static final /*@NonNull*/ EcoreExecutorType _Constraint = new EcoreExecutorType(SequencePackage.Literals.CONSTRAINT, PACKAGE, 0 | ExecutorType.ABSTRACT);
		public static final /*@NonNull*/ EcoreExecutorType _CreateMessage = new EcoreExecutorType(SequencePackage.Literals.CREATE_MESSAGE, PACKAGE, 0);
		public static final /*@NonNull*/ EcoreExecutorType _Critical = new EcoreExecutorType(SequencePackage.Literals.CRITICAL, PACKAGE, 0);
		public static final /*@NonNull*/ EcoreExecutorType _DestructionMessage = new EcoreExecutorType(SequencePackage.Literals.DESTRUCTION_MESSAGE, PACKAGE, 0);
		public static final /*@NonNull*/ EcoreExecutorType _DestructionOccurenceSpecification = new EcoreExecutorType(SequencePackage.Literals.DESTRUCTION_OCCURENCE_SPECIFICATION, PACKAGE, 0);
		public static final /*@NonNull*/ EcoreExecutorType _DurationConstraint = new EcoreExecutorType(SequencePackage.Literals.DURATION_CONSTRAINT, PACKAGE, 0);
		public static final /*@NonNull*/ EcoreExecutorType _DurationObservation = new EcoreExecutorType(SequencePackage.Literals.DURATION_OBSERVATION, PACKAGE, 0);
		public static final /*@NonNull*/ EcoreExecutorType _ExplicitArrivalOccurenceReference = new EcoreExecutorType(SequencePackage.Literals.EXPLICIT_ARRIVAL_OCCURENCE_REFERENCE, PACKAGE, 0);
		public static final /*@NonNull*/ EcoreExecutorType _ExplicitArrivalOccurenceSpecification = new EcoreExecutorType(SequencePackage.Literals.EXPLICIT_ARRIVAL_OCCURENCE_SPECIFICATION, PACKAGE, 0);
		public static final /*@NonNull*/ EcoreExecutorType _Fragment = new EcoreExecutorType(SequencePackage.Literals.FRAGMENT, PACKAGE, 0 | ExecutorType.ABSTRACT);
		public static final /*@NonNull*/ EcoreExecutorType _FragmentSequence = new EcoreExecutorType(SequencePackage.Literals.FRAGMENT_SEQUENCE, PACKAGE, 0 | ExecutorType.ABSTRACT);
		public static final /*@NonNull*/ EcoreExecutorType _FragmentTimeIntervalSelector = new EcoreExecutorType(SequencePackage.Literals.FRAGMENT_TIME_INTERVAL_SELECTOR, PACKAGE, 0);
		public static final /*@NonNull*/ EcoreExecutorType _ImplicitMessageOccurenceSpecification = new EcoreExecutorType(SequencePackage.Literals.IMPLICIT_MESSAGE_OCCURENCE_SPECIFICATION, PACKAGE, 0);
		public static final /*@NonNull*/ EcoreExecutorType _Loop = new EcoreExecutorType(SequencePackage.Literals.LOOP, PACKAGE, 0);
		public static final /*@NonNull*/ EcoreExecutorType _Message = new EcoreExecutorType(SequencePackage.Literals.MESSAGE, PACKAGE, 0);
		public static final /*@NonNull*/ EcoreExecutorEnumeration _MessageType = new EcoreExecutorEnumeration(SequencePackage.Literals.MESSAGE_TYPE, PACKAGE, 0);
		public static final /*@NonNull*/ EcoreExecutorType _MultipleRegionContainer = new EcoreExecutorType(SequencePackage.Literals.MULTIPLE_REGION_CONTAINER, PACKAGE, 0 | ExecutorType.ABSTRACT);
		public static final /*@NonNull*/ EcoreExecutorType _NonInstantaneousFragment = new EcoreExecutorType(SequencePackage.Literals.NON_INSTANTANEOUS_FRAGMENT, PACKAGE, 0 | ExecutorType.ABSTRACT, TypeParameters._NonInstantaneousFragment_UMLType);
		public static final /*@NonNull*/ EcoreExecutorType _Observation = new EcoreExecutorType(SequencePackage.Literals.OBSERVATION, PACKAGE, 0 | ExecutorType.ABSTRACT);
		public static final /*@NonNull*/ EcoreExecutorType _OccurenceReference = new EcoreExecutorType(SequencePackage.Literals.OCCURENCE_REFERENCE, PACKAGE, 0 | ExecutorType.ABSTRACT, TypeParameters._OccurenceReference_OccurenceType);
		public static final /*@NonNull*/ EcoreExecutorType _OccurenceSpecification = new EcoreExecutorType(SequencePackage.Literals.OCCURENCE_SPECIFICATION, PACKAGE, 0 | ExecutorType.ABSTRACT, TypeParameters._OccurenceSpecification_UMLOccurenceType);
		public static final /*@NonNull*/ EcoreExecutorType _Option = new EcoreExecutorType(SequencePackage.Literals.OPTION, PACKAGE, 0);
		public static final /*@NonNull*/ EcoreExecutorType _OrderedFragmentContainer = new EcoreExecutorType(SequencePackage.Literals.ORDERED_FRAGMENT_CONTAINER, PACKAGE, 0);
		public static final /*@NonNull*/ EcoreExecutorType _Parallel = new EcoreExecutorType(SequencePackage.Literals.PARALLEL, PACKAGE, 0);
		public static final /*@NonNull*/ EcoreExecutorType _PointInTime = new EcoreExecutorType(SequencePackage.Literals.POINT_IN_TIME, PACKAGE, 0 | ExecutorType.ABSTRACT, TypeParameters._PointInTime_UMLPointInTimeType);
		public static final /*@NonNull*/ EcoreExecutorType _PointInTimeSelector = new EcoreExecutorType(SequencePackage.Literals.POINT_IN_TIME_SELECTOR, PACKAGE, 0);
		public static final /*@NonNull*/ EcoreExecutorType _Reference = new EcoreExecutorType(SequencePackage.Literals.REFERENCE, PACKAGE, 0);
		public static final /*@NonNull*/ EcoreExecutorType _ResponseMessage = new EcoreExecutorType(SequencePackage.Literals.RESPONSE_MESSAGE, PACKAGE, 0);
		public static final /*@NonNull*/ EcoreExecutorType _RootPackage = new EcoreExecutorType(SequencePackage.Literals.ROOT_PACKAGE, PACKAGE, 0);
		public static final /*@NonNull*/ EcoreExecutorType _SequenceDiagram = new EcoreExecutorType(SequencePackage.Literals.SEQUENCE_DIAGRAM, PACKAGE, 0);
		public static final /*@NonNull*/ EcoreExecutorType _SingleRegionContainer = new EcoreExecutorType(SequencePackage.Literals.SINGLE_REGION_CONTAINER, PACKAGE, 0 | ExecutorType.ABSTRACT);
		public static final /*@NonNull*/ EcoreExecutorType _StandardMessage = new EcoreExecutorType(SequencePackage.Literals.STANDARD_MESSAGE, PACKAGE, 0);
		public static final /*@NonNull*/ EcoreExecutorType _TimeConstraint = new EcoreExecutorType(SequencePackage.Literals.TIME_CONSTRAINT, PACKAGE, 0);
		public static final /*@NonNull*/ EcoreExecutorType _TimeIntervalSelector = new EcoreExecutorType(SequencePackage.Literals.TIME_INTERVAL_SELECTOR, PACKAGE, 0);
		public static final /*@NonNull*/ EcoreExecutorType _TimeObservation = new EcoreExecutorType(SequencePackage.Literals.TIME_OBSERVATION, PACKAGE, 0);

		private static final /*@NonNull*/ EcoreExecutorType /*@NonNull*/ [] types = {
			_Actor,
			_ActorClassifierMapping,
			_ActorType,
			_Alternative,
			_BiPointInTimeTimeIntervalSelector,
			_CoRegion,
			_CombinedFragment,
			_Condition,
			_Constraint,
			_CreateMessage,
			_Critical,
			_DestructionMessage,
			_DestructionOccurenceSpecification,
			_DurationConstraint,
			_DurationObservation,
			_ExplicitArrivalOccurenceReference,
			_ExplicitArrivalOccurenceSpecification,
			_Fragment,
			_FragmentSequence,
			_FragmentTimeIntervalSelector,
			_ImplicitMessageOccurenceSpecification,
			_Loop,
			_Message,
			_MessageType,
			_MultipleRegionContainer,
			_NonInstantaneousFragment,
			_Observation,
			_OccurenceReference,
			_OccurenceSpecification,
			_Option,
			_OrderedFragmentContainer,
			_Parallel,
			_PointInTime,
			_PointInTimeSelector,
			_Reference,
			_ResponseMessage,
			_RootPackage,
			_SequenceDiagram,
			_SingleRegionContainer,
			_StandardMessage,
			_TimeConstraint,
			_TimeIntervalSelector,
			_TimeObservation
		};

		/*
		 *	Install the type descriptors in the package descriptor.
		 */
		static {
			PACKAGE.init(LIBRARY, types);
			Init.initEnd();
		}

		/**
		 * Force initialization of the fields of SequenceTables::Types and all preceding sub-packages.
		 */
		public static void init() {}
	}

	/**
	 *	The fragment descriptors for the local elements of each type and its supertypes.
	 */
	public static class Fragments {
		static {
			Init.initStart();
			Types.init();
		}

		private static final /*@NonNull*/ ExecutorFragment _Actor__Actor = new ExecutorFragment(Types._Actor, SequenceTables.Types._Actor);
		private static final /*@NonNull*/ ExecutorFragment _Actor__AliasedElement = new ExecutorFragment(Types._Actor, TextualCommonsTables.Types._AliasedElement);
		private static final /*@NonNull*/ ExecutorFragment _Actor__Commentable = new ExecutorFragment(Types._Actor, TextualCommonsTables.Types._Commentable);
		private static final /*@NonNull*/ ExecutorFragment _Actor__Element = new ExecutorFragment(Types._Actor, TextualCommonsTables.Types._Element);
		private static final /*@NonNull*/ ExecutorFragment _Actor__NamedElement = new ExecutorFragment(Types._Actor, TextualCommonsTables.Types._NamedElement);
		private static final /*@NonNull*/ ExecutorFragment _Actor__OclAny = new ExecutorFragment(Types._Actor, OCLstdlibTables.Types._OclAny);
		private static final /*@NonNull*/ ExecutorFragment _Actor__OclElement = new ExecutorFragment(Types._Actor, OCLstdlibTables.Types._OclElement);
		private static final /*@NonNull*/ ExecutorFragment _Actor__UMLReferencingElement = new ExecutorFragment(Types._Actor, TextualCommonsTables.Types._UMLReferencingElement);

		private static final /*@NonNull*/ ExecutorFragment _ActorClassifierMapping__ActorClassifierMapping = new ExecutorFragment(Types._ActorClassifierMapping, SequenceTables.Types._ActorClassifierMapping);
		private static final /*@NonNull*/ ExecutorFragment _ActorClassifierMapping__Element = new ExecutorFragment(Types._ActorClassifierMapping, TextualCommonsTables.Types._Element);
		private static final /*@NonNull*/ ExecutorFragment _ActorClassifierMapping__OclAny = new ExecutorFragment(Types._ActorClassifierMapping, OCLstdlibTables.Types._OclAny);
		private static final /*@NonNull*/ ExecutorFragment _ActorClassifierMapping__OclElement = new ExecutorFragment(Types._ActorClassifierMapping, OCLstdlibTables.Types._OclElement);
		private static final /*@NonNull*/ ExecutorFragment _ActorClassifierMapping__UMLReferencingElement = new ExecutorFragment(Types._ActorClassifierMapping, TextualCommonsTables.Types._UMLReferencingElement);

		private static final /*@NonNull*/ ExecutorFragment _ActorType__ActorType = new ExecutorFragment(Types._ActorType, SequenceTables.Types._ActorType);
		private static final /*@NonNull*/ ExecutorFragment _ActorType__OclAny = new ExecutorFragment(Types._ActorType, OCLstdlibTables.Types._OclAny);
		private static final /*@NonNull*/ ExecutorFragment _ActorType__OclElement = new ExecutorFragment(Types._ActorType, OCLstdlibTables.Types._OclElement);
		private static final /*@NonNull*/ ExecutorFragment _ActorType__OclEnumeration = new ExecutorFragment(Types._ActorType, OCLstdlibTables.Types._OclEnumeration);
		private static final /*@NonNull*/ ExecutorFragment _ActorType__OclType = new ExecutorFragment(Types._ActorType, OCLstdlibTables.Types._OclType);

		private static final /*@NonNull*/ ExecutorFragment _Alternative__AliasedElement = new ExecutorFragment(Types._Alternative, TextualCommonsTables.Types._AliasedElement);
		private static final /*@NonNull*/ ExecutorFragment _Alternative__Alternative = new ExecutorFragment(Types._Alternative, SequenceTables.Types._Alternative);
		private static final /*@NonNull*/ ExecutorFragment _Alternative__CombinedFragment = new ExecutorFragment(Types._Alternative, SequenceTables.Types._CombinedFragment);
		private static final /*@NonNull*/ ExecutorFragment _Alternative__Commentable = new ExecutorFragment(Types._Alternative, TextualCommonsTables.Types._Commentable);
		private static final /*@NonNull*/ ExecutorFragment _Alternative__Element = new ExecutorFragment(Types._Alternative, TextualCommonsTables.Types._Element);
		private static final /*@NonNull*/ ExecutorFragment _Alternative__Fragment = new ExecutorFragment(Types._Alternative, SequenceTables.Types._Fragment);
		private static final /*@NonNull*/ ExecutorFragment _Alternative__MultipleRegionContainer = new ExecutorFragment(Types._Alternative, SequenceTables.Types._MultipleRegionContainer);
		private static final /*@NonNull*/ ExecutorFragment _Alternative__NamedElement = new ExecutorFragment(Types._Alternative, TextualCommonsTables.Types._NamedElement);
		private static final /*@NonNull*/ ExecutorFragment _Alternative__NonInstantaneousFragment = new ExecutorFragment(Types._Alternative, SequenceTables.Types._NonInstantaneousFragment);
		private static final /*@NonNull*/ ExecutorFragment _Alternative__OclAny = new ExecutorFragment(Types._Alternative, OCLstdlibTables.Types._OclAny);
		private static final /*@NonNull*/ ExecutorFragment _Alternative__OclElement = new ExecutorFragment(Types._Alternative, OCLstdlibTables.Types._OclElement);
		private static final /*@NonNull*/ ExecutorFragment _Alternative__PointInTime = new ExecutorFragment(Types._Alternative, SequenceTables.Types._PointInTime);
		private static final /*@NonNull*/ ExecutorFragment _Alternative__UMLReferencingElement = new ExecutorFragment(Types._Alternative, TextualCommonsTables.Types._UMLReferencingElement);

		private static final /*@NonNull*/ ExecutorFragment _BiPointInTimeTimeIntervalSelector__BiPointInTimeTimeIntervalSelector = new ExecutorFragment(Types._BiPointInTimeTimeIntervalSelector, SequenceTables.Types._BiPointInTimeTimeIntervalSelector);
		private static final /*@NonNull*/ ExecutorFragment _BiPointInTimeTimeIntervalSelector__OclAny = new ExecutorFragment(Types._BiPointInTimeTimeIntervalSelector, OCLstdlibTables.Types._OclAny);
		private static final /*@NonNull*/ ExecutorFragment _BiPointInTimeTimeIntervalSelector__OclElement = new ExecutorFragment(Types._BiPointInTimeTimeIntervalSelector, OCLstdlibTables.Types._OclElement);
		private static final /*@NonNull*/ ExecutorFragment _BiPointInTimeTimeIntervalSelector__TimeIntervalSelector = new ExecutorFragment(Types._BiPointInTimeTimeIntervalSelector, SequenceTables.Types._TimeIntervalSelector);

		private static final /*@NonNull*/ ExecutorFragment _CoRegion__AliasedElement = new ExecutorFragment(Types._CoRegion, TextualCommonsTables.Types._AliasedElement);
		private static final /*@NonNull*/ ExecutorFragment _CoRegion__CoRegion = new ExecutorFragment(Types._CoRegion, SequenceTables.Types._CoRegion);
		private static final /*@NonNull*/ ExecutorFragment _CoRegion__CombinedFragment = new ExecutorFragment(Types._CoRegion, SequenceTables.Types._CombinedFragment);
		private static final /*@NonNull*/ ExecutorFragment _CoRegion__Commentable = new ExecutorFragment(Types._CoRegion, TextualCommonsTables.Types._Commentable);
		private static final /*@NonNull*/ ExecutorFragment _CoRegion__Element = new ExecutorFragment(Types._CoRegion, TextualCommonsTables.Types._Element);
		private static final /*@NonNull*/ ExecutorFragment _CoRegion__Fragment = new ExecutorFragment(Types._CoRegion, SequenceTables.Types._Fragment);
		private static final /*@NonNull*/ ExecutorFragment _CoRegion__MultipleRegionContainer = new ExecutorFragment(Types._CoRegion, SequenceTables.Types._MultipleRegionContainer);
		private static final /*@NonNull*/ ExecutorFragment _CoRegion__NamedElement = new ExecutorFragment(Types._CoRegion, TextualCommonsTables.Types._NamedElement);
		private static final /*@NonNull*/ ExecutorFragment _CoRegion__NonInstantaneousFragment = new ExecutorFragment(Types._CoRegion, SequenceTables.Types._NonInstantaneousFragment);
		private static final /*@NonNull*/ ExecutorFragment _CoRegion__OclAny = new ExecutorFragment(Types._CoRegion, OCLstdlibTables.Types._OclAny);
		private static final /*@NonNull*/ ExecutorFragment _CoRegion__OclElement = new ExecutorFragment(Types._CoRegion, OCLstdlibTables.Types._OclElement);
		private static final /*@NonNull*/ ExecutorFragment _CoRegion__PointInTime = new ExecutorFragment(Types._CoRegion, SequenceTables.Types._PointInTime);
		private static final /*@NonNull*/ ExecutorFragment _CoRegion__UMLReferencingElement = new ExecutorFragment(Types._CoRegion, TextualCommonsTables.Types._UMLReferencingElement);

		private static final /*@NonNull*/ ExecutorFragment _CombinedFragment__AliasedElement = new ExecutorFragment(Types._CombinedFragment, TextualCommonsTables.Types._AliasedElement);
		private static final /*@NonNull*/ ExecutorFragment _CombinedFragment__CombinedFragment = new ExecutorFragment(Types._CombinedFragment, SequenceTables.Types._CombinedFragment);
		private static final /*@NonNull*/ ExecutorFragment _CombinedFragment__Commentable = new ExecutorFragment(Types._CombinedFragment, TextualCommonsTables.Types._Commentable);
		private static final /*@NonNull*/ ExecutorFragment _CombinedFragment__Element = new ExecutorFragment(Types._CombinedFragment, TextualCommonsTables.Types._Element);
		private static final /*@NonNull*/ ExecutorFragment _CombinedFragment__Fragment = new ExecutorFragment(Types._CombinedFragment, SequenceTables.Types._Fragment);
		private static final /*@NonNull*/ ExecutorFragment _CombinedFragment__NamedElement = new ExecutorFragment(Types._CombinedFragment, TextualCommonsTables.Types._NamedElement);
		private static final /*@NonNull*/ ExecutorFragment _CombinedFragment__NonInstantaneousFragment = new ExecutorFragment(Types._CombinedFragment, SequenceTables.Types._NonInstantaneousFragment);
		private static final /*@NonNull*/ ExecutorFragment _CombinedFragment__OclAny = new ExecutorFragment(Types._CombinedFragment, OCLstdlibTables.Types._OclAny);
		private static final /*@NonNull*/ ExecutorFragment _CombinedFragment__OclElement = new ExecutorFragment(Types._CombinedFragment, OCLstdlibTables.Types._OclElement);
		private static final /*@NonNull*/ ExecutorFragment _CombinedFragment__PointInTime = new ExecutorFragment(Types._CombinedFragment, SequenceTables.Types._PointInTime);
		private static final /*@NonNull*/ ExecutorFragment _CombinedFragment__UMLReferencingElement = new ExecutorFragment(Types._CombinedFragment, TextualCommonsTables.Types._UMLReferencingElement);

		private static final /*@NonNull*/ ExecutorFragment _Condition__Condition = new ExecutorFragment(Types._Condition, SequenceTables.Types._Condition);
		private static final /*@NonNull*/ ExecutorFragment _Condition__Element = new ExecutorFragment(Types._Condition, TextualCommonsTables.Types._Element);
		private static final /*@NonNull*/ ExecutorFragment _Condition__OclAny = new ExecutorFragment(Types._Condition, OCLstdlibTables.Types._OclAny);
		private static final /*@NonNull*/ ExecutorFragment _Condition__OclElement = new ExecutorFragment(Types._Condition, OCLstdlibTables.Types._OclElement);
		private static final /*@NonNull*/ ExecutorFragment _Condition__UMLReferencingElement = new ExecutorFragment(Types._Condition, TextualCommonsTables.Types._UMLReferencingElement);

		private static final /*@NonNull*/ ExecutorFragment _Constraint__Constraint = new ExecutorFragment(Types._Constraint, SequenceTables.Types._Constraint);
		private static final /*@NonNull*/ ExecutorFragment _Constraint__Fragment = new ExecutorFragment(Types._Constraint, SequenceTables.Types._Fragment);
		private static final /*@NonNull*/ ExecutorFragment _Constraint__OclAny = new ExecutorFragment(Types._Constraint, OCLstdlibTables.Types._OclAny);
		private static final /*@NonNull*/ ExecutorFragment _Constraint__OclElement = new ExecutorFragment(Types._Constraint, OCLstdlibTables.Types._OclElement);

		private static final /*@NonNull*/ ExecutorFragment _CreateMessage__AliasedElement = new ExecutorFragment(Types._CreateMessage, TextualCommonsTables.Types._AliasedElement);
		private static final /*@NonNull*/ ExecutorFragment _CreateMessage__Commentable = new ExecutorFragment(Types._CreateMessage, TextualCommonsTables.Types._Commentable);
		private static final /*@NonNull*/ ExecutorFragment _CreateMessage__CreateMessage = new ExecutorFragment(Types._CreateMessage, SequenceTables.Types._CreateMessage);
		private static final /*@NonNull*/ ExecutorFragment _CreateMessage__Element = new ExecutorFragment(Types._CreateMessage, TextualCommonsTables.Types._Element);
		private static final /*@NonNull*/ ExecutorFragment _CreateMessage__Fragment = new ExecutorFragment(Types._CreateMessage, SequenceTables.Types._Fragment);
		private static final /*@NonNull*/ ExecutorFragment _CreateMessage__Message = new ExecutorFragment(Types._CreateMessage, SequenceTables.Types._Message);
		private static final /*@NonNull*/ ExecutorFragment _CreateMessage__NamedElement = new ExecutorFragment(Types._CreateMessage, TextualCommonsTables.Types._NamedElement);
		private static final /*@NonNull*/ ExecutorFragment _CreateMessage__OclAny = new ExecutorFragment(Types._CreateMessage, OCLstdlibTables.Types._OclAny);
		private static final /*@NonNull*/ ExecutorFragment _CreateMessage__OclElement = new ExecutorFragment(Types._CreateMessage, OCLstdlibTables.Types._OclElement);
		private static final /*@NonNull*/ ExecutorFragment _CreateMessage__UMLReferencingElement = new ExecutorFragment(Types._CreateMessage, TextualCommonsTables.Types._UMLReferencingElement);

		private static final /*@NonNull*/ ExecutorFragment _Critical__AliasedElement = new ExecutorFragment(Types._Critical, TextualCommonsTables.Types._AliasedElement);
		private static final /*@NonNull*/ ExecutorFragment _Critical__CombinedFragment = new ExecutorFragment(Types._Critical, SequenceTables.Types._CombinedFragment);
		private static final /*@NonNull*/ ExecutorFragment _Critical__Commentable = new ExecutorFragment(Types._Critical, TextualCommonsTables.Types._Commentable);
		private static final /*@NonNull*/ ExecutorFragment _Critical__Critical = new ExecutorFragment(Types._Critical, SequenceTables.Types._Critical);
		private static final /*@NonNull*/ ExecutorFragment _Critical__Element = new ExecutorFragment(Types._Critical, TextualCommonsTables.Types._Element);
		private static final /*@NonNull*/ ExecutorFragment _Critical__Fragment = new ExecutorFragment(Types._Critical, SequenceTables.Types._Fragment);
		private static final /*@NonNull*/ ExecutorFragment _Critical__NamedElement = new ExecutorFragment(Types._Critical, TextualCommonsTables.Types._NamedElement);
		private static final /*@NonNull*/ ExecutorFragment _Critical__NonInstantaneousFragment = new ExecutorFragment(Types._Critical, SequenceTables.Types._NonInstantaneousFragment);
		private static final /*@NonNull*/ ExecutorFragment _Critical__OclAny = new ExecutorFragment(Types._Critical, OCLstdlibTables.Types._OclAny);
		private static final /*@NonNull*/ ExecutorFragment _Critical__OclElement = new ExecutorFragment(Types._Critical, OCLstdlibTables.Types._OclElement);
		private static final /*@NonNull*/ ExecutorFragment _Critical__PointInTime = new ExecutorFragment(Types._Critical, SequenceTables.Types._PointInTime);
		private static final /*@NonNull*/ ExecutorFragment _Critical__SingleRegionContainer = new ExecutorFragment(Types._Critical, SequenceTables.Types._SingleRegionContainer);
		private static final /*@NonNull*/ ExecutorFragment _Critical__UMLReferencingElement = new ExecutorFragment(Types._Critical, TextualCommonsTables.Types._UMLReferencingElement);

		private static final /*@NonNull*/ ExecutorFragment _DestructionMessage__AliasedElement = new ExecutorFragment(Types._DestructionMessage, TextualCommonsTables.Types._AliasedElement);
		private static final /*@NonNull*/ ExecutorFragment _DestructionMessage__Commentable = new ExecutorFragment(Types._DestructionMessage, TextualCommonsTables.Types._Commentable);
		private static final /*@NonNull*/ ExecutorFragment _DestructionMessage__DestructionMessage = new ExecutorFragment(Types._DestructionMessage, SequenceTables.Types._DestructionMessage);
		private static final /*@NonNull*/ ExecutorFragment _DestructionMessage__Element = new ExecutorFragment(Types._DestructionMessage, TextualCommonsTables.Types._Element);
		private static final /*@NonNull*/ ExecutorFragment _DestructionMessage__Fragment = new ExecutorFragment(Types._DestructionMessage, SequenceTables.Types._Fragment);
		private static final /*@NonNull*/ ExecutorFragment _DestructionMessage__Message = new ExecutorFragment(Types._DestructionMessage, SequenceTables.Types._Message);
		private static final /*@NonNull*/ ExecutorFragment _DestructionMessage__NamedElement = new ExecutorFragment(Types._DestructionMessage, TextualCommonsTables.Types._NamedElement);
		private static final /*@NonNull*/ ExecutorFragment _DestructionMessage__OclAny = new ExecutorFragment(Types._DestructionMessage, OCLstdlibTables.Types._OclAny);
		private static final /*@NonNull*/ ExecutorFragment _DestructionMessage__OclElement = new ExecutorFragment(Types._DestructionMessage, OCLstdlibTables.Types._OclElement);
		private static final /*@NonNull*/ ExecutorFragment _DestructionMessage__UMLReferencingElement = new ExecutorFragment(Types._DestructionMessage, TextualCommonsTables.Types._UMLReferencingElement);

		private static final /*@NonNull*/ ExecutorFragment _DestructionOccurenceSpecification__Commentable = new ExecutorFragment(Types._DestructionOccurenceSpecification, TextualCommonsTables.Types._Commentable);
		private static final /*@NonNull*/ ExecutorFragment _DestructionOccurenceSpecification__DestructionOccurenceSpecification = new ExecutorFragment(Types._DestructionOccurenceSpecification, SequenceTables.Types._DestructionOccurenceSpecification);
		private static final /*@NonNull*/ ExecutorFragment _DestructionOccurenceSpecification__Element = new ExecutorFragment(Types._DestructionOccurenceSpecification, TextualCommonsTables.Types._Element);
		private static final /*@NonNull*/ ExecutorFragment _DestructionOccurenceSpecification__Fragment = new ExecutorFragment(Types._DestructionOccurenceSpecification, SequenceTables.Types._Fragment);
		private static final /*@NonNull*/ ExecutorFragment _DestructionOccurenceSpecification__OccurenceSpecification = new ExecutorFragment(Types._DestructionOccurenceSpecification, SequenceTables.Types._OccurenceSpecification);
		private static final /*@NonNull*/ ExecutorFragment _DestructionOccurenceSpecification__OclAny = new ExecutorFragment(Types._DestructionOccurenceSpecification, OCLstdlibTables.Types._OclAny);
		private static final /*@NonNull*/ ExecutorFragment _DestructionOccurenceSpecification__OclElement = new ExecutorFragment(Types._DestructionOccurenceSpecification, OCLstdlibTables.Types._OclElement);
		private static final /*@NonNull*/ ExecutorFragment _DestructionOccurenceSpecification__PointInTime = new ExecutorFragment(Types._DestructionOccurenceSpecification, SequenceTables.Types._PointInTime);
		private static final /*@NonNull*/ ExecutorFragment _DestructionOccurenceSpecification__UMLReferencingElement = new ExecutorFragment(Types._DestructionOccurenceSpecification, TextualCommonsTables.Types._UMLReferencingElement);

		private static final /*@NonNull*/ ExecutorFragment _DurationConstraint__Constraint = new ExecutorFragment(Types._DurationConstraint, SequenceTables.Types._Constraint);
		private static final /*@NonNull*/ ExecutorFragment _DurationConstraint__DurationConstraint = new ExecutorFragment(Types._DurationConstraint, SequenceTables.Types._DurationConstraint);
		private static final /*@NonNull*/ ExecutorFragment _DurationConstraint__Fragment = new ExecutorFragment(Types._DurationConstraint, SequenceTables.Types._Fragment);
		private static final /*@NonNull*/ ExecutorFragment _DurationConstraint__OclAny = new ExecutorFragment(Types._DurationConstraint, OCLstdlibTables.Types._OclAny);
		private static final /*@NonNull*/ ExecutorFragment _DurationConstraint__OclElement = new ExecutorFragment(Types._DurationConstraint, OCLstdlibTables.Types._OclElement);

		private static final /*@NonNull*/ ExecutorFragment _DurationObservation__DurationObservation = new ExecutorFragment(Types._DurationObservation, SequenceTables.Types._DurationObservation);
		private static final /*@NonNull*/ ExecutorFragment _DurationObservation__Fragment = new ExecutorFragment(Types._DurationObservation, SequenceTables.Types._Fragment);
		private static final /*@NonNull*/ ExecutorFragment _DurationObservation__Observation = new ExecutorFragment(Types._DurationObservation, SequenceTables.Types._Observation);
		private static final /*@NonNull*/ ExecutorFragment _DurationObservation__OclAny = new ExecutorFragment(Types._DurationObservation, OCLstdlibTables.Types._OclAny);
		private static final /*@NonNull*/ ExecutorFragment _DurationObservation__OclElement = new ExecutorFragment(Types._DurationObservation, OCLstdlibTables.Types._OclElement);

		private static final /*@NonNull*/ ExecutorFragment _ExplicitArrivalOccurenceReference__ExplicitArrivalOccurenceReference = new ExecutorFragment(Types._ExplicitArrivalOccurenceReference, SequenceTables.Types._ExplicitArrivalOccurenceReference);
		private static final /*@NonNull*/ ExecutorFragment _ExplicitArrivalOccurenceReference__OccurenceReference = new ExecutorFragment(Types._ExplicitArrivalOccurenceReference, SequenceTables.Types._OccurenceReference);
		private static final /*@NonNull*/ ExecutorFragment _ExplicitArrivalOccurenceReference__OclAny = new ExecutorFragment(Types._ExplicitArrivalOccurenceReference, OCLstdlibTables.Types._OclAny);
		private static final /*@NonNull*/ ExecutorFragment _ExplicitArrivalOccurenceReference__OclElement = new ExecutorFragment(Types._ExplicitArrivalOccurenceReference, OCLstdlibTables.Types._OclElement);

		private static final /*@NonNull*/ ExecutorFragment _ExplicitArrivalOccurenceSpecification__AliasedElement = new ExecutorFragment(Types._ExplicitArrivalOccurenceSpecification, TextualCommonsTables.Types._AliasedElement);
		private static final /*@NonNull*/ ExecutorFragment _ExplicitArrivalOccurenceSpecification__Commentable = new ExecutorFragment(Types._ExplicitArrivalOccurenceSpecification, TextualCommonsTables.Types._Commentable);
		private static final /*@NonNull*/ ExecutorFragment _ExplicitArrivalOccurenceSpecification__Element = new ExecutorFragment(Types._ExplicitArrivalOccurenceSpecification, TextualCommonsTables.Types._Element);
		private static final /*@NonNull*/ ExecutorFragment _ExplicitArrivalOccurenceSpecification__ExplicitArrivalOccurenceSpecification = new ExecutorFragment(Types._ExplicitArrivalOccurenceSpecification, SequenceTables.Types._ExplicitArrivalOccurenceSpecification);
		private static final /*@NonNull*/ ExecutorFragment _ExplicitArrivalOccurenceSpecification__Fragment = new ExecutorFragment(Types._ExplicitArrivalOccurenceSpecification, SequenceTables.Types._Fragment);
		private static final /*@NonNull*/ ExecutorFragment _ExplicitArrivalOccurenceSpecification__NamedElement = new ExecutorFragment(Types._ExplicitArrivalOccurenceSpecification, TextualCommonsTables.Types._NamedElement);
		private static final /*@NonNull*/ ExecutorFragment _ExplicitArrivalOccurenceSpecification__OccurenceSpecification = new ExecutorFragment(Types._ExplicitArrivalOccurenceSpecification, SequenceTables.Types._OccurenceSpecification);
		private static final /*@NonNull*/ ExecutorFragment _ExplicitArrivalOccurenceSpecification__OclAny = new ExecutorFragment(Types._ExplicitArrivalOccurenceSpecification, OCLstdlibTables.Types._OclAny);
		private static final /*@NonNull*/ ExecutorFragment _ExplicitArrivalOccurenceSpecification__OclElement = new ExecutorFragment(Types._ExplicitArrivalOccurenceSpecification, OCLstdlibTables.Types._OclElement);
		private static final /*@NonNull*/ ExecutorFragment _ExplicitArrivalOccurenceSpecification__PointInTime = new ExecutorFragment(Types._ExplicitArrivalOccurenceSpecification, SequenceTables.Types._PointInTime);
		private static final /*@NonNull*/ ExecutorFragment _ExplicitArrivalOccurenceSpecification__UMLReferencingElement = new ExecutorFragment(Types._ExplicitArrivalOccurenceSpecification, TextualCommonsTables.Types._UMLReferencingElement);

		private static final /*@NonNull*/ ExecutorFragment _Fragment__Fragment = new ExecutorFragment(Types._Fragment, SequenceTables.Types._Fragment);
		private static final /*@NonNull*/ ExecutorFragment _Fragment__OclAny = new ExecutorFragment(Types._Fragment, OCLstdlibTables.Types._OclAny);
		private static final /*@NonNull*/ ExecutorFragment _Fragment__OclElement = new ExecutorFragment(Types._Fragment, OCLstdlibTables.Types._OclElement);

		private static final /*@NonNull*/ ExecutorFragment _FragmentSequence__FragmentSequence = new ExecutorFragment(Types._FragmentSequence, SequenceTables.Types._FragmentSequence);
		private static final /*@NonNull*/ ExecutorFragment _FragmentSequence__OclAny = new ExecutorFragment(Types._FragmentSequence, OCLstdlibTables.Types._OclAny);
		private static final /*@NonNull*/ ExecutorFragment _FragmentSequence__OclElement = new ExecutorFragment(Types._FragmentSequence, OCLstdlibTables.Types._OclElement);

		private static final /*@NonNull*/ ExecutorFragment _FragmentTimeIntervalSelector__FragmentTimeIntervalSelector = new ExecutorFragment(Types._FragmentTimeIntervalSelector, SequenceTables.Types._FragmentTimeIntervalSelector);
		private static final /*@NonNull*/ ExecutorFragment _FragmentTimeIntervalSelector__OclAny = new ExecutorFragment(Types._FragmentTimeIntervalSelector, OCLstdlibTables.Types._OclAny);
		private static final /*@NonNull*/ ExecutorFragment _FragmentTimeIntervalSelector__OclElement = new ExecutorFragment(Types._FragmentTimeIntervalSelector, OCLstdlibTables.Types._OclElement);
		private static final /*@NonNull*/ ExecutorFragment _FragmentTimeIntervalSelector__TimeIntervalSelector = new ExecutorFragment(Types._FragmentTimeIntervalSelector, SequenceTables.Types._TimeIntervalSelector);

		private static final /*@NonNull*/ ExecutorFragment _ImplicitMessageOccurenceSpecification__Commentable = new ExecutorFragment(Types._ImplicitMessageOccurenceSpecification, TextualCommonsTables.Types._Commentable);
		private static final /*@NonNull*/ ExecutorFragment _ImplicitMessageOccurenceSpecification__Element = new ExecutorFragment(Types._ImplicitMessageOccurenceSpecification, TextualCommonsTables.Types._Element);
		private static final /*@NonNull*/ ExecutorFragment _ImplicitMessageOccurenceSpecification__Fragment = new ExecutorFragment(Types._ImplicitMessageOccurenceSpecification, SequenceTables.Types._Fragment);
		private static final /*@NonNull*/ ExecutorFragment _ImplicitMessageOccurenceSpecification__ImplicitMessageOccurenceSpecification = new ExecutorFragment(Types._ImplicitMessageOccurenceSpecification, SequenceTables.Types._ImplicitMessageOccurenceSpecification);
		private static final /*@NonNull*/ ExecutorFragment _ImplicitMessageOccurenceSpecification__OccurenceReference = new ExecutorFragment(Types._ImplicitMessageOccurenceSpecification, SequenceTables.Types._OccurenceReference);
		private static final /*@NonNull*/ ExecutorFragment _ImplicitMessageOccurenceSpecification__OccurenceSpecification = new ExecutorFragment(Types._ImplicitMessageOccurenceSpecification, SequenceTables.Types._OccurenceSpecification);
		private static final /*@NonNull*/ ExecutorFragment _ImplicitMessageOccurenceSpecification__OclAny = new ExecutorFragment(Types._ImplicitMessageOccurenceSpecification, OCLstdlibTables.Types._OclAny);
		private static final /*@NonNull*/ ExecutorFragment _ImplicitMessageOccurenceSpecification__OclElement = new ExecutorFragment(Types._ImplicitMessageOccurenceSpecification, OCLstdlibTables.Types._OclElement);
		private static final /*@NonNull*/ ExecutorFragment _ImplicitMessageOccurenceSpecification__PointInTime = new ExecutorFragment(Types._ImplicitMessageOccurenceSpecification, SequenceTables.Types._PointInTime);
		private static final /*@NonNull*/ ExecutorFragment _ImplicitMessageOccurenceSpecification__UMLReferencingElement = new ExecutorFragment(Types._ImplicitMessageOccurenceSpecification, TextualCommonsTables.Types._UMLReferencingElement);

		private static final /*@NonNull*/ ExecutorFragment _Loop__AliasedElement = new ExecutorFragment(Types._Loop, TextualCommonsTables.Types._AliasedElement);
		private static final /*@NonNull*/ ExecutorFragment _Loop__CombinedFragment = new ExecutorFragment(Types._Loop, SequenceTables.Types._CombinedFragment);
		private static final /*@NonNull*/ ExecutorFragment _Loop__Commentable = new ExecutorFragment(Types._Loop, TextualCommonsTables.Types._Commentable);
		private static final /*@NonNull*/ ExecutorFragment _Loop__Element = new ExecutorFragment(Types._Loop, TextualCommonsTables.Types._Element);
		private static final /*@NonNull*/ ExecutorFragment _Loop__Fragment = new ExecutorFragment(Types._Loop, SequenceTables.Types._Fragment);
		private static final /*@NonNull*/ ExecutorFragment _Loop__Loop = new ExecutorFragment(Types._Loop, SequenceTables.Types._Loop);
		private static final /*@NonNull*/ ExecutorFragment _Loop__NamedElement = new ExecutorFragment(Types._Loop, TextualCommonsTables.Types._NamedElement);
		private static final /*@NonNull*/ ExecutorFragment _Loop__NonInstantaneousFragment = new ExecutorFragment(Types._Loop, SequenceTables.Types._NonInstantaneousFragment);
		private static final /*@NonNull*/ ExecutorFragment _Loop__OclAny = new ExecutorFragment(Types._Loop, OCLstdlibTables.Types._OclAny);
		private static final /*@NonNull*/ ExecutorFragment _Loop__OclElement = new ExecutorFragment(Types._Loop, OCLstdlibTables.Types._OclElement);
		private static final /*@NonNull*/ ExecutorFragment _Loop__PointInTime = new ExecutorFragment(Types._Loop, SequenceTables.Types._PointInTime);
		private static final /*@NonNull*/ ExecutorFragment _Loop__SingleRegionContainer = new ExecutorFragment(Types._Loop, SequenceTables.Types._SingleRegionContainer);
		private static final /*@NonNull*/ ExecutorFragment _Loop__UMLReferencingElement = new ExecutorFragment(Types._Loop, TextualCommonsTables.Types._UMLReferencingElement);

		private static final /*@NonNull*/ ExecutorFragment _Message__AliasedElement = new ExecutorFragment(Types._Message, TextualCommonsTables.Types._AliasedElement);
		private static final /*@NonNull*/ ExecutorFragment _Message__Commentable = new ExecutorFragment(Types._Message, TextualCommonsTables.Types._Commentable);
		private static final /*@NonNull*/ ExecutorFragment _Message__Element = new ExecutorFragment(Types._Message, TextualCommonsTables.Types._Element);
		private static final /*@NonNull*/ ExecutorFragment _Message__Fragment = new ExecutorFragment(Types._Message, SequenceTables.Types._Fragment);
		private static final /*@NonNull*/ ExecutorFragment _Message__Message = new ExecutorFragment(Types._Message, SequenceTables.Types._Message);
		private static final /*@NonNull*/ ExecutorFragment _Message__NamedElement = new ExecutorFragment(Types._Message, TextualCommonsTables.Types._NamedElement);
		private static final /*@NonNull*/ ExecutorFragment _Message__OclAny = new ExecutorFragment(Types._Message, OCLstdlibTables.Types._OclAny);
		private static final /*@NonNull*/ ExecutorFragment _Message__OclElement = new ExecutorFragment(Types._Message, OCLstdlibTables.Types._OclElement);
		private static final /*@NonNull*/ ExecutorFragment _Message__UMLReferencingElement = new ExecutorFragment(Types._Message, TextualCommonsTables.Types._UMLReferencingElement);

		private static final /*@NonNull*/ ExecutorFragment _MessageType__MessageType = new ExecutorFragment(Types._MessageType, SequenceTables.Types._MessageType);
		private static final /*@NonNull*/ ExecutorFragment _MessageType__OclAny = new ExecutorFragment(Types._MessageType, OCLstdlibTables.Types._OclAny);
		private static final /*@NonNull*/ ExecutorFragment _MessageType__OclElement = new ExecutorFragment(Types._MessageType, OCLstdlibTables.Types._OclElement);
		private static final /*@NonNull*/ ExecutorFragment _MessageType__OclEnumeration = new ExecutorFragment(Types._MessageType, OCLstdlibTables.Types._OclEnumeration);
		private static final /*@NonNull*/ ExecutorFragment _MessageType__OclType = new ExecutorFragment(Types._MessageType, OCLstdlibTables.Types._OclType);

		private static final /*@NonNull*/ ExecutorFragment _MultipleRegionContainer__AliasedElement = new ExecutorFragment(Types._MultipleRegionContainer, TextualCommonsTables.Types._AliasedElement);
		private static final /*@NonNull*/ ExecutorFragment _MultipleRegionContainer__CombinedFragment = new ExecutorFragment(Types._MultipleRegionContainer, SequenceTables.Types._CombinedFragment);
		private static final /*@NonNull*/ ExecutorFragment _MultipleRegionContainer__Commentable = new ExecutorFragment(Types._MultipleRegionContainer, TextualCommonsTables.Types._Commentable);
		private static final /*@NonNull*/ ExecutorFragment _MultipleRegionContainer__Element = new ExecutorFragment(Types._MultipleRegionContainer, TextualCommonsTables.Types._Element);
		private static final /*@NonNull*/ ExecutorFragment _MultipleRegionContainer__Fragment = new ExecutorFragment(Types._MultipleRegionContainer, SequenceTables.Types._Fragment);
		private static final /*@NonNull*/ ExecutorFragment _MultipleRegionContainer__MultipleRegionContainer = new ExecutorFragment(Types._MultipleRegionContainer, SequenceTables.Types._MultipleRegionContainer);
		private static final /*@NonNull*/ ExecutorFragment _MultipleRegionContainer__NamedElement = new ExecutorFragment(Types._MultipleRegionContainer, TextualCommonsTables.Types._NamedElement);
		private static final /*@NonNull*/ ExecutorFragment _MultipleRegionContainer__NonInstantaneousFragment = new ExecutorFragment(Types._MultipleRegionContainer, SequenceTables.Types._NonInstantaneousFragment);
		private static final /*@NonNull*/ ExecutorFragment _MultipleRegionContainer__OclAny = new ExecutorFragment(Types._MultipleRegionContainer, OCLstdlibTables.Types._OclAny);
		private static final /*@NonNull*/ ExecutorFragment _MultipleRegionContainer__OclElement = new ExecutorFragment(Types._MultipleRegionContainer, OCLstdlibTables.Types._OclElement);
		private static final /*@NonNull*/ ExecutorFragment _MultipleRegionContainer__PointInTime = new ExecutorFragment(Types._MultipleRegionContainer, SequenceTables.Types._PointInTime);
		private static final /*@NonNull*/ ExecutorFragment _MultipleRegionContainer__UMLReferencingElement = new ExecutorFragment(Types._MultipleRegionContainer, TextualCommonsTables.Types._UMLReferencingElement);

		private static final /*@NonNull*/ ExecutorFragment _NonInstantaneousFragment__AliasedElement = new ExecutorFragment(Types._NonInstantaneousFragment, TextualCommonsTables.Types._AliasedElement);
		private static final /*@NonNull*/ ExecutorFragment _NonInstantaneousFragment__Element = new ExecutorFragment(Types._NonInstantaneousFragment, TextualCommonsTables.Types._Element);
		private static final /*@NonNull*/ ExecutorFragment _NonInstantaneousFragment__Fragment = new ExecutorFragment(Types._NonInstantaneousFragment, SequenceTables.Types._Fragment);
		private static final /*@NonNull*/ ExecutorFragment _NonInstantaneousFragment__NamedElement = new ExecutorFragment(Types._NonInstantaneousFragment, TextualCommonsTables.Types._NamedElement);
		private static final /*@NonNull*/ ExecutorFragment _NonInstantaneousFragment__NonInstantaneousFragment = new ExecutorFragment(Types._NonInstantaneousFragment, SequenceTables.Types._NonInstantaneousFragment);
		private static final /*@NonNull*/ ExecutorFragment _NonInstantaneousFragment__OclAny = new ExecutorFragment(Types._NonInstantaneousFragment, OCLstdlibTables.Types._OclAny);
		private static final /*@NonNull*/ ExecutorFragment _NonInstantaneousFragment__OclElement = new ExecutorFragment(Types._NonInstantaneousFragment, OCLstdlibTables.Types._OclElement);
		private static final /*@NonNull*/ ExecutorFragment _NonInstantaneousFragment__PointInTime = new ExecutorFragment(Types._NonInstantaneousFragment, SequenceTables.Types._PointInTime);
		private static final /*@NonNull*/ ExecutorFragment _NonInstantaneousFragment__UMLReferencingElement = new ExecutorFragment(Types._NonInstantaneousFragment, TextualCommonsTables.Types._UMLReferencingElement);

		private static final /*@NonNull*/ ExecutorFragment _Observation__Fragment = new ExecutorFragment(Types._Observation, SequenceTables.Types._Fragment);
		private static final /*@NonNull*/ ExecutorFragment _Observation__Observation = new ExecutorFragment(Types._Observation, SequenceTables.Types._Observation);
		private static final /*@NonNull*/ ExecutorFragment _Observation__OclAny = new ExecutorFragment(Types._Observation, OCLstdlibTables.Types._OclAny);
		private static final /*@NonNull*/ ExecutorFragment _Observation__OclElement = new ExecutorFragment(Types._Observation, OCLstdlibTables.Types._OclElement);

		private static final /*@NonNull*/ ExecutorFragment _OccurenceReference__OccurenceReference = new ExecutorFragment(Types._OccurenceReference, SequenceTables.Types._OccurenceReference);
		private static final /*@NonNull*/ ExecutorFragment _OccurenceReference__OclAny = new ExecutorFragment(Types._OccurenceReference, OCLstdlibTables.Types._OclAny);
		private static final /*@NonNull*/ ExecutorFragment _OccurenceReference__OclElement = new ExecutorFragment(Types._OccurenceReference, OCLstdlibTables.Types._OclElement);

		private static final /*@NonNull*/ ExecutorFragment _OccurenceSpecification__Commentable = new ExecutorFragment(Types._OccurenceSpecification, TextualCommonsTables.Types._Commentable);
		private static final /*@NonNull*/ ExecutorFragment _OccurenceSpecification__Element = new ExecutorFragment(Types._OccurenceSpecification, TextualCommonsTables.Types._Element);
		private static final /*@NonNull*/ ExecutorFragment _OccurenceSpecification__Fragment = new ExecutorFragment(Types._OccurenceSpecification, SequenceTables.Types._Fragment);
		private static final /*@NonNull*/ ExecutorFragment _OccurenceSpecification__OccurenceSpecification = new ExecutorFragment(Types._OccurenceSpecification, SequenceTables.Types._OccurenceSpecification);
		private static final /*@NonNull*/ ExecutorFragment _OccurenceSpecification__OclAny = new ExecutorFragment(Types._OccurenceSpecification, OCLstdlibTables.Types._OclAny);
		private static final /*@NonNull*/ ExecutorFragment _OccurenceSpecification__OclElement = new ExecutorFragment(Types._OccurenceSpecification, OCLstdlibTables.Types._OclElement);
		private static final /*@NonNull*/ ExecutorFragment _OccurenceSpecification__PointInTime = new ExecutorFragment(Types._OccurenceSpecification, SequenceTables.Types._PointInTime);
		private static final /*@NonNull*/ ExecutorFragment _OccurenceSpecification__UMLReferencingElement = new ExecutorFragment(Types._OccurenceSpecification, TextualCommonsTables.Types._UMLReferencingElement);

		private static final /*@NonNull*/ ExecutorFragment _Option__AliasedElement = new ExecutorFragment(Types._Option, TextualCommonsTables.Types._AliasedElement);
		private static final /*@NonNull*/ ExecutorFragment _Option__CombinedFragment = new ExecutorFragment(Types._Option, SequenceTables.Types._CombinedFragment);
		private static final /*@NonNull*/ ExecutorFragment _Option__Commentable = new ExecutorFragment(Types._Option, TextualCommonsTables.Types._Commentable);
		private static final /*@NonNull*/ ExecutorFragment _Option__Element = new ExecutorFragment(Types._Option, TextualCommonsTables.Types._Element);
		private static final /*@NonNull*/ ExecutorFragment _Option__Fragment = new ExecutorFragment(Types._Option, SequenceTables.Types._Fragment);
		private static final /*@NonNull*/ ExecutorFragment _Option__NamedElement = new ExecutorFragment(Types._Option, TextualCommonsTables.Types._NamedElement);
		private static final /*@NonNull*/ ExecutorFragment _Option__NonInstantaneousFragment = new ExecutorFragment(Types._Option, SequenceTables.Types._NonInstantaneousFragment);
		private static final /*@NonNull*/ ExecutorFragment _Option__OclAny = new ExecutorFragment(Types._Option, OCLstdlibTables.Types._OclAny);
		private static final /*@NonNull*/ ExecutorFragment _Option__OclElement = new ExecutorFragment(Types._Option, OCLstdlibTables.Types._OclElement);
		private static final /*@NonNull*/ ExecutorFragment _Option__Option = new ExecutorFragment(Types._Option, SequenceTables.Types._Option);
		private static final /*@NonNull*/ ExecutorFragment _Option__PointInTime = new ExecutorFragment(Types._Option, SequenceTables.Types._PointInTime);
		private static final /*@NonNull*/ ExecutorFragment _Option__SingleRegionContainer = new ExecutorFragment(Types._Option, SequenceTables.Types._SingleRegionContainer);
		private static final /*@NonNull*/ ExecutorFragment _Option__UMLReferencingElement = new ExecutorFragment(Types._Option, TextualCommonsTables.Types._UMLReferencingElement);

		private static final /*@NonNull*/ ExecutorFragment _OrderedFragmentContainer__AliasedElement = new ExecutorFragment(Types._OrderedFragmentContainer, TextualCommonsTables.Types._AliasedElement);
		private static final /*@NonNull*/ ExecutorFragment _OrderedFragmentContainer__Commentable = new ExecutorFragment(Types._OrderedFragmentContainer, TextualCommonsTables.Types._Commentable);
		private static final /*@NonNull*/ ExecutorFragment _OrderedFragmentContainer__Element = new ExecutorFragment(Types._OrderedFragmentContainer, TextualCommonsTables.Types._Element);
		private static final /*@NonNull*/ ExecutorFragment _OrderedFragmentContainer__FragmentSequence = new ExecutorFragment(Types._OrderedFragmentContainer, SequenceTables.Types._FragmentSequence);
		private static final /*@NonNull*/ ExecutorFragment _OrderedFragmentContainer__NamedElement = new ExecutorFragment(Types._OrderedFragmentContainer, TextualCommonsTables.Types._NamedElement);
		private static final /*@NonNull*/ ExecutorFragment _OrderedFragmentContainer__OclAny = new ExecutorFragment(Types._OrderedFragmentContainer, OCLstdlibTables.Types._OclAny);
		private static final /*@NonNull*/ ExecutorFragment _OrderedFragmentContainer__OclElement = new ExecutorFragment(Types._OrderedFragmentContainer, OCLstdlibTables.Types._OclElement);
		private static final /*@NonNull*/ ExecutorFragment _OrderedFragmentContainer__OrderedFragmentContainer = new ExecutorFragment(Types._OrderedFragmentContainer, SequenceTables.Types._OrderedFragmentContainer);
		private static final /*@NonNull*/ ExecutorFragment _OrderedFragmentContainer__PointInTime = new ExecutorFragment(Types._OrderedFragmentContainer, SequenceTables.Types._PointInTime);
		private static final /*@NonNull*/ ExecutorFragment _OrderedFragmentContainer__UMLReferencingElement = new ExecutorFragment(Types._OrderedFragmentContainer, TextualCommonsTables.Types._UMLReferencingElement);

		private static final /*@NonNull*/ ExecutorFragment _Parallel__AliasedElement = new ExecutorFragment(Types._Parallel, TextualCommonsTables.Types._AliasedElement);
		private static final /*@NonNull*/ ExecutorFragment _Parallel__CombinedFragment = new ExecutorFragment(Types._Parallel, SequenceTables.Types._CombinedFragment);
		private static final /*@NonNull*/ ExecutorFragment _Parallel__Commentable = new ExecutorFragment(Types._Parallel, TextualCommonsTables.Types._Commentable);
		private static final /*@NonNull*/ ExecutorFragment _Parallel__Element = new ExecutorFragment(Types._Parallel, TextualCommonsTables.Types._Element);
		private static final /*@NonNull*/ ExecutorFragment _Parallel__Fragment = new ExecutorFragment(Types._Parallel, SequenceTables.Types._Fragment);
		private static final /*@NonNull*/ ExecutorFragment _Parallel__MultipleRegionContainer = new ExecutorFragment(Types._Parallel, SequenceTables.Types._MultipleRegionContainer);
		private static final /*@NonNull*/ ExecutorFragment _Parallel__NamedElement = new ExecutorFragment(Types._Parallel, TextualCommonsTables.Types._NamedElement);
		private static final /*@NonNull*/ ExecutorFragment _Parallel__NonInstantaneousFragment = new ExecutorFragment(Types._Parallel, SequenceTables.Types._NonInstantaneousFragment);
		private static final /*@NonNull*/ ExecutorFragment _Parallel__OclAny = new ExecutorFragment(Types._Parallel, OCLstdlibTables.Types._OclAny);
		private static final /*@NonNull*/ ExecutorFragment _Parallel__OclElement = new ExecutorFragment(Types._Parallel, OCLstdlibTables.Types._OclElement);
		private static final /*@NonNull*/ ExecutorFragment _Parallel__Parallel = new ExecutorFragment(Types._Parallel, SequenceTables.Types._Parallel);
		private static final /*@NonNull*/ ExecutorFragment _Parallel__PointInTime = new ExecutorFragment(Types._Parallel, SequenceTables.Types._PointInTime);
		private static final /*@NonNull*/ ExecutorFragment _Parallel__UMLReferencingElement = new ExecutorFragment(Types._Parallel, TextualCommonsTables.Types._UMLReferencingElement);

		private static final /*@NonNull*/ ExecutorFragment _PointInTime__Element = new ExecutorFragment(Types._PointInTime, TextualCommonsTables.Types._Element);
		private static final /*@NonNull*/ ExecutorFragment _PointInTime__OclAny = new ExecutorFragment(Types._PointInTime, OCLstdlibTables.Types._OclAny);
		private static final /*@NonNull*/ ExecutorFragment _PointInTime__OclElement = new ExecutorFragment(Types._PointInTime, OCLstdlibTables.Types._OclElement);
		private static final /*@NonNull*/ ExecutorFragment _PointInTime__PointInTime = new ExecutorFragment(Types._PointInTime, SequenceTables.Types._PointInTime);
		private static final /*@NonNull*/ ExecutorFragment _PointInTime__UMLReferencingElement = new ExecutorFragment(Types._PointInTime, TextualCommonsTables.Types._UMLReferencingElement);

		private static final /*@NonNull*/ ExecutorFragment _PointInTimeSelector__OclAny = new ExecutorFragment(Types._PointInTimeSelector, OCLstdlibTables.Types._OclAny);
		private static final /*@NonNull*/ ExecutorFragment _PointInTimeSelector__OclElement = new ExecutorFragment(Types._PointInTimeSelector, OCLstdlibTables.Types._OclElement);
		private static final /*@NonNull*/ ExecutorFragment _PointInTimeSelector__PointInTimeSelector = new ExecutorFragment(Types._PointInTimeSelector, SequenceTables.Types._PointInTimeSelector);

		private static final /*@NonNull*/ ExecutorFragment _Reference__AliasedElement = new ExecutorFragment(Types._Reference, TextualCommonsTables.Types._AliasedElement);
		private static final /*@NonNull*/ ExecutorFragment _Reference__Element = new ExecutorFragment(Types._Reference, TextualCommonsTables.Types._Element);
		private static final /*@NonNull*/ ExecutorFragment _Reference__Fragment = new ExecutorFragment(Types._Reference, SequenceTables.Types._Fragment);
		private static final /*@NonNull*/ ExecutorFragment _Reference__NamedElement = new ExecutorFragment(Types._Reference, TextualCommonsTables.Types._NamedElement);
		private static final /*@NonNull*/ ExecutorFragment _Reference__NonInstantaneousFragment = new ExecutorFragment(Types._Reference, SequenceTables.Types._NonInstantaneousFragment);
		private static final /*@NonNull*/ ExecutorFragment _Reference__OclAny = new ExecutorFragment(Types._Reference, OCLstdlibTables.Types._OclAny);
		private static final /*@NonNull*/ ExecutorFragment _Reference__OclElement = new ExecutorFragment(Types._Reference, OCLstdlibTables.Types._OclElement);
		private static final /*@NonNull*/ ExecutorFragment _Reference__PointInTime = new ExecutorFragment(Types._Reference, SequenceTables.Types._PointInTime);
		private static final /*@NonNull*/ ExecutorFragment _Reference__Reference = new ExecutorFragment(Types._Reference, SequenceTables.Types._Reference);
		private static final /*@NonNull*/ ExecutorFragment _Reference__UMLReferencingElement = new ExecutorFragment(Types._Reference, TextualCommonsTables.Types._UMLReferencingElement);

		private static final /*@NonNull*/ ExecutorFragment _ResponseMessage__AliasedElement = new ExecutorFragment(Types._ResponseMessage, TextualCommonsTables.Types._AliasedElement);
		private static final /*@NonNull*/ ExecutorFragment _ResponseMessage__Commentable = new ExecutorFragment(Types._ResponseMessage, TextualCommonsTables.Types._Commentable);
		private static final /*@NonNull*/ ExecutorFragment _ResponseMessage__Element = new ExecutorFragment(Types._ResponseMessage, TextualCommonsTables.Types._Element);
		private static final /*@NonNull*/ ExecutorFragment _ResponseMessage__Fragment = new ExecutorFragment(Types._ResponseMessage, SequenceTables.Types._Fragment);
		private static final /*@NonNull*/ ExecutorFragment _ResponseMessage__Message = new ExecutorFragment(Types._ResponseMessage, SequenceTables.Types._Message);
		private static final /*@NonNull*/ ExecutorFragment _ResponseMessage__NamedElement = new ExecutorFragment(Types._ResponseMessage, TextualCommonsTables.Types._NamedElement);
		private static final /*@NonNull*/ ExecutorFragment _ResponseMessage__OclAny = new ExecutorFragment(Types._ResponseMessage, OCLstdlibTables.Types._OclAny);
		private static final /*@NonNull*/ ExecutorFragment _ResponseMessage__OclElement = new ExecutorFragment(Types._ResponseMessage, OCLstdlibTables.Types._OclElement);
		private static final /*@NonNull*/ ExecutorFragment _ResponseMessage__ResponseMessage = new ExecutorFragment(Types._ResponseMessage, SequenceTables.Types._ResponseMessage);
		private static final /*@NonNull*/ ExecutorFragment _ResponseMessage__UMLReferencingElement = new ExecutorFragment(Types._ResponseMessage, TextualCommonsTables.Types._UMLReferencingElement);

		private static final /*@NonNull*/ ExecutorFragment _RootPackage__Element = new ExecutorFragment(Types._RootPackage, TextualCommonsTables.Types._Element);
		private static final /*@NonNull*/ ExecutorFragment _RootPackage__NamedElement = new ExecutorFragment(Types._RootPackage, TextualCommonsTables.Types._NamedElement);
		private static final /*@NonNull*/ ExecutorFragment _RootPackage__OclAny = new ExecutorFragment(Types._RootPackage, OCLstdlibTables.Types._OclAny);
		private static final /*@NonNull*/ ExecutorFragment _RootPackage__OclElement = new ExecutorFragment(Types._RootPackage, OCLstdlibTables.Types._OclElement);
		private static final /*@NonNull*/ ExecutorFragment _RootPackage__RootPackage = new ExecutorFragment(Types._RootPackage, SequenceTables.Types._RootPackage);
		private static final /*@NonNull*/ ExecutorFragment _RootPackage__UMLReferencingElement = new ExecutorFragment(Types._RootPackage, TextualCommonsTables.Types._UMLReferencingElement);

		private static final /*@NonNull*/ ExecutorFragment _SequenceDiagram__Element = new ExecutorFragment(Types._SequenceDiagram, TextualCommonsTables.Types._Element);
		private static final /*@NonNull*/ ExecutorFragment _SequenceDiagram__FragmentSequence = new ExecutorFragment(Types._SequenceDiagram, SequenceTables.Types._FragmentSequence);
		private static final /*@NonNull*/ ExecutorFragment _SequenceDiagram__OclAny = new ExecutorFragment(Types._SequenceDiagram, OCLstdlibTables.Types._OclAny);
		private static final /*@NonNull*/ ExecutorFragment _SequenceDiagram__OclElement = new ExecutorFragment(Types._SequenceDiagram, OCLstdlibTables.Types._OclElement);
		private static final /*@NonNull*/ ExecutorFragment _SequenceDiagram__SequenceDiagram = new ExecutorFragment(Types._SequenceDiagram, SequenceTables.Types._SequenceDiagram);
		private static final /*@NonNull*/ ExecutorFragment _SequenceDiagram__UMLReferencingElement = new ExecutorFragment(Types._SequenceDiagram, TextualCommonsTables.Types._UMLReferencingElement);

		private static final /*@NonNull*/ ExecutorFragment _SingleRegionContainer__AliasedElement = new ExecutorFragment(Types._SingleRegionContainer, TextualCommonsTables.Types._AliasedElement);
		private static final /*@NonNull*/ ExecutorFragment _SingleRegionContainer__CombinedFragment = new ExecutorFragment(Types._SingleRegionContainer, SequenceTables.Types._CombinedFragment);
		private static final /*@NonNull*/ ExecutorFragment _SingleRegionContainer__Commentable = new ExecutorFragment(Types._SingleRegionContainer, TextualCommonsTables.Types._Commentable);
		private static final /*@NonNull*/ ExecutorFragment _SingleRegionContainer__Element = new ExecutorFragment(Types._SingleRegionContainer, TextualCommonsTables.Types._Element);
		private static final /*@NonNull*/ ExecutorFragment _SingleRegionContainer__Fragment = new ExecutorFragment(Types._SingleRegionContainer, SequenceTables.Types._Fragment);
		private static final /*@NonNull*/ ExecutorFragment _SingleRegionContainer__NamedElement = new ExecutorFragment(Types._SingleRegionContainer, TextualCommonsTables.Types._NamedElement);
		private static final /*@NonNull*/ ExecutorFragment _SingleRegionContainer__NonInstantaneousFragment = new ExecutorFragment(Types._SingleRegionContainer, SequenceTables.Types._NonInstantaneousFragment);
		private static final /*@NonNull*/ ExecutorFragment _SingleRegionContainer__OclAny = new ExecutorFragment(Types._SingleRegionContainer, OCLstdlibTables.Types._OclAny);
		private static final /*@NonNull*/ ExecutorFragment _SingleRegionContainer__OclElement = new ExecutorFragment(Types._SingleRegionContainer, OCLstdlibTables.Types._OclElement);
		private static final /*@NonNull*/ ExecutorFragment _SingleRegionContainer__PointInTime = new ExecutorFragment(Types._SingleRegionContainer, SequenceTables.Types._PointInTime);
		private static final /*@NonNull*/ ExecutorFragment _SingleRegionContainer__SingleRegionContainer = new ExecutorFragment(Types._SingleRegionContainer, SequenceTables.Types._SingleRegionContainer);
		private static final /*@NonNull*/ ExecutorFragment _SingleRegionContainer__UMLReferencingElement = new ExecutorFragment(Types._SingleRegionContainer, TextualCommonsTables.Types._UMLReferencingElement);

		private static final /*@NonNull*/ ExecutorFragment _StandardMessage__AliasedElement = new ExecutorFragment(Types._StandardMessage, TextualCommonsTables.Types._AliasedElement);
		private static final /*@NonNull*/ ExecutorFragment _StandardMessage__Commentable = new ExecutorFragment(Types._StandardMessage, TextualCommonsTables.Types._Commentable);
		private static final /*@NonNull*/ ExecutorFragment _StandardMessage__Element = new ExecutorFragment(Types._StandardMessage, TextualCommonsTables.Types._Element);
		private static final /*@NonNull*/ ExecutorFragment _StandardMessage__Fragment = new ExecutorFragment(Types._StandardMessage, SequenceTables.Types._Fragment);
		private static final /*@NonNull*/ ExecutorFragment _StandardMessage__Message = new ExecutorFragment(Types._StandardMessage, SequenceTables.Types._Message);
		private static final /*@NonNull*/ ExecutorFragment _StandardMessage__NamedElement = new ExecutorFragment(Types._StandardMessage, TextualCommonsTables.Types._NamedElement);
		private static final /*@NonNull*/ ExecutorFragment _StandardMessage__OclAny = new ExecutorFragment(Types._StandardMessage, OCLstdlibTables.Types._OclAny);
		private static final /*@NonNull*/ ExecutorFragment _StandardMessage__OclElement = new ExecutorFragment(Types._StandardMessage, OCLstdlibTables.Types._OclElement);
		private static final /*@NonNull*/ ExecutorFragment _StandardMessage__StandardMessage = new ExecutorFragment(Types._StandardMessage, SequenceTables.Types._StandardMessage);
		private static final /*@NonNull*/ ExecutorFragment _StandardMessage__UMLReferencingElement = new ExecutorFragment(Types._StandardMessage, TextualCommonsTables.Types._UMLReferencingElement);

		private static final /*@NonNull*/ ExecutorFragment _TimeConstraint__Constraint = new ExecutorFragment(Types._TimeConstraint, SequenceTables.Types._Constraint);
		private static final /*@NonNull*/ ExecutorFragment _TimeConstraint__Fragment = new ExecutorFragment(Types._TimeConstraint, SequenceTables.Types._Fragment);
		private static final /*@NonNull*/ ExecutorFragment _TimeConstraint__OclAny = new ExecutorFragment(Types._TimeConstraint, OCLstdlibTables.Types._OclAny);
		private static final /*@NonNull*/ ExecutorFragment _TimeConstraint__OclElement = new ExecutorFragment(Types._TimeConstraint, OCLstdlibTables.Types._OclElement);
		private static final /*@NonNull*/ ExecutorFragment _TimeConstraint__TimeConstraint = new ExecutorFragment(Types._TimeConstraint, SequenceTables.Types._TimeConstraint);

		private static final /*@NonNull*/ ExecutorFragment _TimeIntervalSelector__OclAny = new ExecutorFragment(Types._TimeIntervalSelector, OCLstdlibTables.Types._OclAny);
		private static final /*@NonNull*/ ExecutorFragment _TimeIntervalSelector__OclElement = new ExecutorFragment(Types._TimeIntervalSelector, OCLstdlibTables.Types._OclElement);
		private static final /*@NonNull*/ ExecutorFragment _TimeIntervalSelector__TimeIntervalSelector = new ExecutorFragment(Types._TimeIntervalSelector, SequenceTables.Types._TimeIntervalSelector);

		private static final /*@NonNull*/ ExecutorFragment _TimeObservation__Fragment = new ExecutorFragment(Types._TimeObservation, SequenceTables.Types._Fragment);
		private static final /*@NonNull*/ ExecutorFragment _TimeObservation__Observation = new ExecutorFragment(Types._TimeObservation, SequenceTables.Types._Observation);
		private static final /*@NonNull*/ ExecutorFragment _TimeObservation__OclAny = new ExecutorFragment(Types._TimeObservation, OCLstdlibTables.Types._OclAny);
		private static final /*@NonNull*/ ExecutorFragment _TimeObservation__OclElement = new ExecutorFragment(Types._TimeObservation, OCLstdlibTables.Types._OclElement);
		private static final /*@NonNull*/ ExecutorFragment _TimeObservation__TimeObservation = new ExecutorFragment(Types._TimeObservation, SequenceTables.Types._TimeObservation);

		static {
			Init.initEnd();
		}

		/**
		 * Force initialization of the fields of SequenceTables::Fragments and all preceding sub-packages.
		 */
		public static void init() {}
	}

	/**
	 *	The parameter lists shared by operations.
	 *
	 * @noextend This class is not intended to be subclassed by clients.
	 * @noinstantiate This class is not intended to be instantiated by clients.
	 * @noreference This class is not intended to be referenced by clients.
	 */
	public static class Parameters {
		static {
			Init.initStart();
			Fragments.init();
		}


		static {
			Init.initEnd();
		}

		/**
		 * Force initialization of the fields of SequenceTables::Parameters and all preceding sub-packages.
		 */
		public static void init() {}
	}

	/**
	 *	The operation descriptors for each operation of each type.
	 *
	 * @noextend This class is not intended to be subclassed by clients.
	 * @noinstantiate This class is not intended to be instantiated by clients.
	 * @noreference This class is not intended to be referenced by clients.
	 */
	public static class Operations {
		static {
			Init.initStart();
			Parameters.init();
		}

		public static final /*@NonNull*/ ExecutorOperation _BiPointInTimeTimeIntervalSelector__getIntervalEnd = new ExecutorOperation("getIntervalEnd", TypeUtil.EMPTY_PARAMETER_TYPES, Types._BiPointInTimeTimeIntervalSelector,
			0, TemplateParameters.EMPTY_LIST, null);
		public static final /*@NonNull*/ ExecutorOperation _BiPointInTimeTimeIntervalSelector__getIntervalStart = new ExecutorOperation("getIntervalStart", TypeUtil.EMPTY_PARAMETER_TYPES, Types._BiPointInTimeTimeIntervalSelector,
			1, TemplateParameters.EMPTY_LIST, null);

		public static final /*@NonNull*/ ExecutorOperation _CombinedFragment__getInteractionOperatorKind = new ExecutorOperation("getInteractionOperatorKind", TypeUtil.EMPTY_PARAMETER_TYPES, Types._CombinedFragment,
			0, TemplateParameters.EMPTY_LIST, null);

		public static final /*@NonNull*/ ExecutorOperation _ExplicitArrivalOccurenceReference__getOccurenceSpecification = new ExecutorOperation("getOccurenceSpecification", TypeUtil.EMPTY_PARAMETER_TYPES, Types._ExplicitArrivalOccurenceReference,
			0, TemplateParameters.EMPTY_LIST, null);

		public static final /*@NonNull*/ ExecutorOperation _ExplicitArrivalOccurenceSpecification__getOccurenceReference = new ExecutorOperation("getOccurenceReference", TypeUtil.EMPTY_PARAMETER_TYPES, Types._ExplicitArrivalOccurenceSpecification,
			0, TemplateParameters.EMPTY_LIST, null);

		public static final /*@NonNull*/ ExecutorOperation _Fragment__getContainingSequence = new ExecutorOperation("getContainingSequence", TypeUtil.EMPTY_PARAMETER_TYPES, Types._Fragment,
			0, TemplateParameters.EMPTY_LIST, null);

		public static final /*@NonNull*/ ExecutorOperation _FragmentSequence__getUMLFragmentSequence = new ExecutorOperation("getUMLFragmentSequence", TypeUtil.EMPTY_PARAMETER_TYPES, Types._FragmentSequence,
			0, TemplateParameters.EMPTY_LIST, null);

		public static final /*@NonNull*/ ExecutorOperation _FragmentTimeIntervalSelector__getIntervalEnd = new ExecutorOperation("getIntervalEnd", TypeUtil.EMPTY_PARAMETER_TYPES, Types._FragmentTimeIntervalSelector,
			0, TemplateParameters.EMPTY_LIST, null);
		public static final /*@NonNull*/ ExecutorOperation _FragmentTimeIntervalSelector__getIntervalStart = new ExecutorOperation("getIntervalStart", TypeUtil.EMPTY_PARAMETER_TYPES, Types._FragmentTimeIntervalSelector,
			1, TemplateParameters.EMPTY_LIST, null);

		public static final /*@NonNull*/ ExecutorOperation _ImplicitMessageOccurenceSpecification__getOccurenceReference = new ExecutorOperation("getOccurenceReference", TypeUtil.EMPTY_PARAMETER_TYPES, Types._ImplicitMessageOccurenceSpecification,
			0, TemplateParameters.EMPTY_LIST, null);
		public static final /*@NonNull*/ ExecutorOperation _ImplicitMessageOccurenceSpecification__getOccurenceSpecification = new ExecutorOperation("getOccurenceSpecification", TypeUtil.EMPTY_PARAMETER_TYPES, Types._ImplicitMessageOccurenceSpecification,
			1, TemplateParameters.EMPTY_LIST, null);
		public static final /*@NonNull*/ ExecutorOperation _ImplicitMessageOccurenceSpecification__isArrival = new ExecutorOperation("isArrival", TypeUtil.EMPTY_PARAMETER_TYPES, Types._ImplicitMessageOccurenceSpecification,
			2, TemplateParameters.EMPTY_LIST, null);
		public static final /*@NonNull*/ ExecutorOperation _ImplicitMessageOccurenceSpecification__isSend = new ExecutorOperation("isSend", TypeUtil.EMPTY_PARAMETER_TYPES, Types._ImplicitMessageOccurenceSpecification,
			3, TemplateParameters.EMPTY_LIST, null);

		public static final /*@NonNull*/ ExecutorOperation _OccurenceReference__getOccurenceSpecification = new ExecutorOperation("getOccurenceSpecification", TypeUtil.EMPTY_PARAMETER_TYPES, Types._OccurenceReference,
			0, TemplateParameters.EMPTY_LIST, null);

		public static final /*@NonNull*/ ExecutorOperation _OccurenceSpecification__getContainingExecutionSpecification = new ExecutorOperation("getContainingExecutionSpecification", TypeUtil.EMPTY_PARAMETER_TYPES, Types._OccurenceSpecification,
			0, TemplateParameters.EMPTY_LIST, null);
		public static final /*@NonNull*/ ExecutorOperation _OccurenceSpecification__getOccurenceReference = new ExecutorOperation("getOccurenceReference", TypeUtil.EMPTY_PARAMETER_TYPES, Types._OccurenceSpecification,
			1, TemplateParameters.EMPTY_LIST, null);

		public static final /*@NonNull*/ ExecutorOperation _ResponseMessage__getCorrespondingRequest = new ExecutorOperation("getCorrespondingRequest", TypeUtil.EMPTY_PARAMETER_TYPES, Types._ResponseMessage,
			0, TemplateParameters.EMPTY_LIST, null);

		public static final /*@NonNull*/ ExecutorOperation _TimeIntervalSelector__getIntervalEnd = new ExecutorOperation("getIntervalEnd", TypeUtil.EMPTY_PARAMETER_TYPES, Types._TimeIntervalSelector,
			0, TemplateParameters.EMPTY_LIST, null);
		public static final /*@NonNull*/ ExecutorOperation _TimeIntervalSelector__getIntervalStart = new ExecutorOperation("getIntervalStart", TypeUtil.EMPTY_PARAMETER_TYPES, Types._TimeIntervalSelector,
			1, TemplateParameters.EMPTY_LIST, null);

		static {
			Init.initEnd();
		}

		/**
		 * Force initialization of the fields of SequenceTables::Operations and all preceding sub-packages.
		 */
		public static void init() {}
	}

	/**
	 *	The property descriptors for each property of each type.
	 *
	 * @noextend This class is not intended to be subclassed by clients.
	 * @noinstantiate This class is not intended to be instantiated by clients.
	 * @noreference This class is not intended to be referenced by clients.
	 */
	public static class Properties {
		static {
			Init.initStart();
			Operations.init();
		}

		public static final /*@NonNull*/ ExecutorProperty _Actor__actorType = new EcoreExecutorProperty(SequencePackage.Literals.ACTOR__ACTOR_TYPE, Types._Actor, 0);
		public static final /*@NonNull*/ ExecutorProperty _Actor__deferred = new EcoreExecutorProperty(SequencePackage.Literals.ACTOR__DEFERRED, Types._Actor, 1);
		public static final /*@NonNull*/ ExecutorProperty _Actor__typeMapping = new EcoreExecutorProperty(SequencePackage.Literals.ACTOR__TYPE_MAPPING, Types._Actor, 2);
		public static final /*@NonNull*/ ExecutorProperty _Actor__DestructionOccurenceSpecification__target = new ExecutorPropertyWithImplementation("DestructionOccurenceSpecification", Types._Actor, 3, new EcoreLibraryOppositeProperty(SequencePackage.Literals.DESTRUCTION_OCCURENCE_SPECIFICATION__TARGET));
		public static final /*@NonNull*/ ExecutorProperty _Actor__Message__left = new ExecutorPropertyWithImplementation("Message", Types._Actor, 4, new EcoreLibraryOppositeProperty(SequencePackage.Literals.MESSAGE__LEFT));
		public static final /*@NonNull*/ ExecutorProperty _Actor__Message__right = new ExecutorPropertyWithImplementation("Message", Types._Actor, 5, new EcoreLibraryOppositeProperty(SequencePackage.Literals.MESSAGE__RIGHT));
		public static final /*@NonNull*/ ExecutorProperty _Actor__SequenceDiagram__actors = new ExecutorPropertyWithImplementation("SequenceDiagram", Types._Actor, 6, new EcoreLibraryOppositeProperty(SequencePackage.Literals.SEQUENCE_DIAGRAM__ACTORS));

		public static final /*@NonNull*/ ExecutorProperty _ActorClassifierMapping__actor = new EcoreExecutorProperty(SequencePackage.Literals.ACTOR_CLASSIFIER_MAPPING__ACTOR, Types._ActorClassifierMapping, 0);
		public static final /*@NonNull*/ ExecutorProperty _ActorClassifierMapping__classifier = new EcoreExecutorProperty(SequencePackage.Literals.ACTOR_CLASSIFIER_MAPPING__CLASSIFIER, Types._ActorClassifierMapping, 1);
		public static final /*@NonNull*/ ExecutorProperty _ActorClassifierMapping__classifierName = new EcoreExecutorProperty(SequencePackage.Literals.ACTOR_CLASSIFIER_MAPPING__CLASSIFIER_NAME, Types._ActorClassifierMapping, 2);

		public static final /*@NonNull*/ ExecutorProperty _BiPointInTimeTimeIntervalSelector__end = new EcoreExecutorProperty(SequencePackage.Literals.BI_POINT_IN_TIME_TIME_INTERVAL_SELECTOR__END, Types._BiPointInTimeTimeIntervalSelector, 0);
		public static final /*@NonNull*/ ExecutorProperty _BiPointInTimeTimeIntervalSelector__start = new EcoreExecutorProperty(SequencePackage.Literals.BI_POINT_IN_TIME_TIME_INTERVAL_SELECTOR__START, Types._BiPointInTimeTimeIntervalSelector, 1);

		public static final /*@NonNull*/ ExecutorProperty _Condition__condition = new EcoreExecutorProperty(SequencePackage.Literals.CONDITION__CONDITION, Types._Condition, 0);
		public static final /*@NonNull*/ ExecutorProperty _Condition__OrderedFragmentContainer__condition = new ExecutorPropertyWithImplementation("OrderedFragmentContainer", Types._Condition, 1, new EcoreLibraryOppositeProperty(SequencePackage.Literals.ORDERED_FRAGMENT_CONTAINER__CONDITION));

		public static final /*@NonNull*/ ExecutorProperty _DestructionOccurenceSpecification__target = new EcoreExecutorProperty(SequencePackage.Literals.DESTRUCTION_OCCURENCE_SPECIFICATION__TARGET, Types._DestructionOccurenceSpecification, 0);

		public static final /*@NonNull*/ ExecutorProperty _DurationConstraint__duration = new EcoreExecutorProperty(SequencePackage.Literals.DURATION_CONSTRAINT__DURATION, Types._DurationConstraint, 0);
		public static final /*@NonNull*/ ExecutorProperty _DurationConstraint__interval = new EcoreExecutorProperty(SequencePackage.Literals.DURATION_CONSTRAINT__INTERVAL, Types._DurationConstraint, 1);

		public static final /*@NonNull*/ ExecutorProperty _DurationObservation__duration = new EcoreExecutorProperty(SequencePackage.Literals.DURATION_OBSERVATION__DURATION, Types._DurationObservation, 0);
		public static final /*@NonNull*/ ExecutorProperty _DurationObservation__interval = new EcoreExecutorProperty(SequencePackage.Literals.DURATION_OBSERVATION__INTERVAL, Types._DurationObservation, 1);

		public static final /*@NonNull*/ ExecutorProperty _ExplicitArrivalOccurenceReference__explicitOccurenceSpecification = new EcoreExecutorProperty(SequencePackage.Literals.EXPLICIT_ARRIVAL_OCCURENCE_REFERENCE__EXPLICIT_OCCURENCE_SPECIFICATION, Types._ExplicitArrivalOccurenceReference, 0);

		public static final /*@NonNull*/ ExecutorProperty _ExplicitArrivalOccurenceSpecification__explicitOccurenceReference = new EcoreExecutorProperty(SequencePackage.Literals.EXPLICIT_ARRIVAL_OCCURENCE_SPECIFICATION__EXPLICIT_OCCURENCE_REFERENCE, Types._ExplicitArrivalOccurenceSpecification, 0);

		public static final /*@NonNull*/ ExecutorProperty _Fragment__FragmentSequence__fragments = new ExecutorPropertyWithImplementation("FragmentSequence", Types._Fragment, 0, new EcoreLibraryOppositeProperty(SequencePackage.Literals.FRAGMENT_SEQUENCE__FRAGMENTS));

		public static final /*@NonNull*/ ExecutorProperty _FragmentSequence__fragments = new EcoreExecutorProperty(SequencePackage.Literals.FRAGMENT_SEQUENCE__FRAGMENTS, Types._FragmentSequence, 0);

		public static final /*@NonNull*/ ExecutorProperty _FragmentTimeIntervalSelector__nonInstantaneousFragment = new EcoreExecutorProperty(SequencePackage.Literals.FRAGMENT_TIME_INTERVAL_SELECTOR__NON_INSTANTANEOUS_FRAGMENT, Types._FragmentTimeIntervalSelector, 0);

		public static final /*@NonNull*/ ExecutorProperty _Message__arrivalEvent = new EcoreExecutorProperty(SequencePackage.Literals.MESSAGE__ARRIVAL_EVENT, Types._Message, 0);
		public static final /*@NonNull*/ ExecutorProperty _Message__left = new EcoreExecutorProperty(SequencePackage.Literals.MESSAGE__LEFT, Types._Message, 1);
		public static final /*@NonNull*/ ExecutorProperty _Message__right = new EcoreExecutorProperty(SequencePackage.Literals.MESSAGE__RIGHT, Types._Message, 2);
		public static final /*@NonNull*/ ExecutorProperty _Message__sendEvent = new EcoreExecutorProperty(SequencePackage.Literals.MESSAGE__SEND_EVENT, Types._Message, 3);

		public static final /*@NonNull*/ ExecutorProperty _MultipleRegionContainer__regions = new EcoreExecutorProperty(SequencePackage.Literals.MULTIPLE_REGION_CONTAINER__REGIONS, Types._MultipleRegionContainer, 0);

		public static final /*@NonNull*/ ExecutorProperty _OrderedFragmentContainer__condition = new EcoreExecutorProperty(SequencePackage.Literals.ORDERED_FRAGMENT_CONTAINER__CONDITION, Types._OrderedFragmentContainer, 0);
		public static final /*@NonNull*/ ExecutorProperty _OrderedFragmentContainer__MultipleRegionContainer__regions = new ExecutorPropertyWithImplementation("MultipleRegionContainer", Types._OrderedFragmentContainer, 1, new EcoreLibraryOppositeProperty(SequencePackage.Literals.MULTIPLE_REGION_CONTAINER__REGIONS));
		public static final /*@NonNull*/ ExecutorProperty _OrderedFragmentContainer__SingleRegionContainer__region = new ExecutorPropertyWithImplementation("SingleRegionContainer", Types._OrderedFragmentContainer, 2, new EcoreLibraryOppositeProperty(SequencePackage.Literals.SINGLE_REGION_CONTAINER__REGION));

		public static final /*@NonNull*/ ExecutorProperty _PointInTimeSelector__pointInTime = new EcoreExecutorProperty(SequencePackage.Literals.POINT_IN_TIME_SELECTOR__POINT_IN_TIME, Types._PointInTimeSelector, 0);
		public static final /*@NonNull*/ ExecutorProperty _PointInTimeSelector__BiPointInTimeTimeIntervalSelector__end = new ExecutorPropertyWithImplementation("BiPointInTimeTimeIntervalSelector", Types._PointInTimeSelector, 1, new EcoreLibraryOppositeProperty(SequencePackage.Literals.BI_POINT_IN_TIME_TIME_INTERVAL_SELECTOR__END));
		public static final /*@NonNull*/ ExecutorProperty _PointInTimeSelector__BiPointInTimeTimeIntervalSelector__start = new ExecutorPropertyWithImplementation("BiPointInTimeTimeIntervalSelector", Types._PointInTimeSelector, 2, new EcoreLibraryOppositeProperty(SequencePackage.Literals.BI_POINT_IN_TIME_TIME_INTERVAL_SELECTOR__START));
		public static final /*@NonNull*/ ExecutorProperty _PointInTimeSelector__TimeConstraint__event = new ExecutorPropertyWithImplementation("TimeConstraint", Types._PointInTimeSelector, 3, new EcoreLibraryOppositeProperty(SequencePackage.Literals.TIME_CONSTRAINT__EVENT));
		public static final /*@NonNull*/ ExecutorProperty _PointInTimeSelector__TimeObservation__event = new ExecutorPropertyWithImplementation("TimeObservation", Types._PointInTimeSelector, 4, new EcoreLibraryOppositeProperty(SequencePackage.Literals.TIME_OBSERVATION__EVENT));

		public static final /*@NonNull*/ ExecutorProperty _Reference__reference = new EcoreExecutorProperty(SequencePackage.Literals.REFERENCE__REFERENCE, Types._Reference, 0);

		public static final /*@NonNull*/ ExecutorProperty _RootPackage__SequenceDiagram__rootPackage = new ExecutorPropertyWithImplementation("SequenceDiagram", Types._RootPackage, 0, new EcoreLibraryOppositeProperty(SequencePackage.Literals.SEQUENCE_DIAGRAM__ROOT_PACKAGE));

		public static final /*@NonNull*/ ExecutorProperty _SequenceDiagram__actors = new EcoreExecutorProperty(SequencePackage.Literals.SEQUENCE_DIAGRAM__ACTORS, Types._SequenceDiagram, 0);
		public static final /*@NonNull*/ ExecutorProperty _SequenceDiagram__rootPackage = new EcoreExecutorProperty(SequencePackage.Literals.SEQUENCE_DIAGRAM__ROOT_PACKAGE, Types._SequenceDiagram, 1);
		public static final /*@NonNull*/ ExecutorProperty _SequenceDiagram__title = new EcoreExecutorProperty(SequencePackage.Literals.SEQUENCE_DIAGRAM__TITLE, Types._SequenceDiagram, 2);

		public static final /*@NonNull*/ ExecutorProperty _SingleRegionContainer__region = new EcoreExecutorProperty(SequencePackage.Literals.SINGLE_REGION_CONTAINER__REGION, Types._SingleRegionContainer, 0);

		public static final /*@NonNull*/ ExecutorProperty _StandardMessage__type = new EcoreExecutorProperty(SequencePackage.Literals.STANDARD_MESSAGE__TYPE, Types._StandardMessage, 0);

		public static final /*@NonNull*/ ExecutorProperty _TimeConstraint__event = new EcoreExecutorProperty(SequencePackage.Literals.TIME_CONSTRAINT__EVENT, Types._TimeConstraint, 0);
		public static final /*@NonNull*/ ExecutorProperty _TimeConstraint__time = new EcoreExecutorProperty(SequencePackage.Literals.TIME_CONSTRAINT__TIME, Types._TimeConstraint, 1);

		public static final /*@NonNull*/ ExecutorProperty _TimeIntervalSelector__DurationConstraint__interval = new ExecutorPropertyWithImplementation("DurationConstraint", Types._TimeIntervalSelector, 0, new EcoreLibraryOppositeProperty(SequencePackage.Literals.DURATION_CONSTRAINT__INTERVAL));
		public static final /*@NonNull*/ ExecutorProperty _TimeIntervalSelector__DurationObservation__interval = new ExecutorPropertyWithImplementation("DurationObservation", Types._TimeIntervalSelector, 1, new EcoreLibraryOppositeProperty(SequencePackage.Literals.DURATION_OBSERVATION__INTERVAL));

		public static final /*@NonNull*/ ExecutorProperty _TimeObservation__event = new EcoreExecutorProperty(SequencePackage.Literals.TIME_OBSERVATION__EVENT, Types._TimeObservation, 0);
		public static final /*@NonNull*/ ExecutorProperty _TimeObservation__time = new EcoreExecutorProperty(SequencePackage.Literals.TIME_OBSERVATION__TIME, Types._TimeObservation, 1);
		static {
			Init.initEnd();
		}

		/**
		 * Force initialization of the fields of SequenceTables::Properties and all preceding sub-packages.
		 */
		public static void init() {}
	}

	/**
	 *	The fragments for all base types in depth order: OclAny first, OclSelf last.
	 */
	public static class TypeFragments {
		static {
			Init.initStart();
			Properties.init();
		}

		private static final /*@NonNull*/ ExecutorFragment /*@NonNull*/ [] _Actor =
		{
			Fragments._Actor__OclAny /* 0 */,
			Fragments._Actor__OclElement /* 1 */,
			Fragments._Actor__Element /* 2 */,
			Fragments._Actor__NamedElement /* 3 */,
			Fragments._Actor__UMLReferencingElement /* 3 */,
			Fragments._Actor__AliasedElement /* 4 */,
			Fragments._Actor__Commentable /* 4 */,
			Fragments._Actor__Actor /* 5 */
		};
		private static final int /*@NonNull*/ [] __Actor = { 1,1,1,2,2,1 };

		private static final /*@NonNull*/ ExecutorFragment /*@NonNull*/ [] _ActorClassifierMapping =
		{
			Fragments._ActorClassifierMapping__OclAny /* 0 */,
			Fragments._ActorClassifierMapping__OclElement /* 1 */,
			Fragments._ActorClassifierMapping__Element /* 2 */,
			Fragments._ActorClassifierMapping__UMLReferencingElement /* 3 */,
			Fragments._ActorClassifierMapping__ActorClassifierMapping /* 4 */
		};
		private static final int /*@NonNull*/ [] __ActorClassifierMapping = { 1,1,1,1,1 };

		private static final /*@NonNull*/ ExecutorFragment /*@NonNull*/ [] _ActorType =
		{
			Fragments._ActorType__OclAny /* 0 */,
			Fragments._ActorType__OclElement /* 1 */,
			Fragments._ActorType__OclType /* 2 */,
			Fragments._ActorType__OclEnumeration /* 3 */,
			Fragments._ActorType__ActorType /* 4 */
		};
		private static final int /*@NonNull*/ [] __ActorType = { 1,1,1,1,1 };

		private static final /*@NonNull*/ ExecutorFragment /*@NonNull*/ [] _Alternative =
		{
			Fragments._Alternative__OclAny /* 0 */,
			Fragments._Alternative__OclElement /* 1 */,
			Fragments._Alternative__Element /* 2 */,
			Fragments._Alternative__Fragment /* 2 */,
			Fragments._Alternative__NamedElement /* 3 */,
			Fragments._Alternative__UMLReferencingElement /* 3 */,
			Fragments._Alternative__AliasedElement /* 4 */,
			Fragments._Alternative__Commentable /* 4 */,
			Fragments._Alternative__PointInTime /* 4 */,
			Fragments._Alternative__NonInstantaneousFragment /* 5 */,
			Fragments._Alternative__CombinedFragment /* 6 */,
			Fragments._Alternative__MultipleRegionContainer /* 7 */,
			Fragments._Alternative__Alternative /* 8 */
		};
		private static final int /*@NonNull*/ [] __Alternative = { 1,1,2,2,3,1,1,1,1 };

		private static final /*@NonNull*/ ExecutorFragment /*@NonNull*/ [] _BiPointInTimeTimeIntervalSelector =
		{
			Fragments._BiPointInTimeTimeIntervalSelector__OclAny /* 0 */,
			Fragments._BiPointInTimeTimeIntervalSelector__OclElement /* 1 */,
			Fragments._BiPointInTimeTimeIntervalSelector__TimeIntervalSelector /* 2 */,
			Fragments._BiPointInTimeTimeIntervalSelector__BiPointInTimeTimeIntervalSelector /* 3 */
		};
		private static final int /*@NonNull*/ [] __BiPointInTimeTimeIntervalSelector = { 1,1,1,1 };

		private static final /*@NonNull*/ ExecutorFragment /*@NonNull*/ [] _CoRegion =
		{
			Fragments._CoRegion__OclAny /* 0 */,
			Fragments._CoRegion__OclElement /* 1 */,
			Fragments._CoRegion__Element /* 2 */,
			Fragments._CoRegion__Fragment /* 2 */,
			Fragments._CoRegion__NamedElement /* 3 */,
			Fragments._CoRegion__UMLReferencingElement /* 3 */,
			Fragments._CoRegion__AliasedElement /* 4 */,
			Fragments._CoRegion__Commentable /* 4 */,
			Fragments._CoRegion__PointInTime /* 4 */,
			Fragments._CoRegion__NonInstantaneousFragment /* 5 */,
			Fragments._CoRegion__CombinedFragment /* 6 */,
			Fragments._CoRegion__MultipleRegionContainer /* 7 */,
			Fragments._CoRegion__CoRegion /* 8 */
		};
		private static final int /*@NonNull*/ [] __CoRegion = { 1,1,2,2,3,1,1,1,1 };

		private static final /*@NonNull*/ ExecutorFragment /*@NonNull*/ [] _CombinedFragment =
		{
			Fragments._CombinedFragment__OclAny /* 0 */,
			Fragments._CombinedFragment__OclElement /* 1 */,
			Fragments._CombinedFragment__Element /* 2 */,
			Fragments._CombinedFragment__Fragment /* 2 */,
			Fragments._CombinedFragment__NamedElement /* 3 */,
			Fragments._CombinedFragment__UMLReferencingElement /* 3 */,
			Fragments._CombinedFragment__AliasedElement /* 4 */,
			Fragments._CombinedFragment__Commentable /* 4 */,
			Fragments._CombinedFragment__PointInTime /* 4 */,
			Fragments._CombinedFragment__NonInstantaneousFragment /* 5 */,
			Fragments._CombinedFragment__CombinedFragment /* 6 */
		};
		private static final int /*@NonNull*/ [] __CombinedFragment = { 1,1,2,2,3,1,1 };

		private static final /*@NonNull*/ ExecutorFragment /*@NonNull*/ [] _Condition =
		{
			Fragments._Condition__OclAny /* 0 */,
			Fragments._Condition__OclElement /* 1 */,
			Fragments._Condition__Element /* 2 */,
			Fragments._Condition__UMLReferencingElement /* 3 */,
			Fragments._Condition__Condition /* 4 */
		};
		private static final int /*@NonNull*/ [] __Condition = { 1,1,1,1,1 };

		private static final /*@NonNull*/ ExecutorFragment /*@NonNull*/ [] _Constraint =
		{
			Fragments._Constraint__OclAny /* 0 */,
			Fragments._Constraint__OclElement /* 1 */,
			Fragments._Constraint__Fragment /* 2 */,
			Fragments._Constraint__Constraint /* 3 */
		};
		private static final int /*@NonNull*/ [] __Constraint = { 1,1,1,1 };

		private static final /*@NonNull*/ ExecutorFragment /*@NonNull*/ [] _CreateMessage =
		{
			Fragments._CreateMessage__OclAny /* 0 */,
			Fragments._CreateMessage__OclElement /* 1 */,
			Fragments._CreateMessage__Element /* 2 */,
			Fragments._CreateMessage__Fragment /* 2 */,
			Fragments._CreateMessage__NamedElement /* 3 */,
			Fragments._CreateMessage__UMLReferencingElement /* 3 */,
			Fragments._CreateMessage__AliasedElement /* 4 */,
			Fragments._CreateMessage__Commentable /* 4 */,
			Fragments._CreateMessage__Message /* 5 */,
			Fragments._CreateMessage__CreateMessage /* 6 */
		};
		private static final int /*@NonNull*/ [] __CreateMessage = { 1,1,2,2,2,1,1 };

		private static final /*@NonNull*/ ExecutorFragment /*@NonNull*/ [] _Critical =
		{
			Fragments._Critical__OclAny /* 0 */,
			Fragments._Critical__OclElement /* 1 */,
			Fragments._Critical__Element /* 2 */,
			Fragments._Critical__Fragment /* 2 */,
			Fragments._Critical__NamedElement /* 3 */,
			Fragments._Critical__UMLReferencingElement /* 3 */,
			Fragments._Critical__AliasedElement /* 4 */,
			Fragments._Critical__Commentable /* 4 */,
			Fragments._Critical__PointInTime /* 4 */,
			Fragments._Critical__NonInstantaneousFragment /* 5 */,
			Fragments._Critical__CombinedFragment /* 6 */,
			Fragments._Critical__SingleRegionContainer /* 7 */,
			Fragments._Critical__Critical /* 8 */
		};
		private static final int /*@NonNull*/ [] __Critical = { 1,1,2,2,3,1,1,1,1 };

		private static final /*@NonNull*/ ExecutorFragment /*@NonNull*/ [] _DestructionMessage =
		{
			Fragments._DestructionMessage__OclAny /* 0 */,
			Fragments._DestructionMessage__OclElement /* 1 */,
			Fragments._DestructionMessage__Element /* 2 */,
			Fragments._DestructionMessage__Fragment /* 2 */,
			Fragments._DestructionMessage__NamedElement /* 3 */,
			Fragments._DestructionMessage__UMLReferencingElement /* 3 */,
			Fragments._DestructionMessage__AliasedElement /* 4 */,
			Fragments._DestructionMessage__Commentable /* 4 */,
			Fragments._DestructionMessage__Message /* 5 */,
			Fragments._DestructionMessage__DestructionMessage /* 6 */
		};
		private static final int /*@NonNull*/ [] __DestructionMessage = { 1,1,2,2,2,1,1 };

		private static final /*@NonNull*/ ExecutorFragment /*@NonNull*/ [] _DestructionOccurenceSpecification =
		{
			Fragments._DestructionOccurenceSpecification__OclAny /* 0 */,
			Fragments._DestructionOccurenceSpecification__OclElement /* 1 */,
			Fragments._DestructionOccurenceSpecification__Element /* 2 */,
			Fragments._DestructionOccurenceSpecification__Fragment /* 2 */,
			Fragments._DestructionOccurenceSpecification__UMLReferencingElement /* 3 */,
			Fragments._DestructionOccurenceSpecification__Commentable /* 4 */,
			Fragments._DestructionOccurenceSpecification__PointInTime /* 4 */,
			Fragments._DestructionOccurenceSpecification__OccurenceSpecification /* 5 */,
			Fragments._DestructionOccurenceSpecification__DestructionOccurenceSpecification /* 6 */
		};
		private static final int /*@NonNull*/ [] __DestructionOccurenceSpecification = { 1,1,2,1,2,1,1 };

		private static final /*@NonNull*/ ExecutorFragment /*@NonNull*/ [] _DurationConstraint =
		{
			Fragments._DurationConstraint__OclAny /* 0 */,
			Fragments._DurationConstraint__OclElement /* 1 */,
			Fragments._DurationConstraint__Fragment /* 2 */,
			Fragments._DurationConstraint__Constraint /* 3 */,
			Fragments._DurationConstraint__DurationConstraint /* 4 */
		};
		private static final int /*@NonNull*/ [] __DurationConstraint = { 1,1,1,1,1 };

		private static final /*@NonNull*/ ExecutorFragment /*@NonNull*/ [] _DurationObservation =
		{
			Fragments._DurationObservation__OclAny /* 0 */,
			Fragments._DurationObservation__OclElement /* 1 */,
			Fragments._DurationObservation__Fragment /* 2 */,
			Fragments._DurationObservation__Observation /* 3 */,
			Fragments._DurationObservation__DurationObservation /* 4 */
		};
		private static final int /*@NonNull*/ [] __DurationObservation = { 1,1,1,1,1 };

		private static final /*@NonNull*/ ExecutorFragment /*@NonNull*/ [] _ExplicitArrivalOccurenceReference =
		{
			Fragments._ExplicitArrivalOccurenceReference__OclAny /* 0 */,
			Fragments._ExplicitArrivalOccurenceReference__OclElement /* 1 */,
			Fragments._ExplicitArrivalOccurenceReference__OccurenceReference /* 2 */,
			Fragments._ExplicitArrivalOccurenceReference__ExplicitArrivalOccurenceReference /* 3 */
		};
		private static final int /*@NonNull*/ [] __ExplicitArrivalOccurenceReference = { 1,1,1,1 };

		private static final /*@NonNull*/ ExecutorFragment /*@NonNull*/ [] _ExplicitArrivalOccurenceSpecification =
		{
			Fragments._ExplicitArrivalOccurenceSpecification__OclAny /* 0 */,
			Fragments._ExplicitArrivalOccurenceSpecification__OclElement /* 1 */,
			Fragments._ExplicitArrivalOccurenceSpecification__Element /* 2 */,
			Fragments._ExplicitArrivalOccurenceSpecification__Fragment /* 2 */,
			Fragments._ExplicitArrivalOccurenceSpecification__NamedElement /* 3 */,
			Fragments._ExplicitArrivalOccurenceSpecification__UMLReferencingElement /* 3 */,
			Fragments._ExplicitArrivalOccurenceSpecification__AliasedElement /* 4 */,
			Fragments._ExplicitArrivalOccurenceSpecification__Commentable /* 4 */,
			Fragments._ExplicitArrivalOccurenceSpecification__PointInTime /* 4 */,
			Fragments._ExplicitArrivalOccurenceSpecification__OccurenceSpecification /* 5 */,
			Fragments._ExplicitArrivalOccurenceSpecification__ExplicitArrivalOccurenceSpecification /* 6 */
		};
		private static final int /*@NonNull*/ [] __ExplicitArrivalOccurenceSpecification = { 1,1,2,2,3,1,1 };

		private static final /*@NonNull*/ ExecutorFragment /*@NonNull*/ [] _Fragment =
		{
			Fragments._Fragment__OclAny /* 0 */,
			Fragments._Fragment__OclElement /* 1 */,
			Fragments._Fragment__Fragment /* 2 */
		};
		private static final int /*@NonNull*/ [] __Fragment = { 1,1,1 };

		private static final /*@NonNull*/ ExecutorFragment /*@NonNull*/ [] _FragmentSequence =
		{
			Fragments._FragmentSequence__OclAny /* 0 */,
			Fragments._FragmentSequence__OclElement /* 1 */,
			Fragments._FragmentSequence__FragmentSequence /* 2 */
		};
		private static final int /*@NonNull*/ [] __FragmentSequence = { 1,1,1 };

		private static final /*@NonNull*/ ExecutorFragment /*@NonNull*/ [] _FragmentTimeIntervalSelector =
		{
			Fragments._FragmentTimeIntervalSelector__OclAny /* 0 */,
			Fragments._FragmentTimeIntervalSelector__OclElement /* 1 */,
			Fragments._FragmentTimeIntervalSelector__TimeIntervalSelector /* 2 */,
			Fragments._FragmentTimeIntervalSelector__FragmentTimeIntervalSelector /* 3 */
		};
		private static final int /*@NonNull*/ [] __FragmentTimeIntervalSelector = { 1,1,1,1 };

		private static final /*@NonNull*/ ExecutorFragment /*@NonNull*/ [] _ImplicitMessageOccurenceSpecification =
		{
			Fragments._ImplicitMessageOccurenceSpecification__OclAny /* 0 */,
			Fragments._ImplicitMessageOccurenceSpecification__OclElement /* 1 */,
			Fragments._ImplicitMessageOccurenceSpecification__Element /* 2 */,
			Fragments._ImplicitMessageOccurenceSpecification__Fragment /* 2 */,
			Fragments._ImplicitMessageOccurenceSpecification__OccurenceReference /* 2 */,
			Fragments._ImplicitMessageOccurenceSpecification__UMLReferencingElement /* 3 */,
			Fragments._ImplicitMessageOccurenceSpecification__Commentable /* 4 */,
			Fragments._ImplicitMessageOccurenceSpecification__PointInTime /* 4 */,
			Fragments._ImplicitMessageOccurenceSpecification__OccurenceSpecification /* 5 */,
			Fragments._ImplicitMessageOccurenceSpecification__ImplicitMessageOccurenceSpecification /* 6 */
		};
		private static final int /*@NonNull*/ [] __ImplicitMessageOccurenceSpecification = { 1,1,3,1,2,1,1 };

		private static final /*@NonNull*/ ExecutorFragment /*@NonNull*/ [] _Loop =
		{
			Fragments._Loop__OclAny /* 0 */,
			Fragments._Loop__OclElement /* 1 */,
			Fragments._Loop__Element /* 2 */,
			Fragments._Loop__Fragment /* 2 */,
			Fragments._Loop__NamedElement /* 3 */,
			Fragments._Loop__UMLReferencingElement /* 3 */,
			Fragments._Loop__AliasedElement /* 4 */,
			Fragments._Loop__Commentable /* 4 */,
			Fragments._Loop__PointInTime /* 4 */,
			Fragments._Loop__NonInstantaneousFragment /* 5 */,
			Fragments._Loop__CombinedFragment /* 6 */,
			Fragments._Loop__SingleRegionContainer /* 7 */,
			Fragments._Loop__Loop /* 8 */
		};
		private static final int /*@NonNull*/ [] __Loop = { 1,1,2,2,3,1,1,1,1 };

		private static final /*@NonNull*/ ExecutorFragment /*@NonNull*/ [] _Message =
		{
			Fragments._Message__OclAny /* 0 */,
			Fragments._Message__OclElement /* 1 */,
			Fragments._Message__Element /* 2 */,
			Fragments._Message__Fragment /* 2 */,
			Fragments._Message__NamedElement /* 3 */,
			Fragments._Message__UMLReferencingElement /* 3 */,
			Fragments._Message__AliasedElement /* 4 */,
			Fragments._Message__Commentable /* 4 */,
			Fragments._Message__Message /* 5 */
		};
		private static final int /*@NonNull*/ [] __Message = { 1,1,2,2,2,1 };

		private static final /*@NonNull*/ ExecutorFragment /*@NonNull*/ [] _MessageType =
		{
			Fragments._MessageType__OclAny /* 0 */,
			Fragments._MessageType__OclElement /* 1 */,
			Fragments._MessageType__OclType /* 2 */,
			Fragments._MessageType__OclEnumeration /* 3 */,
			Fragments._MessageType__MessageType /* 4 */
		};
		private static final int /*@NonNull*/ [] __MessageType = { 1,1,1,1,1 };

		private static final /*@NonNull*/ ExecutorFragment /*@NonNull*/ [] _MultipleRegionContainer =
		{
			Fragments._MultipleRegionContainer__OclAny /* 0 */,
			Fragments._MultipleRegionContainer__OclElement /* 1 */,
			Fragments._MultipleRegionContainer__Element /* 2 */,
			Fragments._MultipleRegionContainer__Fragment /* 2 */,
			Fragments._MultipleRegionContainer__NamedElement /* 3 */,
			Fragments._MultipleRegionContainer__UMLReferencingElement /* 3 */,
			Fragments._MultipleRegionContainer__AliasedElement /* 4 */,
			Fragments._MultipleRegionContainer__Commentable /* 4 */,
			Fragments._MultipleRegionContainer__PointInTime /* 4 */,
			Fragments._MultipleRegionContainer__NonInstantaneousFragment /* 5 */,
			Fragments._MultipleRegionContainer__CombinedFragment /* 6 */,
			Fragments._MultipleRegionContainer__MultipleRegionContainer /* 7 */
		};
		private static final int /*@NonNull*/ [] __MultipleRegionContainer = { 1,1,2,2,3,1,1,1 };

		private static final /*@NonNull*/ ExecutorFragment /*@NonNull*/ [] _NonInstantaneousFragment =
		{
			Fragments._NonInstantaneousFragment__OclAny /* 0 */,
			Fragments._NonInstantaneousFragment__OclElement /* 1 */,
			Fragments._NonInstantaneousFragment__Element /* 2 */,
			Fragments._NonInstantaneousFragment__Fragment /* 2 */,
			Fragments._NonInstantaneousFragment__NamedElement /* 3 */,
			Fragments._NonInstantaneousFragment__UMLReferencingElement /* 3 */,
			Fragments._NonInstantaneousFragment__AliasedElement /* 4 */,
			Fragments._NonInstantaneousFragment__PointInTime /* 4 */,
			Fragments._NonInstantaneousFragment__NonInstantaneousFragment /* 5 */
		};
		private static final int /*@NonNull*/ [] __NonInstantaneousFragment = { 1,1,2,2,2,1 };

		private static final /*@NonNull*/ ExecutorFragment /*@NonNull*/ [] _Observation =
		{
			Fragments._Observation__OclAny /* 0 */,
			Fragments._Observation__OclElement /* 1 */,
			Fragments._Observation__Fragment /* 2 */,
			Fragments._Observation__Observation /* 3 */
		};
		private static final int /*@NonNull*/ [] __Observation = { 1,1,1,1 };

		private static final /*@NonNull*/ ExecutorFragment /*@NonNull*/ [] _OccurenceReference =
		{
			Fragments._OccurenceReference__OclAny /* 0 */,
			Fragments._OccurenceReference__OclElement /* 1 */,
			Fragments._OccurenceReference__OccurenceReference /* 2 */
		};
		private static final int /*@NonNull*/ [] __OccurenceReference = { 1,1,1 };

		private static final /*@NonNull*/ ExecutorFragment /*@NonNull*/ [] _OccurenceSpecification =
		{
			Fragments._OccurenceSpecification__OclAny /* 0 */,
			Fragments._OccurenceSpecification__OclElement /* 1 */,
			Fragments._OccurenceSpecification__Element /* 2 */,
			Fragments._OccurenceSpecification__Fragment /* 2 */,
			Fragments._OccurenceSpecification__UMLReferencingElement /* 3 */,
			Fragments._OccurenceSpecification__Commentable /* 4 */,
			Fragments._OccurenceSpecification__PointInTime /* 4 */,
			Fragments._OccurenceSpecification__OccurenceSpecification /* 5 */
		};
		private static final int /*@NonNull*/ [] __OccurenceSpecification = { 1,1,2,1,2,1 };

		private static final /*@NonNull*/ ExecutorFragment /*@NonNull*/ [] _Option =
		{
			Fragments._Option__OclAny /* 0 */,
			Fragments._Option__OclElement /* 1 */,
			Fragments._Option__Element /* 2 */,
			Fragments._Option__Fragment /* 2 */,
			Fragments._Option__NamedElement /* 3 */,
			Fragments._Option__UMLReferencingElement /* 3 */,
			Fragments._Option__AliasedElement /* 4 */,
			Fragments._Option__Commentable /* 4 */,
			Fragments._Option__PointInTime /* 4 */,
			Fragments._Option__NonInstantaneousFragment /* 5 */,
			Fragments._Option__CombinedFragment /* 6 */,
			Fragments._Option__SingleRegionContainer /* 7 */,
			Fragments._Option__Option /* 8 */
		};
		private static final int /*@NonNull*/ [] __Option = { 1,1,2,2,3,1,1,1,1 };

		private static final /*@NonNull*/ ExecutorFragment /*@NonNull*/ [] _OrderedFragmentContainer =
		{
			Fragments._OrderedFragmentContainer__OclAny /* 0 */,
			Fragments._OrderedFragmentContainer__OclElement /* 1 */,
			Fragments._OrderedFragmentContainer__Element /* 2 */,
			Fragments._OrderedFragmentContainer__FragmentSequence /* 2 */,
			Fragments._OrderedFragmentContainer__NamedElement /* 3 */,
			Fragments._OrderedFragmentContainer__UMLReferencingElement /* 3 */,
			Fragments._OrderedFragmentContainer__AliasedElement /* 4 */,
			Fragments._OrderedFragmentContainer__Commentable /* 4 */,
			Fragments._OrderedFragmentContainer__PointInTime /* 4 */,
			Fragments._OrderedFragmentContainer__OrderedFragmentContainer /* 5 */
		};
		private static final int /*@NonNull*/ [] __OrderedFragmentContainer = { 1,1,2,2,3,1 };

		private static final /*@NonNull*/ ExecutorFragment /*@NonNull*/ [] _Parallel =
		{
			Fragments._Parallel__OclAny /* 0 */,
			Fragments._Parallel__OclElement /* 1 */,
			Fragments._Parallel__Element /* 2 */,
			Fragments._Parallel__Fragment /* 2 */,
			Fragments._Parallel__NamedElement /* 3 */,
			Fragments._Parallel__UMLReferencingElement /* 3 */,
			Fragments._Parallel__AliasedElement /* 4 */,
			Fragments._Parallel__Commentable /* 4 */,
			Fragments._Parallel__PointInTime /* 4 */,
			Fragments._Parallel__NonInstantaneousFragment /* 5 */,
			Fragments._Parallel__CombinedFragment /* 6 */,
			Fragments._Parallel__MultipleRegionContainer /* 7 */,
			Fragments._Parallel__Parallel /* 8 */
		};
		private static final int /*@NonNull*/ [] __Parallel = { 1,1,2,2,3,1,1,1,1 };

		private static final /*@NonNull*/ ExecutorFragment /*@NonNull*/ [] _PointInTime =
		{
			Fragments._PointInTime__OclAny /* 0 */,
			Fragments._PointInTime__OclElement /* 1 */,
			Fragments._PointInTime__Element /* 2 */,
			Fragments._PointInTime__UMLReferencingElement /* 3 */,
			Fragments._PointInTime__PointInTime /* 4 */
		};
		private static final int /*@NonNull*/ [] __PointInTime = { 1,1,1,1,1 };

		private static final /*@NonNull*/ ExecutorFragment /*@NonNull*/ [] _PointInTimeSelector =
		{
			Fragments._PointInTimeSelector__OclAny /* 0 */,
			Fragments._PointInTimeSelector__OclElement /* 1 */,
			Fragments._PointInTimeSelector__PointInTimeSelector /* 2 */
		};
		private static final int /*@NonNull*/ [] __PointInTimeSelector = { 1,1,1 };

		private static final /*@NonNull*/ ExecutorFragment /*@NonNull*/ [] _Reference =
		{
			Fragments._Reference__OclAny /* 0 */,
			Fragments._Reference__OclElement /* 1 */,
			Fragments._Reference__Element /* 2 */,
			Fragments._Reference__Fragment /* 2 */,
			Fragments._Reference__NamedElement /* 3 */,
			Fragments._Reference__UMLReferencingElement /* 3 */,
			Fragments._Reference__AliasedElement /* 4 */,
			Fragments._Reference__PointInTime /* 4 */,
			Fragments._Reference__NonInstantaneousFragment /* 5 */,
			Fragments._Reference__Reference /* 6 */
		};
		private static final int /*@NonNull*/ [] __Reference = { 1,1,2,2,2,1,1 };

		private static final /*@NonNull*/ ExecutorFragment /*@NonNull*/ [] _ResponseMessage =
		{
			Fragments._ResponseMessage__OclAny /* 0 */,
			Fragments._ResponseMessage__OclElement /* 1 */,
			Fragments._ResponseMessage__Element /* 2 */,
			Fragments._ResponseMessage__Fragment /* 2 */,
			Fragments._ResponseMessage__NamedElement /* 3 */,
			Fragments._ResponseMessage__UMLReferencingElement /* 3 */,
			Fragments._ResponseMessage__AliasedElement /* 4 */,
			Fragments._ResponseMessage__Commentable /* 4 */,
			Fragments._ResponseMessage__Message /* 5 */,
			Fragments._ResponseMessage__ResponseMessage /* 6 */
		};
		private static final int /*@NonNull*/ [] __ResponseMessage = { 1,1,2,2,2,1,1 };

		private static final /*@NonNull*/ ExecutorFragment /*@NonNull*/ [] _RootPackage =
		{
			Fragments._RootPackage__OclAny /* 0 */,
			Fragments._RootPackage__OclElement /* 1 */,
			Fragments._RootPackage__Element /* 2 */,
			Fragments._RootPackage__NamedElement /* 3 */,
			Fragments._RootPackage__UMLReferencingElement /* 3 */,
			Fragments._RootPackage__RootPackage /* 4 */
		};
		private static final int /*@NonNull*/ [] __RootPackage = { 1,1,1,2,1 };

		private static final /*@NonNull*/ ExecutorFragment /*@NonNull*/ [] _SequenceDiagram =
		{
			Fragments._SequenceDiagram__OclAny /* 0 */,
			Fragments._SequenceDiagram__OclElement /* 1 */,
			Fragments._SequenceDiagram__Element /* 2 */,
			Fragments._SequenceDiagram__FragmentSequence /* 2 */,
			Fragments._SequenceDiagram__UMLReferencingElement /* 3 */,
			Fragments._SequenceDiagram__SequenceDiagram /* 4 */
		};
		private static final int /*@NonNull*/ [] __SequenceDiagram = { 1,1,2,1,1 };

		private static final /*@NonNull*/ ExecutorFragment /*@NonNull*/ [] _SingleRegionContainer =
		{
			Fragments._SingleRegionContainer__OclAny /* 0 */,
			Fragments._SingleRegionContainer__OclElement /* 1 */,
			Fragments._SingleRegionContainer__Element /* 2 */,
			Fragments._SingleRegionContainer__Fragment /* 2 */,
			Fragments._SingleRegionContainer__NamedElement /* 3 */,
			Fragments._SingleRegionContainer__UMLReferencingElement /* 3 */,
			Fragments._SingleRegionContainer__AliasedElement /* 4 */,
			Fragments._SingleRegionContainer__Commentable /* 4 */,
			Fragments._SingleRegionContainer__PointInTime /* 4 */,
			Fragments._SingleRegionContainer__NonInstantaneousFragment /* 5 */,
			Fragments._SingleRegionContainer__CombinedFragment /* 6 */,
			Fragments._SingleRegionContainer__SingleRegionContainer /* 7 */
		};
		private static final int /*@NonNull*/ [] __SingleRegionContainer = { 1,1,2,2,3,1,1,1 };

		private static final /*@NonNull*/ ExecutorFragment /*@NonNull*/ [] _StandardMessage =
		{
			Fragments._StandardMessage__OclAny /* 0 */,
			Fragments._StandardMessage__OclElement /* 1 */,
			Fragments._StandardMessage__Element /* 2 */,
			Fragments._StandardMessage__Fragment /* 2 */,
			Fragments._StandardMessage__NamedElement /* 3 */,
			Fragments._StandardMessage__UMLReferencingElement /* 3 */,
			Fragments._StandardMessage__AliasedElement /* 4 */,
			Fragments._StandardMessage__Commentable /* 4 */,
			Fragments._StandardMessage__Message /* 5 */,
			Fragments._StandardMessage__StandardMessage /* 6 */
		};
		private static final int /*@NonNull*/ [] __StandardMessage = { 1,1,2,2,2,1,1 };

		private static final /*@NonNull*/ ExecutorFragment /*@NonNull*/ [] _TimeConstraint =
		{
			Fragments._TimeConstraint__OclAny /* 0 */,
			Fragments._TimeConstraint__OclElement /* 1 */,
			Fragments._TimeConstraint__Fragment /* 2 */,
			Fragments._TimeConstraint__Constraint /* 3 */,
			Fragments._TimeConstraint__TimeConstraint /* 4 */
		};
		private static final int /*@NonNull*/ [] __TimeConstraint = { 1,1,1,1,1 };

		private static final /*@NonNull*/ ExecutorFragment /*@NonNull*/ [] _TimeIntervalSelector =
		{
			Fragments._TimeIntervalSelector__OclAny /* 0 */,
			Fragments._TimeIntervalSelector__OclElement /* 1 */,
			Fragments._TimeIntervalSelector__TimeIntervalSelector /* 2 */
		};
		private static final int /*@NonNull*/ [] __TimeIntervalSelector = { 1,1,1 };

		private static final /*@NonNull*/ ExecutorFragment /*@NonNull*/ [] _TimeObservation =
		{
			Fragments._TimeObservation__OclAny /* 0 */,
			Fragments._TimeObservation__OclElement /* 1 */,
			Fragments._TimeObservation__Fragment /* 2 */,
			Fragments._TimeObservation__Observation /* 3 */,
			Fragments._TimeObservation__TimeObservation /* 4 */
		};
		private static final int /*@NonNull*/ [] __TimeObservation = { 1,1,1,1,1 };

		/**
		 *	Install the fragment descriptors in the class descriptors.
		 */
		static {
			Types._Actor.initFragments(_Actor, __Actor);
			Types._ActorClassifierMapping.initFragments(_ActorClassifierMapping, __ActorClassifierMapping);
			Types._ActorType.initFragments(_ActorType, __ActorType);
			Types._Alternative.initFragments(_Alternative, __Alternative);
			Types._BiPointInTimeTimeIntervalSelector.initFragments(_BiPointInTimeTimeIntervalSelector, __BiPointInTimeTimeIntervalSelector);
			Types._CoRegion.initFragments(_CoRegion, __CoRegion);
			Types._CombinedFragment.initFragments(_CombinedFragment, __CombinedFragment);
			Types._Condition.initFragments(_Condition, __Condition);
			Types._Constraint.initFragments(_Constraint, __Constraint);
			Types._CreateMessage.initFragments(_CreateMessage, __CreateMessage);
			Types._Critical.initFragments(_Critical, __Critical);
			Types._DestructionMessage.initFragments(_DestructionMessage, __DestructionMessage);
			Types._DestructionOccurenceSpecification.initFragments(_DestructionOccurenceSpecification, __DestructionOccurenceSpecification);
			Types._DurationConstraint.initFragments(_DurationConstraint, __DurationConstraint);
			Types._DurationObservation.initFragments(_DurationObservation, __DurationObservation);
			Types._ExplicitArrivalOccurenceReference.initFragments(_ExplicitArrivalOccurenceReference, __ExplicitArrivalOccurenceReference);
			Types._ExplicitArrivalOccurenceSpecification.initFragments(_ExplicitArrivalOccurenceSpecification, __ExplicitArrivalOccurenceSpecification);
			Types._Fragment.initFragments(_Fragment, __Fragment);
			Types._FragmentSequence.initFragments(_FragmentSequence, __FragmentSequence);
			Types._FragmentTimeIntervalSelector.initFragments(_FragmentTimeIntervalSelector, __FragmentTimeIntervalSelector);
			Types._ImplicitMessageOccurenceSpecification.initFragments(_ImplicitMessageOccurenceSpecification, __ImplicitMessageOccurenceSpecification);
			Types._Loop.initFragments(_Loop, __Loop);
			Types._Message.initFragments(_Message, __Message);
			Types._MessageType.initFragments(_MessageType, __MessageType);
			Types._MultipleRegionContainer.initFragments(_MultipleRegionContainer, __MultipleRegionContainer);
			Types._NonInstantaneousFragment.initFragments(_NonInstantaneousFragment, __NonInstantaneousFragment);
			Types._Observation.initFragments(_Observation, __Observation);
			Types._OccurenceReference.initFragments(_OccurenceReference, __OccurenceReference);
			Types._OccurenceSpecification.initFragments(_OccurenceSpecification, __OccurenceSpecification);
			Types._Option.initFragments(_Option, __Option);
			Types._OrderedFragmentContainer.initFragments(_OrderedFragmentContainer, __OrderedFragmentContainer);
			Types._Parallel.initFragments(_Parallel, __Parallel);
			Types._PointInTime.initFragments(_PointInTime, __PointInTime);
			Types._PointInTimeSelector.initFragments(_PointInTimeSelector, __PointInTimeSelector);
			Types._Reference.initFragments(_Reference, __Reference);
			Types._ResponseMessage.initFragments(_ResponseMessage, __ResponseMessage);
			Types._RootPackage.initFragments(_RootPackage, __RootPackage);
			Types._SequenceDiagram.initFragments(_SequenceDiagram, __SequenceDiagram);
			Types._SingleRegionContainer.initFragments(_SingleRegionContainer, __SingleRegionContainer);
			Types._StandardMessage.initFragments(_StandardMessage, __StandardMessage);
			Types._TimeConstraint.initFragments(_TimeConstraint, __TimeConstraint);
			Types._TimeIntervalSelector.initFragments(_TimeIntervalSelector, __TimeIntervalSelector);
			Types._TimeObservation.initFragments(_TimeObservation, __TimeObservation);

			Init.initEnd();
		}

		/**
		 * Force initialization of the fields of SequenceTables::TypeFragments and all preceding sub-packages.
		 */
		public static void init() {}
	}

	/**
	 *	The lists of local operations or local operation overrides for each fragment of each type.
	 */
	public static class FragmentOperations {
		static {
			Init.initStart();
			TypeFragments.init();
		}

		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _Actor__Actor = {};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _Actor__AliasedElement = {};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _Actor__Commentable = {};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _Actor__Element = {
			TextualCommonsTables.Operations._Element__getNearestPackage /* getNearestPackage() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _Actor__NamedElement = {};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _Actor__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _Actor__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _Actor__UMLReferencingElement = {};

		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _ActorClassifierMapping__ActorClassifierMapping = {};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _ActorClassifierMapping__Element = {
			TextualCommonsTables.Operations._Element__getNearestPackage /* getNearestPackage() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _ActorClassifierMapping__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _ActorClassifierMapping__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _ActorClassifierMapping__UMLReferencingElement = {};

		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _ActorType__ActorType = {};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _ActorType__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _ActorType__OclElement = {
			OCLstdlibTables.Operations._OclEnumeration__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _ActorType__OclEnumeration = {
			OCLstdlibTables.Operations._OclEnumeration__allInstances /* allInstances() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _ActorType__OclType = {
			OCLstdlibTables.Operations._OclType__conformsTo /* conformsTo(OclType[?]) */
		};

		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _Alternative__Alternative = {};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _Alternative__AliasedElement = {};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _Alternative__CombinedFragment = {
			SequenceTables.Operations._CombinedFragment__getInteractionOperatorKind /* getInteractionOperatorKind() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _Alternative__Commentable = {};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _Alternative__Element = {
			TextualCommonsTables.Operations._Element__getNearestPackage /* getNearestPackage() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _Alternative__Fragment = {
			SequenceTables.Operations._Fragment__getContainingSequence /* getContainingSequence() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _Alternative__MultipleRegionContainer = {};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _Alternative__NamedElement = {};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _Alternative__NonInstantaneousFragment = {};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _Alternative__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _Alternative__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _Alternative__PointInTime = {};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _Alternative__UMLReferencingElement = {};

		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _BiPointInTimeTimeIntervalSelector__BiPointInTimeTimeIntervalSelector = {
			SequenceTables.Operations._BiPointInTimeTimeIntervalSelector__getIntervalEnd /* getIntervalEnd() */,
			SequenceTables.Operations._BiPointInTimeTimeIntervalSelector__getIntervalStart /* getIntervalStart() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _BiPointInTimeTimeIntervalSelector__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _BiPointInTimeTimeIntervalSelector__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _BiPointInTimeTimeIntervalSelector__TimeIntervalSelector = {
			SequenceTables.Operations._BiPointInTimeTimeIntervalSelector__getIntervalEnd /* getIntervalEnd() */,
			SequenceTables.Operations._BiPointInTimeTimeIntervalSelector__getIntervalStart /* getIntervalStart() */
		};

		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _CoRegion__CoRegion = {};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _CoRegion__AliasedElement = {};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _CoRegion__CombinedFragment = {
			SequenceTables.Operations._CombinedFragment__getInteractionOperatorKind /* getInteractionOperatorKind() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _CoRegion__Commentable = {};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _CoRegion__Element = {
			TextualCommonsTables.Operations._Element__getNearestPackage /* getNearestPackage() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _CoRegion__Fragment = {
			SequenceTables.Operations._Fragment__getContainingSequence /* getContainingSequence() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _CoRegion__MultipleRegionContainer = {};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _CoRegion__NamedElement = {};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _CoRegion__NonInstantaneousFragment = {};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _CoRegion__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _CoRegion__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _CoRegion__PointInTime = {};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _CoRegion__UMLReferencingElement = {};

		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _CombinedFragment__CombinedFragment = {
			SequenceTables.Operations._CombinedFragment__getInteractionOperatorKind /* getInteractionOperatorKind() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _CombinedFragment__AliasedElement = {};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _CombinedFragment__Commentable = {};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _CombinedFragment__Element = {
			TextualCommonsTables.Operations._Element__getNearestPackage /* getNearestPackage() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _CombinedFragment__Fragment = {
			SequenceTables.Operations._Fragment__getContainingSequence /* getContainingSequence() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _CombinedFragment__NamedElement = {};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _CombinedFragment__NonInstantaneousFragment = {};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _CombinedFragment__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _CombinedFragment__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _CombinedFragment__PointInTime = {};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _CombinedFragment__UMLReferencingElement = {};

		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _Condition__Condition = {};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _Condition__Element = {
			TextualCommonsTables.Operations._Element__getNearestPackage /* getNearestPackage() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _Condition__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _Condition__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _Condition__UMLReferencingElement = {};

		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _Constraint__Constraint = {};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _Constraint__Fragment = {
			SequenceTables.Operations._Fragment__getContainingSequence /* getContainingSequence() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _Constraint__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _Constraint__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};

		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _CreateMessage__CreateMessage = {};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _CreateMessage__AliasedElement = {};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _CreateMessage__Commentable = {};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _CreateMessage__Element = {
			TextualCommonsTables.Operations._Element__getNearestPackage /* getNearestPackage() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _CreateMessage__Fragment = {
			SequenceTables.Operations._Fragment__getContainingSequence /* getContainingSequence() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _CreateMessage__Message = {};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _CreateMessage__NamedElement = {};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _CreateMessage__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _CreateMessage__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _CreateMessage__UMLReferencingElement = {};

		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _Critical__Critical = {};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _Critical__AliasedElement = {};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _Critical__CombinedFragment = {
			SequenceTables.Operations._CombinedFragment__getInteractionOperatorKind /* getInteractionOperatorKind() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _Critical__Commentable = {};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _Critical__Element = {
			TextualCommonsTables.Operations._Element__getNearestPackage /* getNearestPackage() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _Critical__Fragment = {
			SequenceTables.Operations._Fragment__getContainingSequence /* getContainingSequence() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _Critical__NamedElement = {};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _Critical__NonInstantaneousFragment = {};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _Critical__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _Critical__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _Critical__PointInTime = {};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _Critical__SingleRegionContainer = {};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _Critical__UMLReferencingElement = {};

		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _DestructionMessage__DestructionMessage = {};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _DestructionMessage__AliasedElement = {};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _DestructionMessage__Commentable = {};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _DestructionMessage__Element = {
			TextualCommonsTables.Operations._Element__getNearestPackage /* getNearestPackage() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _DestructionMessage__Fragment = {
			SequenceTables.Operations._Fragment__getContainingSequence /* getContainingSequence() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _DestructionMessage__Message = {};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _DestructionMessage__NamedElement = {};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _DestructionMessage__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _DestructionMessage__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _DestructionMessage__UMLReferencingElement = {};

		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _DestructionOccurenceSpecification__DestructionOccurenceSpecification = {};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _DestructionOccurenceSpecification__Commentable = {};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _DestructionOccurenceSpecification__Element = {
			TextualCommonsTables.Operations._Element__getNearestPackage /* getNearestPackage() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _DestructionOccurenceSpecification__Fragment = {
			SequenceTables.Operations._Fragment__getContainingSequence /* getContainingSequence() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _DestructionOccurenceSpecification__OccurenceSpecification = {
			SequenceTables.Operations._OccurenceSpecification__getContainingExecutionSpecification /* getContainingExecutionSpecification() */,
			SequenceTables.Operations._OccurenceSpecification__getOccurenceReference /* getOccurenceReference() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _DestructionOccurenceSpecification__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _DestructionOccurenceSpecification__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _DestructionOccurenceSpecification__PointInTime = {};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _DestructionOccurenceSpecification__UMLReferencingElement = {};

		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _DurationConstraint__DurationConstraint = {};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _DurationConstraint__Constraint = {};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _DurationConstraint__Fragment = {
			SequenceTables.Operations._Fragment__getContainingSequence /* getContainingSequence() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _DurationConstraint__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _DurationConstraint__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};

		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _DurationObservation__DurationObservation = {};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _DurationObservation__Fragment = {
			SequenceTables.Operations._Fragment__getContainingSequence /* getContainingSequence() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _DurationObservation__Observation = {};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _DurationObservation__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _DurationObservation__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};

		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _ExplicitArrivalOccurenceReference__ExplicitArrivalOccurenceReference = {
			SequenceTables.Operations._ExplicitArrivalOccurenceReference__getOccurenceSpecification /* getOccurenceSpecification() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _ExplicitArrivalOccurenceReference__OccurenceReference = {
			SequenceTables.Operations._ExplicitArrivalOccurenceReference__getOccurenceSpecification /* getOccurenceSpecification() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _ExplicitArrivalOccurenceReference__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _ExplicitArrivalOccurenceReference__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};

		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _ExplicitArrivalOccurenceSpecification__ExplicitArrivalOccurenceSpecification = {
			SequenceTables.Operations._ExplicitArrivalOccurenceSpecification__getOccurenceReference /* getOccurenceReference() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _ExplicitArrivalOccurenceSpecification__AliasedElement = {};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _ExplicitArrivalOccurenceSpecification__Commentable = {};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _ExplicitArrivalOccurenceSpecification__Element = {
			TextualCommonsTables.Operations._Element__getNearestPackage /* getNearestPackage() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _ExplicitArrivalOccurenceSpecification__Fragment = {
			SequenceTables.Operations._Fragment__getContainingSequence /* getContainingSequence() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _ExplicitArrivalOccurenceSpecification__NamedElement = {};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _ExplicitArrivalOccurenceSpecification__OccurenceSpecification = {
			SequenceTables.Operations._OccurenceSpecification__getContainingExecutionSpecification /* getContainingExecutionSpecification() */,
			SequenceTables.Operations._ExplicitArrivalOccurenceSpecification__getOccurenceReference /* getOccurenceReference() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _ExplicitArrivalOccurenceSpecification__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _ExplicitArrivalOccurenceSpecification__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _ExplicitArrivalOccurenceSpecification__PointInTime = {};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _ExplicitArrivalOccurenceSpecification__UMLReferencingElement = {};

		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _Fragment__Fragment = {
			SequenceTables.Operations._Fragment__getContainingSequence /* getContainingSequence() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _Fragment__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _Fragment__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};

		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _FragmentSequence__FragmentSequence = {
			SequenceTables.Operations._FragmentSequence__getUMLFragmentSequence /* getUMLFragmentSequence() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _FragmentSequence__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _FragmentSequence__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};

		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _FragmentTimeIntervalSelector__FragmentTimeIntervalSelector = {
			SequenceTables.Operations._FragmentTimeIntervalSelector__getIntervalEnd /* getIntervalEnd() */,
			SequenceTables.Operations._FragmentTimeIntervalSelector__getIntervalStart /* getIntervalStart() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _FragmentTimeIntervalSelector__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _FragmentTimeIntervalSelector__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _FragmentTimeIntervalSelector__TimeIntervalSelector = {
			SequenceTables.Operations._FragmentTimeIntervalSelector__getIntervalEnd /* getIntervalEnd() */,
			SequenceTables.Operations._FragmentTimeIntervalSelector__getIntervalStart /* getIntervalStart() */
		};

		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _ImplicitMessageOccurenceSpecification__ImplicitMessageOccurenceSpecification = {
			SequenceTables.Operations._ImplicitMessageOccurenceSpecification__getOccurenceReference /* getOccurenceReference() */,
			SequenceTables.Operations._ImplicitMessageOccurenceSpecification__getOccurenceSpecification /* getOccurenceSpecification() */,
			SequenceTables.Operations._ImplicitMessageOccurenceSpecification__isArrival /* isArrival() */,
			SequenceTables.Operations._ImplicitMessageOccurenceSpecification__isSend /* isSend() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _ImplicitMessageOccurenceSpecification__Commentable = {};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _ImplicitMessageOccurenceSpecification__Element = {
			TextualCommonsTables.Operations._Element__getNearestPackage /* getNearestPackage() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _ImplicitMessageOccurenceSpecification__Fragment = {
			SequenceTables.Operations._Fragment__getContainingSequence /* getContainingSequence() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _ImplicitMessageOccurenceSpecification__OccurenceReference = {
			SequenceTables.Operations._ImplicitMessageOccurenceSpecification__getOccurenceSpecification /* getOccurenceSpecification() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _ImplicitMessageOccurenceSpecification__OccurenceSpecification = {
			SequenceTables.Operations._OccurenceSpecification__getContainingExecutionSpecification /* getContainingExecutionSpecification() */,
			SequenceTables.Operations._ImplicitMessageOccurenceSpecification__getOccurenceReference /* getOccurenceReference() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _ImplicitMessageOccurenceSpecification__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _ImplicitMessageOccurenceSpecification__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _ImplicitMessageOccurenceSpecification__PointInTime = {};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _ImplicitMessageOccurenceSpecification__UMLReferencingElement = {};

		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _Loop__Loop = {};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _Loop__AliasedElement = {};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _Loop__CombinedFragment = {
			SequenceTables.Operations._CombinedFragment__getInteractionOperatorKind /* getInteractionOperatorKind() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _Loop__Commentable = {};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _Loop__Element = {
			TextualCommonsTables.Operations._Element__getNearestPackage /* getNearestPackage() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _Loop__Fragment = {
			SequenceTables.Operations._Fragment__getContainingSequence /* getContainingSequence() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _Loop__NamedElement = {};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _Loop__NonInstantaneousFragment = {};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _Loop__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _Loop__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _Loop__PointInTime = {};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _Loop__SingleRegionContainer = {};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _Loop__UMLReferencingElement = {};

		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _Message__Message = {};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _Message__AliasedElement = {};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _Message__Commentable = {};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _Message__Element = {
			TextualCommonsTables.Operations._Element__getNearestPackage /* getNearestPackage() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _Message__Fragment = {
			SequenceTables.Operations._Fragment__getContainingSequence /* getContainingSequence() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _Message__NamedElement = {};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _Message__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _Message__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _Message__UMLReferencingElement = {};

		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _MessageType__MessageType = {};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _MessageType__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _MessageType__OclElement = {
			OCLstdlibTables.Operations._OclEnumeration__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _MessageType__OclEnumeration = {
			OCLstdlibTables.Operations._OclEnumeration__allInstances /* allInstances() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _MessageType__OclType = {
			OCLstdlibTables.Operations._OclType__conformsTo /* conformsTo(OclType[?]) */
		};

		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _MultipleRegionContainer__MultipleRegionContainer = {};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _MultipleRegionContainer__AliasedElement = {};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _MultipleRegionContainer__CombinedFragment = {
			SequenceTables.Operations._CombinedFragment__getInteractionOperatorKind /* getInteractionOperatorKind() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _MultipleRegionContainer__Commentable = {};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _MultipleRegionContainer__Element = {
			TextualCommonsTables.Operations._Element__getNearestPackage /* getNearestPackage() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _MultipleRegionContainer__Fragment = {
			SequenceTables.Operations._Fragment__getContainingSequence /* getContainingSequence() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _MultipleRegionContainer__NamedElement = {};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _MultipleRegionContainer__NonInstantaneousFragment = {};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _MultipleRegionContainer__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _MultipleRegionContainer__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _MultipleRegionContainer__PointInTime = {};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _MultipleRegionContainer__UMLReferencingElement = {};

		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _NonInstantaneousFragment__NonInstantaneousFragment = {};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _NonInstantaneousFragment__AliasedElement = {};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _NonInstantaneousFragment__Element = {
			TextualCommonsTables.Operations._Element__getNearestPackage /* getNearestPackage() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _NonInstantaneousFragment__Fragment = {
			SequenceTables.Operations._Fragment__getContainingSequence /* getContainingSequence() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _NonInstantaneousFragment__NamedElement = {};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _NonInstantaneousFragment__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _NonInstantaneousFragment__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _NonInstantaneousFragment__PointInTime = {};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _NonInstantaneousFragment__UMLReferencingElement = {};

		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _Observation__Observation = {};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _Observation__Fragment = {
			SequenceTables.Operations._Fragment__getContainingSequence /* getContainingSequence() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _Observation__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _Observation__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};

		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _OccurenceReference__OccurenceReference = {
			SequenceTables.Operations._OccurenceReference__getOccurenceSpecification /* getOccurenceSpecification() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _OccurenceReference__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _OccurenceReference__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};

		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _OccurenceSpecification__OccurenceSpecification = {
			SequenceTables.Operations._OccurenceSpecification__getContainingExecutionSpecification /* getContainingExecutionSpecification() */,
			SequenceTables.Operations._OccurenceSpecification__getOccurenceReference /* getOccurenceReference() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _OccurenceSpecification__Commentable = {};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _OccurenceSpecification__Element = {
			TextualCommonsTables.Operations._Element__getNearestPackage /* getNearestPackage() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _OccurenceSpecification__Fragment = {
			SequenceTables.Operations._Fragment__getContainingSequence /* getContainingSequence() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _OccurenceSpecification__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _OccurenceSpecification__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _OccurenceSpecification__PointInTime = {};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _OccurenceSpecification__UMLReferencingElement = {};

		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _Option__Option = {};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _Option__AliasedElement = {};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _Option__CombinedFragment = {
			SequenceTables.Operations._CombinedFragment__getInteractionOperatorKind /* getInteractionOperatorKind() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _Option__Commentable = {};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _Option__Element = {
			TextualCommonsTables.Operations._Element__getNearestPackage /* getNearestPackage() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _Option__Fragment = {
			SequenceTables.Operations._Fragment__getContainingSequence /* getContainingSequence() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _Option__NamedElement = {};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _Option__NonInstantaneousFragment = {};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _Option__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _Option__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _Option__PointInTime = {};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _Option__SingleRegionContainer = {};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _Option__UMLReferencingElement = {};

		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _OrderedFragmentContainer__OrderedFragmentContainer = {};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _OrderedFragmentContainer__AliasedElement = {};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _OrderedFragmentContainer__Commentable = {};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _OrderedFragmentContainer__Element = {
			TextualCommonsTables.Operations._Element__getNearestPackage /* getNearestPackage() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _OrderedFragmentContainer__FragmentSequence = {
			SequenceTables.Operations._FragmentSequence__getUMLFragmentSequence /* getUMLFragmentSequence() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _OrderedFragmentContainer__NamedElement = {};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _OrderedFragmentContainer__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _OrderedFragmentContainer__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _OrderedFragmentContainer__PointInTime = {};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _OrderedFragmentContainer__UMLReferencingElement = {};

		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _Parallel__Parallel = {};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _Parallel__AliasedElement = {};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _Parallel__CombinedFragment = {
			SequenceTables.Operations._CombinedFragment__getInteractionOperatorKind /* getInteractionOperatorKind() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _Parallel__Commentable = {};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _Parallel__Element = {
			TextualCommonsTables.Operations._Element__getNearestPackage /* getNearestPackage() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _Parallel__Fragment = {
			SequenceTables.Operations._Fragment__getContainingSequence /* getContainingSequence() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _Parallel__MultipleRegionContainer = {};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _Parallel__NamedElement = {};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _Parallel__NonInstantaneousFragment = {};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _Parallel__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _Parallel__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _Parallel__PointInTime = {};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _Parallel__UMLReferencingElement = {};

		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _PointInTime__PointInTime = {};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _PointInTime__Element = {
			TextualCommonsTables.Operations._Element__getNearestPackage /* getNearestPackage() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _PointInTime__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _PointInTime__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _PointInTime__UMLReferencingElement = {};

		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _PointInTimeSelector__PointInTimeSelector = {};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _PointInTimeSelector__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _PointInTimeSelector__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};

		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _Reference__Reference = {};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _Reference__AliasedElement = {};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _Reference__Element = {
			TextualCommonsTables.Operations._Element__getNearestPackage /* getNearestPackage() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _Reference__Fragment = {
			SequenceTables.Operations._Fragment__getContainingSequence /* getContainingSequence() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _Reference__NamedElement = {};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _Reference__NonInstantaneousFragment = {};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _Reference__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _Reference__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _Reference__PointInTime = {};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _Reference__UMLReferencingElement = {};

		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _ResponseMessage__ResponseMessage = {
			SequenceTables.Operations._ResponseMessage__getCorrespondingRequest /* getCorrespondingRequest() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _ResponseMessage__AliasedElement = {};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _ResponseMessage__Commentable = {};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _ResponseMessage__Element = {
			TextualCommonsTables.Operations._Element__getNearestPackage /* getNearestPackage() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _ResponseMessage__Fragment = {
			SequenceTables.Operations._Fragment__getContainingSequence /* getContainingSequence() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _ResponseMessage__Message = {};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _ResponseMessage__NamedElement = {};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _ResponseMessage__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _ResponseMessage__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _ResponseMessage__UMLReferencingElement = {};

		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _RootPackage__RootPackage = {};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _RootPackage__Element = {
			TextualCommonsTables.Operations._Element__getNearestPackage /* getNearestPackage() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _RootPackage__NamedElement = {};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _RootPackage__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _RootPackage__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _RootPackage__UMLReferencingElement = {};

		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _SequenceDiagram__SequenceDiagram = {};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _SequenceDiagram__Element = {
			TextualCommonsTables.Operations._Element__getNearestPackage /* getNearestPackage() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _SequenceDiagram__FragmentSequence = {
			SequenceTables.Operations._FragmentSequence__getUMLFragmentSequence /* getUMLFragmentSequence() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _SequenceDiagram__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _SequenceDiagram__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _SequenceDiagram__UMLReferencingElement = {};

		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _SingleRegionContainer__SingleRegionContainer = {};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _SingleRegionContainer__AliasedElement = {};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _SingleRegionContainer__CombinedFragment = {
			SequenceTables.Operations._CombinedFragment__getInteractionOperatorKind /* getInteractionOperatorKind() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _SingleRegionContainer__Commentable = {};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _SingleRegionContainer__Element = {
			TextualCommonsTables.Operations._Element__getNearestPackage /* getNearestPackage() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _SingleRegionContainer__Fragment = {
			SequenceTables.Operations._Fragment__getContainingSequence /* getContainingSequence() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _SingleRegionContainer__NamedElement = {};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _SingleRegionContainer__NonInstantaneousFragment = {};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _SingleRegionContainer__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _SingleRegionContainer__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _SingleRegionContainer__PointInTime = {};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _SingleRegionContainer__UMLReferencingElement = {};

		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _StandardMessage__StandardMessage = {};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _StandardMessage__AliasedElement = {};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _StandardMessage__Commentable = {};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _StandardMessage__Element = {
			TextualCommonsTables.Operations._Element__getNearestPackage /* getNearestPackage() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _StandardMessage__Fragment = {
			SequenceTables.Operations._Fragment__getContainingSequence /* getContainingSequence() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _StandardMessage__Message = {};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _StandardMessage__NamedElement = {};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _StandardMessage__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _StandardMessage__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _StandardMessage__UMLReferencingElement = {};

		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _TimeConstraint__TimeConstraint = {};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _TimeConstraint__Constraint = {};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _TimeConstraint__Fragment = {
			SequenceTables.Operations._Fragment__getContainingSequence /* getContainingSequence() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _TimeConstraint__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _TimeConstraint__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};

		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _TimeIntervalSelector__TimeIntervalSelector = {
			SequenceTables.Operations._TimeIntervalSelector__getIntervalEnd /* getIntervalEnd() */,
			SequenceTables.Operations._TimeIntervalSelector__getIntervalStart /* getIntervalStart() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _TimeIntervalSelector__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _TimeIntervalSelector__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};

		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _TimeObservation__TimeObservation = {};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _TimeObservation__Fragment = {
			SequenceTables.Operations._Fragment__getContainingSequence /* getContainingSequence() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _TimeObservation__Observation = {};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _TimeObservation__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[?]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final /*@NonNull*/ ExecutorOperation /*@NonNull*/ [] _TimeObservation__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances() */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[?]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[?]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};

		/*
		 *	Install the operation descriptors in the fragment descriptors.
		 */
		static {
			Fragments._Actor__Actor.initOperations(_Actor__Actor);
			Fragments._Actor__AliasedElement.initOperations(_Actor__AliasedElement);
			Fragments._Actor__Commentable.initOperations(_Actor__Commentable);
			Fragments._Actor__Element.initOperations(_Actor__Element);
			Fragments._Actor__NamedElement.initOperations(_Actor__NamedElement);
			Fragments._Actor__OclAny.initOperations(_Actor__OclAny);
			Fragments._Actor__OclElement.initOperations(_Actor__OclElement);
			Fragments._Actor__UMLReferencingElement.initOperations(_Actor__UMLReferencingElement);

			Fragments._ActorClassifierMapping__ActorClassifierMapping.initOperations(_ActorClassifierMapping__ActorClassifierMapping);
			Fragments._ActorClassifierMapping__Element.initOperations(_ActorClassifierMapping__Element);
			Fragments._ActorClassifierMapping__OclAny.initOperations(_ActorClassifierMapping__OclAny);
			Fragments._ActorClassifierMapping__OclElement.initOperations(_ActorClassifierMapping__OclElement);
			Fragments._ActorClassifierMapping__UMLReferencingElement.initOperations(_ActorClassifierMapping__UMLReferencingElement);

			Fragments._ActorType__ActorType.initOperations(_ActorType__ActorType);
			Fragments._ActorType__OclAny.initOperations(_ActorType__OclAny);
			Fragments._ActorType__OclElement.initOperations(_ActorType__OclElement);
			Fragments._ActorType__OclEnumeration.initOperations(_ActorType__OclEnumeration);
			Fragments._ActorType__OclType.initOperations(_ActorType__OclType);

			Fragments._Alternative__AliasedElement.initOperations(_Alternative__AliasedElement);
			Fragments._Alternative__Alternative.initOperations(_Alternative__Alternative);
			Fragments._Alternative__CombinedFragment.initOperations(_Alternative__CombinedFragment);
			Fragments._Alternative__Commentable.initOperations(_Alternative__Commentable);
			Fragments._Alternative__Element.initOperations(_Alternative__Element);
			Fragments._Alternative__Fragment.initOperations(_Alternative__Fragment);
			Fragments._Alternative__MultipleRegionContainer.initOperations(_Alternative__MultipleRegionContainer);
			Fragments._Alternative__NamedElement.initOperations(_Alternative__NamedElement);
			Fragments._Alternative__NonInstantaneousFragment.initOperations(_Alternative__NonInstantaneousFragment);
			Fragments._Alternative__OclAny.initOperations(_Alternative__OclAny);
			Fragments._Alternative__OclElement.initOperations(_Alternative__OclElement);
			Fragments._Alternative__PointInTime.initOperations(_Alternative__PointInTime);
			Fragments._Alternative__UMLReferencingElement.initOperations(_Alternative__UMLReferencingElement);

			Fragments._BiPointInTimeTimeIntervalSelector__BiPointInTimeTimeIntervalSelector.initOperations(_BiPointInTimeTimeIntervalSelector__BiPointInTimeTimeIntervalSelector);
			Fragments._BiPointInTimeTimeIntervalSelector__OclAny.initOperations(_BiPointInTimeTimeIntervalSelector__OclAny);
			Fragments._BiPointInTimeTimeIntervalSelector__OclElement.initOperations(_BiPointInTimeTimeIntervalSelector__OclElement);
			Fragments._BiPointInTimeTimeIntervalSelector__TimeIntervalSelector.initOperations(_BiPointInTimeTimeIntervalSelector__TimeIntervalSelector);

			Fragments._CoRegion__AliasedElement.initOperations(_CoRegion__AliasedElement);
			Fragments._CoRegion__CoRegion.initOperations(_CoRegion__CoRegion);
			Fragments._CoRegion__CombinedFragment.initOperations(_CoRegion__CombinedFragment);
			Fragments._CoRegion__Commentable.initOperations(_CoRegion__Commentable);
			Fragments._CoRegion__Element.initOperations(_CoRegion__Element);
			Fragments._CoRegion__Fragment.initOperations(_CoRegion__Fragment);
			Fragments._CoRegion__MultipleRegionContainer.initOperations(_CoRegion__MultipleRegionContainer);
			Fragments._CoRegion__NamedElement.initOperations(_CoRegion__NamedElement);
			Fragments._CoRegion__NonInstantaneousFragment.initOperations(_CoRegion__NonInstantaneousFragment);
			Fragments._CoRegion__OclAny.initOperations(_CoRegion__OclAny);
			Fragments._CoRegion__OclElement.initOperations(_CoRegion__OclElement);
			Fragments._CoRegion__PointInTime.initOperations(_CoRegion__PointInTime);
			Fragments._CoRegion__UMLReferencingElement.initOperations(_CoRegion__UMLReferencingElement);

			Fragments._CombinedFragment__AliasedElement.initOperations(_CombinedFragment__AliasedElement);
			Fragments._CombinedFragment__CombinedFragment.initOperations(_CombinedFragment__CombinedFragment);
			Fragments._CombinedFragment__Commentable.initOperations(_CombinedFragment__Commentable);
			Fragments._CombinedFragment__Element.initOperations(_CombinedFragment__Element);
			Fragments._CombinedFragment__Fragment.initOperations(_CombinedFragment__Fragment);
			Fragments._CombinedFragment__NamedElement.initOperations(_CombinedFragment__NamedElement);
			Fragments._CombinedFragment__NonInstantaneousFragment.initOperations(_CombinedFragment__NonInstantaneousFragment);
			Fragments._CombinedFragment__OclAny.initOperations(_CombinedFragment__OclAny);
			Fragments._CombinedFragment__OclElement.initOperations(_CombinedFragment__OclElement);
			Fragments._CombinedFragment__PointInTime.initOperations(_CombinedFragment__PointInTime);
			Fragments._CombinedFragment__UMLReferencingElement.initOperations(_CombinedFragment__UMLReferencingElement);

			Fragments._Condition__Condition.initOperations(_Condition__Condition);
			Fragments._Condition__Element.initOperations(_Condition__Element);
			Fragments._Condition__OclAny.initOperations(_Condition__OclAny);
			Fragments._Condition__OclElement.initOperations(_Condition__OclElement);
			Fragments._Condition__UMLReferencingElement.initOperations(_Condition__UMLReferencingElement);

			Fragments._Constraint__Constraint.initOperations(_Constraint__Constraint);
			Fragments._Constraint__Fragment.initOperations(_Constraint__Fragment);
			Fragments._Constraint__OclAny.initOperations(_Constraint__OclAny);
			Fragments._Constraint__OclElement.initOperations(_Constraint__OclElement);

			Fragments._CreateMessage__AliasedElement.initOperations(_CreateMessage__AliasedElement);
			Fragments._CreateMessage__Commentable.initOperations(_CreateMessage__Commentable);
			Fragments._CreateMessage__CreateMessage.initOperations(_CreateMessage__CreateMessage);
			Fragments._CreateMessage__Element.initOperations(_CreateMessage__Element);
			Fragments._CreateMessage__Fragment.initOperations(_CreateMessage__Fragment);
			Fragments._CreateMessage__Message.initOperations(_CreateMessage__Message);
			Fragments._CreateMessage__NamedElement.initOperations(_CreateMessage__NamedElement);
			Fragments._CreateMessage__OclAny.initOperations(_CreateMessage__OclAny);
			Fragments._CreateMessage__OclElement.initOperations(_CreateMessage__OclElement);
			Fragments._CreateMessage__UMLReferencingElement.initOperations(_CreateMessage__UMLReferencingElement);

			Fragments._Critical__AliasedElement.initOperations(_Critical__AliasedElement);
			Fragments._Critical__CombinedFragment.initOperations(_Critical__CombinedFragment);
			Fragments._Critical__Commentable.initOperations(_Critical__Commentable);
			Fragments._Critical__Critical.initOperations(_Critical__Critical);
			Fragments._Critical__Element.initOperations(_Critical__Element);
			Fragments._Critical__Fragment.initOperations(_Critical__Fragment);
			Fragments._Critical__NamedElement.initOperations(_Critical__NamedElement);
			Fragments._Critical__NonInstantaneousFragment.initOperations(_Critical__NonInstantaneousFragment);
			Fragments._Critical__OclAny.initOperations(_Critical__OclAny);
			Fragments._Critical__OclElement.initOperations(_Critical__OclElement);
			Fragments._Critical__PointInTime.initOperations(_Critical__PointInTime);
			Fragments._Critical__SingleRegionContainer.initOperations(_Critical__SingleRegionContainer);
			Fragments._Critical__UMLReferencingElement.initOperations(_Critical__UMLReferencingElement);

			Fragments._DestructionMessage__AliasedElement.initOperations(_DestructionMessage__AliasedElement);
			Fragments._DestructionMessage__Commentable.initOperations(_DestructionMessage__Commentable);
			Fragments._DestructionMessage__DestructionMessage.initOperations(_DestructionMessage__DestructionMessage);
			Fragments._DestructionMessage__Element.initOperations(_DestructionMessage__Element);
			Fragments._DestructionMessage__Fragment.initOperations(_DestructionMessage__Fragment);
			Fragments._DestructionMessage__Message.initOperations(_DestructionMessage__Message);
			Fragments._DestructionMessage__NamedElement.initOperations(_DestructionMessage__NamedElement);
			Fragments._DestructionMessage__OclAny.initOperations(_DestructionMessage__OclAny);
			Fragments._DestructionMessage__OclElement.initOperations(_DestructionMessage__OclElement);
			Fragments._DestructionMessage__UMLReferencingElement.initOperations(_DestructionMessage__UMLReferencingElement);

			Fragments._DestructionOccurenceSpecification__Commentable.initOperations(_DestructionOccurenceSpecification__Commentable);
			Fragments._DestructionOccurenceSpecification__DestructionOccurenceSpecification.initOperations(_DestructionOccurenceSpecification__DestructionOccurenceSpecification);
			Fragments._DestructionOccurenceSpecification__Element.initOperations(_DestructionOccurenceSpecification__Element);
			Fragments._DestructionOccurenceSpecification__Fragment.initOperations(_DestructionOccurenceSpecification__Fragment);
			Fragments._DestructionOccurenceSpecification__OccurenceSpecification.initOperations(_DestructionOccurenceSpecification__OccurenceSpecification);
			Fragments._DestructionOccurenceSpecification__OclAny.initOperations(_DestructionOccurenceSpecification__OclAny);
			Fragments._DestructionOccurenceSpecification__OclElement.initOperations(_DestructionOccurenceSpecification__OclElement);
			Fragments._DestructionOccurenceSpecification__PointInTime.initOperations(_DestructionOccurenceSpecification__PointInTime);
			Fragments._DestructionOccurenceSpecification__UMLReferencingElement.initOperations(_DestructionOccurenceSpecification__UMLReferencingElement);

			Fragments._DurationConstraint__Constraint.initOperations(_DurationConstraint__Constraint);
			Fragments._DurationConstraint__DurationConstraint.initOperations(_DurationConstraint__DurationConstraint);
			Fragments._DurationConstraint__Fragment.initOperations(_DurationConstraint__Fragment);
			Fragments._DurationConstraint__OclAny.initOperations(_DurationConstraint__OclAny);
			Fragments._DurationConstraint__OclElement.initOperations(_DurationConstraint__OclElement);

			Fragments._DurationObservation__DurationObservation.initOperations(_DurationObservation__DurationObservation);
			Fragments._DurationObservation__Fragment.initOperations(_DurationObservation__Fragment);
			Fragments._DurationObservation__Observation.initOperations(_DurationObservation__Observation);
			Fragments._DurationObservation__OclAny.initOperations(_DurationObservation__OclAny);
			Fragments._DurationObservation__OclElement.initOperations(_DurationObservation__OclElement);

			Fragments._ExplicitArrivalOccurenceReference__ExplicitArrivalOccurenceReference.initOperations(_ExplicitArrivalOccurenceReference__ExplicitArrivalOccurenceReference);
			Fragments._ExplicitArrivalOccurenceReference__OccurenceReference.initOperations(_ExplicitArrivalOccurenceReference__OccurenceReference);
			Fragments._ExplicitArrivalOccurenceReference__OclAny.initOperations(_ExplicitArrivalOccurenceReference__OclAny);
			Fragments._ExplicitArrivalOccurenceReference__OclElement.initOperations(_ExplicitArrivalOccurenceReference__OclElement);

			Fragments._ExplicitArrivalOccurenceSpecification__AliasedElement.initOperations(_ExplicitArrivalOccurenceSpecification__AliasedElement);
			Fragments._ExplicitArrivalOccurenceSpecification__Commentable.initOperations(_ExplicitArrivalOccurenceSpecification__Commentable);
			Fragments._ExplicitArrivalOccurenceSpecification__Element.initOperations(_ExplicitArrivalOccurenceSpecification__Element);
			Fragments._ExplicitArrivalOccurenceSpecification__ExplicitArrivalOccurenceSpecification.initOperations(_ExplicitArrivalOccurenceSpecification__ExplicitArrivalOccurenceSpecification);
			Fragments._ExplicitArrivalOccurenceSpecification__Fragment.initOperations(_ExplicitArrivalOccurenceSpecification__Fragment);
			Fragments._ExplicitArrivalOccurenceSpecification__NamedElement.initOperations(_ExplicitArrivalOccurenceSpecification__NamedElement);
			Fragments._ExplicitArrivalOccurenceSpecification__OccurenceSpecification.initOperations(_ExplicitArrivalOccurenceSpecification__OccurenceSpecification);
			Fragments._ExplicitArrivalOccurenceSpecification__OclAny.initOperations(_ExplicitArrivalOccurenceSpecification__OclAny);
			Fragments._ExplicitArrivalOccurenceSpecification__OclElement.initOperations(_ExplicitArrivalOccurenceSpecification__OclElement);
			Fragments._ExplicitArrivalOccurenceSpecification__PointInTime.initOperations(_ExplicitArrivalOccurenceSpecification__PointInTime);
			Fragments._ExplicitArrivalOccurenceSpecification__UMLReferencingElement.initOperations(_ExplicitArrivalOccurenceSpecification__UMLReferencingElement);

			Fragments._Fragment__Fragment.initOperations(_Fragment__Fragment);
			Fragments._Fragment__OclAny.initOperations(_Fragment__OclAny);
			Fragments._Fragment__OclElement.initOperations(_Fragment__OclElement);

			Fragments._FragmentSequence__FragmentSequence.initOperations(_FragmentSequence__FragmentSequence);
			Fragments._FragmentSequence__OclAny.initOperations(_FragmentSequence__OclAny);
			Fragments._FragmentSequence__OclElement.initOperations(_FragmentSequence__OclElement);

			Fragments._FragmentTimeIntervalSelector__FragmentTimeIntervalSelector.initOperations(_FragmentTimeIntervalSelector__FragmentTimeIntervalSelector);
			Fragments._FragmentTimeIntervalSelector__OclAny.initOperations(_FragmentTimeIntervalSelector__OclAny);
			Fragments._FragmentTimeIntervalSelector__OclElement.initOperations(_FragmentTimeIntervalSelector__OclElement);
			Fragments._FragmentTimeIntervalSelector__TimeIntervalSelector.initOperations(_FragmentTimeIntervalSelector__TimeIntervalSelector);

			Fragments._ImplicitMessageOccurenceSpecification__Commentable.initOperations(_ImplicitMessageOccurenceSpecification__Commentable);
			Fragments._ImplicitMessageOccurenceSpecification__Element.initOperations(_ImplicitMessageOccurenceSpecification__Element);
			Fragments._ImplicitMessageOccurenceSpecification__Fragment.initOperations(_ImplicitMessageOccurenceSpecification__Fragment);
			Fragments._ImplicitMessageOccurenceSpecification__ImplicitMessageOccurenceSpecification.initOperations(_ImplicitMessageOccurenceSpecification__ImplicitMessageOccurenceSpecification);
			Fragments._ImplicitMessageOccurenceSpecification__OccurenceReference.initOperations(_ImplicitMessageOccurenceSpecification__OccurenceReference);
			Fragments._ImplicitMessageOccurenceSpecification__OccurenceSpecification.initOperations(_ImplicitMessageOccurenceSpecification__OccurenceSpecification);
			Fragments._ImplicitMessageOccurenceSpecification__OclAny.initOperations(_ImplicitMessageOccurenceSpecification__OclAny);
			Fragments._ImplicitMessageOccurenceSpecification__OclElement.initOperations(_ImplicitMessageOccurenceSpecification__OclElement);
			Fragments._ImplicitMessageOccurenceSpecification__PointInTime.initOperations(_ImplicitMessageOccurenceSpecification__PointInTime);
			Fragments._ImplicitMessageOccurenceSpecification__UMLReferencingElement.initOperations(_ImplicitMessageOccurenceSpecification__UMLReferencingElement);

			Fragments._Loop__AliasedElement.initOperations(_Loop__AliasedElement);
			Fragments._Loop__CombinedFragment.initOperations(_Loop__CombinedFragment);
			Fragments._Loop__Commentable.initOperations(_Loop__Commentable);
			Fragments._Loop__Element.initOperations(_Loop__Element);
			Fragments._Loop__Fragment.initOperations(_Loop__Fragment);
			Fragments._Loop__Loop.initOperations(_Loop__Loop);
			Fragments._Loop__NamedElement.initOperations(_Loop__NamedElement);
			Fragments._Loop__NonInstantaneousFragment.initOperations(_Loop__NonInstantaneousFragment);
			Fragments._Loop__OclAny.initOperations(_Loop__OclAny);
			Fragments._Loop__OclElement.initOperations(_Loop__OclElement);
			Fragments._Loop__PointInTime.initOperations(_Loop__PointInTime);
			Fragments._Loop__SingleRegionContainer.initOperations(_Loop__SingleRegionContainer);
			Fragments._Loop__UMLReferencingElement.initOperations(_Loop__UMLReferencingElement);

			Fragments._Message__AliasedElement.initOperations(_Message__AliasedElement);
			Fragments._Message__Commentable.initOperations(_Message__Commentable);
			Fragments._Message__Element.initOperations(_Message__Element);
			Fragments._Message__Fragment.initOperations(_Message__Fragment);
			Fragments._Message__Message.initOperations(_Message__Message);
			Fragments._Message__NamedElement.initOperations(_Message__NamedElement);
			Fragments._Message__OclAny.initOperations(_Message__OclAny);
			Fragments._Message__OclElement.initOperations(_Message__OclElement);
			Fragments._Message__UMLReferencingElement.initOperations(_Message__UMLReferencingElement);

			Fragments._MessageType__MessageType.initOperations(_MessageType__MessageType);
			Fragments._MessageType__OclAny.initOperations(_MessageType__OclAny);
			Fragments._MessageType__OclElement.initOperations(_MessageType__OclElement);
			Fragments._MessageType__OclEnumeration.initOperations(_MessageType__OclEnumeration);
			Fragments._MessageType__OclType.initOperations(_MessageType__OclType);

			Fragments._MultipleRegionContainer__AliasedElement.initOperations(_MultipleRegionContainer__AliasedElement);
			Fragments._MultipleRegionContainer__CombinedFragment.initOperations(_MultipleRegionContainer__CombinedFragment);
			Fragments._MultipleRegionContainer__Commentable.initOperations(_MultipleRegionContainer__Commentable);
			Fragments._MultipleRegionContainer__Element.initOperations(_MultipleRegionContainer__Element);
			Fragments._MultipleRegionContainer__Fragment.initOperations(_MultipleRegionContainer__Fragment);
			Fragments._MultipleRegionContainer__MultipleRegionContainer.initOperations(_MultipleRegionContainer__MultipleRegionContainer);
			Fragments._MultipleRegionContainer__NamedElement.initOperations(_MultipleRegionContainer__NamedElement);
			Fragments._MultipleRegionContainer__NonInstantaneousFragment.initOperations(_MultipleRegionContainer__NonInstantaneousFragment);
			Fragments._MultipleRegionContainer__OclAny.initOperations(_MultipleRegionContainer__OclAny);
			Fragments._MultipleRegionContainer__OclElement.initOperations(_MultipleRegionContainer__OclElement);
			Fragments._MultipleRegionContainer__PointInTime.initOperations(_MultipleRegionContainer__PointInTime);
			Fragments._MultipleRegionContainer__UMLReferencingElement.initOperations(_MultipleRegionContainer__UMLReferencingElement);

			Fragments._NonInstantaneousFragment__AliasedElement.initOperations(_NonInstantaneousFragment__AliasedElement);
			Fragments._NonInstantaneousFragment__Element.initOperations(_NonInstantaneousFragment__Element);
			Fragments._NonInstantaneousFragment__Fragment.initOperations(_NonInstantaneousFragment__Fragment);
			Fragments._NonInstantaneousFragment__NamedElement.initOperations(_NonInstantaneousFragment__NamedElement);
			Fragments._NonInstantaneousFragment__NonInstantaneousFragment.initOperations(_NonInstantaneousFragment__NonInstantaneousFragment);
			Fragments._NonInstantaneousFragment__OclAny.initOperations(_NonInstantaneousFragment__OclAny);
			Fragments._NonInstantaneousFragment__OclElement.initOperations(_NonInstantaneousFragment__OclElement);
			Fragments._NonInstantaneousFragment__PointInTime.initOperations(_NonInstantaneousFragment__PointInTime);
			Fragments._NonInstantaneousFragment__UMLReferencingElement.initOperations(_NonInstantaneousFragment__UMLReferencingElement);

			Fragments._Observation__Fragment.initOperations(_Observation__Fragment);
			Fragments._Observation__Observation.initOperations(_Observation__Observation);
			Fragments._Observation__OclAny.initOperations(_Observation__OclAny);
			Fragments._Observation__OclElement.initOperations(_Observation__OclElement);

			Fragments._OccurenceReference__OccurenceReference.initOperations(_OccurenceReference__OccurenceReference);
			Fragments._OccurenceReference__OclAny.initOperations(_OccurenceReference__OclAny);
			Fragments._OccurenceReference__OclElement.initOperations(_OccurenceReference__OclElement);

			Fragments._OccurenceSpecification__Commentable.initOperations(_OccurenceSpecification__Commentable);
			Fragments._OccurenceSpecification__Element.initOperations(_OccurenceSpecification__Element);
			Fragments._OccurenceSpecification__Fragment.initOperations(_OccurenceSpecification__Fragment);
			Fragments._OccurenceSpecification__OccurenceSpecification.initOperations(_OccurenceSpecification__OccurenceSpecification);
			Fragments._OccurenceSpecification__OclAny.initOperations(_OccurenceSpecification__OclAny);
			Fragments._OccurenceSpecification__OclElement.initOperations(_OccurenceSpecification__OclElement);
			Fragments._OccurenceSpecification__PointInTime.initOperations(_OccurenceSpecification__PointInTime);
			Fragments._OccurenceSpecification__UMLReferencingElement.initOperations(_OccurenceSpecification__UMLReferencingElement);

			Fragments._Option__AliasedElement.initOperations(_Option__AliasedElement);
			Fragments._Option__CombinedFragment.initOperations(_Option__CombinedFragment);
			Fragments._Option__Commentable.initOperations(_Option__Commentable);
			Fragments._Option__Element.initOperations(_Option__Element);
			Fragments._Option__Fragment.initOperations(_Option__Fragment);
			Fragments._Option__NamedElement.initOperations(_Option__NamedElement);
			Fragments._Option__NonInstantaneousFragment.initOperations(_Option__NonInstantaneousFragment);
			Fragments._Option__OclAny.initOperations(_Option__OclAny);
			Fragments._Option__OclElement.initOperations(_Option__OclElement);
			Fragments._Option__Option.initOperations(_Option__Option);
			Fragments._Option__PointInTime.initOperations(_Option__PointInTime);
			Fragments._Option__SingleRegionContainer.initOperations(_Option__SingleRegionContainer);
			Fragments._Option__UMLReferencingElement.initOperations(_Option__UMLReferencingElement);

			Fragments._OrderedFragmentContainer__AliasedElement.initOperations(_OrderedFragmentContainer__AliasedElement);
			Fragments._OrderedFragmentContainer__Commentable.initOperations(_OrderedFragmentContainer__Commentable);
			Fragments._OrderedFragmentContainer__Element.initOperations(_OrderedFragmentContainer__Element);
			Fragments._OrderedFragmentContainer__FragmentSequence.initOperations(_OrderedFragmentContainer__FragmentSequence);
			Fragments._OrderedFragmentContainer__NamedElement.initOperations(_OrderedFragmentContainer__NamedElement);
			Fragments._OrderedFragmentContainer__OclAny.initOperations(_OrderedFragmentContainer__OclAny);
			Fragments._OrderedFragmentContainer__OclElement.initOperations(_OrderedFragmentContainer__OclElement);
			Fragments._OrderedFragmentContainer__OrderedFragmentContainer.initOperations(_OrderedFragmentContainer__OrderedFragmentContainer);
			Fragments._OrderedFragmentContainer__PointInTime.initOperations(_OrderedFragmentContainer__PointInTime);
			Fragments._OrderedFragmentContainer__UMLReferencingElement.initOperations(_OrderedFragmentContainer__UMLReferencingElement);

			Fragments._Parallel__AliasedElement.initOperations(_Parallel__AliasedElement);
			Fragments._Parallel__CombinedFragment.initOperations(_Parallel__CombinedFragment);
			Fragments._Parallel__Commentable.initOperations(_Parallel__Commentable);
			Fragments._Parallel__Element.initOperations(_Parallel__Element);
			Fragments._Parallel__Fragment.initOperations(_Parallel__Fragment);
			Fragments._Parallel__MultipleRegionContainer.initOperations(_Parallel__MultipleRegionContainer);
			Fragments._Parallel__NamedElement.initOperations(_Parallel__NamedElement);
			Fragments._Parallel__NonInstantaneousFragment.initOperations(_Parallel__NonInstantaneousFragment);
			Fragments._Parallel__OclAny.initOperations(_Parallel__OclAny);
			Fragments._Parallel__OclElement.initOperations(_Parallel__OclElement);
			Fragments._Parallel__Parallel.initOperations(_Parallel__Parallel);
			Fragments._Parallel__PointInTime.initOperations(_Parallel__PointInTime);
			Fragments._Parallel__UMLReferencingElement.initOperations(_Parallel__UMLReferencingElement);

			Fragments._PointInTime__Element.initOperations(_PointInTime__Element);
			Fragments._PointInTime__OclAny.initOperations(_PointInTime__OclAny);
			Fragments._PointInTime__OclElement.initOperations(_PointInTime__OclElement);
			Fragments._PointInTime__PointInTime.initOperations(_PointInTime__PointInTime);
			Fragments._PointInTime__UMLReferencingElement.initOperations(_PointInTime__UMLReferencingElement);

			Fragments._PointInTimeSelector__OclAny.initOperations(_PointInTimeSelector__OclAny);
			Fragments._PointInTimeSelector__OclElement.initOperations(_PointInTimeSelector__OclElement);
			Fragments._PointInTimeSelector__PointInTimeSelector.initOperations(_PointInTimeSelector__PointInTimeSelector);

			Fragments._Reference__AliasedElement.initOperations(_Reference__AliasedElement);
			Fragments._Reference__Element.initOperations(_Reference__Element);
			Fragments._Reference__Fragment.initOperations(_Reference__Fragment);
			Fragments._Reference__NamedElement.initOperations(_Reference__NamedElement);
			Fragments._Reference__NonInstantaneousFragment.initOperations(_Reference__NonInstantaneousFragment);
			Fragments._Reference__OclAny.initOperations(_Reference__OclAny);
			Fragments._Reference__OclElement.initOperations(_Reference__OclElement);
			Fragments._Reference__PointInTime.initOperations(_Reference__PointInTime);
			Fragments._Reference__Reference.initOperations(_Reference__Reference);
			Fragments._Reference__UMLReferencingElement.initOperations(_Reference__UMLReferencingElement);

			Fragments._ResponseMessage__AliasedElement.initOperations(_ResponseMessage__AliasedElement);
			Fragments._ResponseMessage__Commentable.initOperations(_ResponseMessage__Commentable);
			Fragments._ResponseMessage__Element.initOperations(_ResponseMessage__Element);
			Fragments._ResponseMessage__Fragment.initOperations(_ResponseMessage__Fragment);
			Fragments._ResponseMessage__Message.initOperations(_ResponseMessage__Message);
			Fragments._ResponseMessage__NamedElement.initOperations(_ResponseMessage__NamedElement);
			Fragments._ResponseMessage__OclAny.initOperations(_ResponseMessage__OclAny);
			Fragments._ResponseMessage__OclElement.initOperations(_ResponseMessage__OclElement);
			Fragments._ResponseMessage__ResponseMessage.initOperations(_ResponseMessage__ResponseMessage);
			Fragments._ResponseMessage__UMLReferencingElement.initOperations(_ResponseMessage__UMLReferencingElement);

			Fragments._RootPackage__Element.initOperations(_RootPackage__Element);
			Fragments._RootPackage__NamedElement.initOperations(_RootPackage__NamedElement);
			Fragments._RootPackage__OclAny.initOperations(_RootPackage__OclAny);
			Fragments._RootPackage__OclElement.initOperations(_RootPackage__OclElement);
			Fragments._RootPackage__RootPackage.initOperations(_RootPackage__RootPackage);
			Fragments._RootPackage__UMLReferencingElement.initOperations(_RootPackage__UMLReferencingElement);

			Fragments._SequenceDiagram__Element.initOperations(_SequenceDiagram__Element);
			Fragments._SequenceDiagram__FragmentSequence.initOperations(_SequenceDiagram__FragmentSequence);
			Fragments._SequenceDiagram__OclAny.initOperations(_SequenceDiagram__OclAny);
			Fragments._SequenceDiagram__OclElement.initOperations(_SequenceDiagram__OclElement);
			Fragments._SequenceDiagram__SequenceDiagram.initOperations(_SequenceDiagram__SequenceDiagram);
			Fragments._SequenceDiagram__UMLReferencingElement.initOperations(_SequenceDiagram__UMLReferencingElement);

			Fragments._SingleRegionContainer__AliasedElement.initOperations(_SingleRegionContainer__AliasedElement);
			Fragments._SingleRegionContainer__CombinedFragment.initOperations(_SingleRegionContainer__CombinedFragment);
			Fragments._SingleRegionContainer__Commentable.initOperations(_SingleRegionContainer__Commentable);
			Fragments._SingleRegionContainer__Element.initOperations(_SingleRegionContainer__Element);
			Fragments._SingleRegionContainer__Fragment.initOperations(_SingleRegionContainer__Fragment);
			Fragments._SingleRegionContainer__NamedElement.initOperations(_SingleRegionContainer__NamedElement);
			Fragments._SingleRegionContainer__NonInstantaneousFragment.initOperations(_SingleRegionContainer__NonInstantaneousFragment);
			Fragments._SingleRegionContainer__OclAny.initOperations(_SingleRegionContainer__OclAny);
			Fragments._SingleRegionContainer__OclElement.initOperations(_SingleRegionContainer__OclElement);
			Fragments._SingleRegionContainer__PointInTime.initOperations(_SingleRegionContainer__PointInTime);
			Fragments._SingleRegionContainer__SingleRegionContainer.initOperations(_SingleRegionContainer__SingleRegionContainer);
			Fragments._SingleRegionContainer__UMLReferencingElement.initOperations(_SingleRegionContainer__UMLReferencingElement);

			Fragments._StandardMessage__AliasedElement.initOperations(_StandardMessage__AliasedElement);
			Fragments._StandardMessage__Commentable.initOperations(_StandardMessage__Commentable);
			Fragments._StandardMessage__Element.initOperations(_StandardMessage__Element);
			Fragments._StandardMessage__Fragment.initOperations(_StandardMessage__Fragment);
			Fragments._StandardMessage__Message.initOperations(_StandardMessage__Message);
			Fragments._StandardMessage__NamedElement.initOperations(_StandardMessage__NamedElement);
			Fragments._StandardMessage__OclAny.initOperations(_StandardMessage__OclAny);
			Fragments._StandardMessage__OclElement.initOperations(_StandardMessage__OclElement);
			Fragments._StandardMessage__StandardMessage.initOperations(_StandardMessage__StandardMessage);
			Fragments._StandardMessage__UMLReferencingElement.initOperations(_StandardMessage__UMLReferencingElement);

			Fragments._TimeConstraint__Constraint.initOperations(_TimeConstraint__Constraint);
			Fragments._TimeConstraint__Fragment.initOperations(_TimeConstraint__Fragment);
			Fragments._TimeConstraint__OclAny.initOperations(_TimeConstraint__OclAny);
			Fragments._TimeConstraint__OclElement.initOperations(_TimeConstraint__OclElement);
			Fragments._TimeConstraint__TimeConstraint.initOperations(_TimeConstraint__TimeConstraint);

			Fragments._TimeIntervalSelector__OclAny.initOperations(_TimeIntervalSelector__OclAny);
			Fragments._TimeIntervalSelector__OclElement.initOperations(_TimeIntervalSelector__OclElement);
			Fragments._TimeIntervalSelector__TimeIntervalSelector.initOperations(_TimeIntervalSelector__TimeIntervalSelector);

			Fragments._TimeObservation__Fragment.initOperations(_TimeObservation__Fragment);
			Fragments._TimeObservation__Observation.initOperations(_TimeObservation__Observation);
			Fragments._TimeObservation__OclAny.initOperations(_TimeObservation__OclAny);
			Fragments._TimeObservation__OclElement.initOperations(_TimeObservation__OclElement);
			Fragments._TimeObservation__TimeObservation.initOperations(_TimeObservation__TimeObservation);

			Init.initEnd();
		}

		/**
		 * Force initialization of the fields of SequenceTables::FragmentOperations and all preceding sub-packages.
		 */
		public static void init() {}
	}

	/**
	 *	The lists of local properties for the local fragment of each type.
	 */
	public static class FragmentProperties {
		static {
			Init.initStart();
			FragmentOperations.init();
		}

		private static final /*@NonNull*/ ExecutorProperty /*@NonNull*/ [] _Actor = {
			SequenceTables.Properties._Actor__actorType,
			SequenceTables.Properties._Actor__deferred,
			SequenceTables.Properties._Actor__typeMapping
		};

		private static final /*@NonNull*/ ExecutorProperty /*@NonNull*/ [] _ActorClassifierMapping = {
			SequenceTables.Properties._ActorClassifierMapping__actor,
			SequenceTables.Properties._ActorClassifierMapping__classifier,
			SequenceTables.Properties._ActorClassifierMapping__classifierName
		};

		private static final /*@NonNull*/ ExecutorProperty /*@NonNull*/ [] _ActorType = {};

		private static final /*@NonNull*/ ExecutorProperty /*@NonNull*/ [] _Alternative = {
			SequenceTables.Properties._MultipleRegionContainer__regions
		};

		private static final /*@NonNull*/ ExecutorProperty /*@NonNull*/ [] _BiPointInTimeTimeIntervalSelector = {
			SequenceTables.Properties._BiPointInTimeTimeIntervalSelector__end,
			SequenceTables.Properties._BiPointInTimeTimeIntervalSelector__start
		};

		private static final /*@NonNull*/ ExecutorProperty /*@NonNull*/ [] _CoRegion = {
			SequenceTables.Properties._MultipleRegionContainer__regions
		};

		private static final /*@NonNull*/ ExecutorProperty /*@NonNull*/ [] _CombinedFragment = {};

		private static final /*@NonNull*/ ExecutorProperty /*@NonNull*/ [] _Condition = {
			SequenceTables.Properties._Condition__condition
		};

		private static final /*@NonNull*/ ExecutorProperty /*@NonNull*/ [] _Constraint = {};

		private static final /*@NonNull*/ ExecutorProperty /*@NonNull*/ [] _CreateMessage = {
			SequenceTables.Properties._Message__arrivalEvent,
			SequenceTables.Properties._Message__left,
			SequenceTables.Properties._Message__right,
			SequenceTables.Properties._Message__sendEvent
		};

		private static final /*@NonNull*/ ExecutorProperty /*@NonNull*/ [] _Critical = {
			SequenceTables.Properties._SingleRegionContainer__region
		};

		private static final /*@NonNull*/ ExecutorProperty /*@NonNull*/ [] _DestructionMessage = {
			SequenceTables.Properties._Message__arrivalEvent,
			SequenceTables.Properties._Message__left,
			SequenceTables.Properties._Message__right,
			SequenceTables.Properties._Message__sendEvent
		};

		private static final /*@NonNull*/ ExecutorProperty /*@NonNull*/ [] _DestructionOccurenceSpecification = {
			SequenceTables.Properties._DestructionOccurenceSpecification__target
		};

		private static final /*@NonNull*/ ExecutorProperty /*@NonNull*/ [] _DurationConstraint = {
			SequenceTables.Properties._DurationConstraint__duration,
			SequenceTables.Properties._DurationConstraint__interval
		};

		private static final /*@NonNull*/ ExecutorProperty /*@NonNull*/ [] _DurationObservation = {
			SequenceTables.Properties._DurationObservation__duration,
			SequenceTables.Properties._DurationObservation__interval
		};

		private static final /*@NonNull*/ ExecutorProperty /*@NonNull*/ [] _ExplicitArrivalOccurenceReference = {
			SequenceTables.Properties._ExplicitArrivalOccurenceReference__explicitOccurenceSpecification
		};

		private static final /*@NonNull*/ ExecutorProperty /*@NonNull*/ [] _ExplicitArrivalOccurenceSpecification = {
			SequenceTables.Properties._ExplicitArrivalOccurenceSpecification__explicitOccurenceReference
		};

		private static final /*@NonNull*/ ExecutorProperty /*@NonNull*/ [] _Fragment = {};

		private static final /*@NonNull*/ ExecutorProperty /*@NonNull*/ [] _FragmentSequence = {
			SequenceTables.Properties._FragmentSequence__fragments
		};

		private static final /*@NonNull*/ ExecutorProperty /*@NonNull*/ [] _FragmentTimeIntervalSelector = {
			SequenceTables.Properties._FragmentTimeIntervalSelector__nonInstantaneousFragment
		};

		private static final /*@NonNull*/ ExecutorProperty /*@NonNull*/ [] _ImplicitMessageOccurenceSpecification = {};

		private static final /*@NonNull*/ ExecutorProperty /*@NonNull*/ [] _Loop = {
			SequenceTables.Properties._SingleRegionContainer__region
		};

		private static final /*@NonNull*/ ExecutorProperty /*@NonNull*/ [] _Message = {
			SequenceTables.Properties._Message__arrivalEvent,
			SequenceTables.Properties._Message__left,
			SequenceTables.Properties._Message__right,
			SequenceTables.Properties._Message__sendEvent
		};

		private static final /*@NonNull*/ ExecutorProperty /*@NonNull*/ [] _MessageType = {};

		private static final /*@NonNull*/ ExecutorProperty /*@NonNull*/ [] _MultipleRegionContainer = {
			SequenceTables.Properties._MultipleRegionContainer__regions
		};

		private static final /*@NonNull*/ ExecutorProperty /*@NonNull*/ [] _NonInstantaneousFragment = {};

		private static final /*@NonNull*/ ExecutorProperty /*@NonNull*/ [] _Observation = {};

		private static final /*@NonNull*/ ExecutorProperty /*@NonNull*/ [] _OccurenceReference = {};

		private static final /*@NonNull*/ ExecutorProperty /*@NonNull*/ [] _OccurenceSpecification = {};

		private static final /*@NonNull*/ ExecutorProperty /*@NonNull*/ [] _Option = {
			SequenceTables.Properties._SingleRegionContainer__region
		};

		private static final /*@NonNull*/ ExecutorProperty /*@NonNull*/ [] _OrderedFragmentContainer = {
			SequenceTables.Properties._OrderedFragmentContainer__condition,
			SequenceTables.Properties._FragmentSequence__fragments
		};

		private static final /*@NonNull*/ ExecutorProperty /*@NonNull*/ [] _Parallel = {
			SequenceTables.Properties._MultipleRegionContainer__regions
		};

		private static final /*@NonNull*/ ExecutorProperty /*@NonNull*/ [] _PointInTime = {};

		private static final /*@NonNull*/ ExecutorProperty /*@NonNull*/ [] _PointInTimeSelector = {
			SequenceTables.Properties._PointInTimeSelector__pointInTime
		};

		private static final /*@NonNull*/ ExecutorProperty /*@NonNull*/ [] _Reference = {
			SequenceTables.Properties._Reference__reference
		};

		private static final /*@NonNull*/ ExecutorProperty /*@NonNull*/ [] _ResponseMessage = {
			SequenceTables.Properties._Message__arrivalEvent,
			SequenceTables.Properties._Message__left,
			SequenceTables.Properties._Message__right,
			SequenceTables.Properties._Message__sendEvent
		};

		private static final /*@NonNull*/ ExecutorProperty /*@NonNull*/ [] _RootPackage = {};

		private static final /*@NonNull*/ ExecutorProperty /*@NonNull*/ [] _SequenceDiagram = {
			SequenceTables.Properties._SequenceDiagram__actors,
			SequenceTables.Properties._FragmentSequence__fragments,
			SequenceTables.Properties._SequenceDiagram__rootPackage,
			SequenceTables.Properties._SequenceDiagram__title
		};

		private static final /*@NonNull*/ ExecutorProperty /*@NonNull*/ [] _SingleRegionContainer = {
			SequenceTables.Properties._SingleRegionContainer__region
		};

		private static final /*@NonNull*/ ExecutorProperty /*@NonNull*/ [] _StandardMessage = {
			SequenceTables.Properties._Message__arrivalEvent,
			SequenceTables.Properties._Message__left,
			SequenceTables.Properties._Message__right,
			SequenceTables.Properties._Message__sendEvent,
			SequenceTables.Properties._StandardMessage__type
		};

		private static final /*@NonNull*/ ExecutorProperty /*@NonNull*/ [] _TimeConstraint = {
			SequenceTables.Properties._TimeConstraint__event,
			SequenceTables.Properties._TimeConstraint__time
		};

		private static final /*@NonNull*/ ExecutorProperty /*@NonNull*/ [] _TimeIntervalSelector = {};

		private static final /*@NonNull*/ ExecutorProperty /*@NonNull*/ [] _TimeObservation = {
			SequenceTables.Properties._TimeObservation__event,
			SequenceTables.Properties._TimeObservation__time
		};

		/**
		 *	Install the property descriptors in the fragment descriptors.
		 */
		static {
			Fragments._Actor__Actor.initProperties(_Actor);
			Fragments._ActorClassifierMapping__ActorClassifierMapping.initProperties(_ActorClassifierMapping);
			Fragments._ActorType__ActorType.initProperties(_ActorType);
			Fragments._Alternative__Alternative.initProperties(_Alternative);
			Fragments._BiPointInTimeTimeIntervalSelector__BiPointInTimeTimeIntervalSelector.initProperties(_BiPointInTimeTimeIntervalSelector);
			Fragments._CoRegion__CoRegion.initProperties(_CoRegion);
			Fragments._CombinedFragment__CombinedFragment.initProperties(_CombinedFragment);
			Fragments._Condition__Condition.initProperties(_Condition);
			Fragments._Constraint__Constraint.initProperties(_Constraint);
			Fragments._CreateMessage__CreateMessage.initProperties(_CreateMessage);
			Fragments._Critical__Critical.initProperties(_Critical);
			Fragments._DestructionMessage__DestructionMessage.initProperties(_DestructionMessage);
			Fragments._DestructionOccurenceSpecification__DestructionOccurenceSpecification.initProperties(_DestructionOccurenceSpecification);
			Fragments._DurationConstraint__DurationConstraint.initProperties(_DurationConstraint);
			Fragments._DurationObservation__DurationObservation.initProperties(_DurationObservation);
			Fragments._ExplicitArrivalOccurenceReference__ExplicitArrivalOccurenceReference.initProperties(_ExplicitArrivalOccurenceReference);
			Fragments._ExplicitArrivalOccurenceSpecification__ExplicitArrivalOccurenceSpecification.initProperties(_ExplicitArrivalOccurenceSpecification);
			Fragments._Fragment__Fragment.initProperties(_Fragment);
			Fragments._FragmentSequence__FragmentSequence.initProperties(_FragmentSequence);
			Fragments._FragmentTimeIntervalSelector__FragmentTimeIntervalSelector.initProperties(_FragmentTimeIntervalSelector);
			Fragments._ImplicitMessageOccurenceSpecification__ImplicitMessageOccurenceSpecification.initProperties(_ImplicitMessageOccurenceSpecification);
			Fragments._Loop__Loop.initProperties(_Loop);
			Fragments._Message__Message.initProperties(_Message);
			Fragments._MessageType__MessageType.initProperties(_MessageType);
			Fragments._MultipleRegionContainer__MultipleRegionContainer.initProperties(_MultipleRegionContainer);
			Fragments._NonInstantaneousFragment__NonInstantaneousFragment.initProperties(_NonInstantaneousFragment);
			Fragments._Observation__Observation.initProperties(_Observation);
			Fragments._OccurenceReference__OccurenceReference.initProperties(_OccurenceReference);
			Fragments._OccurenceSpecification__OccurenceSpecification.initProperties(_OccurenceSpecification);
			Fragments._Option__Option.initProperties(_Option);
			Fragments._OrderedFragmentContainer__OrderedFragmentContainer.initProperties(_OrderedFragmentContainer);
			Fragments._Parallel__Parallel.initProperties(_Parallel);
			Fragments._PointInTime__PointInTime.initProperties(_PointInTime);
			Fragments._PointInTimeSelector__PointInTimeSelector.initProperties(_PointInTimeSelector);
			Fragments._Reference__Reference.initProperties(_Reference);
			Fragments._ResponseMessage__ResponseMessage.initProperties(_ResponseMessage);
			Fragments._RootPackage__RootPackage.initProperties(_RootPackage);
			Fragments._SequenceDiagram__SequenceDiagram.initProperties(_SequenceDiagram);
			Fragments._SingleRegionContainer__SingleRegionContainer.initProperties(_SingleRegionContainer);
			Fragments._StandardMessage__StandardMessage.initProperties(_StandardMessage);
			Fragments._TimeConstraint__TimeConstraint.initProperties(_TimeConstraint);
			Fragments._TimeIntervalSelector__TimeIntervalSelector.initProperties(_TimeIntervalSelector);
			Fragments._TimeObservation__TimeObservation.initProperties(_TimeObservation);

			Init.initEnd();
		}

		/**
		 * Force initialization of the fields of SequenceTables::FragmentProperties and all preceding sub-packages.
		 */
		public static void init() {}
	}

	/**
	 *	The lists of enumeration literals for each enumeration.
	 */
	public static class EnumerationLiterals {
		static {
			Init.initStart();
			FragmentProperties.init();
		}

		public static final /*@NonNull*/ EcoreExecutorEnumerationLiteral _ActorType__HUMAN = new EcoreExecutorEnumerationLiteral(SequencePackage.Literals.ACTOR_TYPE.getEEnumLiteral("HUMAN"), Types._ActorType, 0);
		public static final /*@NonNull*/ EcoreExecutorEnumerationLiteral _ActorType__MACHINE = new EcoreExecutorEnumerationLiteral(SequencePackage.Literals.ACTOR_TYPE.getEEnumLiteral("MACHINE"), Types._ActorType, 1);
		private static final /*@NonNull*/ EcoreExecutorEnumerationLiteral /*@NonNull*/ [] _ActorType = {
			_ActorType__HUMAN,
			_ActorType__MACHINE
		};

		public static final /*@NonNull*/ EcoreExecutorEnumerationLiteral _MessageType__SYNC = new EcoreExecutorEnumerationLiteral(SequencePackage.Literals.MESSAGE_TYPE.getEEnumLiteral("SYNC"), Types._MessageType, 0);
		public static final /*@NonNull*/ EcoreExecutorEnumerationLiteral _MessageType__ASYNC = new EcoreExecutorEnumerationLiteral(SequencePackage.Literals.MESSAGE_TYPE.getEEnumLiteral("ASYNC"), Types._MessageType, 1);
		private static final /*@NonNull*/ EcoreExecutorEnumerationLiteral /*@NonNull*/ [] _MessageType = {
			_MessageType__SYNC,
			_MessageType__ASYNC
		};

		/**
		 *	Install the enumeration literals in the enumerations.
		 */
		static {
			Types._ActorType.initLiterals(_ActorType);
			Types._MessageType.initLiterals(_MessageType);

			Init.initEnd();
		}

		/**
		 * Force initialization of the fields of SequenceTables::EnumerationLiterals and all preceding sub-packages.
		 */
		public static void init() {}
	}

	/**
	 * The multiple packages above avoid problems with the Java 65536 byte limit but introduce a difficulty in ensuring that
	 * static construction occurs in the disciplined order of the packages when construction may start in any of the packages.
	 * The problem is resolved by ensuring that the static construction of each package first initializes its immediate predecessor.
	 * On completion of predecessor initialization, the residual packages are initialized by starting an initialization in the last package.
	 * This class maintains a count so that the various predecessors can distinguish whether they are the starting point and so
	 * ensure that residual construction occurs just once after all predecessors.
	 */
	private static class Init {
		/**
		 * Counter of nested static constructions. On return to zero residual construction starts. -ve once residual construction started.
		 */
		private static int initCount = 0;

		/**
		 * Invoked at the start of a static construction to defer residual cobstruction until primary constructions complete.
		 */
		private static void initStart() {
			if (initCount >= 0) {
				initCount++;
			}
		}

		/**
		 * Invoked at the end of a static construction to activate residual cobstruction once primary constructions complete.
		 */
		private static void initEnd() {
			if (initCount > 0) {
				if (--initCount == 0) {
					initCount = -1;
					EnumerationLiterals.init();
				}
			}
		}
	}

	static {
		Init.initEnd();
	}

	/*
	 * Force initialization of outer fields. Inner fields are lazily initialized.
	 */
	public static void init() {}
}
