/**
 * generated by Xtext 2.11.0
 */
package de.cooperateproject.modeling.textual.sequence.sequence.impl;

import de.cooperateproject.modeling.textual.common.metamodel.textualCommons.AliasedElement;
import de.cooperateproject.modeling.textual.common.metamodel.textualCommons.Comment;
import de.cooperateproject.modeling.textual.common.metamodel.textualCommons.Commentable;
import de.cooperateproject.modeling.textual.common.metamodel.textualCommons.NamedElement;
import de.cooperateproject.modeling.textual.common.metamodel.textualCommons.TextualCommonsPackage;

import de.cooperateproject.modeling.textual.common.metamodel.textualCommons.impl.UMLReferencingElementImpl;

import de.cooperateproject.modeling.textual.sequence.sequence.Actor;
import de.cooperateproject.modeling.textual.sequence.sequence.ActorClassifierMapping;
import de.cooperateproject.modeling.textual.sequence.sequence.ActorType;
import de.cooperateproject.modeling.textual.sequence.sequence.SequencePackage;

import java.util.Collection;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.util.InternalEList;

import org.eclipse.uml2.uml.Lifeline;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Actor</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link de.cooperateproject.modeling.textual.sequence.sequence.impl.ActorImpl#getName <em>Name</em>}</li>
 *   <li>{@link de.cooperateproject.modeling.textual.sequence.sequence.impl.ActorImpl#getAlias <em>Alias</em>}</li>
 *   <li>{@link de.cooperateproject.modeling.textual.sequence.sequence.impl.ActorImpl#getComments <em>Comments</em>}</li>
 *   <li>{@link de.cooperateproject.modeling.textual.sequence.sequence.impl.ActorImpl#isDeferred <em>Deferred</em>}</li>
 *   <li>{@link de.cooperateproject.modeling.textual.sequence.sequence.impl.ActorImpl#getTypeMapping <em>Type Mapping</em>}</li>
 *   <li>{@link de.cooperateproject.modeling.textual.sequence.sequence.impl.ActorImpl#getActorType <em>Actor Type</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ActorImpl extends UMLReferencingElementImpl<Lifeline> implements Actor {
    /**
     * The default value of the '{@link #getName() <em>Name</em>}' attribute.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see #getName()
     * @generated
     * @ordered
     */
    protected static final String NAME_EDEFAULT = null;

    /**
     * The default value of the '{@link #getAlias() <em>Alias</em>}' attribute.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see #getAlias()
     * @generated
     * @ordered
     */
    protected static final String ALIAS_EDEFAULT = null;

    /**
     * The default value of the '{@link #isDeferred() <em>Deferred</em>}' attribute.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see #isDeferred()
     * @generated
     * @ordered
     */
    protected static final boolean DEFERRED_EDEFAULT = false;

    /**
     * The default value of the '{@link #getActorType() <em>Actor Type</em>}' attribute.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see #getActorType()
     * @generated
     * @ordered
     */
    protected static final ActorType ACTOR_TYPE_EDEFAULT = ActorType.HUMAN;

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ActorImpl() {
        super();
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    protected EClass eStaticClass() {
        return SequencePackage.Literals.ACTOR;
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * This is specialized for the more specific type known in this context.
     * @generated
     */
    @Override
    public void setReferencedElement(Lifeline newReferencedElement) {
        super.setReferencedElement(newReferencedElement);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public String getName() {
        return (String)eDynamicGet(SequencePackage.ACTOR__NAME, TextualCommonsPackage.Literals.NAMED_ELEMENT__NAME, true, true);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void setName(String newName) {
        eDynamicSet(SequencePackage.ACTOR__NAME, TextualCommonsPackage.Literals.NAMED_ELEMENT__NAME, newName);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public String getAlias() {
        return (String)eDynamicGet(SequencePackage.ACTOR__ALIAS, TextualCommonsPackage.Literals.ALIASED_ELEMENT__ALIAS, true, true);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void setAlias(String newAlias) {
        eDynamicSet(SequencePackage.ACTOR__ALIAS, TextualCommonsPackage.Literals.ALIASED_ELEMENT__ALIAS, newAlias);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @SuppressWarnings("unchecked")
    public EList<Comment> getComments() {
        return (EList<Comment>)eDynamicGet(SequencePackage.ACTOR__COMMENTS, TextualCommonsPackage.Literals.COMMENTABLE__COMMENTS, true, true);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public boolean isDeferred() {
        return (Boolean)eDynamicGet(SequencePackage.ACTOR__DEFERRED, SequencePackage.Literals.ACTOR__DEFERRED, true, true);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void setDeferred(boolean newDeferred) {
        eDynamicSet(SequencePackage.ACTOR__DEFERRED, SequencePackage.Literals.ACTOR__DEFERRED, newDeferred);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public ActorClassifierMapping getTypeMapping() {
        return (ActorClassifierMapping)eDynamicGet(SequencePackage.ACTOR__TYPE_MAPPING, SequencePackage.Literals.ACTOR__TYPE_MAPPING, true, true);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public NotificationChain basicSetTypeMapping(ActorClassifierMapping newTypeMapping, NotificationChain msgs) {
        msgs = eDynamicInverseAdd((InternalEObject)newTypeMapping, SequencePackage.ACTOR__TYPE_MAPPING, msgs);
        return msgs;
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void setTypeMapping(ActorClassifierMapping newTypeMapping) {
        eDynamicSet(SequencePackage.ACTOR__TYPE_MAPPING, SequencePackage.Literals.ACTOR__TYPE_MAPPING, newTypeMapping);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public ActorType getActorType() {
        return (ActorType)eDynamicGet(SequencePackage.ACTOR__ACTOR_TYPE, SequencePackage.Literals.ACTOR__ACTOR_TYPE, true, true);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void setActorType(ActorType newActorType) {
        eDynamicSet(SequencePackage.ACTOR__ACTOR_TYPE, SequencePackage.Literals.ACTOR__ACTOR_TYPE, newActorType);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @SuppressWarnings("unchecked")
    @Override
    public NotificationChain eInverseAdd(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
        switch (featureID) {
            case SequencePackage.ACTOR__COMMENTS:
                return ((InternalEList<InternalEObject>)(InternalEList<?>)getComments()).basicAdd(otherEnd, msgs);
            case SequencePackage.ACTOR__TYPE_MAPPING:
                ActorClassifierMapping typeMapping = getTypeMapping();
                if (typeMapping != null)
                    msgs = ((InternalEObject)typeMapping).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SequencePackage.ACTOR__TYPE_MAPPING, null, msgs);
                return basicSetTypeMapping((ActorClassifierMapping)otherEnd, msgs);
        }
        return super.eInverseAdd(otherEnd, featureID, msgs);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
        switch (featureID) {
            case SequencePackage.ACTOR__COMMENTS:
                return ((InternalEList<?>)getComments()).basicRemove(otherEnd, msgs);
            case SequencePackage.ACTOR__TYPE_MAPPING:
                return basicSetTypeMapping(null, msgs);
        }
        return super.eInverseRemove(otherEnd, featureID, msgs);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Object eGet(int featureID, boolean resolve, boolean coreType) {
        switch (featureID) {
            case SequencePackage.ACTOR__NAME:
                return getName();
            case SequencePackage.ACTOR__ALIAS:
                return getAlias();
            case SequencePackage.ACTOR__COMMENTS:
                return getComments();
            case SequencePackage.ACTOR__DEFERRED:
                return isDeferred();
            case SequencePackage.ACTOR__TYPE_MAPPING:
                return getTypeMapping();
            case SequencePackage.ACTOR__ACTOR_TYPE:
                return getActorType();
        }
        return super.eGet(featureID, resolve, coreType);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @SuppressWarnings("unchecked")
    @Override
    public void eSet(int featureID, Object newValue) {
        switch (featureID) {
            case SequencePackage.ACTOR__NAME:
                setName((String)newValue);
                return;
            case SequencePackage.ACTOR__ALIAS:
                setAlias((String)newValue);
                return;
            case SequencePackage.ACTOR__COMMENTS:
                getComments().clear();
                getComments().addAll((Collection<? extends Comment>)newValue);
                return;
            case SequencePackage.ACTOR__DEFERRED:
                setDeferred((Boolean)newValue);
                return;
            case SequencePackage.ACTOR__TYPE_MAPPING:
                setTypeMapping((ActorClassifierMapping)newValue);
                return;
            case SequencePackage.ACTOR__ACTOR_TYPE:
                setActorType((ActorType)newValue);
                return;
        }
        super.eSet(featureID, newValue);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public void eUnset(int featureID) {
        switch (featureID) {
            case SequencePackage.ACTOR__NAME:
                setName(NAME_EDEFAULT);
                return;
            case SequencePackage.ACTOR__ALIAS:
                setAlias(ALIAS_EDEFAULT);
                return;
            case SequencePackage.ACTOR__COMMENTS:
                getComments().clear();
                return;
            case SequencePackage.ACTOR__DEFERRED:
                setDeferred(DEFERRED_EDEFAULT);
                return;
            case SequencePackage.ACTOR__TYPE_MAPPING:
                setTypeMapping((ActorClassifierMapping)null);
                return;
            case SequencePackage.ACTOR__ACTOR_TYPE:
                setActorType(ACTOR_TYPE_EDEFAULT);
                return;
        }
        super.eUnset(featureID);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public boolean eIsSet(int featureID) {
        switch (featureID) {
            case SequencePackage.ACTOR__NAME:
                return NAME_EDEFAULT == null ? getName() != null : !NAME_EDEFAULT.equals(getName());
            case SequencePackage.ACTOR__ALIAS:
                return ALIAS_EDEFAULT == null ? getAlias() != null : !ALIAS_EDEFAULT.equals(getAlias());
            case SequencePackage.ACTOR__COMMENTS:
                return !getComments().isEmpty();
            case SequencePackage.ACTOR__DEFERRED:
                return isDeferred() != DEFERRED_EDEFAULT;
            case SequencePackage.ACTOR__TYPE_MAPPING:
                return getTypeMapping() != null;
            case SequencePackage.ACTOR__ACTOR_TYPE:
                return getActorType() != ACTOR_TYPE_EDEFAULT;
        }
        return super.eIsSet(featureID);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public int eBaseStructuralFeatureID(int derivedFeatureID, Class<?> baseClass) {
        if (baseClass == NamedElement.class) {
            switch (derivedFeatureID) {
                case SequencePackage.ACTOR__NAME: return TextualCommonsPackage.NAMED_ELEMENT__NAME;
                default: return -1;
            }
        }
        if (baseClass == AliasedElement.class) {
            switch (derivedFeatureID) {
                case SequencePackage.ACTOR__ALIAS: return TextualCommonsPackage.ALIASED_ELEMENT__ALIAS;
                default: return -1;
            }
        }
        if (baseClass == Commentable.class) {
            switch (derivedFeatureID) {
                case SequencePackage.ACTOR__COMMENTS: return TextualCommonsPackage.COMMENTABLE__COMMENTS;
                default: return -1;
            }
        }
        return super.eBaseStructuralFeatureID(derivedFeatureID, baseClass);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public int eDerivedStructuralFeatureID(int baseFeatureID, Class<?> baseClass) {
        if (baseClass == NamedElement.class) {
            switch (baseFeatureID) {
                case TextualCommonsPackage.NAMED_ELEMENT__NAME: return SequencePackage.ACTOR__NAME;
                default: return -1;
            }
        }
        if (baseClass == AliasedElement.class) {
            switch (baseFeatureID) {
                case TextualCommonsPackage.ALIASED_ELEMENT__ALIAS: return SequencePackage.ACTOR__ALIAS;
                default: return -1;
            }
        }
        if (baseClass == Commentable.class) {
            switch (baseFeatureID) {
                case TextualCommonsPackage.COMMENTABLE__COMMENTS: return SequencePackage.ACTOR__COMMENTS;
                default: return -1;
            }
        }
        return super.eDerivedStructuralFeatureID(baseFeatureID, baseClass);
    }

} //ActorImpl
