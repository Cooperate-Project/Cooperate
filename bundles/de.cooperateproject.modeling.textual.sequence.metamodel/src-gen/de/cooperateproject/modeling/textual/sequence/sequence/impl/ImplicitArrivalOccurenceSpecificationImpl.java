/**
 * generated by Xtext 2.11.0
 */
package de.cooperateproject.modeling.textual.sequence.sequence.impl;

import de.cooperateproject.modeling.textual.sequence.sequence.ImplicitArrivalOccurenceSpecification;
import de.cooperateproject.modeling.textual.sequence.sequence.OccurenceReference;
import de.cooperateproject.modeling.textual.sequence.sequence.OccurenceSpecification;
import de.cooperateproject.modeling.textual.sequence.sequence.SequencePackage;

import java.lang.reflect.InvocationTargetException;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.uml2.uml.MessageOccurrenceSpecification;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Implicit Arrival Occurence Specification</b></em>'.
 * <!-- end-user-doc -->
 *
 * @generated
 */
public class ImplicitArrivalOccurenceSpecificationImpl extends OccurenceSpecificationImpl<MessageOccurrenceSpecification> implements ImplicitArrivalOccurenceSpecification {
    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ImplicitArrivalOccurenceSpecificationImpl() {
        super();
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    protected EClass eStaticClass() {
        return SequencePackage.Literals.IMPLICIT_ARRIVAL_OCCURENCE_SPECIFICATION;
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * This is specialized for the more specific type known in this context.
     * @generated
     */
    @Override
    public void setReferencedElement(MessageOccurrenceSpecification newReferencedElement) {
        super.setReferencedElement(newReferencedElement);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public OccurenceSpecification<MessageOccurrenceSpecification> getOccurenceSpecification() {
        return this;
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public int eDerivedOperationID(int baseOperationID, Class<?> baseClass) {
        if (baseClass == OccurenceReference.class) {
            switch (baseOperationID) {
                case SequencePackage.OCCURENCE_REFERENCE___GET_OCCURENCE_SPECIFICATION: return SequencePackage.IMPLICIT_ARRIVAL_OCCURENCE_SPECIFICATION___GET_OCCURENCE_SPECIFICATION;
                default: return -1;
            }
        }
        return super.eDerivedOperationID(baseOperationID, baseClass);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Object eInvoke(int operationID, EList<?> arguments) throws InvocationTargetException {
        switch (operationID) {
            case SequencePackage.IMPLICIT_ARRIVAL_OCCURENCE_SPECIFICATION___GET_OCCURENCE_SPECIFICATION:
                return getOccurenceSpecification();
        }
        return super.eInvoke(operationID, arguments);
    }

} //ImplicitArrivalOccurenceSpecificationImpl
