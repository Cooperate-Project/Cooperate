/**
 * generated by Xtext 2.11.0
 */
package de.cooperateproject.modeling.textual.sequence.sequence;

import java.util.Map;
import org.eclipse.emf.common.util.DiagnosticChain;


/**
 * <!-- begin-user-doc -->
 * A representation of the model object '<em><b>Response Message</b></em>'.
 * <!-- end-user-doc -->
 *
 *
 * @see de.cooperateproject.modeling.textual.sequence.sequence.SequencePackage#getResponseMessage()
 * @model annotation="http://www.eclipse.org/emf/2002/Ecore constraints='mustHaveCorrespondingMessage'"
 * @generated
 */
public interface ResponseMessage extends Message {

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @model kind="operation"
     *        annotation="http://www.eclipse.org/emf/2002/GenModel body='return de.cooperateproject.modeling.textual.sequence.sequence.util.SequenceUtils.getSynchronousMessageCorrespondingToResponse(this);'"
     * @generated
     */
    StandardMessage getCorrespondingRequest();

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='/**\n *\n * inv mustHaveCorrespondingMessage:\n *   let\n *     severity : Integer[1] = \'ResponseMessage::mustHaveCorrespondingMessage\'.getSeverity()\n *   in\n *     if severity &lt;= 0\n *     then true\n *     else\n *       let\n *         result : Types::Boolean[?] = not self.getCorrespondingRequest()\n *         -&gt;isEmpty()\n *       in\n *         \'ResponseMessage::mustHaveCorrespondingMessage\'.logDiagnostic(self, null, diagnostics, context, null, severity, result, 0)\n *     endif\n \052/\nfinal /*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.evaluation.Executor%&gt; executor = &lt;%org.eclipse.ocl.pivot.internal.utilities.PivotUtilInternal%&gt;.getExecutor(this);\nfinal /*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.values.IntegerValue%&gt; severity_0 = &lt;%org.eclipse.ocl.pivot.library.string.CGStringGetSeverityOperation%&gt;.INSTANCE.evaluate(executor, &lt;%de.cooperateproject.modeling.textual.sequence.sequence.SequenceTables%&gt;.STR_ResponseMessage_c_c_mustHaveCorrespondingMessage);\nfinal /*@NonInvalid\052/ boolean le = &lt;%org.eclipse.ocl.pivot.library.oclany.OclComparableLessThanEqualOperation%&gt;.INSTANCE.evaluate(executor, severity_0, &lt;%de.cooperateproject.modeling.textual.sequence.sequence.SequenceTables%&gt;.INT_0).booleanValue();\n/*@NonInvalid\052/ boolean symbol_0;\nif (le) {\n\tsymbol_0 = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.TRUE_VALUE;\n}\nelse {\n\tfinal /*@NonInvalid\052/ &lt;%de.cooperateproject.modeling.textual.sequence.sequence.StandardMessage%&gt; getCorrespondingRequest = this.getCorrespondingRequest();\n\tfinal /*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.values.SetValue%&gt; oclAsSet = &lt;%org.eclipse.ocl.pivot.library.oclany.OclAnyOclAsSetOperation%&gt;.INSTANCE.evaluate(executor, &lt;%de.cooperateproject.modeling.textual.sequence.sequence.SequenceTables%&gt;.SET_CLSSid_StandardMessage, getCorrespondingRequest);\n\tfinal /*@NonInvalid\052/ boolean isEmpty = &lt;%org.eclipse.ocl.pivot.library.collection.CollectionIsEmptyOperation%&gt;.INSTANCE.evaluate(oclAsSet).booleanValue();\n\tfinal /*@NonInvalid\052/ &lt;%java.lang.Boolean%&gt; result = &lt;%org.eclipse.ocl.pivot.library.logical.BooleanNotOperation%&gt;.INSTANCE.evaluate(isEmpty);\n\tfinal /*@NonInvalid\052/ boolean logDiagnostic = &lt;%org.eclipse.ocl.pivot.library.string.CGStringLogDiagnosticOperation%&gt;.INSTANCE.evaluate(executor, &lt;%org.eclipse.ocl.pivot.ids.TypeId%&gt;.BOOLEAN, &lt;%de.cooperateproject.modeling.textual.sequence.sequence.SequenceTables%&gt;.STR_ResponseMessage_c_c_mustHaveCorrespondingMessage, this, (Object)null, diagnostics, context, (Object)null, severity_0, result, &lt;%de.cooperateproject.modeling.textual.sequence.sequence.SequenceTables%&gt;.INT_0).booleanValue();\n\tsymbol_0 = logDiagnostic;\n}\nreturn Boolean.TRUE == symbol_0;'"
     * @generated
     */
    boolean mustHaveCorrespondingMessage(DiagnosticChain diagnostics, Map<Object, Object> context);
} // ResponseMessage
