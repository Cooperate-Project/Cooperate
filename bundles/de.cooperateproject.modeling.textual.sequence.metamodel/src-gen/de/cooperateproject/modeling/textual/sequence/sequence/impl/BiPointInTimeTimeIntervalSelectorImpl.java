/**
 * generated by Xtext 2.11.0
 */
package de.cooperateproject.modeling.textual.sequence.sequence.impl;

import de.cooperateproject.modeling.textual.sequence.sequence.BiPointInTimeTimeIntervalSelector;
import de.cooperateproject.modeling.textual.sequence.sequence.PointInTime;
import de.cooperateproject.modeling.textual.sequence.sequence.PointInTimeSelector;
import de.cooperateproject.modeling.textual.sequence.sequence.SequencePackage;
import de.cooperateproject.modeling.textual.sequence.sequence.TimeIntervalSelector;

import java.lang.reflect.InvocationTargetException;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Bi Point In Time Time Interval Selector</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link de.cooperateproject.modeling.textual.sequence.sequence.impl.BiPointInTimeTimeIntervalSelectorImpl#getStart <em>Start</em>}</li>
 *   <li>{@link de.cooperateproject.modeling.textual.sequence.sequence.impl.BiPointInTimeTimeIntervalSelectorImpl#getEnd <em>End</em>}</li>
 * </ul>
 *
 * @generated
 */
public class BiPointInTimeTimeIntervalSelectorImpl extends TimeIntervalSelectorImpl implements BiPointInTimeTimeIntervalSelector {
    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected BiPointInTimeTimeIntervalSelectorImpl() {
        super();
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    protected EClass eStaticClass() {
        return SequencePackage.Literals.BI_POINT_IN_TIME_TIME_INTERVAL_SELECTOR;
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public PointInTimeSelector getStart() {
        return (PointInTimeSelector)eDynamicGet(SequencePackage.BI_POINT_IN_TIME_TIME_INTERVAL_SELECTOR__START, SequencePackage.Literals.BI_POINT_IN_TIME_TIME_INTERVAL_SELECTOR__START, true, true);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public NotificationChain basicSetStart(PointInTimeSelector newStart, NotificationChain msgs) {
        msgs = eDynamicInverseAdd((InternalEObject)newStart, SequencePackage.BI_POINT_IN_TIME_TIME_INTERVAL_SELECTOR__START, msgs);
        return msgs;
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void setStart(PointInTimeSelector newStart) {
        eDynamicSet(SequencePackage.BI_POINT_IN_TIME_TIME_INTERVAL_SELECTOR__START, SequencePackage.Literals.BI_POINT_IN_TIME_TIME_INTERVAL_SELECTOR__START, newStart);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public PointInTimeSelector getEnd() {
        return (PointInTimeSelector)eDynamicGet(SequencePackage.BI_POINT_IN_TIME_TIME_INTERVAL_SELECTOR__END, SequencePackage.Literals.BI_POINT_IN_TIME_TIME_INTERVAL_SELECTOR__END, true, true);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public NotificationChain basicSetEnd(PointInTimeSelector newEnd, NotificationChain msgs) {
        msgs = eDynamicInverseAdd((InternalEObject)newEnd, SequencePackage.BI_POINT_IN_TIME_TIME_INTERVAL_SELECTOR__END, msgs);
        return msgs;
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void setEnd(PointInTimeSelector newEnd) {
        eDynamicSet(SequencePackage.BI_POINT_IN_TIME_TIME_INTERVAL_SELECTOR__END, SequencePackage.Literals.BI_POINT_IN_TIME_TIME_INTERVAL_SELECTOR__END, newEnd);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public PointInTime<?> getIntervalStart() {
        return this.getStart().getPointInTime();
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public PointInTime<?> getIntervalEnd() {
        return this.getEnd().getPointInTime();
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
        switch (featureID) {
            case SequencePackage.BI_POINT_IN_TIME_TIME_INTERVAL_SELECTOR__START:
                return basicSetStart(null, msgs);
            case SequencePackage.BI_POINT_IN_TIME_TIME_INTERVAL_SELECTOR__END:
                return basicSetEnd(null, msgs);
        }
        return super.eInverseRemove(otherEnd, featureID, msgs);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Object eGet(int featureID, boolean resolve, boolean coreType) {
        switch (featureID) {
            case SequencePackage.BI_POINT_IN_TIME_TIME_INTERVAL_SELECTOR__START:
                return getStart();
            case SequencePackage.BI_POINT_IN_TIME_TIME_INTERVAL_SELECTOR__END:
                return getEnd();
        }
        return super.eGet(featureID, resolve, coreType);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public void eSet(int featureID, Object newValue) {
        switch (featureID) {
            case SequencePackage.BI_POINT_IN_TIME_TIME_INTERVAL_SELECTOR__START:
                setStart((PointInTimeSelector)newValue);
                return;
            case SequencePackage.BI_POINT_IN_TIME_TIME_INTERVAL_SELECTOR__END:
                setEnd((PointInTimeSelector)newValue);
                return;
        }
        super.eSet(featureID, newValue);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public void eUnset(int featureID) {
        switch (featureID) {
            case SequencePackage.BI_POINT_IN_TIME_TIME_INTERVAL_SELECTOR__START:
                setStart((PointInTimeSelector)null);
                return;
            case SequencePackage.BI_POINT_IN_TIME_TIME_INTERVAL_SELECTOR__END:
                setEnd((PointInTimeSelector)null);
                return;
        }
        super.eUnset(featureID);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public boolean eIsSet(int featureID) {
        switch (featureID) {
            case SequencePackage.BI_POINT_IN_TIME_TIME_INTERVAL_SELECTOR__START:
                return getStart() != null;
            case SequencePackage.BI_POINT_IN_TIME_TIME_INTERVAL_SELECTOR__END:
                return getEnd() != null;
        }
        return super.eIsSet(featureID);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public int eDerivedOperationID(int baseOperationID, Class<?> baseClass) {
        if (baseClass == TimeIntervalSelector.class) {
            switch (baseOperationID) {
                case SequencePackage.TIME_INTERVAL_SELECTOR___GET_INTERVAL_START: return SequencePackage.BI_POINT_IN_TIME_TIME_INTERVAL_SELECTOR___GET_INTERVAL_START;
                case SequencePackage.TIME_INTERVAL_SELECTOR___GET_INTERVAL_END: return SequencePackage.BI_POINT_IN_TIME_TIME_INTERVAL_SELECTOR___GET_INTERVAL_END;
                default: return super.eDerivedOperationID(baseOperationID, baseClass);
            }
        }
        return super.eDerivedOperationID(baseOperationID, baseClass);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Object eInvoke(int operationID, EList<?> arguments) throws InvocationTargetException {
        switch (operationID) {
            case SequencePackage.BI_POINT_IN_TIME_TIME_INTERVAL_SELECTOR___GET_INTERVAL_START:
                return getIntervalStart();
            case SequencePackage.BI_POINT_IN_TIME_TIME_INTERVAL_SELECTOR___GET_INTERVAL_END:
                return getIntervalEnd();
        }
        return super.eInvoke(operationID, arguments);
    }

} //BiPointInTimeTimeIntervalSelectorImpl
