/**
 * generated by Xtext 2.11.0
 */
package de.cooperateproject.modeling.textual.sequence.sequence.impl;

import de.cooperateproject.modeling.textual.common.metamodel.textualCommons.impl.UMLReferencingElementImpl;

import de.cooperateproject.modeling.textual.sequence.sequence.Actor;
import de.cooperateproject.modeling.textual.sequence.sequence.ActorClassifierMapping;
import de.cooperateproject.modeling.textual.sequence.sequence.SequencePackage;

import org.eclipse.emf.common.notify.NotificationChain;
import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.InternalEObject;
import org.eclipse.uml2.uml.Classifier;
import org.eclipse.uml2.uml.Property;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Actor Classifier Mapping</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link de.cooperateproject.modeling.textual.sequence.sequence.impl.ActorClassifierMappingImpl#getClassifier <em>Classifier</em>}</li>
 *   <li>{@link de.cooperateproject.modeling.textual.sequence.sequence.impl.ActorClassifierMappingImpl#getActor <em>Actor</em>}</li>
 *   <li>{@link de.cooperateproject.modeling.textual.sequence.sequence.impl.ActorClassifierMappingImpl#getClassifierName <em>Classifier Name</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ActorClassifierMappingImpl extends UMLReferencingElementImpl<Property> implements ActorClassifierMapping {
    /**
     * The default value of the '{@link #getClassifierName() <em>Classifier Name</em>}' attribute.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see #getClassifierName()
     * @generated
     * @ordered
     */
    protected static final String CLASSIFIER_NAME_EDEFAULT = null;

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ActorClassifierMappingImpl() {
        super();
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    protected EClass eStaticClass() {
        return SequencePackage.Literals.ACTOR_CLASSIFIER_MAPPING;
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * This is specialized for the more specific type known in this context.
     * @generated
     */
    @Override
    public void setReferencedElement(Property newReferencedElement) {
        super.setReferencedElement(newReferencedElement);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public Classifier getClassifier() {
        return (Classifier)eDynamicGet(SequencePackage.ACTOR_CLASSIFIER_MAPPING__CLASSIFIER, SequencePackage.Literals.ACTOR_CLASSIFIER_MAPPING__CLASSIFIER, true, true);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public Classifier basicGetClassifier() {
        return (Classifier)eDynamicGet(SequencePackage.ACTOR_CLASSIFIER_MAPPING__CLASSIFIER, SequencePackage.Literals.ACTOR_CLASSIFIER_MAPPING__CLASSIFIER, false, true);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void setClassifier(Classifier newClassifier) {
        eDynamicSet(SequencePackage.ACTOR_CLASSIFIER_MAPPING__CLASSIFIER, SequencePackage.Literals.ACTOR_CLASSIFIER_MAPPING__CLASSIFIER, newClassifier);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public Actor getActor() {
        return (Actor)eDynamicGet(SequencePackage.ACTOR_CLASSIFIER_MAPPING__ACTOR, SequencePackage.Literals.ACTOR_CLASSIFIER_MAPPING__ACTOR, true, true);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public NotificationChain basicSetActor(Actor newActor, NotificationChain msgs) {
        msgs = eBasicSetContainer((InternalEObject)newActor, SequencePackage.ACTOR_CLASSIFIER_MAPPING__ACTOR, msgs);
        return msgs;
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void setActor(Actor newActor) {
        eDynamicSet(SequencePackage.ACTOR_CLASSIFIER_MAPPING__ACTOR, SequencePackage.Literals.ACTOR_CLASSIFIER_MAPPING__ACTOR, newActor);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public String getClassifierName() {
        return (String)eDynamicGet(SequencePackage.ACTOR_CLASSIFIER_MAPPING__CLASSIFIER_NAME, SequencePackage.Literals.ACTOR_CLASSIFIER_MAPPING__CLASSIFIER_NAME, true, true);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void setClassifierName(String newClassifierName) {
        eDynamicSet(SequencePackage.ACTOR_CLASSIFIER_MAPPING__CLASSIFIER_NAME, SequencePackage.Literals.ACTOR_CLASSIFIER_MAPPING__CLASSIFIER_NAME, newClassifierName);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public NotificationChain eInverseAdd(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
        switch (featureID) {
            case SequencePackage.ACTOR_CLASSIFIER_MAPPING__ACTOR:
                if (eInternalContainer() != null)
                    msgs = eBasicRemoveFromContainer(msgs);
                return basicSetActor((Actor)otherEnd, msgs);
        }
        return super.eInverseAdd(otherEnd, featureID, msgs);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
        switch (featureID) {
            case SequencePackage.ACTOR_CLASSIFIER_MAPPING__ACTOR:
                return basicSetActor(null, msgs);
        }
        return super.eInverseRemove(otherEnd, featureID, msgs);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public NotificationChain eBasicRemoveFromContainerFeature(NotificationChain msgs) {
        switch (eContainerFeatureID()) {
            case SequencePackage.ACTOR_CLASSIFIER_MAPPING__ACTOR:
                return eInternalContainer().eInverseRemove(this, SequencePackage.ACTOR__TYPE_MAPPING, Actor.class, msgs);
        }
        return super.eBasicRemoveFromContainerFeature(msgs);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Object eGet(int featureID, boolean resolve, boolean coreType) {
        switch (featureID) {
            case SequencePackage.ACTOR_CLASSIFIER_MAPPING__CLASSIFIER:
                if (resolve) return getClassifier();
                return basicGetClassifier();
            case SequencePackage.ACTOR_CLASSIFIER_MAPPING__ACTOR:
                return getActor();
            case SequencePackage.ACTOR_CLASSIFIER_MAPPING__CLASSIFIER_NAME:
                return getClassifierName();
        }
        return super.eGet(featureID, resolve, coreType);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public void eSet(int featureID, Object newValue) {
        switch (featureID) {
            case SequencePackage.ACTOR_CLASSIFIER_MAPPING__CLASSIFIER:
                setClassifier((Classifier)newValue);
                return;
            case SequencePackage.ACTOR_CLASSIFIER_MAPPING__ACTOR:
                setActor((Actor)newValue);
                return;
            case SequencePackage.ACTOR_CLASSIFIER_MAPPING__CLASSIFIER_NAME:
                setClassifierName((String)newValue);
                return;
        }
        super.eSet(featureID, newValue);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public void eUnset(int featureID) {
        switch (featureID) {
            case SequencePackage.ACTOR_CLASSIFIER_MAPPING__CLASSIFIER:
                setClassifier((Classifier)null);
                return;
            case SequencePackage.ACTOR_CLASSIFIER_MAPPING__ACTOR:
                setActor((Actor)null);
                return;
            case SequencePackage.ACTOR_CLASSIFIER_MAPPING__CLASSIFIER_NAME:
                setClassifierName(CLASSIFIER_NAME_EDEFAULT);
                return;
        }
        super.eUnset(featureID);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public boolean eIsSet(int featureID) {
        switch (featureID) {
            case SequencePackage.ACTOR_CLASSIFIER_MAPPING__CLASSIFIER:
                return basicGetClassifier() != null;
            case SequencePackage.ACTOR_CLASSIFIER_MAPPING__ACTOR:
                return getActor() != null;
            case SequencePackage.ACTOR_CLASSIFIER_MAPPING__CLASSIFIER_NAME:
                return CLASSIFIER_NAME_EDEFAULT == null ? getClassifierName() != null : !CLASSIFIER_NAME_EDEFAULT.equals(getClassifierName());
        }
        return super.eIsSet(featureID);
    }

} //ActorClassifierMappingImpl
