/**
 * generated by Xtext 2.11.0
 */
package de.cooperateproject.modeling.textual.sequence.sequence.util;

import de.cooperateproject.modeling.textual.sequence.sequence.*;

import java.util.Map;
import org.eclipse.emf.common.util.DiagnosticChain;
import org.eclipse.emf.common.util.ResourceLocator;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.EObjectValidator;

/**
 * <!-- begin-user-doc -->
 * The <b>Validator</b> for the model.
 * <!-- end-user-doc -->
 * @see de.cooperateproject.modeling.textual.sequence.sequence.SequencePackage
 * @generated
 */
public class SequenceValidator extends EObjectValidator {
    /**
     * The cached model package
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public static final SequenceValidator INSTANCE = new SequenceValidator();

    /**
     * A constant for the {@link org.eclipse.emf.common.util.Diagnostic#getSource() source} of diagnostic {@link org.eclipse.emf.common.util.Diagnostic#getCode() codes} from this package.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.eclipse.emf.common.util.Diagnostic#getSource()
     * @see org.eclipse.emf.common.util.Diagnostic#getCode()
     * @generated
     */
    public static final String DIAGNOSTIC_SOURCE = "de.cooperateproject.modeling.textual.sequence.sequence";

    /**
     * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Must Have Corresponding Message' of 'Response Message'.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public static final int RESPONSE_MESSAGE__MUST_HAVE_CORRESPONDING_MESSAGE = 1;

    /**
     * A constant with a fixed name that can be used as the base value for additional hand written constants.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    private static final int GENERATED_DIAGNOSTIC_CODE_COUNT = 1;

    /**
     * A constant with a fixed name that can be used as the base value for additional hand written constants in a derived class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected static final int DIAGNOSTIC_CODE_COUNT = GENERATED_DIAGNOSTIC_CODE_COUNT;

    /**
     * Creates an instance of the switch.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public SequenceValidator() {
        super();
    }

    /**
     * Returns the package of this validator switch.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    protected EPackage getEPackage() {
      return SequencePackage.eINSTANCE;
    }

    /**
     * Calls <code>validateXXX</code> for the corresponding classifier of the model.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    protected boolean validate(int classifierID, Object value, DiagnosticChain diagnostics, Map<Object, Object> context) {
        switch (classifierID) {
            case SequencePackage.SEQUENCE_DIAGRAM:
                return validateSequenceDiagram((SequenceDiagram)value, diagnostics, context);
            case SequencePackage.ROOT_PACKAGE:
                return validateRootPackage((RootPackage)value, diagnostics, context);
            case SequencePackage.ACTOR:
                return validateActor((Actor)value, diagnostics, context);
            case SequencePackage.ACTOR_CLASSIFIER_MAPPING:
                return validateActorClassifierMapping((ActorClassifierMapping)value, diagnostics, context);
            case SequencePackage.FRAGMENT:
                return validateFragment((Fragment)value, diagnostics, context);
            case SequencePackage.FRAGMENT_SEQUENCE:
                return validateFragmentSequence((FragmentSequence)value, diagnostics, context);
            case SequencePackage.MESSAGE:
                return validateMessage((Message)value, diagnostics, context);
            case SequencePackage.STANDARD_MESSAGE:
                return validateStandardMessage((StandardMessage)value, diagnostics, context);
            case SequencePackage.RESPONSE_MESSAGE:
                return validateResponseMessage((ResponseMessage)value, diagnostics, context);
            case SequencePackage.CREATE_MESSAGE:
                return validateCreateMessage((CreateMessage)value, diagnostics, context);
            case SequencePackage.DESTRUCTION_MESSAGE:
                return validateDestructionMessage((DestructionMessage)value, diagnostics, context);
            case SequencePackage.OCCURENCE_SPECIFICATION:
                return validateOccurenceSpecification((OccurenceSpecification<?>)value, diagnostics, context);
            case SequencePackage.DESTRUCTION_OCCURENCE_SPECIFICATION:
                return validateDestructionOccurenceSpecification((DestructionOccurenceSpecification)value, diagnostics, context);
            case SequencePackage.COMBINED_FRAGMENT:
                return validateCombinedFragment((CombinedFragment)value, diagnostics, context);
            case SequencePackage.ORDERED_FRAGMENT_CONTAINER:
                return validateOrderedFragmentContainer((OrderedFragmentContainer)value, diagnostics, context);
            case SequencePackage.SINGLE_REGION_CONTAINER:
                return validateSingleRegionContainer((SingleRegionContainer)value, diagnostics, context);
            case SequencePackage.MULTIPLE_REGION_CONTAINER:
                return validateMultipleRegionContainer((MultipleRegionContainer)value, diagnostics, context);
            case SequencePackage.ALTERNATIVE:
                return validateAlternative((Alternative)value, diagnostics, context);
            case SequencePackage.OPTION:
                return validateOption((Option)value, diagnostics, context);
            case SequencePackage.CO_REGION:
                return validateCoRegion((CoRegion)value, diagnostics, context);
            case SequencePackage.PARALLEL:
                return validateParallel((Parallel)value, diagnostics, context);
            case SequencePackage.CRITICAL:
                return validateCritical((Critical)value, diagnostics, context);
            case SequencePackage.LOOP:
                return validateLoop((Loop)value, diagnostics, context);
            case SequencePackage.CONDITION:
                return validateCondition((Condition)value, diagnostics, context);
            case SequencePackage.OBSERVATION:
                return validateObservation((Observation)value, diagnostics, context);
            case SequencePackage.TIME_OBSERVATION:
                return validateTimeObservation((TimeObservation)value, diagnostics, context);
            case SequencePackage.DURATION_OBSERVATION:
                return validateDurationObservation((DurationObservation)value, diagnostics, context);
            case SequencePackage.CONSTRAINT:
                return validateConstraint((Constraint)value, diagnostics, context);
            case SequencePackage.TIME_CONSTRAINT:
                return validateTimeConstraint((TimeConstraint)value, diagnostics, context);
            case SequencePackage.DURATION_CONSTRAINT:
                return validateDurationConstraint((DurationConstraint)value, diagnostics, context);
            case SequencePackage.OCCURENCE_REFERENCE:
                return validateOccurenceReference((OccurenceReference<?>)value, diagnostics, context);
            case SequencePackage.EXPLICIT_ARRIVAL_OCCURENCE_REFERENCE:
                return validateExplicitArrivalOccurenceReference((ExplicitArrivalOccurenceReference)value, diagnostics, context);
            case SequencePackage.IMPLICIT_MESSAGE_OCCURENCE_SPECIFICATION:
                return validateImplicitMessageOccurenceSpecification((ImplicitMessageOccurenceSpecification)value, diagnostics, context);
            case SequencePackage.EXPLICIT_ARRIVAL_OCCURENCE_SPECIFICATION:
                return validateExplicitArrivalOccurenceSpecification((ExplicitArrivalOccurenceSpecification)value, diagnostics, context);
            case SequencePackage.POINT_IN_TIME:
                return validatePointInTime((PointInTime<?>)value, diagnostics, context);
            case SequencePackage.POINT_IN_TIME_SELECTOR:
                return validatePointInTimeSelector((PointInTimeSelector)value, diagnostics, context);
            case SequencePackage.TIME_INTERVAL_SELECTOR:
                return validateTimeIntervalSelector((TimeIntervalSelector)value, diagnostics, context);
            case SequencePackage.BI_POINT_IN_TIME_TIME_INTERVAL_SELECTOR:
                return validateBiPointInTimeTimeIntervalSelector((BiPointInTimeTimeIntervalSelector)value, diagnostics, context);
            case SequencePackage.FRAGMENT_TIME_INTERVAL_SELECTOR:
                return validateFragmentTimeIntervalSelector((FragmentTimeIntervalSelector)value, diagnostics, context);
            case SequencePackage.REFERENCE:
                return validateReference((Reference)value, diagnostics, context);
            case SequencePackage.NON_INSTANTANEOUS_FRAGMENT:
                return validateNonInstantaneousFragment((NonInstantaneousFragment<?>)value, diagnostics, context);
            case SequencePackage.MESSAGE_TYPE:
                return validateMessageType((MessageType)value, diagnostics, context);
            case SequencePackage.ACTOR_TYPE:
                return validateActorType((ActorType)value, diagnostics, context);
            default:
                return true;
        }
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public boolean validateSequenceDiagram(SequenceDiagram sequenceDiagram, DiagnosticChain diagnostics, Map<Object, Object> context) {
        return validate_EveryDefaultConstraint((EObject)sequenceDiagram, diagnostics, context);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public boolean validateRootPackage(RootPackage rootPackage, DiagnosticChain diagnostics, Map<Object, Object> context) {
        return validate_EveryDefaultConstraint((EObject)rootPackage, diagnostics, context);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public boolean validateActor(Actor actor, DiagnosticChain diagnostics, Map<Object, Object> context) {
        return validate_EveryDefaultConstraint((EObject)actor, diagnostics, context);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public boolean validateActorClassifierMapping(ActorClassifierMapping actorClassifierMapping, DiagnosticChain diagnostics, Map<Object, Object> context) {
        return validate_EveryDefaultConstraint((EObject)actorClassifierMapping, diagnostics, context);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public boolean validateFragment(Fragment fragment, DiagnosticChain diagnostics, Map<Object, Object> context) {
        return validate_EveryDefaultConstraint((EObject)fragment, diagnostics, context);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public boolean validateFragmentSequence(FragmentSequence fragmentSequence, DiagnosticChain diagnostics, Map<Object, Object> context) {
        return validate_EveryDefaultConstraint((EObject)fragmentSequence, diagnostics, context);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public boolean validateMessage(Message message, DiagnosticChain diagnostics, Map<Object, Object> context) {
        return validate_EveryDefaultConstraint((EObject)message, diagnostics, context);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public boolean validateStandardMessage(StandardMessage standardMessage, DiagnosticChain diagnostics, Map<Object, Object> context) {
        return validate_EveryDefaultConstraint((EObject)standardMessage, diagnostics, context);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public boolean validateResponseMessage(ResponseMessage responseMessage, DiagnosticChain diagnostics, Map<Object, Object> context) {
        if (!validate_NoCircularContainment((EObject)responseMessage, diagnostics, context)) return false;
        boolean result = validate_EveryMultiplicityConforms((EObject)responseMessage, diagnostics, context);
        if (result || diagnostics != null) result &= validate_EveryDataValueConforms((EObject)responseMessage, diagnostics, context);
        if (result || diagnostics != null) result &= validate_EveryReferenceIsContained((EObject)responseMessage, diagnostics, context);
        if (result || diagnostics != null) result &= validate_EveryBidirectionalReferenceIsPaired((EObject)responseMessage, diagnostics, context);
        if (result || diagnostics != null) result &= validate_EveryProxyResolves((EObject)responseMessage, diagnostics, context);
        if (result || diagnostics != null) result &= validate_UniqueID((EObject)responseMessage, diagnostics, context);
        if (result || diagnostics != null) result &= validate_EveryKeyUnique((EObject)responseMessage, diagnostics, context);
        if (result || diagnostics != null) result &= validate_EveryMapEntryUnique((EObject)responseMessage, diagnostics, context);
        if (result || diagnostics != null) result &= validateResponseMessage_mustHaveCorrespondingMessage(responseMessage, diagnostics, context);
        return result;
    }

    /**
     * Validates the mustHaveCorrespondingMessage constraint of '<em>Response Message</em>'.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public boolean validateResponseMessage_mustHaveCorrespondingMessage(ResponseMessage responseMessage, DiagnosticChain diagnostics, Map<Object, Object> context) {
        return responseMessage.mustHaveCorrespondingMessage(diagnostics, context);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public boolean validateCreateMessage(CreateMessage createMessage, DiagnosticChain diagnostics, Map<Object, Object> context) {
        return validate_EveryDefaultConstraint((EObject)createMessage, diagnostics, context);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public boolean validateDestructionMessage(DestructionMessage destructionMessage, DiagnosticChain diagnostics, Map<Object, Object> context) {
        return validate_EveryDefaultConstraint((EObject)destructionMessage, diagnostics, context);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public boolean validateOccurenceSpecification(OccurenceSpecification<?> occurenceSpecification, DiagnosticChain diagnostics, Map<Object, Object> context) {
        return validate_EveryDefaultConstraint((EObject)occurenceSpecification, diagnostics, context);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public boolean validateDestructionOccurenceSpecification(DestructionOccurenceSpecification destructionOccurenceSpecification, DiagnosticChain diagnostics, Map<Object, Object> context) {
        return validate_EveryDefaultConstraint((EObject)destructionOccurenceSpecification, diagnostics, context);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public boolean validateCombinedFragment(CombinedFragment combinedFragment, DiagnosticChain diagnostics, Map<Object, Object> context) {
        return validate_EveryDefaultConstraint((EObject)combinedFragment, diagnostics, context);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public boolean validateOrderedFragmentContainer(OrderedFragmentContainer orderedFragmentContainer, DiagnosticChain diagnostics, Map<Object, Object> context) {
        return validate_EveryDefaultConstraint((EObject)orderedFragmentContainer, diagnostics, context);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public boolean validateSingleRegionContainer(SingleRegionContainer singleRegionContainer, DiagnosticChain diagnostics, Map<Object, Object> context) {
        return validate_EveryDefaultConstraint((EObject)singleRegionContainer, diagnostics, context);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public boolean validateMultipleRegionContainer(MultipleRegionContainer multipleRegionContainer, DiagnosticChain diagnostics, Map<Object, Object> context) {
        return validate_EveryDefaultConstraint((EObject)multipleRegionContainer, diagnostics, context);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public boolean validateAlternative(Alternative alternative, DiagnosticChain diagnostics, Map<Object, Object> context) {
        return validate_EveryDefaultConstraint((EObject)alternative, diagnostics, context);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public boolean validateOption(Option option, DiagnosticChain diagnostics, Map<Object, Object> context) {
        return validate_EveryDefaultConstraint((EObject)option, diagnostics, context);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public boolean validateCoRegion(CoRegion coRegion, DiagnosticChain diagnostics, Map<Object, Object> context) {
        return validate_EveryDefaultConstraint((EObject)coRegion, diagnostics, context);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public boolean validateParallel(Parallel parallel, DiagnosticChain diagnostics, Map<Object, Object> context) {
        return validate_EveryDefaultConstraint((EObject)parallel, diagnostics, context);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public boolean validateCritical(Critical critical, DiagnosticChain diagnostics, Map<Object, Object> context) {
        return validate_EveryDefaultConstraint((EObject)critical, diagnostics, context);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public boolean validateLoop(Loop loop, DiagnosticChain diagnostics, Map<Object, Object> context) {
        return validate_EveryDefaultConstraint((EObject)loop, diagnostics, context);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public boolean validateCondition(Condition condition, DiagnosticChain diagnostics, Map<Object, Object> context) {
        return validate_EveryDefaultConstraint((EObject)condition, diagnostics, context);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public boolean validateObservation(Observation observation, DiagnosticChain diagnostics, Map<Object, Object> context) {
        return validate_EveryDefaultConstraint((EObject)observation, diagnostics, context);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public boolean validateTimeObservation(TimeObservation timeObservation, DiagnosticChain diagnostics, Map<Object, Object> context) {
        return validate_EveryDefaultConstraint((EObject)timeObservation, diagnostics, context);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public boolean validateDurationObservation(DurationObservation durationObservation, DiagnosticChain diagnostics, Map<Object, Object> context) {
        return validate_EveryDefaultConstraint((EObject)durationObservation, diagnostics, context);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public boolean validateConstraint(Constraint constraint, DiagnosticChain diagnostics, Map<Object, Object> context) {
        return validate_EveryDefaultConstraint((EObject)constraint, diagnostics, context);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public boolean validateTimeConstraint(TimeConstraint timeConstraint, DiagnosticChain diagnostics, Map<Object, Object> context) {
        return validate_EveryDefaultConstraint((EObject)timeConstraint, diagnostics, context);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public boolean validateDurationConstraint(DurationConstraint durationConstraint, DiagnosticChain diagnostics, Map<Object, Object> context) {
        return validate_EveryDefaultConstraint((EObject)durationConstraint, diagnostics, context);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public boolean validateOccurenceReference(OccurenceReference<?> occurenceReference, DiagnosticChain diagnostics, Map<Object, Object> context) {
        return validate_EveryDefaultConstraint((EObject)occurenceReference, diagnostics, context);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public boolean validateExplicitArrivalOccurenceReference(ExplicitArrivalOccurenceReference explicitArrivalOccurenceReference, DiagnosticChain diagnostics, Map<Object, Object> context) {
        return validate_EveryDefaultConstraint((EObject)explicitArrivalOccurenceReference, diagnostics, context);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public boolean validateImplicitMessageOccurenceSpecification(ImplicitMessageOccurenceSpecification implicitMessageOccurenceSpecification, DiagnosticChain diagnostics, Map<Object, Object> context) {
        return validate_EveryDefaultConstraint((EObject)implicitMessageOccurenceSpecification, diagnostics, context);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public boolean validateExplicitArrivalOccurenceSpecification(ExplicitArrivalOccurenceSpecification explicitArrivalOccurenceSpecification, DiagnosticChain diagnostics, Map<Object, Object> context) {
        return validate_EveryDefaultConstraint((EObject)explicitArrivalOccurenceSpecification, diagnostics, context);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public boolean validatePointInTime(PointInTime<?> pointInTime, DiagnosticChain diagnostics, Map<Object, Object> context) {
        return validate_EveryDefaultConstraint((EObject)pointInTime, diagnostics, context);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public boolean validatePointInTimeSelector(PointInTimeSelector pointInTimeSelector, DiagnosticChain diagnostics, Map<Object, Object> context) {
        return validate_EveryDefaultConstraint((EObject)pointInTimeSelector, diagnostics, context);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public boolean validateTimeIntervalSelector(TimeIntervalSelector timeIntervalSelector, DiagnosticChain diagnostics, Map<Object, Object> context) {
        return validate_EveryDefaultConstraint((EObject)timeIntervalSelector, diagnostics, context);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public boolean validateBiPointInTimeTimeIntervalSelector(BiPointInTimeTimeIntervalSelector biPointInTimeTimeIntervalSelector, DiagnosticChain diagnostics, Map<Object, Object> context) {
        return validate_EveryDefaultConstraint((EObject)biPointInTimeTimeIntervalSelector, diagnostics, context);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public boolean validateFragmentTimeIntervalSelector(FragmentTimeIntervalSelector fragmentTimeIntervalSelector, DiagnosticChain diagnostics, Map<Object, Object> context) {
        return validate_EveryDefaultConstraint((EObject)fragmentTimeIntervalSelector, diagnostics, context);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public boolean validateReference(Reference reference, DiagnosticChain diagnostics, Map<Object, Object> context) {
        return validate_EveryDefaultConstraint((EObject)reference, diagnostics, context);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public boolean validateNonInstantaneousFragment(NonInstantaneousFragment<?> nonInstantaneousFragment, DiagnosticChain diagnostics, Map<Object, Object> context) {
        return validate_EveryDefaultConstraint((EObject)nonInstantaneousFragment, diagnostics, context);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public boolean validateMessageType(MessageType messageType, DiagnosticChain diagnostics, Map<Object, Object> context) {
        return true;
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public boolean validateActorType(ActorType actorType, DiagnosticChain diagnostics, Map<Object, Object> context) {
        return true;
    }

    /**
     * Returns the resource locator that will be used to fetch messages for this validator's diagnostics.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public ResourceLocator getResourceLocator() {
        // TODO
        // Specialize this to return a resource locator for messages specific to this validator.
        // Ensure that you remove @generated or mark it @generated NOT
        return super.getResourceLocator();
    }

} //SequenceValidator
