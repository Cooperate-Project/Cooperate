/*
 * generated by Xtext 2.11.0
 */
package de.cooperateproject.modeling.textual.component.ide.contentassist.antlr;

import com.google.inject.Inject;
import de.cooperateproject.modeling.textual.component.ide.contentassist.antlr.internal.InternalComponentParser;
import de.cooperateproject.modeling.textual.component.services.ComponentGrammarAccess;
import java.util.HashMap;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class ComponentParser extends AbstractContentAssistParser {

	@Inject
	private ComponentGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalComponentParser createParser() {
		InternalComponentParser result = new InternalComponentParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getClassifierRelationAccess().getAlternatives(), "rule__ClassifierRelation__Alternatives");
					put(grammarAccess.getClassifierAccess().getAlternatives(), "rule__Classifier__Alternatives");
					put(grammarAccess.getInterfaceRelationAccess().getAlternatives(), "rule__InterfaceRelation__Alternatives");
					put(grammarAccess.getMemberAccess().getAlternatives(), "rule__Member__Alternatives");
					put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
					put(grammarAccess.getComponentAccess().getAlternatives_2(), "rule__Component__Alternatives_2");
					put(grammarAccess.getInterfaceAccess().getAlternatives_2(), "rule__Interface__Alternatives_2");
					put(grammarAccess.getInterfaceAccess().getAlternatives_3(), "rule__Interface__Alternatives_3");
					put(grammarAccess.getConnectorAccess().getAlternatives_1(), "rule__Connector__Alternatives_1");
					put(grammarAccess.getEBooleanAccess().getAlternatives(), "rule__EBoolean__Alternatives");
					put(grammarAccess.getVisibilityAccess().getAlternatives(), "rule__Visibility__Alternatives");
					put(grammarAccess.getComponentDiagramAccess().getGroup(), "rule__ComponentDiagram__Group__0");
					put(grammarAccess.getRootPackageAccess().getGroup(), "rule__RootPackage__Group__0");
					put(grammarAccess.getComponentAccess().getGroup(), "rule__Component__Group__0");
					put(grammarAccess.getComponentAccess().getGroup_2_0(), "rule__Component__Group_2_0__0");
					put(grammarAccess.getComponentAccess().getGroup_4(), "rule__Component__Group_4__0");
					put(grammarAccess.getGeneralizationAccess().getGroup(), "rule__Generalization__Group__0");
					put(grammarAccess.getAbstractionAccess().getGroup(), "rule__Abstraction__Group__0");
					put(grammarAccess.getManifestationAccess().getGroup(), "rule__Manifestation__Group__0");
					put(grammarAccess.getSubstitutionAccess().getGroup(), "rule__Substitution__Group__0");
					put(grammarAccess.getDependencyAccess().getGroup(), "rule__Dependency__Group__0");
					put(grammarAccess.getCommentAccess().getGroup(), "rule__Comment__Group__0");
					put(grammarAccess.getInterfaceAccess().getGroup(), "rule__Interface__Group__0");
					put(grammarAccess.getInterfaceAccess().getGroup_2_0(), "rule__Interface__Group_2_0__0");
					put(grammarAccess.getInterfaceAccess().getGroup_3_1(), "rule__Interface__Group_3_1__0");
					put(grammarAccess.getConnectorAccess().getGroup(), "rule__Connector__Group__0");
					put(grammarAccess.getConnectorAccess().getGroup_1_0(), "rule__Connector__Group_1_0__0");
					put(grammarAccess.getProvideAccess().getGroup(), "rule__Provide__Group__0");
					put(grammarAccess.getRequireAccess().getGroup(), "rule__Require__Group__0");
					put(grammarAccess.getMethodAccess().getGroup(), "rule__Method__Group__0");
					put(grammarAccess.getMethodAccess().getGroup_6(), "rule__Method__Group_6__0");
					put(grammarAccess.getMethodAccess().getGroup_6_1(), "rule__Method__Group_6_1__0");
					put(grammarAccess.getMethodAccess().getGroup_8(), "rule__Method__Group_8__0");
					put(grammarAccess.getAttributeAccess().getGroup(), "rule__Attribute__Group__0");
					put(grammarAccess.getParameterAccess().getGroup(), "rule__Parameter__Group__0");
					put(grammarAccess.getFQNAccess().getGroup(), "rule__FQN__Group__0");
					put(grammarAccess.getFQNAccess().getGroup_1(), "rule__FQN__Group_1__0");
					put(grammarAccess.getComponentDiagramAccess().getTitleAssignment_2(), "rule__ComponentDiagram__TitleAssignment_2");
					put(grammarAccess.getComponentDiagramAccess().getRootpackageAssignment_3(), "rule__ComponentDiagram__RootpackageAssignment_3");
					put(grammarAccess.getRootPackageAccess().getNameAssignment_2(), "rule__RootPackage__NameAssignment_2");
					put(grammarAccess.getRootPackageAccess().getRelationAssignment_3(), "rule__RootPackage__RelationAssignment_3");
					put(grammarAccess.getRootPackageAccess().getClassifierAssignment_4(), "rule__RootPackage__ClassifierAssignment_4");
					put(grammarAccess.getComponentAccess().getNameAssignment_2_0_0(), "rule__Component__NameAssignment_2_0_0");
					put(grammarAccess.getComponentAccess().getAliasAssignment_2_0_2(), "rule__Component__AliasAssignment_2_0_2");
					put(grammarAccess.getComponentAccess().getNameAssignment_2_1(), "rule__Component__NameAssignment_2_1");
					put(grammarAccess.getComponentAccess().getCommentsAssignment_4_0(), "rule__Component__CommentsAssignment_4_0");
					put(grammarAccess.getComponentAccess().getComponentAssignment_4_1(), "rule__Component__ComponentAssignment_4_1");
					put(grammarAccess.getComponentAccess().getPortAssignment_4_2(), "rule__Component__PortAssignment_4_2");
					put(grammarAccess.getComponentAccess().getInterfacerelationAssignment_4_3(), "rule__Component__InterfacerelationAssignment_4_3");
					put(grammarAccess.getComponentAccess().getInterfaceAssignment_4_4(), "rule__Component__InterfaceAssignment_4_4");
					put(grammarAccess.getGeneralizationAccess().getLeftclassifierAssignment_2(), "rule__Generalization__LeftclassifierAssignment_2");
					put(grammarAccess.getGeneralizationAccess().getRightclassifierAssignment_4(), "rule__Generalization__RightclassifierAssignment_4");
					put(grammarAccess.getAbstractionAccess().getLeftclassifierAssignment_2(), "rule__Abstraction__LeftclassifierAssignment_2");
					put(grammarAccess.getAbstractionAccess().getRightclassifierAssignment_4(), "rule__Abstraction__RightclassifierAssignment_4");
					put(grammarAccess.getManifestationAccess().getLeftclassifierAssignment_2(), "rule__Manifestation__LeftclassifierAssignment_2");
					put(grammarAccess.getManifestationAccess().getRightclassifierAssignment_4(), "rule__Manifestation__RightclassifierAssignment_4");
					put(grammarAccess.getSubstitutionAccess().getLeftclassifierAssignment_2(), "rule__Substitution__LeftclassifierAssignment_2");
					put(grammarAccess.getSubstitutionAccess().getRightclassifierAssignment_4(), "rule__Substitution__RightclassifierAssignment_4");
					put(grammarAccess.getDependencyAccess().getLeftclassifierAssignment_2(), "rule__Dependency__LeftclassifierAssignment_2");
					put(grammarAccess.getDependencyAccess().getRightclassifierAssignment_4(), "rule__Dependency__RightclassifierAssignment_4");
					put(grammarAccess.getCommentAccess().getBodyAssignment_1(), "rule__Comment__BodyAssignment_1");
					put(grammarAccess.getInterfaceAccess().getNameAssignment_2_0_0(), "rule__Interface__NameAssignment_2_0_0");
					put(grammarAccess.getInterfaceAccess().getAliasAssignment_2_0_2(), "rule__Interface__AliasAssignment_2_0_2");
					put(grammarAccess.getInterfaceAccess().getNameAssignment_2_1(), "rule__Interface__NameAssignment_2_1");
					put(grammarAccess.getInterfaceAccess().getCommentsAssignment_3_0(), "rule__Interface__CommentsAssignment_3_0");
					put(grammarAccess.getInterfaceAccess().getCommentsAssignment_3_1_1(), "rule__Interface__CommentsAssignment_3_1_1");
					put(grammarAccess.getInterfaceAccess().getMemberAssignment_3_1_2(), "rule__Interface__MemberAssignment_3_1_2");
					put(grammarAccess.getConnectorAccess().getNameAssignment_1_0_0(), "rule__Connector__NameAssignment_1_0_0");
					put(grammarAccess.getConnectorAccess().getAliasAssignment_1_0_2(), "rule__Connector__AliasAssignment_1_0_2");
					put(grammarAccess.getConnectorAccess().getNameAssignment_1_1(), "rule__Connector__NameAssignment_1_1");
					put(grammarAccess.getConnectorAccess().getLeftportAssignment_3(), "rule__Connector__LeftportAssignment_3");
					put(grammarAccess.getConnectorAccess().getRightportAssignment_5(), "rule__Connector__RightportAssignment_5");
					put(grammarAccess.getConnectorAccess().getInterfaceAssignment_7(), "rule__Connector__InterfaceAssignment_7");
					put(grammarAccess.getProvideAccess().getInterfaceAssignment_2(), "rule__Provide__InterfaceAssignment_2");
					put(grammarAccess.getRequireAccess().getInterfaceAssignment_2(), "rule__Require__InterfaceAssignment_2");
					put(grammarAccess.getMethodAccess().getVisibilityAssignment_1(), "rule__Method__VisibilityAssignment_1");
					put(grammarAccess.getMethodAccess().getAbstractAssignment_2(), "rule__Method__AbstractAssignment_2");
					put(grammarAccess.getMethodAccess().getStaticAssignment_3(), "rule__Method__StaticAssignment_3");
					put(grammarAccess.getMethodAccess().getNameAssignment_4(), "rule__Method__NameAssignment_4");
					put(grammarAccess.getMethodAccess().getParametersAssignment_6_0(), "rule__Method__ParametersAssignment_6_0");
					put(grammarAccess.getMethodAccess().getParametersAssignment_6_1_1(), "rule__Method__ParametersAssignment_6_1_1");
					put(grammarAccess.getMethodAccess().getTypeAssignment_8_1(), "rule__Method__TypeAssignment_8_1");
					put(grammarAccess.getAttributeAccess().getVisibilityAssignment_1(), "rule__Attribute__VisibilityAssignment_1");
					put(grammarAccess.getAttributeAccess().getStaticAssignment_2(), "rule__Attribute__StaticAssignment_2");
					put(grammarAccess.getAttributeAccess().getNameAssignment_3(), "rule__Attribute__NameAssignment_3");
					put(grammarAccess.getAttributeAccess().getTypeAssignment_5(), "rule__Attribute__TypeAssignment_5");
					put(grammarAccess.getParameterAccess().getVisibilityAssignment_0(), "rule__Parameter__VisibilityAssignment_0");
					put(grammarAccess.getParameterAccess().getStaticAssignment_1(), "rule__Parameter__StaticAssignment_1");
					put(grammarAccess.getParameterAccess().getNameAssignment_2(), "rule__Parameter__NameAssignment_2");
					put(grammarAccess.getParameterAccess().getTypeAssignment_4(), "rule__Parameter__TypeAssignment_4");
				}
			};
		}
		return nameMappings.get(element);
	}
			
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public ComponentGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(ComponentGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
