@Ecore(nsURI="http://www.cooperateproject.de/modeling/textual/cls/Cls")
@GenModel(rootExtendsClass="org.eclipse.emf.internal.cdo.CDOObjectImpl", rootExtendsInterface="org.eclipse.emf.cdo.CDOObject", providerRootExtendsClass="org.eclipse.emf.cdo.edit.CDOItemProviderAdapter",
	modelName="cls", modelDirectory="/de.cooperateproject.modeling.textual.cls.metamodel/src-gen", featureDelegation="Dynamic")
package de.cooperateproject.modeling.textual.cls.cls

import org.eclipse.emf.common.util.BasicDiagnostic
import org.eclipse.emf.ecore.EDiagnosticChain
import org.eclipse.emf.ecore.EMap
import org.eclipse.xtext.xbase.lib.CollectionLiterals

class ClassDiagram {
	contains PackageImport[] packageImports
	contains Classifier[] classifiers
	contains Connector[] connectors
}

class PackageImport {
	refers org.eclipse.uml2.uml.Package[1] ^package
}

abstract class TypeReference {
}

class DataTypeReference extends TypeReference {
	PrimitiveType[1] ^type
}

class ClassifierReference extends TypeReference, ClassifierAssociationEnd {
	refers Classifier[1] ^type
}

abstract class Classifier {
	Visibility visibility
	String[1] name
	String longName
	contains Member[] members
}

class Class extends Classifier {
	boolean ^abstract
}

class Interface extends Classifier {
}

abstract class Property {
	Visibility visibility
	String[1] name
	boolean ^static
	boolean ^final
	contains TypeReference ^type
}

abstract class Member extends Property {
}

class Attribute extends Member {
}

class Method extends Member {
	boolean ^abstract
	contains Parameter[] parameters
}

class Parameter extends Property {
}

abstract class Connector extends Commentable {
}

abstract class TypedConnector extends Connector {
	contains ClassifierAssociationEnd[1] left
	contains ClassifierAssociationEnd[1] right
}

class Association extends TypedConnector {
	contains AssociationProperties properties
}

interface AssociationEnd {
}

interface ClassifierAssociationEnd extends AssociationEnd {
}

class Generalization extends TypedConnector {
}

class Implementation extends TypedConnector {
}

@Ecore(constraints="hasComment")
class CommentLink extends Connector {
	contains ClassifierAssociationEnd[1] left
	op boolean hasComment(EDiagnosticChain diagnostics, EMap<Object, Object> context) {
		if (comment == null) {
			diagnostics.add(
				new BasicDiagnostic(BasicDiagnostic.ERROR, "hasComment", 1, "A comment link must have a comment.",
					CollectionLiterals.newArrayList(this, context).toArray));
			return false;
		}
		diagnostics.add(BasicDiagnostic.OK_INSTANCE);
		return true;
	}
}

class AssociationProperties {
	contains Cardinality cardinalityLeft
	contains Cardinality cardinalityRight
	ReadingDirection readingDirection
	String name
	contains Comment note
}

class Cardinality {
	int lowerBound
	int upperBound
}

abstract class Commentable {
	contains Comment comment
}

class Comment {
	String description
}

enum Visibility {
	DEFAULT
	PRIVATE
	, PROTECTED
	, PUBLIC
}

enum PrimitiveType {
	STRING
	, INT
	, DOUBLE
	, BOOLEAN
	, CHAR
	, BYTE
	, SHORT
	, LONG
	, FLOAT
}

enum ReadingDirection {
	LEFT
	, RIGHT
}