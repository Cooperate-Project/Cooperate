/*
 * generated by Xtext
 */
package de.cooperateproject.modeling.textual.cls.serializer;

import com.google.inject.Inject;
import de.cooperateproject.modeling.textual.cls.services.ClsGrammarAccess;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public class ClsSyntacticSequencer extends AbstractSyntacticSequencer {

	protected ClsGrammarAccess grammarAccess;
	protected AbstractElementAlias match_ClassDef_ClassKeyword_0_0_or_InterfaceKeyword_0_1;
	protected AbstractElementAlias match_ConnectorCardinalitiy_VerticalLineKeyword_4_0_q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (ClsGrammarAccess) access;
		match_ClassDef_ClassKeyword_0_0_or_InterfaceKeyword_0_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getClassDefAccess().getClassKeyword_0_0()), new TokenAlias(false, false, grammarAccess.getClassDefAccess().getInterfaceKeyword_0_1()));
		match_ConnectorCardinalitiy_VerticalLineKeyword_4_0_q = new TokenAlias(false, true, grammarAccess.getConnectorCardinalitiyAccess().getVerticalLineKeyword_4_0());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		return "";
	}
	
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_ClassDef_ClassKeyword_0_0_or_InterfaceKeyword_0_1.equals(syntax))
				emit_ClassDef_ClassKeyword_0_0_or_InterfaceKeyword_0_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ConnectorCardinalitiy_VerticalLineKeyword_4_0_q.equals(syntax))
				emit_ConnectorCardinalitiy_VerticalLineKeyword_4_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     'class' | 'interface'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) '{' classes+=ClassName
	 */
	protected void emit_ClassDef_ClassKeyword_0_0_or_InterfaceKeyword_0_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '|'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) '[' '|' (ambiguity) ']' (rule start)
	 *     left=Cardinality '|' (ambiguity) ']' (rule end)
	 *     right=Cardinality (ambiguity) ']' (rule end)
	 */
	protected void emit_ConnectorCardinalitiy_VerticalLineKeyword_4_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
