/*
 * generated by Xtext 2.10.0
 */
package de.cooperateproject.modeling.textual.cls.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class ClsGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ClassDiagramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.cls.Cls.ClassDiagram");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cClassDiagramAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cStartClsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTitleAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTitleSTRINGTerminalRuleCall_2_0 = (RuleCall)cTitleAssignment_2.eContents().get(0);
		private final Assignment cRootPackageAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRootPackageRootPackageParserRuleCall_3_0 = (RuleCall)cRootPackageAssignment_3.eContents().get(0);
		private final Keyword cEndClsKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//// ------------------------------------------------------------------------------------------
		//// ---------------------------------Root-----------------------------------------------------
		//// ------------------------------------------------------------------------------------------
		//ClassDiagram:
		//	{ClassDiagram}
		//	'@start-cls' title=STRING
		//	rootPackage=RootPackage
		//	'@end-cls';
		@Override public ParserRule getRule() { return rule; }
		
		//{ClassDiagram} '@start-cls' title=STRING rootPackage=RootPackage '@end-cls'
		public Group getGroup() { return cGroup; }
		
		//{ClassDiagram}
		public Action getClassDiagramAction_0() { return cClassDiagramAction_0; }
		
		//'@start-cls'
		public Keyword getStartClsKeyword_1() { return cStartClsKeyword_1; }
		
		//title=STRING
		public Assignment getTitleAssignment_2() { return cTitleAssignment_2; }
		
		//STRING
		public RuleCall getTitleSTRINGTerminalRuleCall_2_0() { return cTitleSTRINGTerminalRuleCall_2_0; }
		
		//rootPackage=RootPackage
		public Assignment getRootPackageAssignment_3() { return cRootPackageAssignment_3; }
		
		//RootPackage
		public RuleCall getRootPackageRootPackageParserRuleCall_3_0() { return cRootPackageRootPackageParserRuleCall_3_0; }
		
		//'@end-cls'
		public Keyword getEndClsKeyword_4() { return cEndClsKeyword_4; }
	}
	public class RootPackageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.cls.Cls.RootPackage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRootPackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameFQNParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cPackageImportsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPackageImportsPackageImportParserRuleCall_2_0 = (RuleCall)cPackageImportsAssignment_2.eContents().get(0);
		private final Assignment cClassifiersAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cClassifiersClassifierParserRuleCall_3_0 = (RuleCall)cClassifiersAssignment_3.eContents().get(0);
		private final Assignment cConnectorsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cConnectorsConnectorParserRuleCall_4_0 = (RuleCall)cConnectorsAssignment_4.eContents().get(0);
		private final Assignment cPackagesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cPackagesPackageParserRuleCall_5_0 = (RuleCall)cPackagesAssignment_5.eContents().get(0);
		
		//RootPackage Package:
		//	'rootPackage' name=FQN
		//	packageImports+=PackageImport*
		//	classifiers+=Classifier*
		//	connectors+=Connector*
		//	packages+=Package*
		@Override public ParserRule getRule() { return rule; }
		
		//'rootPackage' name=FQN packageImports+=PackageImport* classifiers+=Classifier* connectors+=Connector* packages+=Package*
		public Group getGroup() { return cGroup; }
		
		//'rootPackage'
		public Keyword getRootPackageKeyword_0() { return cRootPackageKeyword_0; }
		
		//name=FQN
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//FQN
		public RuleCall getNameFQNParserRuleCall_1_0() { return cNameFQNParserRuleCall_1_0; }
		
		//packageImports+=PackageImport*
		public Assignment getPackageImportsAssignment_2() { return cPackageImportsAssignment_2; }
		
		//PackageImport
		public RuleCall getPackageImportsPackageImportParserRuleCall_2_0() { return cPackageImportsPackageImportParserRuleCall_2_0; }
		
		//classifiers+=Classifier*
		public Assignment getClassifiersAssignment_3() { return cClassifiersAssignment_3; }
		
		//Classifier
		public RuleCall getClassifiersClassifierParserRuleCall_3_0() { return cClassifiersClassifierParserRuleCall_3_0; }
		
		//connectors+=Connector*
		public Assignment getConnectorsAssignment_4() { return cConnectorsAssignment_4; }
		
		//Connector
		public RuleCall getConnectorsConnectorParserRuleCall_4_0() { return cConnectorsConnectorParserRuleCall_4_0; }
		
		//packages+=Package*
		public Assignment getPackagesAssignment_5() { return cPackagesAssignment_5; }
		
		//Package
		public RuleCall getPackagesPackageParserRuleCall_5_0() { return cPackagesPackageParserRuleCall_5_0; }
	}
	public class PackageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.cls.Cls.Package");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameFQNParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPackageImportsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPackageImportsPackageImportParserRuleCall_3_0 = (RuleCall)cPackageImportsAssignment_3.eContents().get(0);
		private final Assignment cClassifiersAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cClassifiersClassifierParserRuleCall_4_0 = (RuleCall)cClassifiersAssignment_4.eContents().get(0);
		private final Assignment cConnectorsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cConnectorsConnectorParserRuleCall_5_0 = (RuleCall)cConnectorsAssignment_5.eContents().get(0);
		private final Assignment cPackagesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cPackagesPackageParserRuleCall_6_0 = (RuleCall)cPackagesAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Package:
		//	'package' name=FQN '{'
		//	packageImports+=PackageImport*
		//	classifiers+=Classifier*
		//	connectors+=Connector*
		//	packages+=Package*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'package' name=FQN '{' packageImports+=PackageImport* classifiers+=Classifier* connectors+=Connector* packages+=Package*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'package'
		public Keyword getPackageKeyword_0() { return cPackageKeyword_0; }
		
		//name=FQN
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//FQN
		public RuleCall getNameFQNParserRuleCall_1_0() { return cNameFQNParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//packageImports+=PackageImport*
		public Assignment getPackageImportsAssignment_3() { return cPackageImportsAssignment_3; }
		
		//PackageImport
		public RuleCall getPackageImportsPackageImportParserRuleCall_3_0() { return cPackageImportsPackageImportParserRuleCall_3_0; }
		
		//classifiers+=Classifier*
		public Assignment getClassifiersAssignment_4() { return cClassifiersAssignment_4; }
		
		//Classifier
		public RuleCall getClassifiersClassifierParserRuleCall_4_0() { return cClassifiersClassifierParserRuleCall_4_0; }
		
		//connectors+=Connector*
		public Assignment getConnectorsAssignment_5() { return cConnectorsAssignment_5; }
		
		//Connector
		public RuleCall getConnectorsConnectorParserRuleCall_5_0() { return cConnectorsConnectorParserRuleCall_5_0; }
		
		//packages+=Package*
		public Assignment getPackagesAssignment_6() { return cPackagesAssignment_6; }
		
		//Package
		public RuleCall getPackagesPackageParserRuleCall_6_0() { return cPackagesPackageParserRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class PackageImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.cls.Cls.PackageImport");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportedPackageAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportedPackageFQNParserRuleCall_1_0 = (RuleCall)cImportedPackageAssignment_1.eContents().get(0);
		
		//PackageImport commons::PackageImport:
		//	"import" importedPackage=FQN
		@Override public ParserRule getRule() { return rule; }
		
		//"import" importedPackage=FQN
		public Group getGroup() { return cGroup; }
		
		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }
		
		//importedPackage=FQN
		public Assignment getImportedPackageAssignment_1() { return cImportedPackageAssignment_1; }
		
		//FQN
		public RuleCall getImportedPackageFQNParserRuleCall_1_0() { return cImportedPackageFQNParserRuleCall_1_0; }
	}
	public class NameStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.cls.Cls.NameString");
		private final RuleCall cSTRINGTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//NameString:
		//	STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall() { return cSTRINGTerminalRuleCall; }
	}
	public class FQNElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.cls.Cls.FQN");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//FQN:
		//	ID ("." ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ("." ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	public class ClassifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.cls.Cls.Classifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cClassParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cInterfaceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// ------------------------------------------------------------------------------------------
		//// ---------------------------------Class Diagram--------------------------------------------
		//// ------------------------------------------------------------------------------------------
		//Classifier:
		//	Class | Interface;
		@Override public ParserRule getRule() { return rule; }
		
		//Class | Interface
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Class
		public RuleCall getClassParserRuleCall_0() { return cClassParserRuleCall_0; }
		
		//Interface
		public RuleCall getInterfaceParserRuleCall_1() { return cInterfaceParserRuleCall_1; }
	}
	public class ClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.cls.Cls.Class");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVisibilityAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVisibilityVisibilityEnumRuleCall_0_0 = (RuleCall)cVisibilityAssignment_0.eContents().get(0);
		private final Assignment cAbstractAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cAbstractAbstractKeyword_1_0 = (Keyword)cAbstractAssignment_1.eContents().get(0);
		private final Keyword cClassKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final Assignment cNameAssignment_3_0_0 = (Assignment)cGroup_3_0.eContents().get(0);
		private final RuleCall cNameSTRINGTerminalRuleCall_3_0_0_0 = (RuleCall)cNameAssignment_3_0_0.eContents().get(0);
		private final Keyword cAsKeyword_3_0_1 = (Keyword)cGroup_3_0.eContents().get(1);
		private final Assignment cAliasAssignment_3_0_2 = (Assignment)cGroup_3_0.eContents().get(2);
		private final RuleCall cAliasIDTerminalRuleCall_3_0_2_0 = (RuleCall)cAliasAssignment_3_0_2.eContents().get(0);
		private final Assignment cNameAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_3_1_0 = (RuleCall)cNameAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cMembersAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cMembersMemberParserRuleCall_4_1_0 = (RuleCall)cMembersAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		
		//Class:
		//	visibility=Visibility? abstract?='abstract'? 'class' (name=STRING 'as' alias=ID | name=ID) ('{' members+=Member*
		//	'}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//visibility=Visibility? abstract?='abstract'? 'class' (name=STRING 'as' alias=ID | name=ID) ('{' members+=Member* '}')?
		public Group getGroup() { return cGroup; }
		
		//visibility=Visibility?
		public Assignment getVisibilityAssignment_0() { return cVisibilityAssignment_0; }
		
		//Visibility
		public RuleCall getVisibilityVisibilityEnumRuleCall_0_0() { return cVisibilityVisibilityEnumRuleCall_0_0; }
		
		//abstract?='abstract'?
		public Assignment getAbstractAssignment_1() { return cAbstractAssignment_1; }
		
		//'abstract'
		public Keyword getAbstractAbstractKeyword_1_0() { return cAbstractAbstractKeyword_1_0; }
		
		//'class'
		public Keyword getClassKeyword_2() { return cClassKeyword_2; }
		
		//(name=STRING 'as' alias=ID | name=ID)
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//name=STRING 'as' alias=ID
		public Group getGroup_3_0() { return cGroup_3_0; }
		
		//name=STRING
		public Assignment getNameAssignment_3_0_0() { return cNameAssignment_3_0_0; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_3_0_0_0() { return cNameSTRINGTerminalRuleCall_3_0_0_0; }
		
		//'as'
		public Keyword getAsKeyword_3_0_1() { return cAsKeyword_3_0_1; }
		
		//alias=ID
		public Assignment getAliasAssignment_3_0_2() { return cAliasAssignment_3_0_2; }
		
		//ID
		public RuleCall getAliasIDTerminalRuleCall_3_0_2_0() { return cAliasIDTerminalRuleCall_3_0_2_0; }
		
		//name=ID
		public Assignment getNameAssignment_3_1() { return cNameAssignment_3_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_1_0() { return cNameIDTerminalRuleCall_3_1_0; }
		
		//('{' members+=Member* '}')?
		public Group getGroup_4() { return cGroup_4; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4_0() { return cLeftCurlyBracketKeyword_4_0; }
		
		//members+=Member*
		public Assignment getMembersAssignment_4_1() { return cMembersAssignment_4_1; }
		
		//Member
		public RuleCall getMembersMemberParserRuleCall_4_1_0() { return cMembersMemberParserRuleCall_4_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4_2() { return cRightCurlyBracketKeyword_4_2; }
	}
	public class InterfaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.cls.Cls.Interface");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVisibilityAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVisibilityVisibilityEnumRuleCall_0_0 = (RuleCall)cVisibilityAssignment_0.eContents().get(0);
		private final Keyword cInterfaceKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Assignment cNameAssignment_2_0_0 = (Assignment)cGroup_2_0.eContents().get(0);
		private final RuleCall cNameSTRINGTerminalRuleCall_2_0_0_0 = (RuleCall)cNameAssignment_2_0_0.eContents().get(0);
		private final Keyword cAsKeyword_2_0_1 = (Keyword)cGroup_2_0.eContents().get(1);
		private final Assignment cAliasAssignment_2_0_2 = (Assignment)cGroup_2_0.eContents().get(2);
		private final RuleCall cAliasIDTerminalRuleCall_2_0_2_0 = (RuleCall)cAliasAssignment_2_0_2.eContents().get(0);
		private final Assignment cNameAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_2_1_0 = (RuleCall)cNameAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cMembersAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cMembersMemberParserRuleCall_3_1_0 = (RuleCall)cMembersAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//Interface:
		//	visibility=Visibility? 'interface' (name=STRING 'as' alias=ID | name=ID) ('{' members+=Member* '}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//visibility=Visibility? 'interface' (name=STRING 'as' alias=ID | name=ID) ('{' members+=Member* '}')?
		public Group getGroup() { return cGroup; }
		
		//visibility=Visibility?
		public Assignment getVisibilityAssignment_0() { return cVisibilityAssignment_0; }
		
		//Visibility
		public RuleCall getVisibilityVisibilityEnumRuleCall_0_0() { return cVisibilityVisibilityEnumRuleCall_0_0; }
		
		//'interface'
		public Keyword getInterfaceKeyword_1() { return cInterfaceKeyword_1; }
		
		//(name=STRING 'as' alias=ID | name=ID)
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//name=STRING 'as' alias=ID
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//name=STRING
		public Assignment getNameAssignment_2_0_0() { return cNameAssignment_2_0_0; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_2_0_0_0() { return cNameSTRINGTerminalRuleCall_2_0_0_0; }
		
		//'as'
		public Keyword getAsKeyword_2_0_1() { return cAsKeyword_2_0_1; }
		
		//alias=ID
		public Assignment getAliasAssignment_2_0_2() { return cAliasAssignment_2_0_2; }
		
		//ID
		public RuleCall getAliasIDTerminalRuleCall_2_0_2_0() { return cAliasIDTerminalRuleCall_2_0_2_0; }
		
		//name=ID
		public Assignment getNameAssignment_2_1() { return cNameAssignment_2_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_1_0() { return cNameIDTerminalRuleCall_2_1_0; }
		
		//('{' members+=Member* '}')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3_0() { return cLeftCurlyBracketKeyword_3_0; }
		
		//members+=Member*
		public Assignment getMembersAssignment_3_1() { return cMembersAssignment_3_1; }
		
		//Member
		public RuleCall getMembersMemberParserRuleCall_3_1_0() { return cMembersMemberParserRuleCall_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3_2() { return cRightCurlyBracketKeyword_3_2; }
	}
	public class MemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.cls.Cls.Member");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAttributeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMethodParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Member:
		//	Attribute
		//	| Method;
		@Override public ParserRule getRule() { return rule; }
		
		//Attribute | Method
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Attribute
		public RuleCall getAttributeParserRuleCall_0() { return cAttributeParserRuleCall_0; }
		
		//Method
		public RuleCall getMethodParserRuleCall_1() { return cMethodParserRuleCall_1; }
	}
	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.cls.Cls.Attribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAttributeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cVisibilityAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVisibilityVisibilityEnumRuleCall_1_0 = (RuleCall)cVisibilityAssignment_1.eContents().get(0);
		private final Assignment cStaticAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cStaticStaticKeyword_2_0 = (Keyword)cStaticAssignment_2.eContents().get(0);
		private final Assignment cFinalAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cFinalFinalKeyword_3_0 = (Keyword)cFinalAssignment_3.eContents().get(0);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameIDTerminalRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final Keyword cColonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cTypeAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cTypeClassifierCrossReference_6_0 = (CrossReference)cTypeAssignment_6.eContents().get(0);
		private final RuleCall cTypeClassifierFQNParserRuleCall_6_0_1 = (RuleCall)cTypeClassifierCrossReference_6_0.eContents().get(1);
		
		//Attribute:
		//	{Attribute} visibility=Visibility?
		//	static?='static'?
		//	final?='final'?
		//	name=ID ':' type=[uml::Classifier|FQN];
		@Override public ParserRule getRule() { return rule; }
		
		//{Attribute} visibility=Visibility? static?='static'? final?='final'? name=ID ':' type=[uml::Classifier|FQN]
		public Group getGroup() { return cGroup; }
		
		//{Attribute}
		public Action getAttributeAction_0() { return cAttributeAction_0; }
		
		//visibility=Visibility?
		public Assignment getVisibilityAssignment_1() { return cVisibilityAssignment_1; }
		
		//Visibility
		public RuleCall getVisibilityVisibilityEnumRuleCall_1_0() { return cVisibilityVisibilityEnumRuleCall_1_0; }
		
		//static?='static'?
		public Assignment getStaticAssignment_2() { return cStaticAssignment_2; }
		
		//'static'
		public Keyword getStaticStaticKeyword_2_0() { return cStaticStaticKeyword_2_0; }
		
		//final?='final'?
		public Assignment getFinalAssignment_3() { return cFinalAssignment_3; }
		
		//'final'
		public Keyword getFinalFinalKeyword_3_0() { return cFinalFinalKeyword_3_0; }
		
		//name=ID
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_4_0() { return cNameIDTerminalRuleCall_4_0; }
		
		//':'
		public Keyword getColonKeyword_5() { return cColonKeyword_5; }
		
		//type=[uml::Classifier|FQN]
		public Assignment getTypeAssignment_6() { return cTypeAssignment_6; }
		
		//[uml::Classifier|FQN]
		public CrossReference getTypeClassifierCrossReference_6_0() { return cTypeClassifierCrossReference_6_0; }
		
		//FQN
		public RuleCall getTypeClassifierFQNParserRuleCall_6_0_1() { return cTypeClassifierFQNParserRuleCall_6_0_1; }
	}
	public class MethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.cls.Cls.Method");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVisibilityAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVisibilityVisibilityEnumRuleCall_0_0 = (RuleCall)cVisibilityAssignment_0.eContents().get(0);
		private final Assignment cAbstractAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cAbstractAbstractKeyword_1_0 = (Keyword)cAbstractAssignment_1.eContents().get(0);
		private final Assignment cStaticAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cStaticStaticKeyword_2_0 = (Keyword)cStaticAssignment_2.eContents().get(0);
		private final Assignment cFinalAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cFinalFinalKeyword_3_0 = (Keyword)cFinalAssignment_3.eContents().get(0);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameIDTerminalRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Assignment cParametersAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final RuleCall cParametersParameterParserRuleCall_6_0_0 = (RuleCall)cParametersAssignment_6_0.eContents().get(0);
		private final Group cGroup_6_1 = (Group)cGroup_6.eContents().get(1);
		private final Keyword cCommaKeyword_6_1_0 = (Keyword)cGroup_6_1.eContents().get(0);
		private final Assignment cParametersAssignment_6_1_1 = (Assignment)cGroup_6_1.eContents().get(1);
		private final RuleCall cParametersParameterParserRuleCall_6_1_1_0 = (RuleCall)cParametersAssignment_6_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cColonKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cTypeAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final CrossReference cTypeClassifierCrossReference_8_1_0 = (CrossReference)cTypeAssignment_8_1.eContents().get(0);
		private final RuleCall cTypeClassifierFQNParserRuleCall_8_1_0_1 = (RuleCall)cTypeClassifierCrossReference_8_1_0.eContents().get(1);
		
		//Method:
		//	visibility=Visibility?
		//	abstract?='abstract'?
		//	static?='static'?
		//	final?='final'?
		//	name=ID '(' (parameters+=Parameter (',' parameters+=Parameter)*)* ')' (':' type=[uml::Classifier|FQN])?;
		@Override public ParserRule getRule() { return rule; }
		
		//visibility=Visibility? abstract?='abstract'? static?='static'? final?='final'? name=ID '(' (parameters+=Parameter (','
		//parameters+=Parameter)*)* ')' (':' type=[uml::Classifier|FQN])?
		public Group getGroup() { return cGroup; }
		
		//visibility=Visibility?
		public Assignment getVisibilityAssignment_0() { return cVisibilityAssignment_0; }
		
		//Visibility
		public RuleCall getVisibilityVisibilityEnumRuleCall_0_0() { return cVisibilityVisibilityEnumRuleCall_0_0; }
		
		//abstract?='abstract'?
		public Assignment getAbstractAssignment_1() { return cAbstractAssignment_1; }
		
		//'abstract'
		public Keyword getAbstractAbstractKeyword_1_0() { return cAbstractAbstractKeyword_1_0; }
		
		//static?='static'?
		public Assignment getStaticAssignment_2() { return cStaticAssignment_2; }
		
		//'static'
		public Keyword getStaticStaticKeyword_2_0() { return cStaticStaticKeyword_2_0; }
		
		//final?='final'?
		public Assignment getFinalAssignment_3() { return cFinalAssignment_3; }
		
		//'final'
		public Keyword getFinalFinalKeyword_3_0() { return cFinalFinalKeyword_3_0; }
		
		//name=ID
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_4_0() { return cNameIDTerminalRuleCall_4_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_5() { return cLeftParenthesisKeyword_5; }
		
		//(parameters+=Parameter (',' parameters+=Parameter)*)*
		public Group getGroup_6() { return cGroup_6; }
		
		//parameters+=Parameter
		public Assignment getParametersAssignment_6_0() { return cParametersAssignment_6_0; }
		
		//Parameter
		public RuleCall getParametersParameterParserRuleCall_6_0_0() { return cParametersParameterParserRuleCall_6_0_0; }
		
		//(',' parameters+=Parameter)*
		public Group getGroup_6_1() { return cGroup_6_1; }
		
		//','
		public Keyword getCommaKeyword_6_1_0() { return cCommaKeyword_6_1_0; }
		
		//parameters+=Parameter
		public Assignment getParametersAssignment_6_1_1() { return cParametersAssignment_6_1_1; }
		
		//Parameter
		public RuleCall getParametersParameterParserRuleCall_6_1_1_0() { return cParametersParameterParserRuleCall_6_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
		
		//(':' type=[uml::Classifier|FQN])?
		public Group getGroup_8() { return cGroup_8; }
		
		//':'
		public Keyword getColonKeyword_8_0() { return cColonKeyword_8_0; }
		
		//type=[uml::Classifier|FQN]
		public Assignment getTypeAssignment_8_1() { return cTypeAssignment_8_1; }
		
		//[uml::Classifier|FQN]
		public CrossReference getTypeClassifierCrossReference_8_1_0() { return cTypeClassifierCrossReference_8_1_0; }
		
		//FQN
		public RuleCall getTypeClassifierFQNParserRuleCall_8_1_0_1() { return cTypeClassifierFQNParserRuleCall_8_1_0_1; }
	}
	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.cls.Cls.Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVisibilityAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVisibilityVisibilityEnumRuleCall_0_0 = (RuleCall)cVisibilityAssignment_0.eContents().get(0);
		private final Assignment cStaticAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cStaticStaticKeyword_1_0 = (Keyword)cStaticAssignment_1.eContents().get(0);
		private final Assignment cFinalAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cFinalFinalKeyword_2_0 = (Keyword)cFinalAssignment_2.eContents().get(0);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cTypeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cTypeClassifierCrossReference_5_0 = (CrossReference)cTypeAssignment_5.eContents().get(0);
		private final RuleCall cTypeClassifierFQNParserRuleCall_5_0_1 = (RuleCall)cTypeClassifierCrossReference_5_0.eContents().get(1);
		
		//Parameter:
		//	visibility=Visibility?
		//	static?='static'?
		//	final?='final'?
		//	name=ID ':' type=[uml::Classifier|FQN];
		@Override public ParserRule getRule() { return rule; }
		
		//visibility=Visibility? static?='static'? final?='final'? name=ID ':' type=[uml::Classifier|FQN]
		public Group getGroup() { return cGroup; }
		
		//visibility=Visibility?
		public Assignment getVisibilityAssignment_0() { return cVisibilityAssignment_0; }
		
		//Visibility
		public RuleCall getVisibilityVisibilityEnumRuleCall_0_0() { return cVisibilityVisibilityEnumRuleCall_0_0; }
		
		//static?='static'?
		public Assignment getStaticAssignment_1() { return cStaticAssignment_1; }
		
		//'static'
		public Keyword getStaticStaticKeyword_1_0() { return cStaticStaticKeyword_1_0; }
		
		//final?='final'?
		public Assignment getFinalAssignment_2() { return cFinalAssignment_2; }
		
		//'final'
		public Keyword getFinalFinalKeyword_2_0() { return cFinalFinalKeyword_2_0; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//':'
		public Keyword getColonKeyword_4() { return cColonKeyword_4; }
		
		//type=[uml::Classifier|FQN]
		public Assignment getTypeAssignment_5() { return cTypeAssignment_5; }
		
		//[uml::Classifier|FQN]
		public CrossReference getTypeClassifierCrossReference_5_0() { return cTypeClassifierCrossReference_5_0; }
		
		//FQN
		public RuleCall getTypeClassifierFQNParserRuleCall_5_0_1() { return cTypeClassifierFQNParserRuleCall_5_0_1; }
	}
	public class ConnectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.cls.Cls.Connector");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cGeneralizationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cXtextAssociationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cImplementationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cCommentLinkParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Connector:
		//	Generalization
		//	| XtextAssociation
		//	| Implementation
		//	| CommentLink;
		@Override public ParserRule getRule() { return rule; }
		
		//Generalization | XtextAssociation | Implementation | CommentLink
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Generalization
		public RuleCall getGeneralizationParserRuleCall_0() { return cGeneralizationParserRuleCall_0; }
		
		//XtextAssociation
		public RuleCall getXtextAssociationParserRuleCall_1() { return cXtextAssociationParserRuleCall_1; }
		
		//Implementation
		public RuleCall getImplementationParserRuleCall_2() { return cImplementationParserRuleCall_2; }
		
		//CommentLink
		public RuleCall getCommentLinkParserRuleCall_3() { return cCommentLinkParserRuleCall_3; }
	}
	public class GeneralizationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.cls.Cls.Generalization");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cLeftClassifierCrossReference_0_0 = (CrossReference)cLeftAssignment_0.eContents().get(0);
		private final RuleCall cLeftClassifierFQNParserRuleCall_0_0_1 = (RuleCall)cLeftClassifierCrossReference_0_0.eContents().get(1);
		private final Keyword cIsaKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRightAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cRightClassifierCrossReference_2_0 = (CrossReference)cRightAssignment_2.eContents().get(0);
		private final RuleCall cRightClassifierFQNParserRuleCall_2_0_1 = (RuleCall)cRightClassifierCrossReference_2_0.eContents().get(1);
		
		//Generalization:
		//	left=[Classifier|FQN] 'isa' right=[Classifier|FQN];
		@Override public ParserRule getRule() { return rule; }
		
		//left=[Classifier|FQN] 'isa' right=[Classifier|FQN]
		public Group getGroup() { return cGroup; }
		
		//left=[Classifier|FQN]
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }
		
		//[Classifier|FQN]
		public CrossReference getLeftClassifierCrossReference_0_0() { return cLeftClassifierCrossReference_0_0; }
		
		//FQN
		public RuleCall getLeftClassifierFQNParserRuleCall_0_0_1() { return cLeftClassifierFQNParserRuleCall_0_0_1; }
		
		//'isa'
		public Keyword getIsaKeyword_1() { return cIsaKeyword_1; }
		
		//right=[Classifier|FQN]
		public Assignment getRightAssignment_2() { return cRightAssignment_2; }
		
		//[Classifier|FQN]
		public CrossReference getRightClassifierCrossReference_2_0() { return cRightClassifierCrossReference_2_0; }
		
		//FQN
		public RuleCall getRightClassifierFQNParserRuleCall_2_0_1() { return cRightClassifierFQNParserRuleCall_2_0_1; }
	}
	public class ImplementationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.cls.Cls.Implementation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cLeftClassifierCrossReference_0_0 = (CrossReference)cLeftAssignment_0.eContents().get(0);
		private final RuleCall cLeftClassifierFQNParserRuleCall_0_0_1 = (RuleCall)cLeftClassifierCrossReference_0_0.eContents().get(1);
		private final Keyword cImplKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRightAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cRightClassifierCrossReference_2_0 = (CrossReference)cRightAssignment_2.eContents().get(0);
		private final RuleCall cRightClassifierFQNParserRuleCall_2_0_1 = (RuleCall)cRightClassifierCrossReference_2_0.eContents().get(1);
		
		//Implementation:
		//	left=[Classifier|FQN] 'impl' right=[Classifier|FQN];
		@Override public ParserRule getRule() { return rule; }
		
		//left=[Classifier|FQN] 'impl' right=[Classifier|FQN]
		public Group getGroup() { return cGroup; }
		
		//left=[Classifier|FQN]
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }
		
		//[Classifier|FQN]
		public CrossReference getLeftClassifierCrossReference_0_0() { return cLeftClassifierCrossReference_0_0; }
		
		//FQN
		public RuleCall getLeftClassifierFQNParserRuleCall_0_0_1() { return cLeftClassifierFQNParserRuleCall_0_0_1; }
		
		//'impl'
		public Keyword getImplKeyword_1() { return cImplKeyword_1; }
		
		//right=[Classifier|FQN]
		public Assignment getRightAssignment_2() { return cRightAssignment_2; }
		
		//[Classifier|FQN]
		public CrossReference getRightClassifierCrossReference_2_0() { return cRightClassifierCrossReference_2_0; }
		
		//FQN
		public RuleCall getRightClassifierFQNParserRuleCall_2_0_1() { return cRightClassifierFQNParserRuleCall_2_0_1; }
	}
	public class CommentLinkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.cls.Cls.CommentLink");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCommentedElementAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cCommentedElementClassifierCrossReference_0_0 = (CrossReference)cCommentedElementAssignment_0.eContents().get(0);
		private final RuleCall cCommentedElementClassifierFQNParserRuleCall_0_0_1 = (RuleCall)cCommentedElementClassifierCrossReference_0_0.eContents().get(1);
		private final Assignment cCommentsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCommentsCommentParserRuleCall_1_0 = (RuleCall)cCommentsAssignment_1.eContents().get(0);
		
		//CommentLink:
		//	commentedElement=[Classifier|FQN] comments+=Comment;
		@Override public ParserRule getRule() { return rule; }
		
		//commentedElement=[Classifier|FQN] comments+=Comment
		public Group getGroup() { return cGroup; }
		
		//commentedElement=[Classifier|FQN]
		public Assignment getCommentedElementAssignment_0() { return cCommentedElementAssignment_0; }
		
		//[Classifier|FQN]
		public CrossReference getCommentedElementClassifierCrossReference_0_0() { return cCommentedElementClassifierCrossReference_0_0; }
		
		//FQN
		public RuleCall getCommentedElementClassifierFQNParserRuleCall_0_0_1() { return cCommentedElementClassifierFQNParserRuleCall_0_0_1; }
		
		//comments+=Comment
		public Assignment getCommentsAssignment_1() { return cCommentsAssignment_1; }
		
		//Comment
		public RuleCall getCommentsCommentParserRuleCall_1_0() { return cCommentsCommentParserRuleCall_1_0; }
	}
	public class XtextAssociationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.cls.Cls.XtextAssociation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTwoSideBidirectionalityAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cTwoSideBidirectionalityBiKeyword_0_0 = (Keyword)cTwoSideBidirectionalityAssignment_0.eContents().get(0);
		private final Assignment cTwoSideAggregationKindAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTwoSideAggregationKindAggregationKindEnumRuleCall_1_0 = (RuleCall)cTwoSideAggregationKindAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cMemberEndTypesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cMemberEndTypesClassifierCrossReference_4_0 = (CrossReference)cMemberEndTypesAssignment_4.eContents().get(0);
		private final RuleCall cMemberEndTypesClassifierFQNParserRuleCall_4_0_1 = (RuleCall)cMemberEndTypesClassifierCrossReference_4_0.eContents().get(1);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cMemberEndTypesAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final CrossReference cMemberEndTypesClassifierCrossReference_5_1_0 = (CrossReference)cMemberEndTypesAssignment_5_1.eContents().get(0);
		private final RuleCall cMemberEndTypesClassifierFQNParserRuleCall_5_1_0_1 = (RuleCall)cMemberEndTypesClassifierCrossReference_5_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cRoleKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Assignment cMemberEndNamesAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final RuleCall cMemberEndNamesIDTerminalRuleCall_7_2_0 = (RuleCall)cMemberEndNamesAssignment_7_2.eContents().get(0);
		private final Group cGroup_7_3 = (Group)cGroup_7.eContents().get(3);
		private final Keyword cCommaKeyword_7_3_0 = (Keyword)cGroup_7_3.eContents().get(0);
		private final Assignment cMemberEndNamesAssignment_7_3_1 = (Assignment)cGroup_7_3.eContents().get(1);
		private final RuleCall cMemberEndNamesIDTerminalRuleCall_7_3_1_0 = (RuleCall)cMemberEndNamesAssignment_7_3_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_7_4 = (Keyword)cGroup_7.eContents().get(4);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cCardKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		private final Assignment cMemberEndCardinalitiesAssignment_8_2 = (Assignment)cGroup_8.eContents().get(2);
		private final RuleCall cMemberEndCardinalitiesCardinalityParserRuleCall_8_2_0 = (RuleCall)cMemberEndCardinalitiesAssignment_8_2.eContents().get(0);
		private final Group cGroup_8_3 = (Group)cGroup_8.eContents().get(3);
		private final Keyword cColonKeyword_8_3_0 = (Keyword)cGroup_8_3.eContents().get(0);
		private final Assignment cMemberEndCardinalitiesAssignment_8_3_1 = (Assignment)cGroup_8_3.eContents().get(1);
		private final RuleCall cMemberEndCardinalitiesCardinalityParserRuleCall_8_3_1_0 = (RuleCall)cMemberEndCardinalitiesAssignment_8_3_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_8_4 = (Keyword)cGroup_8.eContents().get(4);
		private final Assignment cCommentsAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cCommentsCommentParserRuleCall_9_0 = (RuleCall)cCommentsAssignment_9.eContents().get(0);
		
		//XtextAssociation:
		//	twoSideBidirectionality?='bi'? twoSideAggregationKind=AggregationKind
		//	name=ID '(' memberEndTypes+=[Classifier|FQN] (',' memberEndTypes+=[Classifier|FQN])* ')' ('role' '['
		//	memberEndNames+=ID (',' memberEndNames+=ID)* ']')? ('card' '[' memberEndCardinalities+=Cardinality (':'
		//	memberEndCardinalities+=Cardinality)* ']')?
		//	comments+=Comment?;
		@Override public ParserRule getRule() { return rule; }
		
		//twoSideBidirectionality?='bi'? twoSideAggregationKind=AggregationKind name=ID '(' memberEndTypes+=[Classifier|FQN] (','
		//memberEndTypes+=[Classifier|FQN])* ')' ('role' '[' memberEndNames+=ID (',' memberEndNames+=ID)* ']')? ('card' '['
		//memberEndCardinalities+=Cardinality (':' memberEndCardinalities+=Cardinality)* ']')? comments+=Comment?
		public Group getGroup() { return cGroup; }
		
		//twoSideBidirectionality?='bi'?
		public Assignment getTwoSideBidirectionalityAssignment_0() { return cTwoSideBidirectionalityAssignment_0; }
		
		//'bi'
		public Keyword getTwoSideBidirectionalityBiKeyword_0_0() { return cTwoSideBidirectionalityBiKeyword_0_0; }
		
		//twoSideAggregationKind=AggregationKind
		public Assignment getTwoSideAggregationKindAssignment_1() { return cTwoSideAggregationKindAssignment_1; }
		
		//AggregationKind
		public RuleCall getTwoSideAggregationKindAggregationKindEnumRuleCall_1_0() { return cTwoSideAggregationKindAggregationKindEnumRuleCall_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//memberEndTypes+=[Classifier|FQN]
		public Assignment getMemberEndTypesAssignment_4() { return cMemberEndTypesAssignment_4; }
		
		//[Classifier|FQN]
		public CrossReference getMemberEndTypesClassifierCrossReference_4_0() { return cMemberEndTypesClassifierCrossReference_4_0; }
		
		//FQN
		public RuleCall getMemberEndTypesClassifierFQNParserRuleCall_4_0_1() { return cMemberEndTypesClassifierFQNParserRuleCall_4_0_1; }
		
		//(',' memberEndTypes+=[Classifier|FQN])*
		public Group getGroup_5() { return cGroup_5; }
		
		//','
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//memberEndTypes+=[Classifier|FQN]
		public Assignment getMemberEndTypesAssignment_5_1() { return cMemberEndTypesAssignment_5_1; }
		
		//[Classifier|FQN]
		public CrossReference getMemberEndTypesClassifierCrossReference_5_1_0() { return cMemberEndTypesClassifierCrossReference_5_1_0; }
		
		//FQN
		public RuleCall getMemberEndTypesClassifierFQNParserRuleCall_5_1_0_1() { return cMemberEndTypesClassifierFQNParserRuleCall_5_1_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
		
		//('role' '[' memberEndNames+=ID (',' memberEndNames+=ID)* ']')?
		public Group getGroup_7() { return cGroup_7; }
		
		//'role'
		public Keyword getRoleKeyword_7_0() { return cRoleKeyword_7_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_7_1() { return cLeftSquareBracketKeyword_7_1; }
		
		//memberEndNames+=ID
		public Assignment getMemberEndNamesAssignment_7_2() { return cMemberEndNamesAssignment_7_2; }
		
		//ID
		public RuleCall getMemberEndNamesIDTerminalRuleCall_7_2_0() { return cMemberEndNamesIDTerminalRuleCall_7_2_0; }
		
		//(',' memberEndNames+=ID)*
		public Group getGroup_7_3() { return cGroup_7_3; }
		
		//','
		public Keyword getCommaKeyword_7_3_0() { return cCommaKeyword_7_3_0; }
		
		//memberEndNames+=ID
		public Assignment getMemberEndNamesAssignment_7_3_1() { return cMemberEndNamesAssignment_7_3_1; }
		
		//ID
		public RuleCall getMemberEndNamesIDTerminalRuleCall_7_3_1_0() { return cMemberEndNamesIDTerminalRuleCall_7_3_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_7_4() { return cRightSquareBracketKeyword_7_4; }
		
		//('card' '[' memberEndCardinalities+=Cardinality (':' memberEndCardinalities+=Cardinality)* ']')?
		public Group getGroup_8() { return cGroup_8; }
		
		//'card'
		public Keyword getCardKeyword_8_0() { return cCardKeyword_8_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_8_1() { return cLeftSquareBracketKeyword_8_1; }
		
		//memberEndCardinalities+=Cardinality
		public Assignment getMemberEndCardinalitiesAssignment_8_2() { return cMemberEndCardinalitiesAssignment_8_2; }
		
		//Cardinality
		public RuleCall getMemberEndCardinalitiesCardinalityParserRuleCall_8_2_0() { return cMemberEndCardinalitiesCardinalityParserRuleCall_8_2_0; }
		
		//(':' memberEndCardinalities+=Cardinality)*
		public Group getGroup_8_3() { return cGroup_8_3; }
		
		//':'
		public Keyword getColonKeyword_8_3_0() { return cColonKeyword_8_3_0; }
		
		//memberEndCardinalities+=Cardinality
		public Assignment getMemberEndCardinalitiesAssignment_8_3_1() { return cMemberEndCardinalitiesAssignment_8_3_1; }
		
		//Cardinality
		public RuleCall getMemberEndCardinalitiesCardinalityParserRuleCall_8_3_1_0() { return cMemberEndCardinalitiesCardinalityParserRuleCall_8_3_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_8_4() { return cRightSquareBracketKeyword_8_4; }
		
		//comments+=Comment?
		public Assignment getCommentsAssignment_9() { return cCommentsAssignment_9; }
		
		//Comment
		public RuleCall getCommentsCommentParserRuleCall_9_0() { return cCommentsCommentParserRuleCall_9_0; }
	}
	public class CommentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.cls.Cls.Comment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNoteKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cBodyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBodyCommentBodyParserRuleCall_1_0 = (RuleCall)cBodyAssignment_1.eContents().get(0);
		
		//Comment commons::Comment:
		//	'note' body=CommentBody
		@Override public ParserRule getRule() { return rule; }
		
		//'note' body=CommentBody
		public Group getGroup() { return cGroup; }
		
		//'note'
		public Keyword getNoteKeyword_0() { return cNoteKeyword_0; }
		
		//body=CommentBody
		public Assignment getBodyAssignment_1() { return cBodyAssignment_1; }
		
		//CommentBody
		public RuleCall getBodyCommentBodyParserRuleCall_1_0() { return cBodyCommentBodyParserRuleCall_1_0; }
	}
	public class CardinalityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.cls.Cls.Cardinality");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLowerBoundAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLowerBoundCardinalityBoundParserRuleCall_0_0 = (RuleCall)cLowerBoundAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cUpperBoundAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cUpperBoundCardinalityBoundParserRuleCall_1_1_0 = (RuleCall)cUpperBoundAssignment_1_1.eContents().get(0);
		
		//Cardinality commons::Cardinality:
		//	lowerBound=CardinalityBound ('..' upperBound=CardinalityBound)?
		@Override public ParserRule getRule() { return rule; }
		
		//lowerBound=CardinalityBound ('..' upperBound=CardinalityBound)?
		public Group getGroup() { return cGroup; }
		
		//lowerBound=CardinalityBound
		public Assignment getLowerBoundAssignment_0() { return cLowerBoundAssignment_0; }
		
		//CardinalityBound
		public RuleCall getLowerBoundCardinalityBoundParserRuleCall_0_0() { return cLowerBoundCardinalityBoundParserRuleCall_0_0; }
		
		//('..' upperBound=CardinalityBound)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'..'
		public Keyword getFullStopFullStopKeyword_1_0() { return cFullStopFullStopKeyword_1_0; }
		
		//upperBound=CardinalityBound
		public Assignment getUpperBoundAssignment_1_1() { return cUpperBoundAssignment_1_1; }
		
		//CardinalityBound
		public RuleCall getUpperBoundCardinalityBoundParserRuleCall_1_1_0() { return cUpperBoundCardinalityBoundParserRuleCall_1_1_0; }
	}
	public class CommentBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.cls.Cls.CommentBody");
		private final RuleCall cSTRINGTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//CommentBody:
		//	STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall() { return cSTRINGTerminalRuleCall; }
	}
	public class CardinalityBoundElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.cls.Cls.CardinalityBound");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAsteriskKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//CardinalityBound ecore::EInt:
		//	'*' | INT
		@Override public ParserRule getRule() { return rule; }
		
		//'*' | INT
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'*'
		public Keyword getAsteriskKeyword_0() { return cAsteriskKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	
	public class VisibilityElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.cls.Cls.Visibility");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPUBLICEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPUBLICPlusSignKeyword_0_0 = (Keyword)cPUBLICEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cPUBLICEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cPUBLICPublicKeyword_1_0 = (Keyword)cPUBLICEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cPRIVATEEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cPRIVATEHyphenMinusKeyword_2_0 = (Keyword)cPRIVATEEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cPRIVATEEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cPRIVATEPrivateKeyword_3_0 = (Keyword)cPRIVATEEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cPROTECTEDEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cPROTECTEDNumberSignKeyword_4_0 = (Keyword)cPROTECTEDEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cPROTECTEDEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cPROTECTEDProtectedKeyword_5_0 = (Keyword)cPROTECTEDEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cPACKAGEEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cPACKAGETildeKeyword_6_0 = (Keyword)cPACKAGEEnumLiteralDeclaration_6.eContents().get(0);
		
		//enum Visibility returns commons::Visibility:
		//	PUBLIC='+'
		//	| PUBLIC='public'
		//	| PRIVATE='-'
		//	| PRIVATE='private'
		//	| PROTECTED='#'
		//	| PROTECTED='protected'
		//	| PACKAGE='~';
		public EnumRule getRule() { return rule; }
		
		//PUBLIC='+' | PUBLIC='public' | PRIVATE='-' | PRIVATE='private' | PROTECTED='#' | PROTECTED='protected' | PACKAGE='~'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PUBLIC='+'
		public EnumLiteralDeclaration getPUBLICEnumLiteralDeclaration_0() { return cPUBLICEnumLiteralDeclaration_0; }
		
		//'+'
		public Keyword getPUBLICPlusSignKeyword_0_0() { return cPUBLICPlusSignKeyword_0_0; }
		
		//PUBLIC='public'
		public EnumLiteralDeclaration getPUBLICEnumLiteralDeclaration_1() { return cPUBLICEnumLiteralDeclaration_1; }
		
		//'public'
		public Keyword getPUBLICPublicKeyword_1_0() { return cPUBLICPublicKeyword_1_0; }
		
		//PRIVATE='-'
		public EnumLiteralDeclaration getPRIVATEEnumLiteralDeclaration_2() { return cPRIVATEEnumLiteralDeclaration_2; }
		
		//'-'
		public Keyword getPRIVATEHyphenMinusKeyword_2_0() { return cPRIVATEHyphenMinusKeyword_2_0; }
		
		//PRIVATE='private'
		public EnumLiteralDeclaration getPRIVATEEnumLiteralDeclaration_3() { return cPRIVATEEnumLiteralDeclaration_3; }
		
		//'private'
		public Keyword getPRIVATEPrivateKeyword_3_0() { return cPRIVATEPrivateKeyword_3_0; }
		
		//PROTECTED='#'
		public EnumLiteralDeclaration getPROTECTEDEnumLiteralDeclaration_4() { return cPROTECTEDEnumLiteralDeclaration_4; }
		
		//'#'
		public Keyword getPROTECTEDNumberSignKeyword_4_0() { return cPROTECTEDNumberSignKeyword_4_0; }
		
		//PROTECTED='protected'
		public EnumLiteralDeclaration getPROTECTEDEnumLiteralDeclaration_5() { return cPROTECTEDEnumLiteralDeclaration_5; }
		
		//'protected'
		public Keyword getPROTECTEDProtectedKeyword_5_0() { return cPROTECTEDProtectedKeyword_5_0; }
		
		//PACKAGE='~'
		public EnumLiteralDeclaration getPACKAGEEnumLiteralDeclaration_6() { return cPACKAGEEnumLiteralDeclaration_6; }
		
		//'~'
		public Keyword getPACKAGETildeKeyword_6_0() { return cPACKAGETildeKeyword_6_0; }
	}
	public class AggregationKindElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.cls.Cls.AggregationKind");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cNONEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cNONEAscKeyword_0_0 = (Keyword)cNONEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cAGGREGATIONEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cAGGREGATIONAggKeyword_1_0 = (Keyword)cAGGREGATIONEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cCOMPOSITIONEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cCOMPOSITIONComKeyword_2_0 = (Keyword)cCOMPOSITIONEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum AggregationKind:
		//	NONE='asc'
		//	| AGGREGATION='agg'
		//	| COMPOSITION='com';
		public EnumRule getRule() { return rule; }
		
		//NONE='asc' | AGGREGATION='agg' | COMPOSITION='com'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//NONE='asc'
		public EnumLiteralDeclaration getNONEEnumLiteralDeclaration_0() { return cNONEEnumLiteralDeclaration_0; }
		
		//'asc'
		public Keyword getNONEAscKeyword_0_0() { return cNONEAscKeyword_0_0; }
		
		//AGGREGATION='agg'
		public EnumLiteralDeclaration getAGGREGATIONEnumLiteralDeclaration_1() { return cAGGREGATIONEnumLiteralDeclaration_1; }
		
		//'agg'
		public Keyword getAGGREGATIONAggKeyword_1_0() { return cAGGREGATIONAggKeyword_1_0; }
		
		//COMPOSITION='com'
		public EnumLiteralDeclaration getCOMPOSITIONEnumLiteralDeclaration_2() { return cCOMPOSITIONEnumLiteralDeclaration_2; }
		
		//'com'
		public Keyword getCOMPOSITIONComKeyword_2_0() { return cCOMPOSITIONComKeyword_2_0; }
	}
	
	private final ClassDiagramElements pClassDiagram;
	private final RootPackageElements pRootPackage;
	private final PackageElements pPackage;
	private final PackageImportElements pPackageImport;
	private final NameStringElements pNameString;
	private final FQNElements pFQN;
	private final ClassifierElements pClassifier;
	private final ClassElements pClass;
	private final InterfaceElements pInterface;
	private final MemberElements pMember;
	private final AttributeElements pAttribute;
	private final MethodElements pMethod;
	private final ParameterElements pParameter;
	private final ConnectorElements pConnector;
	private final GeneralizationElements pGeneralization;
	private final ImplementationElements pImplementation;
	private final CommentLinkElements pCommentLink;
	private final XtextAssociationElements pXtextAssociation;
	private final CommentElements pComment;
	private final CardinalityElements pCardinality;
	private final CommentBodyElements pCommentBody;
	private final CardinalityBoundElements pCardinalityBound;
	private final VisibilityElements eVisibility;
	private final AggregationKindElements eAggregationKind;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public ClsGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pClassDiagram = new ClassDiagramElements();
		this.pRootPackage = new RootPackageElements();
		this.pPackage = new PackageElements();
		this.pPackageImport = new PackageImportElements();
		this.pNameString = new NameStringElements();
		this.pFQN = new FQNElements();
		this.pClassifier = new ClassifierElements();
		this.pClass = new ClassElements();
		this.pInterface = new InterfaceElements();
		this.pMember = new MemberElements();
		this.pAttribute = new AttributeElements();
		this.pMethod = new MethodElements();
		this.pParameter = new ParameterElements();
		this.pConnector = new ConnectorElements();
		this.pGeneralization = new GeneralizationElements();
		this.pImplementation = new ImplementationElements();
		this.pCommentLink = new CommentLinkElements();
		this.pXtextAssociation = new XtextAssociationElements();
		this.pComment = new CommentElements();
		this.pCardinality = new CardinalityElements();
		this.pCommentBody = new CommentBodyElements();
		this.pCardinalityBound = new CardinalityBoundElements();
		this.eVisibility = new VisibilityElements();
		this.eAggregationKind = new AggregationKindElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.cooperateproject.modeling.textual.cls.Cls".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//// ------------------------------------------------------------------------------------------
	//// ---------------------------------Root-----------------------------------------------------
	//// ------------------------------------------------------------------------------------------
	//ClassDiagram:
	//	{ClassDiagram}
	//	'@start-cls' title=STRING
	//	rootPackage=RootPackage
	//	'@end-cls';
	public ClassDiagramElements getClassDiagramAccess() {
		return pClassDiagram;
	}
	
	public ParserRule getClassDiagramRule() {
		return getClassDiagramAccess().getRule();
	}
	
	//RootPackage Package:
	//	'rootPackage' name=FQN
	//	packageImports+=PackageImport*
	//	classifiers+=Classifier*
	//	connectors+=Connector*
	//	packages+=Package*
	public RootPackageElements getRootPackageAccess() {
		return pRootPackage;
	}
	
	public ParserRule getRootPackageRule() {
		return getRootPackageAccess().getRule();
	}
	
	//Package:
	//	'package' name=FQN '{'
	//	packageImports+=PackageImport*
	//	classifiers+=Classifier*
	//	connectors+=Connector*
	//	packages+=Package*
	//	'}';
	public PackageElements getPackageAccess() {
		return pPackage;
	}
	
	public ParserRule getPackageRule() {
		return getPackageAccess().getRule();
	}
	
	//PackageImport commons::PackageImport:
	//	"import" importedPackage=FQN
	public PackageImportElements getPackageImportAccess() {
		return pPackageImport;
	}
	
	public ParserRule getPackageImportRule() {
		return getPackageImportAccess().getRule();
	}
	
	//NameString:
	//	STRING;
	public NameStringElements getNameStringAccess() {
		return pNameString;
	}
	
	public ParserRule getNameStringRule() {
		return getNameStringAccess().getRule();
	}
	
	//FQN:
	//	ID ("." ID)*;
	public FQNElements getFQNAccess() {
		return pFQN;
	}
	
	public ParserRule getFQNRule() {
		return getFQNAccess().getRule();
	}
	
	//// ------------------------------------------------------------------------------------------
	//// ---------------------------------Class Diagram--------------------------------------------
	//// ------------------------------------------------------------------------------------------
	//Classifier:
	//	Class | Interface;
	public ClassifierElements getClassifierAccess() {
		return pClassifier;
	}
	
	public ParserRule getClassifierRule() {
		return getClassifierAccess().getRule();
	}
	
	//Class:
	//	visibility=Visibility? abstract?='abstract'? 'class' (name=STRING 'as' alias=ID | name=ID) ('{' members+=Member*
	//	'}')?;
	public ClassElements getClassAccess() {
		return pClass;
	}
	
	public ParserRule getClassRule() {
		return getClassAccess().getRule();
	}
	
	//Interface:
	//	visibility=Visibility? 'interface' (name=STRING 'as' alias=ID | name=ID) ('{' members+=Member* '}')?;
	public InterfaceElements getInterfaceAccess() {
		return pInterface;
	}
	
	public ParserRule getInterfaceRule() {
		return getInterfaceAccess().getRule();
	}
	
	//Member:
	//	Attribute
	//	| Method;
	public MemberElements getMemberAccess() {
		return pMember;
	}
	
	public ParserRule getMemberRule() {
		return getMemberAccess().getRule();
	}
	
	//Attribute:
	//	{Attribute} visibility=Visibility?
	//	static?='static'?
	//	final?='final'?
	//	name=ID ':' type=[uml::Classifier|FQN];
	public AttributeElements getAttributeAccess() {
		return pAttribute;
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}
	
	//Method:
	//	visibility=Visibility?
	//	abstract?='abstract'?
	//	static?='static'?
	//	final?='final'?
	//	name=ID '(' (parameters+=Parameter (',' parameters+=Parameter)*)* ')' (':' type=[uml::Classifier|FQN])?;
	public MethodElements getMethodAccess() {
		return pMethod;
	}
	
	public ParserRule getMethodRule() {
		return getMethodAccess().getRule();
	}
	
	//Parameter:
	//	visibility=Visibility?
	//	static?='static'?
	//	final?='final'?
	//	name=ID ':' type=[uml::Classifier|FQN];
	public ParameterElements getParameterAccess() {
		return pParameter;
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}
	
	//Connector:
	//	Generalization
	//	| XtextAssociation
	//	| Implementation
	//	| CommentLink;
	public ConnectorElements getConnectorAccess() {
		return pConnector;
	}
	
	public ParserRule getConnectorRule() {
		return getConnectorAccess().getRule();
	}
	
	//Generalization:
	//	left=[Classifier|FQN] 'isa' right=[Classifier|FQN];
	public GeneralizationElements getGeneralizationAccess() {
		return pGeneralization;
	}
	
	public ParserRule getGeneralizationRule() {
		return getGeneralizationAccess().getRule();
	}
	
	//Implementation:
	//	left=[Classifier|FQN] 'impl' right=[Classifier|FQN];
	public ImplementationElements getImplementationAccess() {
		return pImplementation;
	}
	
	public ParserRule getImplementationRule() {
		return getImplementationAccess().getRule();
	}
	
	//CommentLink:
	//	commentedElement=[Classifier|FQN] comments+=Comment;
	public CommentLinkElements getCommentLinkAccess() {
		return pCommentLink;
	}
	
	public ParserRule getCommentLinkRule() {
		return getCommentLinkAccess().getRule();
	}
	
	//XtextAssociation:
	//	twoSideBidirectionality?='bi'? twoSideAggregationKind=AggregationKind
	//	name=ID '(' memberEndTypes+=[Classifier|FQN] (',' memberEndTypes+=[Classifier|FQN])* ')' ('role' '['
	//	memberEndNames+=ID (',' memberEndNames+=ID)* ']')? ('card' '[' memberEndCardinalities+=Cardinality (':'
	//	memberEndCardinalities+=Cardinality)* ']')?
	//	comments+=Comment?;
	public XtextAssociationElements getXtextAssociationAccess() {
		return pXtextAssociation;
	}
	
	public ParserRule getXtextAssociationRule() {
		return getXtextAssociationAccess().getRule();
	}
	
	//Comment commons::Comment:
	//	'note' body=CommentBody
	public CommentElements getCommentAccess() {
		return pComment;
	}
	
	public ParserRule getCommentRule() {
		return getCommentAccess().getRule();
	}
	
	//Cardinality commons::Cardinality:
	//	lowerBound=CardinalityBound ('..' upperBound=CardinalityBound)?
	public CardinalityElements getCardinalityAccess() {
		return pCardinality;
	}
	
	public ParserRule getCardinalityRule() {
		return getCardinalityAccess().getRule();
	}
	
	//CommentBody:
	//	STRING;
	public CommentBodyElements getCommentBodyAccess() {
		return pCommentBody;
	}
	
	public ParserRule getCommentBodyRule() {
		return getCommentBodyAccess().getRule();
	}
	
	//CardinalityBound ecore::EInt:
	//	'*' | INT
	public CardinalityBoundElements getCardinalityBoundAccess() {
		return pCardinalityBound;
	}
	
	public ParserRule getCardinalityBoundRule() {
		return getCardinalityBoundAccess().getRule();
	}
	
	//enum Visibility returns commons::Visibility:
	//	PUBLIC='+'
	//	| PUBLIC='public'
	//	| PRIVATE='-'
	//	| PRIVATE='private'
	//	| PROTECTED='#'
	//	| PROTECTED='protected'
	//	| PACKAGE='~';
	public VisibilityElements getVisibilityAccess() {
		return eVisibility;
	}
	
	public EnumRule getVisibilityRule() {
		return getVisibilityAccess().getRule();
	}
	
	//enum AggregationKind:
	//	NONE='asc'
	//	| AGGREGATION='agg'
	//	| COMPOSITION='com';
	public AggregationKindElements getAggregationKindAccess() {
		return eAggregationKind;
	}
	
	public EnumRule getAggregationKindRule() {
		return getAggregationKindAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
