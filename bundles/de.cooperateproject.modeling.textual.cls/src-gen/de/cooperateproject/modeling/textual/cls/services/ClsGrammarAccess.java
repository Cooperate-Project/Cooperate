/*
 * generated by Xtext 2.9.0
 */
package de.cooperateproject.modeling.textual.cls.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class ClsGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ClassDiagramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.cls.Cls.ClassDiagram");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cClassDiagramAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cStartclassKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cElementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementsElementParserRuleCall_2_0 = (RuleCall)cElementsAssignment_2.eContents().get(0);
		private final Keyword cEndclassKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		////import "http://www.eclipse.org/xtext/common/JavaVMTypes" as jvmTypes
		//ClassDiagram:
		//	{ClassDiagram}
		//	'@startclass'
		//	elements+=Element*
		//	'@endclass';
		@Override public ParserRule getRule() { return rule; }
		
		//{ClassDiagram} '@startclass' elements+=Element* '@endclass'
		public Group getGroup() { return cGroup; }
		
		//{ClassDiagram}
		public Action getClassDiagramAction_0() { return cClassDiagramAction_0; }
		
		//'@startclass'
		public Keyword getStartclassKeyword_1() { return cStartclassKeyword_1; }
		
		//elements+=Element*
		public Assignment getElementsAssignment_2() { return cElementsAssignment_2; }
		
		//Element
		public RuleCall getElementsElementParserRuleCall_2_0() { return cElementsElementParserRuleCall_2_0; }
		
		//'@endclass'
		public Keyword getEndclassKeyword_3() { return cEndclassKeyword_3; }
	}
	public class ElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.cls.Cls.Element");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cClassDefParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cClassParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cConnectorParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Element:
		//	ClassDef
		//	| Class
		//	| Connector;
		@Override public ParserRule getRule() { return rule; }
		
		//ClassDef | Class | Connector
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ClassDef
		public RuleCall getClassDefParserRuleCall_0() { return cClassDefParserRuleCall_0; }
		
		//Class
		public RuleCall getClassParserRuleCall_1() { return cClassParserRuleCall_1; }
		
		//Connector
		public RuleCall getConnectorParserRuleCall_2() { return cConnectorParserRuleCall_2; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.cls.Cls.Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cTypeDataTypeEnumRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final RuleCall cClassNameParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Type:
		//	type=DataType
		//	| ClassName;
		@Override public ParserRule getRule() { return rule; }
		
		//type=DataType | ClassName
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//type=DataType
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//DataType
		public RuleCall getTypeDataTypeEnumRuleCall_0_0() { return cTypeDataTypeEnumRuleCall_0_0; }
		
		//ClassName
		public RuleCall getClassNameParserRuleCall_1() { return cClassNameParserRuleCall_1; }
	}
	public class ClassDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.cls.Cls.ClassDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cClassKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cInterfaceKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cClassesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cClassesClassNameParserRuleCall_2_0 = (RuleCall)cClassesAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cClassesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cClassesClassNameParserRuleCall_3_1_0 = (RuleCall)cClassesAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ClassDef:
		//	('class' | 'interface')
		//	'{' classes+=ClassName (',' classes+=ClassName)* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//('class' | 'interface') '{' classes+=ClassName (',' classes+=ClassName)* '}'
		public Group getGroup() { return cGroup; }
		
		//('class' | 'interface')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'class'
		public Keyword getClassKeyword_0_0() { return cClassKeyword_0_0; }
		
		//'interface'
		public Keyword getInterfaceKeyword_0_1() { return cInterfaceKeyword_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//classes+=ClassName
		public Assignment getClassesAssignment_2() { return cClassesAssignment_2; }
		
		//ClassName
		public RuleCall getClassesClassNameParserRuleCall_2_0() { return cClassesClassNameParserRuleCall_2_0; }
		
		//(',' classes+=ClassName)*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//classes+=ClassName
		public Assignment getClassesAssignment_3_1() { return cClassesAssignment_3_1; }
		
		//ClassName
		public RuleCall getClassesClassNameParserRuleCall_3_1_0() { return cClassesClassNameParserRuleCall_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class ClassNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.cls.Cls.ClassName");
		private final RuleCall cNameParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ClassName:
		//	Name;
		@Override public ParserRule getRule() { return rule; }
		
		//Name
		public RuleCall getNameParserRuleCall() { return cNameParserRuleCall; }
	}
	public class NameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.cls.Cls.Name");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cLongnameAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Alternatives cLongnameAlternatives_1_0_0 = (Alternatives)cLongnameAssignment_1_0.eContents().get(0);
		private final RuleCall cLongnameSTRINGTerminalRuleCall_1_0_0_0 = (RuleCall)cLongnameAlternatives_1_0_0.eContents().get(0);
		private final RuleCall cLongnameIDTerminalRuleCall_1_0_0_1 = (RuleCall)cLongnameAlternatives_1_0_0.eContents().get(1);
		private final Keyword cAsKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cNameAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_1_2_0 = (RuleCall)cNameAssignment_1_2.eContents().get(0);
		
		//Name:
		//	name=ID
		//	| longname=(STRING | ID) ' as ' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID | longname=(STRING | ID) ' as ' name=ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//longname=(STRING | ID) ' as ' name=ID
		public Group getGroup_1() { return cGroup_1; }
		
		//longname=(STRING | ID)
		public Assignment getLongnameAssignment_1_0() { return cLongnameAssignment_1_0; }
		
		//(STRING | ID)
		public Alternatives getLongnameAlternatives_1_0_0() { return cLongnameAlternatives_1_0_0; }
		
		//STRING
		public RuleCall getLongnameSTRINGTerminalRuleCall_1_0_0_0() { return cLongnameSTRINGTerminalRuleCall_1_0_0_0; }
		
		//ID
		public RuleCall getLongnameIDTerminalRuleCall_1_0_0_1() { return cLongnameIDTerminalRuleCall_1_0_0_1; }
		
		//' as '
		public Keyword getAsKeyword_1_1() { return cAsKeyword_1_1; }
		
		//name=ID
		public Assignment getNameAssignment_1_2() { return cNameAssignment_1_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_2_0() { return cNameIDTerminalRuleCall_1_2_0; }
	}
	public class ClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.cls.Cls.Class");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAbstractAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cAbstractAbstractKeyword_0_0 = (Keyword)cAbstractAssignment_0.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTypeClassNameCrossReference_1_0 = (CrossReference)cTypeAssignment_1.eContents().get(0);
		private final RuleCall cTypeClassNameIDTerminalRuleCall_1_0_1 = (RuleCall)cTypeClassNameCrossReference_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMembersAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMembersMemberParserRuleCall_3_0 = (RuleCall)cMembersAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Class:
		//	abstract?='abstract'?
		//	type=[ClassName]
		//	'{' members+=Member* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//abstract?='abstract'? type=[ClassName] '{' members+=Member* '}'
		public Group getGroup() { return cGroup; }
		
		//abstract?='abstract'?
		public Assignment getAbstractAssignment_0() { return cAbstractAssignment_0; }
		
		//'abstract'
		public Keyword getAbstractAbstractKeyword_0_0() { return cAbstractAbstractKeyword_0_0; }
		
		//type=[ClassName]
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//[ClassName]
		public CrossReference getTypeClassNameCrossReference_1_0() { return cTypeClassNameCrossReference_1_0; }
		
		//ID
		public RuleCall getTypeClassNameIDTerminalRuleCall_1_0_1() { return cTypeClassNameIDTerminalRuleCall_1_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//members+=Member*
		public Assignment getMembersAssignment_3() { return cMembersAssignment_3; }
		
		//Member
		public RuleCall getMembersMemberParserRuleCall_3_0() { return cMembersMemberParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class MemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.cls.Cls.Member");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAttributeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMethodeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Member:
		//	Attribute
		//	| Methode;
		@Override public ParserRule getRule() { return rule; }
		
		//Attribute | Methode
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Attribute
		public RuleCall getAttributeParserRuleCall_0() { return cAttributeParserRuleCall_0; }
		
		//Methode
		public RuleCall getMethodeParserRuleCall_1() { return cMethodeParserRuleCall_1; }
	}
	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.cls.Cls.Attribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAttributeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cVisibilityAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVisibilityVisibilityEnumRuleCall_1_0 = (RuleCall)cVisibilityAssignment_1.eContents().get(0);
		private final Assignment cStaticAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cStaticStaticKeyword_2_0 = (Keyword)cStaticAssignment_2.eContents().get(0);
		private final Assignment cFinalAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cFinalFinalKeyword_3_0 = (Keyword)cFinalAssignment_3.eContents().get(0);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameIDTerminalRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final Keyword cColonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cTypeAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cTypeTypeParserRuleCall_6_0 = (RuleCall)cTypeAssignment_6.eContents().get(0);
		
		//Attribute:
		//	{Attribute} visibility=Visibility?
		//	static?='static'?
		//	final?='final'?
		//	name=ID ':' type=Type;
		@Override public ParserRule getRule() { return rule; }
		
		//{Attribute} visibility=Visibility? static?='static'? final?='final'? name=ID ':' type=Type
		public Group getGroup() { return cGroup; }
		
		//{Attribute}
		public Action getAttributeAction_0() { return cAttributeAction_0; }
		
		//visibility=Visibility?
		public Assignment getVisibilityAssignment_1() { return cVisibilityAssignment_1; }
		
		//Visibility
		public RuleCall getVisibilityVisibilityEnumRuleCall_1_0() { return cVisibilityVisibilityEnumRuleCall_1_0; }
		
		//static?='static'?
		public Assignment getStaticAssignment_2() { return cStaticAssignment_2; }
		
		//'static'
		public Keyword getStaticStaticKeyword_2_0() { return cStaticStaticKeyword_2_0; }
		
		//final?='final'?
		public Assignment getFinalAssignment_3() { return cFinalAssignment_3; }
		
		//'final'
		public Keyword getFinalFinalKeyword_3_0() { return cFinalFinalKeyword_3_0; }
		
		//name=ID
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_4_0() { return cNameIDTerminalRuleCall_4_0; }
		
		//':'
		public Keyword getColonKeyword_5() { return cColonKeyword_5; }
		
		//type=Type
		public Assignment getTypeAssignment_6() { return cTypeAssignment_6; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_6_0() { return cTypeTypeParserRuleCall_6_0; }
	}
	public class MethodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.cls.Cls.Methode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVisibilityAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVisibilityVisibilityEnumRuleCall_0_0 = (RuleCall)cVisibilityAssignment_0.eContents().get(0);
		private final Assignment cAbstractAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cAbstractAbstractKeyword_1_0 = (Keyword)cAbstractAssignment_1.eContents().get(0);
		private final Assignment cStaticAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cStaticStaticKeyword_2_0 = (Keyword)cStaticAssignment_2.eContents().get(0);
		private final Assignment cFinalAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cFinalFinalKeyword_3_0 = (Keyword)cFinalAssignment_3.eContents().get(0);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameIDTerminalRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Assignment cAttributesAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final RuleCall cAttributesAttributeParserRuleCall_6_0_0 = (RuleCall)cAttributesAssignment_6_0.eContents().get(0);
		private final Group cGroup_6_1 = (Group)cGroup_6.eContents().get(1);
		private final Keyword cCommaKeyword_6_1_0 = (Keyword)cGroup_6_1.eContents().get(0);
		private final Assignment cAttributesAssignment_6_1_1 = (Assignment)cGroup_6_1.eContents().get(1);
		private final RuleCall cAttributesAttributeParserRuleCall_6_1_1_0 = (RuleCall)cAttributesAssignment_6_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cColonKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cTypeAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_8_1_0 = (RuleCall)cTypeAssignment_8_1.eContents().get(0);
		
		//Methode:
		//	visibility=Visibility?
		//	abstract?='abstract'?
		//	static?='static'?
		//	final?='final'?
		//	name=ID '(' (attributes+=Attribute (',' attributes+=Attribute)*)* ')' (':' type=Type)?;
		@Override public ParserRule getRule() { return rule; }
		
		//visibility=Visibility? abstract?='abstract'? static?='static'? final?='final'? name=ID '(' (attributes+=Attribute (','
		//attributes+=Attribute)*)* ')' (':' type=Type)?
		public Group getGroup() { return cGroup; }
		
		//visibility=Visibility?
		public Assignment getVisibilityAssignment_0() { return cVisibilityAssignment_0; }
		
		//Visibility
		public RuleCall getVisibilityVisibilityEnumRuleCall_0_0() { return cVisibilityVisibilityEnumRuleCall_0_0; }
		
		//abstract?='abstract'?
		public Assignment getAbstractAssignment_1() { return cAbstractAssignment_1; }
		
		//'abstract'
		public Keyword getAbstractAbstractKeyword_1_0() { return cAbstractAbstractKeyword_1_0; }
		
		//static?='static'?
		public Assignment getStaticAssignment_2() { return cStaticAssignment_2; }
		
		//'static'
		public Keyword getStaticStaticKeyword_2_0() { return cStaticStaticKeyword_2_0; }
		
		//final?='final'?
		public Assignment getFinalAssignment_3() { return cFinalAssignment_3; }
		
		//'final'
		public Keyword getFinalFinalKeyword_3_0() { return cFinalFinalKeyword_3_0; }
		
		//name=ID
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_4_0() { return cNameIDTerminalRuleCall_4_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_5() { return cLeftParenthesisKeyword_5; }
		
		//(attributes+=Attribute (',' attributes+=Attribute)*)*
		public Group getGroup_6() { return cGroup_6; }
		
		//attributes+=Attribute
		public Assignment getAttributesAssignment_6_0() { return cAttributesAssignment_6_0; }
		
		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_6_0_0() { return cAttributesAttributeParserRuleCall_6_0_0; }
		
		//(',' attributes+=Attribute)*
		public Group getGroup_6_1() { return cGroup_6_1; }
		
		//','
		public Keyword getCommaKeyword_6_1_0() { return cCommaKeyword_6_1_0; }
		
		//attributes+=Attribute
		public Assignment getAttributesAssignment_6_1_1() { return cAttributesAssignment_6_1_1; }
		
		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_6_1_1_0() { return cAttributesAttributeParserRuleCall_6_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
		
		//(':' type=Type)?
		public Group getGroup_8() { return cGroup_8; }
		
		//':'
		public Keyword getColonKeyword_8_0() { return cColonKeyword_8_0; }
		
		//type=Type
		public Assignment getTypeAssignment_8_1() { return cTypeAssignment_8_1; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_8_1_0() { return cTypeTypeParserRuleCall_8_1_0; }
	}
	public class ConnectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.cls.Cls.Connector");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cGeneralizationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAssociationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cImplementationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cCommentLinkParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Connector:
		//	Generalization
		//	| Association
		//	| Implementation
		//	| CommentLink;
		@Override public ParserRule getRule() { return rule; }
		
		//Generalization | Association | Implementation | CommentLink
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Generalization
		public RuleCall getGeneralizationParserRuleCall_0() { return cGeneralizationParserRuleCall_0; }
		
		//Association
		public RuleCall getAssociationParserRuleCall_1() { return cAssociationParserRuleCall_1; }
		
		//Implementation
		public RuleCall getImplementationParserRuleCall_2() { return cImplementationParserRuleCall_2; }
		
		//CommentLink
		public RuleCall getCommentLinkParserRuleCall_3() { return cCommentLinkParserRuleCall_3; }
	}
	public class GeneralizationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.cls.Cls.Generalization");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftAssociationEndParserRuleCall_0_0 = (RuleCall)cLeftAssignment_0.eContents().get(0);
		private final Keyword cIsaKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRightAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRightAssociationEndParserRuleCall_2_0 = (RuleCall)cRightAssignment_2.eContents().get(0);
		
		//Generalization:
		//	left=AssociationEnd 'isa' right=AssociationEnd;
		@Override public ParserRule getRule() { return rule; }
		
		//left=AssociationEnd 'isa' right=AssociationEnd
		public Group getGroup() { return cGroup; }
		
		//left=AssociationEnd
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }
		
		//AssociationEnd
		public RuleCall getLeftAssociationEndParserRuleCall_0_0() { return cLeftAssociationEndParserRuleCall_0_0; }
		
		//'isa'
		public Keyword getIsaKeyword_1() { return cIsaKeyword_1; }
		
		//right=AssociationEnd
		public Assignment getRightAssignment_2() { return cRightAssignment_2; }
		
		//AssociationEnd
		public RuleCall getRightAssociationEndParserRuleCall_2_0() { return cRightAssociationEndParserRuleCall_2_0; }
	}
	public class ImplementationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.cls.Cls.Implementation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftAssociationEndParserRuleCall_0_0 = (RuleCall)cLeftAssignment_0.eContents().get(0);
		private final Keyword cImplKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRightAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRightAssociationEndParserRuleCall_2_0 = (RuleCall)cRightAssignment_2.eContents().get(0);
		
		//Implementation:
		//	left=AssociationEnd 'impl' right=AssociationEnd;
		@Override public ParserRule getRule() { return rule; }
		
		//left=AssociationEnd 'impl' right=AssociationEnd
		public Group getGroup() { return cGroup; }
		
		//left=AssociationEnd
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }
		
		//AssociationEnd
		public RuleCall getLeftAssociationEndParserRuleCall_0_0() { return cLeftAssociationEndParserRuleCall_0_0; }
		
		//'impl'
		public Keyword getImplKeyword_1() { return cImplKeyword_1; }
		
		//right=AssociationEnd
		public Assignment getRightAssignment_2() { return cRightAssignment_2; }
		
		//AssociationEnd
		public RuleCall getRightAssociationEndParserRuleCall_2_0() { return cRightAssociationEndParserRuleCall_2_0; }
	}
	public class CommentLinkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.cls.Cls.CommentLink");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftAssociationEndParserRuleCall_0_0 = (RuleCall)cLeftAssignment_0.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCommentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCommentCommentParserRuleCall_2_0 = (RuleCall)cCommentAssignment_2.eContents().get(0);
		
		//CommentLink:
		//	left=AssociationEnd '-' comment=Comment;
		@Override public ParserRule getRule() { return rule; }
		
		//left=AssociationEnd '-' comment=Comment
		public Group getGroup() { return cGroup; }
		
		//left=AssociationEnd
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }
		
		//AssociationEnd
		public RuleCall getLeftAssociationEndParserRuleCall_0_0() { return cLeftAssociationEndParserRuleCall_0_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }
		
		//comment=Comment
		public Assignment getCommentAssignment_2() { return cCommentAssignment_2; }
		
		//Comment
		public RuleCall getCommentCommentParserRuleCall_2_0() { return cCommentCommentParserRuleCall_2_0; }
	}
	public class AssociationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.cls.Cls.Association");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftAssociationEndParserRuleCall_0_0 = (RuleCall)cLeftAssignment_0.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRightAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRightAssociationEndParserRuleCall_2_0 = (RuleCall)cRightAssignment_2.eContents().get(0);
		private final Assignment cCardinalityAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCardinalityConnectorCardinalitiyParserRuleCall_3_0 = (RuleCall)cCardinalityAssignment_3.eContents().get(0);
		private final Assignment cCommentAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cCommentCommentParserRuleCall_4_0 = (RuleCall)cCommentAssignment_4.eContents().get(0);
		
		//Association:
		//	left=AssociationEnd '-'
		//	right=AssociationEnd cardinality=ConnectorCardinalitiy? comment=Comment?;
		@Override public ParserRule getRule() { return rule; }
		
		//left=AssociationEnd '-' right=AssociationEnd cardinality=ConnectorCardinalitiy? comment=Comment?
		public Group getGroup() { return cGroup; }
		
		//left=AssociationEnd
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }
		
		//AssociationEnd
		public RuleCall getLeftAssociationEndParserRuleCall_0_0() { return cLeftAssociationEndParserRuleCall_0_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }
		
		//right=AssociationEnd
		public Assignment getRightAssignment_2() { return cRightAssignment_2; }
		
		//AssociationEnd
		public RuleCall getRightAssociationEndParserRuleCall_2_0() { return cRightAssociationEndParserRuleCall_2_0; }
		
		//cardinality=ConnectorCardinalitiy?
		public Assignment getCardinalityAssignment_3() { return cCardinalityAssignment_3; }
		
		//ConnectorCardinalitiy
		public RuleCall getCardinalityConnectorCardinalitiyParserRuleCall_3_0() { return cCardinalityConnectorCardinalitiyParserRuleCall_3_0; }
		
		//comment=Comment?
		public Assignment getCommentAssignment_4() { return cCommentAssignment_4; }
		
		//Comment
		public RuleCall getCommentCommentParserRuleCall_4_0() { return cCommentCommentParserRuleCall_4_0; }
	}
	public class AssociationEndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.cls.Cls.AssociationEnd");
		private final Assignment cTypeAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cTypeClassNameCrossReference_0 = (CrossReference)cTypeAssignment.eContents().get(0);
		private final RuleCall cTypeClassNameIDTerminalRuleCall_0_1 = (RuleCall)cTypeClassNameCrossReference_0.eContents().get(1);
		
		//AssociationEnd:
		//	type=[ClassName];
		@Override public ParserRule getRule() { return rule; }
		
		//type=[ClassName]
		public Assignment getTypeAssignment() { return cTypeAssignment; }
		
		//[ClassName]
		public CrossReference getTypeClassNameCrossReference_0() { return cTypeClassNameCrossReference_0; }
		
		//ID
		public RuleCall getTypeClassNameIDTerminalRuleCall_0_1() { return cTypeClassNameIDTerminalRuleCall_0_1; }
	}
	public class ConnectorLabelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.cls.Cls.ConnectorLabel");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cNameAlternatives_0 = (Alternatives)cNameAssignment.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAlternatives_0.eContents().get(0);
		private final RuleCall cNameSTRINGTerminalRuleCall_0_1 = (RuleCall)cNameAlternatives_0.eContents().get(1);
		
		//ConnectorLabel:
		//	name=(ID | STRING);
		@Override public ParserRule getRule() { return rule; }
		
		//name=(ID | STRING)
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//(ID | STRING)
		public Alternatives getNameAlternatives_0() { return cNameAlternatives_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_0_1() { return cNameSTRINGTerminalRuleCall_0_1; }
	}
	public class ConnectorCardinalitiyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.cls.Cls.ConnectorCardinalitiy");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cConnectorCardinalitiyAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLeftAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLeftCardinalityParserRuleCall_2_0 = (RuleCall)cLeftAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cVerticalLineKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cRightAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cRightCardinalityParserRuleCall_3_1_0 = (RuleCall)cRightAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cVerticalLineKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cLabelAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cLabelConnectorLabelParserRuleCall_4_1_0 = (RuleCall)cLabelAssignment_4_1.eContents().get(0);
		private final Assignment cDirectionAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final Alternatives cDirectionAlternatives_4_2_0 = (Alternatives)cDirectionAssignment_4_2.eContents().get(0);
		private final Keyword cDirectionLessThanSignKeyword_4_2_0_0 = (Keyword)cDirectionAlternatives_4_2_0.eContents().get(0);
		private final Keyword cDirectionGreaterThanSignKeyword_4_2_0_1 = (Keyword)cDirectionAlternatives_4_2_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ConnectorCardinalitiy:
		//	{ConnectorCardinalitiy}
		//	'[' left=Cardinality? ('|' right=Cardinality?) ('|' label=ConnectorLabel?
		//	direction=('<' | '>')?)? ']';
		@Override public ParserRule getRule() { return rule; }
		
		//{ConnectorCardinalitiy} '[' left=Cardinality? ('|' right=Cardinality?) ('|' label=ConnectorLabel? direction=('<' |
		//'>')?)? ']'
		public Group getGroup() { return cGroup; }
		
		//{ConnectorCardinalitiy}
		public Action getConnectorCardinalitiyAction_0() { return cConnectorCardinalitiyAction_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//left=Cardinality?
		public Assignment getLeftAssignment_2() { return cLeftAssignment_2; }
		
		//Cardinality
		public RuleCall getLeftCardinalityParserRuleCall_2_0() { return cLeftCardinalityParserRuleCall_2_0; }
		
		//('|' right=Cardinality?)
		public Group getGroup_3() { return cGroup_3; }
		
		//'|'
		public Keyword getVerticalLineKeyword_3_0() { return cVerticalLineKeyword_3_0; }
		
		//right=Cardinality?
		public Assignment getRightAssignment_3_1() { return cRightAssignment_3_1; }
		
		//Cardinality
		public RuleCall getRightCardinalityParserRuleCall_3_1_0() { return cRightCardinalityParserRuleCall_3_1_0; }
		
		//('|' label=ConnectorLabel? direction=('<' | '>')?)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'|'
		public Keyword getVerticalLineKeyword_4_0() { return cVerticalLineKeyword_4_0; }
		
		//label=ConnectorLabel?
		public Assignment getLabelAssignment_4_1() { return cLabelAssignment_4_1; }
		
		//ConnectorLabel
		public RuleCall getLabelConnectorLabelParserRuleCall_4_1_0() { return cLabelConnectorLabelParserRuleCall_4_1_0; }
		
		//direction=('<' | '>')?
		public Assignment getDirectionAssignment_4_2() { return cDirectionAssignment_4_2; }
		
		//('<' | '>')
		public Alternatives getDirectionAlternatives_4_2_0() { return cDirectionAlternatives_4_2_0; }
		
		//'<'
		public Keyword getDirectionLessThanSignKeyword_4_2_0_0() { return cDirectionLessThanSignKeyword_4_2_0_0; }
		
		//'>'
		public Keyword getDirectionGreaterThanSignKeyword_4_2_0_1() { return cDirectionGreaterThanSignKeyword_4_2_0_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_5() { return cRightSquareBracketKeyword_5; }
	}
	public class CardinalityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.cls.Cls.Cardinality");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAsteriskKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Alternatives cAlternatives_1_2 = (Alternatives)cGroup_1.eContents().get(2);
		private final Keyword cAsteriskKeyword_1_2_0 = (Keyword)cAlternatives_1_2.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1_2_1 = (RuleCall)cAlternatives_1_2.eContents().get(1);
		
		//Cardinality:
		//	'*' | INT '..' ('*' | INT);
		@Override public ParserRule getRule() { return rule; }
		
		//'*' | INT '..' ('*' | INT)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'*'
		public Keyword getAsteriskKeyword_0() { return cAsteriskKeyword_0; }
		
		//INT '..' ('*' | INT)
		public Group getGroup_1() { return cGroup_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1_0() { return cINTTerminalRuleCall_1_0; }
		
		//'..'
		public Keyword getFullStopFullStopKeyword_1_1() { return cFullStopFullStopKeyword_1_1; }
		
		//('*' | INT)
		public Alternatives getAlternatives_1_2() { return cAlternatives_1_2; }
		
		//'*'
		public Keyword getAsteriskKeyword_1_2_0() { return cAsteriskKeyword_1_2_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1_2_1() { return cINTTerminalRuleCall_1_2_1; }
	}
	public class CommentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.cls.Cls.Comment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNoteKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Comment:
		//	'note[' STRING ']';
		@Override public ParserRule getRule() { return rule; }
		
		//'note[' STRING ']'
		public Group getGroup() { return cGroup; }
		
		//'note['
		public Keyword getNoteKeyword_0() { return cNoteKeyword_0; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1() { return cSTRINGTerminalRuleCall_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
	}
	
	public class VisibilityElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.cls.Cls.Visibility");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cDEFAULTEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cDEFAULTTildeKeyword_0_0 = (Keyword)cDEFAULTEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cPRIVATEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cPRIVATEHyphenMinusKeyword_1_0 = (Keyword)cPRIVATEEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cPROTECTEDEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cPROTECTEDNumberSignKeyword_2_0 = (Keyword)cPROTECTEDEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cPUBLICEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cPUBLICPlusSignKeyword_3_0 = (Keyword)cPUBLICEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum Visibility:
		//	DEFAULT='~'
		//	| PRIVATE='-'
		//	| PROTECTED='#'
		//	| PUBLIC='+';
		public EnumRule getRule() { return rule; }
		
		//DEFAULT='~' | PRIVATE='-' | PROTECTED='#' | PUBLIC='+'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DEFAULT='~'
		public EnumLiteralDeclaration getDEFAULTEnumLiteralDeclaration_0() { return cDEFAULTEnumLiteralDeclaration_0; }
		
		//'~'
		public Keyword getDEFAULTTildeKeyword_0_0() { return cDEFAULTTildeKeyword_0_0; }
		
		//PRIVATE='-'
		public EnumLiteralDeclaration getPRIVATEEnumLiteralDeclaration_1() { return cPRIVATEEnumLiteralDeclaration_1; }
		
		//'-'
		public Keyword getPRIVATEHyphenMinusKeyword_1_0() { return cPRIVATEHyphenMinusKeyword_1_0; }
		
		//PROTECTED='#'
		public EnumLiteralDeclaration getPROTECTEDEnumLiteralDeclaration_2() { return cPROTECTEDEnumLiteralDeclaration_2; }
		
		//'#'
		public Keyword getPROTECTEDNumberSignKeyword_2_0() { return cPROTECTEDNumberSignKeyword_2_0; }
		
		//PUBLIC='+'
		public EnumLiteralDeclaration getPUBLICEnumLiteralDeclaration_3() { return cPUBLICEnumLiteralDeclaration_3; }
		
		//'+'
		public Keyword getPUBLICPlusSignKeyword_3_0() { return cPUBLICPlusSignKeyword_3_0; }
	}
	public class DataTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.cooperateproject.modeling.textual.cls.Cls.DataType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSTRINGEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSTRINGStringKeyword_0_0 = (Keyword)cSTRINGEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cINTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cINTIntKeyword_1_0 = (Keyword)cINTEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cDOUBLEEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cDOUBLEDoubleKeyword_2_0 = (Keyword)cDOUBLEEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cBOOLEANEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cBOOLEANBooleanKeyword_3_0 = (Keyword)cBOOLEANEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cCHAREnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cCHARCharKeyword_4_0 = (Keyword)cCHAREnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cBYTEEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cBYTEByteKeyword_5_0 = (Keyword)cBYTEEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cSHORTEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cSHORTShortKeyword_6_0 = (Keyword)cSHORTEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cLONGEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cLONGLongKeyword_7_0 = (Keyword)cLONGEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cFLOATEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cFLOATFloatKeyword_8_0 = (Keyword)cFLOATEnumLiteralDeclaration_8.eContents().get(0);
		
		//enum DataType:
		//	STRING='string'
		//	| INT='int'
		//	| DOUBLE='double'
		//	| BOOLEAN='boolean'
		//	| CHAR='char'
		//	| BYTE='byte'
		//	| SHORT='short'
		//	| LONG='long'
		//	| FLOAT='float';
		public EnumRule getRule() { return rule; }
		
		//STRING='string' | INT='int' | DOUBLE='double' | BOOLEAN='boolean' | CHAR='char' | BYTE='byte' | SHORT='short' |
		//LONG='long' | FLOAT='float'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING='string'
		public EnumLiteralDeclaration getSTRINGEnumLiteralDeclaration_0() { return cSTRINGEnumLiteralDeclaration_0; }
		
		//'string'
		public Keyword getSTRINGStringKeyword_0_0() { return cSTRINGStringKeyword_0_0; }
		
		//INT='int'
		public EnumLiteralDeclaration getINTEnumLiteralDeclaration_1() { return cINTEnumLiteralDeclaration_1; }
		
		//'int'
		public Keyword getINTIntKeyword_1_0() { return cINTIntKeyword_1_0; }
		
		//DOUBLE='double'
		public EnumLiteralDeclaration getDOUBLEEnumLiteralDeclaration_2() { return cDOUBLEEnumLiteralDeclaration_2; }
		
		//'double'
		public Keyword getDOUBLEDoubleKeyword_2_0() { return cDOUBLEDoubleKeyword_2_0; }
		
		//BOOLEAN='boolean'
		public EnumLiteralDeclaration getBOOLEANEnumLiteralDeclaration_3() { return cBOOLEANEnumLiteralDeclaration_3; }
		
		//'boolean'
		public Keyword getBOOLEANBooleanKeyword_3_0() { return cBOOLEANBooleanKeyword_3_0; }
		
		//CHAR='char'
		public EnumLiteralDeclaration getCHAREnumLiteralDeclaration_4() { return cCHAREnumLiteralDeclaration_4; }
		
		//'char'
		public Keyword getCHARCharKeyword_4_0() { return cCHARCharKeyword_4_0; }
		
		//BYTE='byte'
		public EnumLiteralDeclaration getBYTEEnumLiteralDeclaration_5() { return cBYTEEnumLiteralDeclaration_5; }
		
		//'byte'
		public Keyword getBYTEByteKeyword_5_0() { return cBYTEByteKeyword_5_0; }
		
		//SHORT='short'
		public EnumLiteralDeclaration getSHORTEnumLiteralDeclaration_6() { return cSHORTEnumLiteralDeclaration_6; }
		
		//'short'
		public Keyword getSHORTShortKeyword_6_0() { return cSHORTShortKeyword_6_0; }
		
		//LONG='long'
		public EnumLiteralDeclaration getLONGEnumLiteralDeclaration_7() { return cLONGEnumLiteralDeclaration_7; }
		
		//'long'
		public Keyword getLONGLongKeyword_7_0() { return cLONGLongKeyword_7_0; }
		
		//FLOAT='float'
		public EnumLiteralDeclaration getFLOATEnumLiteralDeclaration_8() { return cFLOATEnumLiteralDeclaration_8; }
		
		//'float'
		public Keyword getFLOATFloatKeyword_8_0() { return cFLOATFloatKeyword_8_0; }
	}
	
	private final ClassDiagramElements pClassDiagram;
	private final ElementElements pElement;
	private final TypeElements pType;
	private final ClassDefElements pClassDef;
	private final ClassNameElements pClassName;
	private final NameElements pName;
	private final ClassElements pClass;
	private final MemberElements pMember;
	private final AttributeElements pAttribute;
	private final MethodeElements pMethode;
	private final ConnectorElements pConnector;
	private final GeneralizationElements pGeneralization;
	private final ImplementationElements pImplementation;
	private final CommentLinkElements pCommentLink;
	private final AssociationElements pAssociation;
	private final AssociationEndElements pAssociationEnd;
	private final ConnectorLabelElements pConnectorLabel;
	private final ConnectorCardinalitiyElements pConnectorCardinalitiy;
	private final CardinalityElements pCardinality;
	private final CommentElements pComment;
	private final VisibilityElements eVisibility;
	private final DataTypeElements eDataType;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public ClsGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pClassDiagram = new ClassDiagramElements();
		this.pElement = new ElementElements();
		this.pType = new TypeElements();
		this.pClassDef = new ClassDefElements();
		this.pClassName = new ClassNameElements();
		this.pName = new NameElements();
		this.pClass = new ClassElements();
		this.pMember = new MemberElements();
		this.pAttribute = new AttributeElements();
		this.pMethode = new MethodeElements();
		this.pConnector = new ConnectorElements();
		this.pGeneralization = new GeneralizationElements();
		this.pImplementation = new ImplementationElements();
		this.pCommentLink = new CommentLinkElements();
		this.pAssociation = new AssociationElements();
		this.pAssociationEnd = new AssociationEndElements();
		this.pConnectorLabel = new ConnectorLabelElements();
		this.pConnectorCardinalitiy = new ConnectorCardinalitiyElements();
		this.pCardinality = new CardinalityElements();
		this.pComment = new CommentElements();
		this.eVisibility = new VisibilityElements();
		this.eDataType = new DataTypeElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.cooperateproject.modeling.textual.cls.Cls".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	////import "http://www.eclipse.org/xtext/common/JavaVMTypes" as jvmTypes
	//ClassDiagram:
	//	{ClassDiagram}
	//	'@startclass'
	//	elements+=Element*
	//	'@endclass';
	public ClassDiagramElements getClassDiagramAccess() {
		return pClassDiagram;
	}
	
	public ParserRule getClassDiagramRule() {
		return getClassDiagramAccess().getRule();
	}
	
	//Element:
	//	ClassDef
	//	| Class
	//	| Connector;
	public ElementElements getElementAccess() {
		return pElement;
	}
	
	public ParserRule getElementRule() {
		return getElementAccess().getRule();
	}
	
	//Type:
	//	type=DataType
	//	| ClassName;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//ClassDef:
	//	('class' | 'interface')
	//	'{' classes+=ClassName (',' classes+=ClassName)* '}';
	public ClassDefElements getClassDefAccess() {
		return pClassDef;
	}
	
	public ParserRule getClassDefRule() {
		return getClassDefAccess().getRule();
	}
	
	//ClassName:
	//	Name;
	public ClassNameElements getClassNameAccess() {
		return pClassName;
	}
	
	public ParserRule getClassNameRule() {
		return getClassNameAccess().getRule();
	}
	
	//Name:
	//	name=ID
	//	| longname=(STRING | ID) ' as ' name=ID;
	public NameElements getNameAccess() {
		return pName;
	}
	
	public ParserRule getNameRule() {
		return getNameAccess().getRule();
	}
	
	//Class:
	//	abstract?='abstract'?
	//	type=[ClassName]
	//	'{' members+=Member* '}';
	public ClassElements getClassAccess() {
		return pClass;
	}
	
	public ParserRule getClassRule() {
		return getClassAccess().getRule();
	}
	
	//Member:
	//	Attribute
	//	| Methode;
	public MemberElements getMemberAccess() {
		return pMember;
	}
	
	public ParserRule getMemberRule() {
		return getMemberAccess().getRule();
	}
	
	//Attribute:
	//	{Attribute} visibility=Visibility?
	//	static?='static'?
	//	final?='final'?
	//	name=ID ':' type=Type;
	public AttributeElements getAttributeAccess() {
		return pAttribute;
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}
	
	//Methode:
	//	visibility=Visibility?
	//	abstract?='abstract'?
	//	static?='static'?
	//	final?='final'?
	//	name=ID '(' (attributes+=Attribute (',' attributes+=Attribute)*)* ')' (':' type=Type)?;
	public MethodeElements getMethodeAccess() {
		return pMethode;
	}
	
	public ParserRule getMethodeRule() {
		return getMethodeAccess().getRule();
	}
	
	//Connector:
	//	Generalization
	//	| Association
	//	| Implementation
	//	| CommentLink;
	public ConnectorElements getConnectorAccess() {
		return pConnector;
	}
	
	public ParserRule getConnectorRule() {
		return getConnectorAccess().getRule();
	}
	
	//Generalization:
	//	left=AssociationEnd 'isa' right=AssociationEnd;
	public GeneralizationElements getGeneralizationAccess() {
		return pGeneralization;
	}
	
	public ParserRule getGeneralizationRule() {
		return getGeneralizationAccess().getRule();
	}
	
	//Implementation:
	//	left=AssociationEnd 'impl' right=AssociationEnd;
	public ImplementationElements getImplementationAccess() {
		return pImplementation;
	}
	
	public ParserRule getImplementationRule() {
		return getImplementationAccess().getRule();
	}
	
	//CommentLink:
	//	left=AssociationEnd '-' comment=Comment;
	public CommentLinkElements getCommentLinkAccess() {
		return pCommentLink;
	}
	
	public ParserRule getCommentLinkRule() {
		return getCommentLinkAccess().getRule();
	}
	
	//Association:
	//	left=AssociationEnd '-'
	//	right=AssociationEnd cardinality=ConnectorCardinalitiy? comment=Comment?;
	public AssociationElements getAssociationAccess() {
		return pAssociation;
	}
	
	public ParserRule getAssociationRule() {
		return getAssociationAccess().getRule();
	}
	
	//AssociationEnd:
	//	type=[ClassName];
	public AssociationEndElements getAssociationEndAccess() {
		return pAssociationEnd;
	}
	
	public ParserRule getAssociationEndRule() {
		return getAssociationEndAccess().getRule();
	}
	
	//ConnectorLabel:
	//	name=(ID | STRING);
	public ConnectorLabelElements getConnectorLabelAccess() {
		return pConnectorLabel;
	}
	
	public ParserRule getConnectorLabelRule() {
		return getConnectorLabelAccess().getRule();
	}
	
	//ConnectorCardinalitiy:
	//	{ConnectorCardinalitiy}
	//	'[' left=Cardinality? ('|' right=Cardinality?) ('|' label=ConnectorLabel?
	//	direction=('<' | '>')?)? ']';
	public ConnectorCardinalitiyElements getConnectorCardinalitiyAccess() {
		return pConnectorCardinalitiy;
	}
	
	public ParserRule getConnectorCardinalitiyRule() {
		return getConnectorCardinalitiyAccess().getRule();
	}
	
	//Cardinality:
	//	'*' | INT '..' ('*' | INT);
	public CardinalityElements getCardinalityAccess() {
		return pCardinality;
	}
	
	public ParserRule getCardinalityRule() {
		return getCardinalityAccess().getRule();
	}
	
	//Comment:
	//	'note[' STRING ']';
	public CommentElements getCommentAccess() {
		return pComment;
	}
	
	public ParserRule getCommentRule() {
		return getCommentAccess().getRule();
	}
	
	//enum Visibility:
	//	DEFAULT='~'
	//	| PRIVATE='-'
	//	| PROTECTED='#'
	//	| PUBLIC='+';
	public VisibilityElements getVisibilityAccess() {
		return eVisibility;
	}
	
	public EnumRule getVisibilityRule() {
		return getVisibilityAccess().getRule();
	}
	
	//enum DataType:
	//	STRING='string'
	//	| INT='int'
	//	| DOUBLE='double'
	//	| BOOLEAN='boolean'
	//	| CHAR='char'
	//	| BYTE='byte'
	//	| SHORT='short'
	//	| LONG='long'
	//	| FLOAT='float';
	public DataTypeElements getDataTypeAccess() {
		return eDataType;
	}
	
	public EnumRule getDataTypeRule() {
		return getDataTypeAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
