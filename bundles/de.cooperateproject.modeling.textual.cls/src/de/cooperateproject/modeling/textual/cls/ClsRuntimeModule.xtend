/*
 * generated by Xtext 2.10.0
 */
package de.cooperateproject.modeling.textual.cls

import com.google.inject.Binder
import com.google.inject.name.Names
import de.cooperateproject.modeling.textual.cls.services.ClsLazyLinker
import de.cooperateproject.modeling.textual.cls.services.ClsTransientValueService
import de.cooperateproject.modeling.textual.cls.services.ClsValueConverter
import de.cooperateproject.modeling.textual.common.scoping.CooperateImportedNamespaceAwareLocalScopeProvider
import de.cooperateproject.modeling.textual.xtext.runtime.derivedstate.initializer.DerivedStateModuleMixin
import de.cooperateproject.modeling.textual.xtext.runtime.scoping.CooperateGlobalScopeProvider
import de.cooperateproject.modeling.textual.xtext.runtime.scoping.IGlobalScopeTypeQueryProvider
import org.eclipse.xtext.resource.DerivedStateAwareResource
import org.eclipse.xtext.resource.XtextResource
import org.eclipse.xtext.scoping.IScopeProvider
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider
import org.eclipse.xtext.serializer.sequencer.ITransientValueService
import de.cooperateproject.modeling.textual.cls.derivedstate.calculator.ClsDerivedStateElementComparator
import de.cooperateproject.modeling.textual.xtext.runtime.derivedstate.initializer.IDerivedStateComputerSorter
import de.cooperateproject.modeling.textual.xtext.runtime.derivedstate.initializer.InitializingStateAwareResource

/**
 * Use this class to register components to be used at runtime / without the Equinox extension registry.
 */
class ClsRuntimeModule extends AbstractClsRuntimeModule implements DerivedStateModuleMixin {
		
	override bindILinker() {
		return ClsLazyLinker
	}
	
	override bindITransientValueService() {
		ClsTransientValueService
	}
	
	def configureITransientValueService(Binder binder) {
		binder.bind(ITransientValueService).to(ClsTransientValueService)
	}
	
    override configureIScopeProviderDelegate(Binder binder) {
        binder.bind(IScopeProvider)
                .annotatedWith(Names
                        .named(AbstractDeclarativeScopeProvider.NAMED_DELEGATE))
                .to(CooperateImportedNamespaceAwareLocalScopeProvider);
    }
    
    override Class<? extends XtextResource> bindXtextResource() {
		return InitializingStateAwareResource;
	}
    
//    def Class<? extends IDerivedStateComputer> bindIDerivedStateComputer() {
//		return ClsDerivedStateComputer;
//	}
	
	def Class<? extends IGlobalScopeTypeQueryProvider> bindIGlobalScopeTypeQueryProvider() {
		return CooperateGlobalScopeProvider
	}
	
	override bindIValueConverterService() {
        return ClsValueConverter;
    }
    
//    def configureClsDerivedStateElementProcessor(Binder binder) {
//		val mb = Multibinder.newSetBinder(binder, IDerivedStateElementProcessor, 
//		    Names.named(IDerivedStateElementProcessor.DERIVED_STATE_PROCESSOR_CONTRIBUTING_PROCESSOR));
//		mb.addBinding().to(ClsDerivedStateElementProcessor);
//	}
//    
//    def Class<? extends IAtomicDerivedStateInitializerRegistry> bindIAtomicDerivedStateInitializerRegistry() {
//		return AtomicDerivedStateProcessorRegistry.class;
//	}

    def Class<? extends IDerivedStateComputerSorter> bindIDerivedStateComputerSorter() {
        return ClsDerivedStateElementComparator
    }

}
