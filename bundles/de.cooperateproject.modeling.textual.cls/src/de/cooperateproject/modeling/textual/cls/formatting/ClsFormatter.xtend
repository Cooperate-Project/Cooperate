/*
 * generated by Xtext
 */
package de.cooperateproject.modeling.textual.cls.formatting
//import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.formatting.impl.AbstractDeclarativeFormatter
import org.eclipse.xtext.formatting.impl.FormattingConfig

// import com.google.inject.Inject;
import de.cooperateproject.modeling.textual.cls.services.ClsGrammarAccess
//import com.google.inject.Inject
//import org.eclipse.xtext.RuleCall

/**
 * This class contains custom formatting declarations.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#formatting
 * on how and when to use it.
 * 
 * Also see {@link org.eclipse.xtext.xtext.XtextFormattingTokenSerializer} as an example
 */
@Deprecated
class ClsFormatter extends AbstractDeclarativeFormatter {

	//@Inject extension ClsGrammarAccess grammar
	override protected void configureFormatting(FormattingConfig c) {
		val access = grammarAccess as ClsGrammarAccess
		
		c.configureGeneralFormattingRules(access)
		c.configureCoarseGrainedContainerFormattingRules(access)
		c.configureClassifierFormattingRules(access)
		c.configureConnectorFormattingRules(access)

		
/*
		
		c.setLinewrap.after(access.packageImportRule)
		c.setLinewrap.around(access.packageImportRule)

 */

	}

	private def configureGeneralFormattingRules(FormattingConfig c, ClsGrammarAccess access) {
 		// set no space around all parentheses
		for (p : access.findKeywordPairs("(", ")")) {
			c.setNoSpace().around(p.getFirst());
			c.setNoSpace().before(p.getSecond());
		}
		
		// set no space around all parentheses
		for (p : access.findKeywordPairs("[", "]")) {
			c.setNoSpace().after(p.getFirst());
			c.setNoSpace().before(p.getSecond());
		}

		// set indentation inside all curly brackets 
		// set line wrap after each left curly bracket
		// set line wrap around each right curly bracket
		for (p : access.findKeywordPairs("{", "}")) {
			c.setIndentationIncrement().after(p.getFirst());
			c.setIndentationDecrement().before(p.getSecond());
			c.setLinewrap().after(p.getFirst());
			c.setLinewrap().around(p.getSecond());
		}

		// set no space before all commas
		for (comma : access.findKeywords(",")) {
			c.setNoSpace().before(comma);
		}
	}
	
	def configureClassifierFormattingRules(FormattingConfig c, ClsGrammarAccess access) {
		c.setLinewrap.after(access.classifierRule)
		c.setLinewrap(2).after(access.classAccess.rightCurlyBracketKeyword_4_2)
		c.setLinewrap(2).after(access.interfaceAccess.rightCurlyBracketKeyword_3_2)
		c.setLinewrap.after(access.memberRule)
	}
	
	def configureCoarseGrainedContainerFormattingRules(FormattingConfig c, ClsGrammarAccess access) {
		c.setLinewrap(2).before(access.rootPackageRule)
		
		c.setLinewrap(2).before(access.rootPackageAccess.packageImportsPackageImportParserRuleCall_2_0)
		c.setLinewrap(2).before(access.rootPackageAccess.classifiersClassifierParserRuleCall_3_0)
		c.setLinewrap(2).before(access.rootPackageAccess.connectorsConnectorParserRuleCall_4_0)
		c.setLinewrap(2).before(access.rootPackageAccess.packagesPackageParserRuleCall_5_0)
		
		c.setLinewrap(2).before(access.classDiagramAccess.endclassKeyword_4)
	}
	
	def configureConnectorFormattingRules(FormattingConfig c, ClsGrammarAccess access) {
		c.setLinewrap.after(access.connectorRule)
		c.setNoSpace.around(access.cardinalityAccess.fullStopFullStopKeyword_1_0)
	}
	
}
