module de.cooperateproject.modeling.textual.cls.GenerateCls

import org.eclipse.xtext.xtext.generator.*
import org.eclipse.xtext.xtext.generator.model.project.*
import de.cooperateproject.modeling.textual.xtext.generator.*
import net.winklerweb.cdoxtext.generator.*

var rootPath = ".."
var basename = "de.cooperateproject.modeling.textual.cls"

Workflow {

	bean = org.eclipse.emf.mwe.utils.StandaloneSetup {
	    platformUri = "${rootPath}"
	    scanClassPath = true

		uriMap = {
			from = "platform:/plugin/org.eclipse.emf.codegen.ecore/model/GenModel.genmodel"
			to = "platform:/resource/org.eclipse.emf.codegen.ecore/model/GenModel.genmodel"
		}
		uriMap = {
			from = "platform:/plugin/org.eclipse.emf.ecore/model/Ecore.genmodel"
			to = "platform:/resource/org.eclipse.emf.ecore/model/Ecore.genmodel"
		}
		uriMap = {
			from = "platform:/plugin/org.eclipse.uml2.codegen.ecore/model/GenModel.genmodel"
			to = "platform:/resource/org.eclipse.uml2.codegen.ecore/model/GenModel.genmodel"
		}
		uriMap = {
			from = "platform:/plugin/org.eclipse.uml2.uml/model/UML.genmodel"
			to = "platform:/resource/org.eclipse.uml2.uml/model/UML.genmodel"
		}
		uriMap = {
			from = "platform:/plugin/org.eclipse.emf.codegen.ecore/model/GenModel.ecore"
			to = "platform:/resource/org.eclipse.emf.codegen.ecore/model/GenModel.ecore"
		}
		uriMap = {
			from = "platform:/plugin/org.eclipse.emf.ecore/model/Ecore.ecore"
			to = "platform:/resource/org.eclipse.emf.ecore/model/Ecore.ecore"
		}
		uriMap = {
			from = "platform:/plugin/org.eclipse.uml2.codegen.ecore/model/GenModel.ecore"
			to = "platform:/resource/org.eclipse.uml2.codegen.ecore/model/GenModel.ecore"
		}
		uriMap = {
			from = "platform:/plugin/org.eclipse.uml2.uml/model/UML.ecore"
			to = "platform:/resource/org.eclipse.uml2.uml/model/UML.ecore"
		}
		uriMap = {
			from = "platform:/plugin/org.eclipse.uml2.types/model/Types.genmodel"
			to = "platform:/resource/org.eclipse.uml2.types/model/Types.genmodel"
		}
		uriMap = {
			from = "platform:/plugin/org.eclipse.uml2.types/model/Types.ecore"
			to = "platform:/resource/org.eclipse.uml2.types/model/Types.ecore"
		}

		registerGeneratedEPackage = "org.eclipse.uml2.codegen.ecore.genmodel.GenModelPackage"
		registerGeneratedEPackage = "org.eclipse.emf.codegen.ecore.genmodel.GenModelPackage"
	}
    
	component = XtextGenerator {		
		configuration = {
			project = StandardProjectConfig {
				baseName = "${basename}"
				rootPath = rootPath
				runtimeTest = {
					enabled = true
					root = "../../tests/${basename}.tests"
				}
				eclipsePlugin = {
					enabled = true
				}
				eclipsePluginTest = {
					enabled = true
					root = "../../tests/${basename}.ui.tests"
				}
				createEclipseMetaData = true
			}
			code = {
				encoding = "UTF-8"
				fileHeader = "/*\n * generated by Xtext \${version}\n */"
			}
			
		}
		
		language = StandardLanguage {
			name = "${basename}.Cls"
			fileExtensions = "cls"
			
			referencedResource = "platform:/resource/${basename}.metamodel/model/cls.genmodel"
			referencedResource = "platform:/resource/${basename}.metamodel/model/cls.ecore"
			referencedResource = "platform:/plugin/org.eclipse.uml2.uml/model/UML.ecore"
			referencedResource = "platform:/plugin/org.eclipse.uml2.uml/model/UML.genmodel"
			
			
			fragment = ecore2xtext.Ecore2XtextValueConverterServiceFragment2 auto-inject {}

			fragment = org.eclipse.xtext.generator.adapter.FragmentAdapter {
				//fragment = org.eclipse.xtext.generator.ecore2xtext.FormatterFragment {}
				fragment = org.eclipse.xtext.generator.formatting2.Formatter2Fragment {}
				//fragment = org.eclipse.xtext.ui.generator.labeling.LabelProviderFragment {}
			}
			
			fragment = scoping.ImportNamespacesScopingFragment2 auto-inject {}
			fragment = exporting.QualifiedNamesFragment2 auto-inject {}

			quickFixProvider = resources.CooperateQuickfixProviderFragment2 auto-inject {}

			generator = {
				generateStub = false
			}

			serializer = {
				generateStub = false
			}
			
			validator = resources.CooperateValidatorFragment2 auto-inject {
				generateXtendStub = false
			}
			
			fragment = AddCDOXtextBindingsFragment2 auto-inject {}
			fragment = resources.CooperateResourceHandlingBindingsFragment2 auto-inject {}
			fragment = naming.CooperateNamingBindingsFragment2 auto-inject {}
			fragment = emfcompare.EMFCompareMatcherFragment2 auto-inject {}
		}
	}
}
