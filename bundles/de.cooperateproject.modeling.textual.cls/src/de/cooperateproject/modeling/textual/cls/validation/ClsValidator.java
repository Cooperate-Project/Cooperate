/*
 * generated by Xtext 2.10.0
 */
package de.cooperateproject.modeling.textual.cls.validation;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;

import org.eclipse.emf.ecore.EStructuralFeature;
import org.eclipse.uml2.uml.Element;
import org.eclipse.uml2.uml.StringExpression;
import org.eclipse.xtext.validation.Check;

import com.google.inject.Inject;

import de.cooperateproject.modeling.textual.cls.cls.Classifier;
import de.cooperateproject.modeling.textual.cls.cls.ClsPackage;
import de.cooperateproject.modeling.textual.cls.cls.Interface;
import de.cooperateproject.modeling.textual.cls.cls.XtextAssociation;
import de.cooperateproject.modeling.textual.common.metamodel.textualCommons.TextualCommonsPackage;
import de.cooperateproject.modeling.textual.xtext.runtime.issues.IIssueCodeRegistry;
import de.cooperateproject.modeling.textual.xtext.runtime.validator.ICooperateAutomatedValidator;

/**
 * Cls-validator for the editor.
 */
public class ClsValidator extends AbstractClsValidator {

    private static final String NOT_AN_INTERFACE = "not_an_interface";
    private static final String NOT_A_CLASS = "not_a_class";
    private static final String ALIAS_TAKEN = "alias_taken";
    private static final String NOT_ENOUGH_ROLE_NAMES = "not_enough_role_names";

    @Inject
    @SuppressWarnings("unused")
    private ICooperateAutomatedValidator automatedValidator;

    @Inject
    private IIssueCodeRegistry issueCodeRegistry;

    @Check
    private void checkCorrectClassifierType(de.cooperateproject.modeling.textual.cls.cls.Class classifier) {
        Element element = classifier.getReferencedElement();
        if (element != null && !(element instanceof org.eclipse.uml2.uml.Class)) {
            error(classifier.getName() + " should be an interface but it's not!",
                    TextualCommonsPackage.Literals.NAMED_ELEMENT__NAME, NOT_A_CLASS);
        }
    }

    @Check
    private void checkUniqueAlias(Classifier<? extends Classifier> classifier) {
        Element classifierPackageRef = classifier.getNearestPackage().getReferencedElement();
        for (Element element : classifierPackageRef.getOwnedElements()) {
            if (hasSameAlias(classifier.getReferencedElement(), element)) {
                error("\"" + classifier.getAlias() + "\"" + " Alias is taken!",
                        TextualCommonsPackage.Literals.ALIASED_ELEMENT__ALIAS, ALIAS_TAKEN);
            }
        }
    }

    private static boolean hasSameAlias(Element firstElement, Element secondElement) {
        if (!(firstElement instanceof org.eclipse.uml2.uml.Classifier)
                || !(secondElement instanceof org.eclipse.uml2.uml.Classifier)) {
            return false;
        }
        return hasSameAlias((org.eclipse.uml2.uml.Classifier) firstElement,
                (org.eclipse.uml2.uml.Classifier) secondElement);
    }

    private static boolean hasSameAlias(org.eclipse.uml2.uml.Classifier firstClassifier,
            org.eclipse.uml2.uml.Classifier secondClassifier) {
        boolean isNotSameElement = secondClassifier != firstClassifier;
        if (isNotSameElement) {
            StringExpression firstAlias = firstClassifier.getNameExpression();
            StringExpression secondAlias = secondClassifier.getNameExpression();
            boolean firstAliasIsNull = firstAlias == null;
            boolean secondAliasIsNull = secondAlias == null;
            return !firstAliasIsNull && !secondAliasIsNull && firstAlias.getName().equals(secondAlias.getName());
        }
        return false;
    }

    @Check
    private void checkCorrectClassifierType(Interface classifier) {
        Element element = classifier.getReferencedElement();
        if (element != null && !(element instanceof org.eclipse.uml2.uml.Interface)) {
            error(classifier.getName() + " should be a class but it's not!",
                    TextualCommonsPackage.Literals.NAMED_ELEMENT__NAME, NOT_AN_INTERFACE);
        }
    }

    @Check
    private void checkUnambiguousMemberEnds(XtextAssociation asc) {
        List<Classifier<?>> memberEndTypes = asc.collectMemberEndTypes();

        Set<Classifier<?>> duplicatedTypes = new HashSet<>();

        Set<Classifier<?>> seenTypes = new HashSet<>();
        for (Classifier<?> type : memberEndTypes) {
            if (seenTypes.contains(type)) {
                duplicatedTypes.add(type);
            }
            seenTypes.add(type);
        }

        for (Classifier<?> type : duplicatedTypes) {
            List<Integer> duplicatedIndices = new ArrayList<>();
            for (int i = 0; i < memberEndTypes.size(); ++i) {
                if (memberEndTypes.get(i) == type) {
                    duplicatedIndices.add(i);
                }
            }
            int maxIndex = duplicatedIndices.stream().max(Integer::compare).get();
            if (asc.getMemberEndNames().size() <= maxIndex) {
                error("Not enough role names given to distinguish the involved association participants unambiguously!",
                        ClsPackage.Literals.XTEXT_ASSOCIATION__MEMBER_END_NAMES, NOT_ENOUGH_ROLE_NAMES);
            } else {
                Set<String> roleNames = duplicatedIndices.stream().map(i -> asc.getMemberEndNames().get(i))
                        .collect(Collectors.toSet());
                if (roleNames.size() != duplicatedIndices.size()) {
                    error("Role names for the same type have to be unambiguous!",
                            ClsPackage.Literals.XTEXT_ASSOCIATION__MEMBER_END_NAMES, NOT_ENOUGH_ROLE_NAMES);
                }
            }

        }

    }

    private void error(String message, EStructuralFeature feature, String code) {
        if (!issueCodeRegistry.hasIssueCode(code)) {
            issueCodeRegistry.registerIssueCode(code);
        }
        error(message, feature, code, new String[0]);
    }

}
