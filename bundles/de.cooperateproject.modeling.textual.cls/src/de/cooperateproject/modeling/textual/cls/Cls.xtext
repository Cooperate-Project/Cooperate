grammar de.cooperateproject.modeling.textual.cls.Cls with org.eclipse.xtext.common.Terminals

/*
 * The import via namespace URI works for the generator. Unfortunately, it does not work
 * for the Xtext editor. Therefore, we use the platform URI to reference the model directly.
 * You can change this anytime if you would like to. 
 */
import "platform:/resource/de.cooperateproject.modeling.textual.cls.metamodel/model/cls.ecore"
import "platform:/resource/de.cooperateproject.modeling.textual.common.metamodel/model/textualCommons.ecore" as commons
import "platform:/plugin/org.eclipse.uml2.uml/model/UML.ecore" as uml
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

// ------------------------------------------------------------------------------------------
// ---------------------------------Root-----------------------------------------------------
// ------------------------------------------------------------------------------------------
ClassDiagram:
	{ClassDiagram}
	'@start-clsd' title=STRING
	rootPackage=RootPackage
    '@end-clsd'
;

RootPackage returns Package:
    {Package}
	('rootPackage' name=FQN)?
	packageImports+=PackageImport*
	classifiers+=Classifier*
	connectors+=Connector*
	packages+=Package*
;

Package:
	'package' name=FQN '{'
	packageImports+=PackageImport*
	classifiers+=Classifier*
	connectors+=Connector*
	packages+=Package*
	'}'
;


PackageImport returns commons::PackageImport:
	"import" importedPackage=[uml::Package|FQN]
;

NameString returns ecore::EString:
	STRING
;

FQN:
    ID ("." ID)*
;

// ------------------------------------------------------------------------------------------
// ---------------------------------Class Diagram--------------------------------------------
// ------------------------------------------------------------------------------------------

Classifier:
	Class | Interface
;

Class:
	visibility=Visibility? (abstract ?= 'abstract')? 'class'
	(name = ID|(alias = ID 'as' name=STRING)) ((comments+=Comment)? |
		(('{' (comments+=Comment)? (members += Member)* '}')))
	
;

Interface:
	visibility=Visibility? 'interface'
	(name = ID|(alias = ID 'as' name=STRING)) ((comments+=Comment)? |
		(('{' (comments+=Comment)? (members += Member)* '}')))
;

Member: 
	Attribute 
	| Method
;

Attribute:
	{Attribute} 
	(visibility = Visibility)? 
	(static ?= 'static')? 
	name = ID ':' type=[uml::Classifier|FQN]
;
	
Method: 
	(visibility = Visibility)? 
	(abstract ?= 'abstract')? 
	(static ?= 'static')? 
	name = ID '(' 
	(parameters += Parameter (',' parameters += Parameter)*)* ')' 
	(':' type = [uml::Classifier|FQN])?
;

Parameter:
	(visibility = Visibility)? 
	name = ID ':' type = [uml::Classifier|FQN]
;



Connector: 
	Generalization 
	| XtextAssociation
	| Implementation
;


Generalization: 
	'isa' '(' left = [Classifier|FQN] ',' right = [Classifier|FQN] ')'
;

Implementation:
	'impl' '(' left = [Classifier|FQN] ',' right = [Classifier|FQN] ')'
;


XtextAssociation:
	twoSideBidirectionality?='bi'? twoSideAggregationKind=AggregationKind
	(name=ID)? '(' memberEndTypes+=XtextAssociationMemberEndReferencedType (',' memberEndTypes+=XtextAssociationMemberEndReferencedType)* ')'
	('role' '[' memberEndNames+=RoleName (',' memberEndNames+=RoleName)* ']')?
	('card' '[' memberEndCardinalities+=Cardinality (':' memberEndCardinalities+=Cardinality)* ']')?
	comments+=Comment?
;

XtextAssociationMemberEndReferencedType: 
	type=[Classifier|FQN]
;


Comment returns commons::Comment:
	'note' body = CommentBody
;

Cardinality returns commons::Cardinality: 
	lowerBound=CardinalityBound ('..' upperBound=CardinalityBound)?
;

CommentBody returns ecore::EString:
	STRING
;

CardinalityBound returns ecore::EInt:
	('*') | INT
;

enum Visibility returns uml::VisibilityKind:
	public = '+' 
	| public = 'public'
	| private = '-' 
	| private = 'private'
	| protected = '#' 
	| protected = 'protected'
	| package = '~'
;

enum AggregationKind:
	NONE = 'asc'
	| AGGREGATION = 'agg'
	| COMPOSITION = 'com'
;

RoleName returns ecore::EString:
    ID | UNDERSCORE
;

@Override
terminal ID         : '^'?('a'..'z'|'A'..'Z') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
terminal UNDERSCORE : '_';
