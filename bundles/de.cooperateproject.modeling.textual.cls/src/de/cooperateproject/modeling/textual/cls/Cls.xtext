grammar de.cooperateproject.modeling.textual.cls.Cls with org.eclipse.xtext.common.Terminals

generate cls "http://www.cooperateproject.de/modeling/textual/cls/Cls"

//import "http://www.eclipse.org/xtext/common/JavaVMTypes" as jvmTypes

ClassDiagram:
	{ClassDiagram}
	'@startclass'
    (elements += Element)*
    '@endclass';

Element: 
	ClassDef 
	| Class  
	| Connector
;

Type: 
	type = DataType 
	| ClassName 
;

ClassDef: 
	('class' | 'interface') 
	'{' classes += ClassName (',' classes += ClassName)* '}'
;

ClassName: 
	Name
;

Name: 
	(name = ID 
	| longname = (STRING | ID) ' as ' name = ID)
;

Class: 
	(abstract ?= 'abstract')?
	type = [ClassName] 
	'{' (members += Member)* '}'
;

Member: 
	Attribute 
	| Methode
;

Attribute:
	{Attribute} 
	(visibility = Visibility)? 
	(static ?= 'static')? 
	(final ?= 'final')? 
	name=ID ':' type = Type
;

Methode: 
	(visibility = Visibility)? 
	(abstract ?= 'abstract')? 
	(static ?= 'static')? 
	(final ?= 'final')? 
	name = ID '(' 
	(attributes += Attribute (',' attributes += Attribute)*)* ')' 
	(':' type = Type)?
;

Connector: 
	Generalization 
	| Association
	| Implementation
	| CommentLink
;

Generalization: 
	left = AssociationEnd 'isa' right = AssociationEnd
;

Implementation:
	left = AssociationEnd 'impl' right = AssociationEnd
;

CommentLink: 
	left = AssociationEnd '-' comment = Comment
;

Association: 
	left = AssociationEnd '-'  
	right = AssociationEnd (cardinality = ConnectorCardinalitiy)? (comment = Comment)?
;

AssociationEnd: 
	type = [ClassName]
;

ConnectorLabel: 
	name = (ID | STRING)
;

ConnectorCardinalitiy: 
	{ConnectorCardinalitiy}
	'[' (left = Cardinality)? 
	('|' (right = Cardinality)?)
	('|' (label = ConnectorLabel)?
	(direction = ('<' | '>'))?)? ']'
;

Cardinality: 
	('*') 
	| (INT '..' (('*') | INT))
;

Comment: 
	'note[' STRING ']'
;

enum Visibility:
	DEFAULT = '~' 
	| PRIVATE = '-' 
	| PROTECTED = '#' 
	| PUBLIC = '+'
;

enum DataType:
	STRING = 'string'
	| INT = 'int'
	| DOUBLE = 'double'
	| BOOLEAN = 'boolean'
	| CHAR = 'char'
	| BYTE = 'byte'
	| SHORT = 'short'
	| LONG = 'long'
	| FLOAT = 'float'
;