grammar de.cooperateproject.modeling.textual.cls.Cls with org.eclipse.xtext.common.Terminals

/*
 * The import via namespace URI works for the generator. Unfortunately, it does not work
 * for the Xtext editor. Therefore, we use the platform URI to reference the model directly.
 * You can change this anytime if you would like to. 
 */
//import "http://www.cooperateproject.de/modeling/textual/cls/Cls"
import "platform:/resource/de.cooperateproject.modeling.textual.cls.metamodel/model/cls.ecore"
import "http://www.eclipse.org/uml2/5.0.0/UML" as uml
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

// ------------------------------------------------------------------------------------------
// ---------------------------------Root-----------------------------------------------------
// ------------------------------------------------------------------------------------------
ClassDiagram:
	{ClassDiagram}
	'@startclass' name=STRING
	(packageImports+=PackageImport)*
	classifiers+=Classifier*
	connectors+=Connector*
    '@endclass'
;

PackageImport:
	"import" package=[uml::Package|FQN]
;

FQN returns ecore::EString:
    ID ("." ID)*
;

// ------------------------------------------------------------------------------------------
// ---------------------------------Class Diagram--------------------------------------------
// ------------------------------------------------------------------------------------------

Classifier:
	Class | Interface
;

Class:
	visibility=Visibility? (abstract ?= 'abstract')? 'class' referencedElement = [uml::Class|ID] ('as' aliasExpression = [uml::StringExpression|ID])? ('{' (members += Member)* '}')?
;

Interface:
	visibility=Visibility? 'interface' referencedElement = [uml::Interface|ID] ('as' aliasExpression = [uml::StringExpression|ID])? ('{' (members += Member)* '}')?
;

TypeReference: 
	DataTypeReference | UMLTypeReference
;

DataTypeReference: 
	type = PrimitiveType
;

UMLTypeReference: 
	type = [uml::Type]
;


Member: 
	Attribute 
	| Method
;

Attribute:
	{Attribute} 
	(visibility = Visibility)? 
	(static ?= 'static')? 
	(final ?= 'final')? 
	referencedElement = [uml::Property|ID] ':' type = TypeReference
;
	
Method: 
	(visibility = Visibility)? 
	(abstract ?= 'abstract')? 
	(static ?= 'static')? 
	(final ?= 'final')? 
	referencedElement = [uml::Operation|ID] '(' 
	(parameters += Parameter (',' parameters += Parameter)*)* ')' 
	(':' type = TypeReference)?
;

Parameter:
	(visibility = Visibility)? 
	(static ?= 'static')? 
	(final ?= 'final')? 
	referencedElement = [uml::Parameter|ID] ':' type = TypeReference
;



Connector: 
	Generalization 
	| Association
	| Implementation
	| CommentLink
	| MultiAssociation
;


Generalization: 
	left = UMLTypeReference 'isa' right = UMLTypeReference
;

Implementation:
	left = UMLTypeReference 'impl' right = UMLTypeReference
;

CommentLink: 
	left = UMLTypeReference 'note' comment = [uml::Comment|CommentBody]
;

Association:
	(bidirectional?='bi')? aggregationKind=AggregationKind  left = UMLTypeReference referencedElement = [uml::Association] right = UMLTypeReference
	(properties = AssociationProperties)? ('note' comment = [uml::Comment|CommentBody])?
;

MultiAssociation:
	'asc' referencedElement = [uml::Association] '{' (connectorEnds+=MemberEnd ';')+ '}'
;

MemberEnd:
	type = UMLTypeReference (referencedElement=[uml::Property])? (cardinality=Cardinality)? (navigable?='<')?
;

AssociationProperties: 
	'[' cardinalityLeft = Cardinality (',' propertyLeft = [uml::Property])? ('|' cardinalityRight = Cardinality (',' propertyRight = [uml::Property])?)? ']'
;

Cardinality: 
	lowerBound=CardinalityBound ('..' upperBound=CardinalityBound)?
;

CommentBody returns ecore::EString:
	STRING
;

CardinalityBound returns ecore::EInt:
	('*') | INT
;

enum Visibility:
	PUBLIC = '+' 
	| PUBLIC = 'public'
	| PRIVATE = '-' 
	| PRIVATE = 'private'
	| PROTECTED = '#' 
	| PROTECTED = 'protected'
	| PACKAGE = '~'
;

enum PrimitiveType:
	STRING = 'string'
	| INT = 'int'
	| DOUBLE = 'double'
	| BOOLEAN = 'boolean'
	| CHAR = 'char'
	| BYTE = 'byte'
	| SHORT = 'short'
	| LONG = 'long'
	| FLOAT = 'float'
;

enum AggregationKind:
	NONE = 'asc'
	| AGGREGATION = 'agg'
	| COMPOSITION = 'com'
;
