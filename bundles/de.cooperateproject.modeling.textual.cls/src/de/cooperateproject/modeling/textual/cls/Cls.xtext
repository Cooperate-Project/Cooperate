grammar de.cooperateproject.modeling.textual.cls.Cls with org.eclipse.xtext.common.Terminals

/*
 * The import via namespace URI works for the generator. Unfortunately, it does not work
 * for the Xtext editor. Therefore, we use the platform URI to reference the model directly.
 * You can change this anytime if you would like to. 
 */
//import "http://www.cooperateproject.de/modeling/textual/cls/Cls"
import "platform:/resource/de.cooperateproject.modeling.textual.cls.metamodel/model/cls.ecore"
import "platform:/resource/de.cooperateproject.modeling.textual.common.metamodel/model/textualCommons.ecore" as commons
//import "http://www.eclipse.org/uml2/5.0.0/UML" as uml
//import "platform:/plugin/org.eclipse.uml2.uml/model/UML.genmodel" as uml
import "http://www.eclipse.org/uml2/5.0.0/UML" as uml
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

// ------------------------------------------------------------------------------------------
// ---------------------------------Root-----------------------------------------------------
// ------------------------------------------------------------------------------------------
ClassDiagram:
	{ClassDiagram}
	'@start-cls' title=STRING
	rootPackage=RootPackage
    '@end-cls'
;

RootPackage returns Package:
	'rootPackage' name=FQN
	packageImports+=PackageImport*
	classifiers+=Classifier*
	connectors+=Connector*
	packages+=Package*
;

Package:
	'package' name=FQN '{'
	packageImports+=PackageImport*
	classifiers+=Classifier*
	connectors+=Connector*
	packages+=Package*
	'}'
;


PackageImport returns commons::PackageImport:
	"import" importedPackage=FQN
;

NameString returns ecore::EString:
	STRING
;

FQN:
    ID ("." ID)*
;

// ------------------------------------------------------------------------------------------
// ---------------------------------Class Diagram--------------------------------------------
// ------------------------------------------------------------------------------------------

Classifier:
	Class | Interface
;

Class:
	visibility=Visibility? (abstract ?= 'abstract')? 'class'
	((name=STRING 'as' alias = ID)|name = ID)
	('{' (members += Member)* '}')?
;

Interface:
	visibility=Visibility? 'interface'
	((name=STRING 'as' alias = ID)|name = ID)
	('{' (members += Member)* '}')?
;

Member: 
	Attribute 
	| Method
;

Attribute:
	{Attribute} 
	(visibility = Visibility)? 
	(static ?= 'static')? 
	(final ?= 'final')? 
	name = ID ':' type=[uml::Classifier|FQN]
;
	
Method: 
	(visibility = Visibility)? 
	(abstract ?= 'abstract')? 
	(static ?= 'static')? 
	(final ?= 'final')? 
	name = ID '(' 
	(parameters += Parameter (',' parameters += Parameter)*)* ')' 
	(':' type = [uml::Classifier|FQN])?
;

Parameter:
	(visibility = Visibility)? 
	(static ?= 'static')? 
	(final ?= 'final')? 
	name = ID ':' type = [uml::Classifier|FQN]
;



Connector: 
	Generalization 
	| XtextAssociation
	| Implementation
	| CommentLink
;


Generalization: 
	left = [Classifier|FQN] 'isa' right = [Classifier|FQN]
;

Implementation:
	left = [Classifier|FQN] 'impl' right = [Classifier|FQN]
;

CommentLink: 
	commentedElement = [Classifier|FQN] comments+=Comment
;

XtextAssociation:
	twoSideBidirectionality?='bi'? twoSideAggregationKind=AggregationKind
	name=ID '(' memberEndTypes+=[Classifier|FQN] (',' memberEndTypes+=[Classifier|FQN])* ')'
	('role' '[' memberEndNames+=ID (',' memberEndNames+=ID)* ']')?
	('card' '[' memberEndCardinalities+=Cardinality (':' memberEndCardinalities+=Cardinality)* ']')?
	comments+=Comment?
;

Comment returns commons::Comment:
	'note' body = CommentBody
;

Cardinality returns commons::Cardinality: 
	lowerBound=CardinalityBound ('..' upperBound=CardinalityBound)?
;

CommentBody returns ecore::EString:
	STRING
;

CardinalityBound returns ecore::EInt:
	('*') | INT
;

enum Visibility returns commons::Visibility:
	PUBLIC = '+' 
	| PUBLIC = 'public'
	| PRIVATE = '-' 
	| PRIVATE = 'private'
	| PROTECTED = '#' 
	| PROTECTED = 'protected'
	| PACKAGE = '~'
;

enum AggregationKind:
	NONE = 'asc'
	| AGGREGATION = 'agg'
	| COMPOSITION = 'com'
;
